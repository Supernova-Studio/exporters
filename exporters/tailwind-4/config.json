[
    {
        "key": "colorFormat",
        "type": "enum",
        "default": "smartOklch",
        "title": "Color format",
        "description": "Export color token values in the selected color format.",
        "category": "Colors",
        "options": {
            "smartHashHex": {
                "label": "HEX (auto)",
                "description": "Automatically choose between #RRGGBB and #RRGGBBAA"
            },
            "smartRgba": {
                "label": "RGB (auto)",
                "description": "Automatically choose between rgb() and rgba()"
            },
            "smartHsla": {
                "label": "HSL (auto)",
                "description": "Automatically choose between hsl() and hsla()"
            },
            "smartOklch": {
                "label": "OKLCH (auto)",
                "description": "Automatically choose between oklch() and oklch() with alpha"
            },
            "hashHex6": {
                "label": "HEX (6 digits)",
                "description": "Example: #ff0000"
            },
            "hashHex8": {
                "label": "HEX (8 digits)",
                "description": "Example: #ff0000ff"
            },
            "rgb": {
                "label": "RGB",
                "description": "Example: rgb(255, 0, 0)"
            },
            "rgba": {
                "label": "RGBA",
                "description": "Example: rgba(255, 0, 0, 1)"
            },
            "hsl": {
                "label": "HSL",
                "description": "Example: hsl(0, 100%, 50%)"
            },
            "hsla": {
                "label": "HSLA",
                "description": "Example: hsla(0, 100%, 50%, 1)"
            },
            "oklch": {
                "label": "OKLCH",
                "description": "Example: oklch(0.6 0.15 30)"
            },
            "oklcha": {
                "label": "OKLCHA",
                "description": "Example: oklch(0.6 0.15 30 / 1)"
            }
        }
    },
    {
        "key": "useColorUtilityPrefixes",
        "type": "boolean",
        "default": true,
        "title": "Use color utility prefixes",
        "description": "Enable specific prefixes for different color utilities. Only applies to color tokens.",
        "category": "Colors"
    },
    {
        "key": "colorUtilityPrefixes",
        "type": "object",
        "title": "Color utility prefixes",
        "description": "Define patterns to prefix color tokens. Use commas for multiple patterns (e.g., 'background,bg') and ! to negate (e.g., 'bg,!fill').",
        "category": "Colors",
        "dependsOn": {
            "useColorUtilityPrefixes": true
        },
        "default": {
            "bg": "background,bg",
            "text": "foreground,text",
            "border": "border",
            "shadow": "shadow",
            "ring": "ring",
            "outline": "outline",
            "stroke": "stroke",
            "fill": "fill"
        },
        "allowedKeys": {
            "options": [
                "bg",
                "text",
                "border",
                "shadow",
                "ring",
                "outline",
                "stroke",
                "fill"
            ],
            "type": "string"
        },
        "allowedValues": {
            "type": "string"
        }
    },
    {
        "key": "colorPrecision",
        "type": "number",
        "default": 3,
        "title": "Color precision",
        "description": "Maximum number of decimals in colors.",
        "category": "Colors"
    },
    {
        "key": "generateTypographyClasses",
        "type": "boolean",
        "default": true,
        "title": "Generate typography classes",
        "description": "Generate typography classes in @layer components using typography tokens.",
        "category": "Typography"
    },
    {
        "key": "forceRemUnit",
        "type": "boolean",
        "default": false,
        "title": "Force REM units",
        "description": "Convert all pixel values to REM units.",
        "category": "Token values"
    },
    {
        "key": "remBase",
        "type": "number",
        "default": 16,
        "title": "REM base value",
        "description": "Base pixel value for REM conversion.",
        "category": "Token values",
        "dependsOn": {
            "forceRemUnit": true
        }
    },
    {
        "key": "useReferences",
        "type": "boolean",
        "default": true,
        "title": "Use token references",
        "description": "Values will use references to other tokens (where applicable).",
        "category": "Token values"
    },
    {
        "key": "fileStructure",
        "type": "enum",
        "default": "singleFile",
        "title": "File structure",
        "description": "Control how token styles are organized in files",
        "category": "File structure",
        "options": {
            "singleFile": {
                "label": "Single combined file",
                "description": "Generate one config file containing all token types"
            },
            "separateByType": {
                "label": "Separate files by type",
                "description": "Generate separate config files for each token type"
            }
        }
    },
    {
        "key": "baseStyleFilePath",
        "type": "string",
        "default": "./base",
        "title": "Path to base style files",
        "description": "Base directory for separate token files when using 'separate by type' structure.",
        "category": "File structure"
    },
    {
        "key": "generateEmptyConfigTypeFiles",
        "type": "boolean",
        "default": false,
        "title": "Generate empty config files",
        "description": "Generate empty config files instead of omitting them.",
        "category": "File structure"
    },
    {
        "key": "customizeConfigFileNames",
        "type": "boolean",
        "default": false,
        "title": "Customize config file names",
        "description": "Customize the file names for each token type.",
        "category": "File structure"
    },
    {
        "key": "configFileNames",
        "type": "object",
        "title": "Config file names",
        "description": "Name of each file that will be generated, grouped by token type.",
        "category": "File structure",
        "dependsOn": {
            "customizeConfigFileNames": true
        },
        "default": {
            "Blur": "tailwind.blur.css",
            "Border": "tailwind.border.css",
            "BorderRadius": "tailwind.border-radius.css",
            "BorderWidth": "tailwind.border-width.css",
            "Color": "tailwind.color.css",
            "Dimension": "tailwind.dimension.css",
            "Duration": "tailwind.duration.css",
            "FontFamily": "tailwind.font-family.css",
            "FontSize": "tailwind.font-size.css",
            "FontWeight": "tailwind.font-weight.css",
            "Gradient": "tailwind.gradient.css",
            "LetterSpacing": "tailwind.letter-spacing.css",
            "LineHeight": "tailwind.line-height.css",
            "Opacity": "tailwind.opacity.css",
            "ParagraphSpacing": "tailwind.paragraph-spacing.css",
            "ProductCopy": "tailwind.product-copy.css",
            "Shadow": "tailwind.shadow.css",
            "Size": "tailwind.size.css",
            "Space": "tailwind.space.css",
            "String": "tailwind.string.css",
            "TextCase": "tailwind.text-case.css",
            "TextDecoration": "tailwind.text-decoration.css",
            "Typography": "tailwind.typography.css",
            "Visibility": "tailwind.visibility.css",
            "ZIndex": "tailwind.z-index.css"
        },
        "allowedKeys": {
            "options": [
                "Color",
                "Typography",
                "Dimension",
                "Size",
                "Space",
                "Opacity",
                "FontSize",
                "LineHeight",
                "LetterSpacing",
                "ParagraphSpacing",
                "BorderWidth",
                "BorderRadius",
                "Duration",
                "ZIndex",
                "Shadow",
                "Border",
                "Gradient",
                "String",
                "ProductCopy",
                "FontFamily",
                "FontWeight",
                "TextCase",
                "TextDecoration",
                "Visibility",
                "Blur"
            ],
            "type": "string"
        },
        "allowedValues": {
            "type": "string"
        }
    },
    {
        "key": "generateIndexFile",
        "type": "boolean",
        "default": false,
        "title": "Generate index file",
        "description": "Generate a file with imports for all base and theme style files.",
        "category": "File structure"
    },
    {
        "key": "indexFileName",
        "type": "string",
        "default": "index.css",
        "title": "Index filename",
        "description": "The name of the index file that will be generated.",
        "category": "File structure",
        "dependsOn": {
            "generateIndexFile": true
        }
    },
    {
        "key": "baseIndexFilePath",
        "type": "string",
        "default": "./",
        "title": "Path to index file",
        "description": "Index file will be written to this directory relative to export root.",
        "category": "File structure",
        "dependsOn": {
            "generateIndexFile": true
        }
    },
    {
        "key": "exportThemesAs",
        "type": "enum",
        "default": "separateFiles",
        "title": "Theme export format",
        "description": "Control how themes are exported in the CSS files.",
        "category": "Themes",
        "options": {
            "separateFiles": {
                "label": "Separate files per theme",
                "description": "Generate a separate CSS file for each selected theme"
            },
            "applyDirectly": {
                "label": "Apply themes directly",
                "description": "Apply selected themes directly to token values"
            },
            "mergedTheme": {
                "label": "Merged theme file",
                "description": "Generate theme variables with all themes applied together"
            }
        }
    },
    {
        "key": "exportOnlyThemedTokens",
        "type": "boolean",
        "default": true,
        "title": "Export only themed tokens",
        "description": "Theme files will only include tokens that have different values from the base value.",
        "category": "Themes"
    },
    {
        "key": "exportBaseValues",
        "type": "boolean",
        "default": true,
        "title": "Export base values",
        "description": "Base token values will be exported along with themes.",
        "category": "Themes"
    },
    {
        "key": "disableAllDefaults",
        "type": "boolean",
        "default": false,
        "title": "Disable all default Tailwind styles",
        "description": "Remove all default Tailwind utilities by adding --*: initial; to reset group.",
        "category": "Disable default Tailwind configuration"
    },
    {
        "key": "disableAnimateDefaults",
        "type": "boolean",
        "default": false,
        "title": "Disable animation styles",
        "description": "Remove all animation utilities from the default Tailwind configuration.",
        "category": "Disable default Tailwind configuration",
        "dependsOn": {
            "disableAllDefaults": false
        }
    },
    {
        "key": "disableBlurDefaults",
        "type": "boolean",
        "default": false,
        "title": "Disable blur styles",
        "description": "Remove all blur utilities from the default Tailwind configuration.",
        "category": "Disable default Tailwind configuration",
        "dependsOn": {
            "disableAllDefaults": false
        }
    },
    {
        "key": "disableBorderRadiusDefaults",
        "type": "boolean",
        "default": false,
        "title": "Disable border radius styles",
        "description": "Remove all border radius utilities from the default Tailwind configuration.",
        "category": "Disable default Tailwind configuration",
        "dependsOn": {
            "disableAllDefaults": false
        }
    },
    {
        "key": "disableBreakpointDefaults",
        "type": "boolean",
        "default": false,
        "title": "Disable breakpoint styles",
        "description": "Remove all breakpoint utilities from the default Tailwind configuration.",
        "category": "Disable default Tailwind configuration",
        "dependsOn": {
            "disableAllDefaults": false
        }
    },
    {
        "key": "disableColorDefaults",
        "type": "boolean",
        "default": true,
        "title": "Disable color styles",
        "description": "Remove all color utilities from the default Tailwind configuration.",
        "category": "Disable default Tailwind configuration",
        "dependsOn": {
            "disableAllDefaults": false
        }
    },
    {
        "key": "disableContainerDefaults",
        "type": "boolean",
        "default": false,
        "title": "Disable container styles",
        "description": "Remove all container utilities from the default Tailwind configuration.",
        "category": "Disable default Tailwind configuration",
        "dependsOn": {
            "disableAllDefaults": false
        }
    },
    {
        "key": "disableDropShadowDefaults",
        "type": "boolean",
        "default": false,
        "title": "Disable drop shadow styles",
        "description": "Remove all drop shadow utilities from the default Tailwind configuration.",
        "category": "Disable default Tailwind configuration",
        "dependsOn": {
            "disableAllDefaults": false
        }
    },
    {
        "key": "disableFontDefaults",
        "type": "boolean",
        "default": false,
        "title": "Disable font family styles",
        "description": "Remove all font family utilities from the default Tailwind configuration.",
        "category": "Disable default Tailwind configuration",
        "dependsOn": {
            "disableAllDefaults": false
        }
    },
    {
        "key": "disableFontWeightDefaults",
        "type": "boolean",
        "default": false,
        "title": "Disable font weight styles",
        "description": "Remove all font weight utilities from the default Tailwind configuration.",
        "category": "Disable default Tailwind configuration",
        "dependsOn": {
            "disableAllDefaults": false
        }
    },
    {
        "key": "disableInsetDefaults",
        "type": "boolean",
        "default": false,
        "title": "Disable inset styles",
        "description": "Remove all inset utilities from the default Tailwind configuration.",
        "category": "Disable default Tailwind configuration",
        "dependsOn": {
            "disableAllDefaults": false
        }
    },
    {
        "key": "disableLeadingDefaults",
        "type": "boolean",
        "default": false,
        "title": "Disable line height styles",
        "description": "Remove all line height utilities from the default Tailwind configuration.",
        "category": "Disable default Tailwind configuration",
        "dependsOn": {
            "disableAllDefaults": false
        }
    },
    {
        "key": "disablePerspectiveDefaults",
        "type": "boolean",
        "default": false,
        "title": "Disable perspective styles",
        "description": "Remove all perspective utilities from the default Tailwind configuration.",
        "category": "Disable default Tailwind configuration",
        "dependsOn": {
            "disableAllDefaults": false
        }
    },
    {
        "key": "disableShadowDefaults",
        "type": "boolean",
        "default": false,
        "title": "Disable shadow styles",
        "description": "Remove all shadow utilities from the default Tailwind configuration.",
        "category": "Disable default Tailwind configuration",
        "dependsOn": {
            "disableAllDefaults": false
        }
    },
    {
        "key": "disableSpacingDefaults",
        "type": "boolean",
        "default": false,
        "title": "Disable spacing styles",
        "description": "Remove all spacing utilities from the default Tailwind configuration.",
        "category": "Disable default Tailwind configuration",
        "dependsOn": {
            "disableAllDefaults": false
        }
    },
    {
        "key": "disableTextDefaults",
        "type": "boolean",
        "default": false,
        "title": "Disable text styles",
        "description": "Remove all text utilities from the default Tailwind configuration.",
        "category": "Disable default Tailwind configuration",
        "dependsOn": {
            "disableAllDefaults": false
        }
    },
    {
        "key": "disableTrackingDefaults",
        "type": "boolean",
        "default": false,
        "title": "Disable letter spacing styles",
        "description": "Remove all letter spacing utilities from the default Tailwind configuration.",
        "category": "Disable default Tailwind configuration",
        "dependsOn": {
            "disableAllDefaults": false
        }
    },
    {
        "key": "cssSelector",
        "type": "string",
        "default": "@theme",
        "title": "CSS selector",
        "description": "CSS selector for base token variables (e.g. ':root' for global scope).",
        "category": "CSS selectors"
    },
    {
        "key": "themeSelector",
        "type": "string",
        "default": ".theme-{theme}",
        "title": "CSS selector for themes",
        "description": "CSS selector for theme files. Use {theme} placeholder to insert theme name.",
        "category": "CSS selectors"
    },
    {
        "key": "globalPrefix",
        "type": "string",
        "default": "",
        "title": "Global prefix",
        "description": "Prefix for Tailwind classes and CSS variables (e.g., 'tw' will generate --tw-color-primary and tw:color-primary).",
        "category": "CSS selectors"
    },
    {
        "key": "findReplace",
        "type": "object",
        "title": "Find and replace",
        "description": "Replace strings in token paths and names. Each key is the string to find, and its value is the string to replace it with.",
        "category": "Find and replace",
        "default": {}
    },
    {
        "key": "showDescriptions",
        "type": "boolean",
        "default": true,
        "title": "Show token descriptions",
        "description": "Show the token description as a code comment for every exported token.",
        "category": "Other"
    },
    {
        "key": "showGeneratedFileDisclaimer",
        "type": "boolean",
        "default": true,
        "title": "Show file disclaimer",
        "description": "A message explaining that the file was automatically generated will appear in all style files.",
        "category": "Other"
    },
    {
        "key": "disclaimer",
        "type": "string",
        "default": "This file was generated by Supernova.io and should not be changed manually.\nTo modify the format or content of this file, please contact your design system team.",
        "title": "Disclaimer message",
        "isMultiline": true,
        "description": "A message explaining that the file was automatically generated will appear in all style files.",
        "category": "Other",
        "dependsOn": {
            "showGeneratedFileDisclaimer": true
        }
    },
    {
        "key": "indent",
        "type": "number",
        "default": 2,
        "title": "Indentation",
        "description": "Number of spaces used to indent CSS variables.",
        "category": "Other"
    },
    {
        "key": "debug",
        "type": "boolean",
        "default": false,
        "title": "Debug mode",
        "description": "Add debug information to the generated files to help with troubleshooting.",
        "category": "Other"
    },
    {
        "key": "writeClassnameToProperty",
        "type": "boolean",
        "default": false,
        "title": "Write generated Tailwind classnames",
        "description": "Save generated Tailwind classnames back to tokens as custom properties.",
        "category": "Automatic write-back"
    },
    {
        "key": "propertyToWriteClassnameTo",
        "type": "string",
        "default": "Tailwind class",
        "title": "Custom property name",
        "description": "Name of the custom property where generated Tailwind classnames will be saved.",
        "category": "Automatic write-back",
        "dependsOn": {
            "writeClassnameToProperty": true
        }
    },
    {
        "key": "writeCSSVariableNameToProperty",
        "type": "boolean",
        "default": false,
        "title": "Write generated CSS variable names",
        "description": "Save generated CSS variable names back to tokens as custom properties.",
        "category": "Automatic write-back"
    },
    {
        "key": "propertyToWriteCSSVariableNameTo",
        "type": "string",
        "default": "CSS variable",
        "title": "Custom property name",
        "description": "Name of the custom property where generated variable names will be saved.",
        "category": "Automatic write-back",
        "dependsOn": {
            "writeCSSVariableNameToProperty": true
        }
    },
    {
        "key": "propertyToWriteCSSVariableNameToIncludesVar",
        "type": "boolean",
        "default": true,
        "title": "Include var() in property",
        "description": "If enabled, the resulting written properties will be encapsulated in var() syntax for easier copying.",
        "category": "Automatic write-back",
        "dependsOn": {
            "writeCSSVariableNameToProperty": true
        }
    }
]