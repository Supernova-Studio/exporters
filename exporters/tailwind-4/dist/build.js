(()=>{var e={"./node_modules/@supernovaio/sdk-exporters/build/supernova-sdk-typescript.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@supernovaio/sdk-exporters/build/supernova-sdk-typescript.js ***!
  \***********************************************************************************/(e,t)=>{(()=>{"use strict";var e={1:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.GradientType=void 0,function(e){e.linear="Linear",e.radial="Radial",e.angular="Angular"}(o||(t.GradientType=o={}))},306:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockTextPropertyStyle=void 0,function(e){e.title1="Title1",e.title2="Title2",e.title3="Title3",e.title4="Title4",e.title5="Title5",e.default="Default",e.defaultBold="DefaultBold",e.defaultSemibold="DefaultSemibold",e.small="Small",e.smallBold="SmallBold",e.smallSemibold="SmallSemibold",e.custom="Custom"}(o||(t.DocsBlockTextPropertyStyle=o={}))},899:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.AssetScaleType=void 0,function(e){e.aspectFill="AspectFill",e.aspectFit="AspectFit"}(o||(t.AssetScaleType=o={}))},915:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.AssetScale=void 0,function(e){e.x1="x1",e.x2="x2",e.x3="x3",e.x4="x4"}(o||(t.AssetScale=o={}))},922:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.TextCase=void 0,function(e){e.original="Original",e.upper="Upper",e.lower="Lower",e.camel="Camel",e.smallCaps="SmallCaps"}(o||(t.TextCase=o={}))},934:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.IconSet=void 0,function(e){e.checkCircle="CheckCircle",e.crossCircle="CrossCircle",e.alert="Alert"}(o||(t.IconSet=o={}))},1160:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.ALL_BORDER_POSITIONS=t.BorderPosition=void 0,function(e){e.inside="Inside",e.center="Center",e.outside="Outside"}(o||(t.BorderPosition=o={})),t.ALL_BORDER_POSITIONS=[o.inside,o.center,o.outside]},1233:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsEntityType=void 0,function(e){e.group="Group",e.page="Page"}(o||(t.DocsEntityType=o={}))},1255:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.FrameAlignment=void 0,function(e){e.frameHeight="FrameHeight",e.center="Center"}(o||(t.FrameAlignment=o={}))},1423:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyPageAssetType=void 0,function(e){e.image="image",e.figmaFrame="figmaFrame"}(o||(t.DocumentationLegacyPageAssetType=o={}))},1601:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyPageBlockThemeType=void 0,function(e){e.override="Override",e.comparison="Comparison"}(o||(t.DocumentationLegacyPageBlockThemeType=o={}))},1846:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyPageBlockType=void 0,function(e){e.text="Text",e.heading="Heading",e.code="Code",e.unorderedList="UnorderedList",e.orderedList="OrderedList",e.quote="Quote",e.callout="Callout",e.divider="Divider",e.image="Image",e.token="Token",e.tokenList="TokenList",e.tokenGroup="TokenGroup",e.shortcuts="Shortcuts",e.link="Link",e.figmaEmbed="FigmaEmbed",e.youtubeEmbed="YoutubeEmbed",e.storybookEmbed="StorybookEmbed",e.genericEmbed="Embed",e.figmaFrames="FigmaFrames",e.custom="Custom",e.renderCode="RenderCode",e.componentAssets="ComponentAssets",e.column="Column",e.columnItem="ColumnItem",e.tabs="Tabs",e.tabItem="TabItem",e.table="Table",e.tableCell="TableCell",e.tableRow="TableRow"}(o||(t.DocumentationLegacyPageBlockType=o={}))},2123:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyGroupBehavior=void 0,function(e){e.group="Group",e.tabs="Tabs"}(o||(t.DocumentationLegacyGroupBehavior=o={}))},2657:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyPageBlockShortcut=t.DocumentationLegacyPageBlockShortcutType=void 0,function(e){e.external="External",e.internal="Internal"}(o||(t.DocumentationLegacyPageBlockShortcutType=o={})),t.DocumentationLegacyPageBlockShortcut=class{constructor(e){var t;e.url?this.type=o.external:this.type=o.internal,this.title=this.shortcutTitleFromModel(e,this.type),this.description=this.shortcutDescriptionFromModel(e,this.type),this.previewUrl=this.shortcutPreviewUrlFromModel(e),this.type===o.internal&&(null===(t=e.documentationItemPreview)||void 0===t?void 0:t.valid)&&e.documentationItemId?this.internalId=e.documentationItemId:(this.internalId=null,this.type===o.external&&e.url?this.externalUrl=e.url:this.externalUrl=null)}shortcutTitleFromModel(e,t){var r,n,i,a,l;let s=null;return e.title&&e.title.trim().length>0?s=e.title:t===o.internal?s=null!==(n=null===(r=e.documentationItemPreview)||void 0===r?void 0:r.title)&&void 0!==n?n:null:t===o.external&&(s=null!==(l=null!==(a=null===(i=e.urlPreview)||void 0===i?void 0:i.title)&&void 0!==a?a:e.url)&&void 0!==l?l:null),s&&0!==s.trim().length?s:null}shortcutDescriptionFromModel(e,t){var r;let n=null;return e.description&&e.description.trim().length>0?n=e.description:t===o.external&&(n=null===(r=e.urlPreview)||void 0===r?void 0:r.description),n&&0!==n.trim().length?n:null}shortcutPreviewUrlFromModel(e){var t,o,r,n,i;return null!==(i=null!==(r=null!==(t=e.assetUrl)&&void 0!==t?t:null===(o=e.asset)||void 0===o?void 0:o.url)&&void 0!==r?r:null===(n=e.urlPreview)||void 0===n?void 0:n.thumbnailUrl)&&void 0!==i?i:null}}},2674:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.RichTextSpanAttributeType=void 0,function(e){e.bold="Bold",e.italic="Italic",e.link="Link",e.strikethrough="Strikethrough",e.code="Code"}(o||(t.RichTextSpanAttributeType=o={}))},2802:(e,t)=>{var o,r;Object.defineProperty(t,"__esModule",{value:!0}),t.PulsarExecutor=t.OutputFileType=void 0,function(e){e.copyRemoteUrl="copyRemoteUrl",e.text="text",e.binary="binary"}(o||(t.OutputFileType=o={})),function(e){e.supernova="supernova",e.local="local"}(r||(t.PulsarExecutor=r={}))},3607:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.WorkspaceSubscriptionStatus=void 0,function(e){e.active="active",e.gracePeriod="gracePeriod",e.cancelled="cancelled",e.suspended="suspended"}(o||(t.WorkspaceSubscriptionStatus=o={}))},3718:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.FrameLayout=void 0,function(e){e.c8="C8",e.c7="C7",e.c6="C6",e.c5="C5",e.c4="C4",e.c3="C3",e.c2="C2",e.c1="C1",e.c175="C1_75"}(o||(t.FrameLayout=o={}))},3733:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockBehaviorSelectionType=void 0,function(e){e.entity="Entity",e.group="Group",e.entityAndGroup="EntityAndGroup"}(o||(t.DocsBlockBehaviorSelectionType=o={}))},3788:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DT_TOKEN_TYPES=t.tokenTypeIsReferencable=t.REFERENCABLE_TOKEN_TYPES=t.REPLACABLE_TOKEN_TYPES=t.tokenTypeIsNonPure=t.tokenTypeIsPure=t.PURE_TOKEN_TYPES=t.ALL_TOKEN_TYPES=t.MS_DIMENSION_TOKEN_TYPES=t.RAW_DIMENSION_TOKEN_TYPES=t.DIMENSION_TOKEN_TYPES=t.OPTION_TOKEN_TYPES=t.STRING_TOKEN_TYPES=t.TokenType=void 0,function(e){e.color="Color",e.typography="Typography",e.shadow="Shadow",e.border="Border",e.gradient="Gradient",e.blur="Blur",e.radius="BorderRadius",e.borderWidth="BorderWidth",e.duration="Duration",e.fontSize="FontSize",e.dimension="Dimension",e.letterSpacing="LetterSpacing",e.lineHeight="LineHeight",e.opacity="Opacity",e.paragraphSpacing="ParagraphSpacing",e.size="Size",e.space="Space",e.zIndex="ZIndex",e.textDecoration="TextDecoration",e.textCase="TextCase",e.visibility="Visibility",e.fontFamily="FontFamily",e.fontWeight="FontWeight",e.string="String",e.productCopy="ProductCopy"}(o||(t.TokenType=o={})),t.STRING_TOKEN_TYPES=[o.string,o.productCopy,o.fontFamily,o.fontWeight],t.OPTION_TOKEN_TYPES=[o.textCase,o.textDecoration,o.visibility],t.DIMENSION_TOKEN_TYPES=[o.dimension,o.size,o.space,o.opacity,o.fontSize,o.lineHeight,o.letterSpacing,o.paragraphSpacing,o.borderWidth,o.radius,o.duration,o.zIndex],t.RAW_DIMENSION_TOKEN_TYPES=[o.opacity,o.zIndex],t.MS_DIMENSION_TOKEN_TYPES=[o.duration],t.ALL_TOKEN_TYPES=[...t.DIMENSION_TOKEN_TYPES,...t.STRING_TOKEN_TYPES,...t.OPTION_TOKEN_TYPES,o.color,o.gradient,o.border,o.radius,o.shadow,o.typography,o.blur],t.PURE_TOKEN_TYPES=[...t.DIMENSION_TOKEN_TYPES,...t.STRING_TOKEN_TYPES,...t.OPTION_TOKEN_TYPES],t.tokenTypeIsPure=e=>t.PURE_TOKEN_TYPES.includes(e),t.tokenTypeIsNonPure=e=>!(0,t.tokenTypeIsPure)(e),t.REPLACABLE_TOKEN_TYPES=[o.color,...t.DIMENSION_TOKEN_TYPES,...t.STRING_TOKEN_TYPES,...t.OPTION_TOKEN_TYPES],t.REFERENCABLE_TOKEN_TYPES=[o.color,...t.DIMENSION_TOKEN_TYPES,o.fontFamily,o.fontWeight,o.textCase,o.textDecoration],t.tokenTypeIsReferencable=e=>t.REFERENCABLE_TOKEN_TYPES.includes(e),t.DT_TOKEN_TYPES=[o.color,o.shadow,o.gradient,o.typography,o.border,...t.DIMENSION_TOKEN_TYPES,o.fontFamily,o.fontWeight,o.string,...t.OPTION_TOKEN_TYPES]},4068:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsEntityGroupBehavior=void 0,function(e){e.group="Group",e.tabs="Tabs"}(o||(t.DocsEntityGroupBehavior=o={}))},4290:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.WorkspaceSubscriptionProductCode=void 0,function(e){e.free="free",e.team="team",e.teamTest="team_test",e.company="company",e.enterprise="enterprise"}(o||(t.WorkspaceSubscriptionProductCode=o={}))},4379:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.SupernovaError=void 0;class o extends Error{constructor(e,t,o,r,n,i,a){super(e),this.code=t,this.status=o,this.formErrors=r,this.requestId=n,this.serverTime=i,this.url=a}static fromNetworkResponse(e,t,r){var n,i,a;return new o(e.message,e.errorCode||e.reason||e.label||null,e.code||t,null!==(n=e.formErrors)&&void 0!==n?n:null,null!==(i=e.requestId)&&void 0!==i?i:null,null!==(a=e.serverTime)&&void 0!==a?a:null,r)}static fromNoNetworkResponse(e){return new o("No network or internet unreachable","NO_NETWORK",12163,null,(new Date).toISOString(),null,e)}static fromCode(e){return new o(e,e,null,null,null,null,null)}static fromMessage(e){return new o(e,null,null,null,null,null,null)}isFieldErrored(e){return void 0!==this.formErrors.find((t=>t.key===e))}errorForField(e){var t;return null!==(t=this.formErrors.find((t=>t.key===e)))&&void 0!==t?t:null}toString(){var e,t,o,r,n,i;return`\n    Error thrown: ${this.message}\n\n    Code: ${null!==(e=this.code)&&void 0!==e?e:"-"}\n\n    Status: ${null!==(t=this.status)&&void 0!==t?t:"-"}\n\n    Fields: ${JSON.stringify(this.formErrors,null,2)}\n\n    Request ID: ${null!==(o=this.requestId)&&void 0!==o?o:"-"}\n\n    Server time: ${null!==(r=this.serverTime)&&void 0!==r?r:"-"}\n\n    Network URL: ${null!==(n=this.url)&&void 0!==n?n:"-"}\n\n    Stack: ${null!==(i=this.stack)&&void 0!==i?i:"-"}\n    `}toHumanReadable(){return`${this.message}${this.requestId?` (request ${this.requestId})`:""}`}}t.SupernovaError=o},4546:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.ALL_BORDER_STYLES=t.BorderStyle=void 0,function(e){e.dashed="Dashed",e.dotted="Dotted",e.solid="Solid",e.groove="Groove"}(o||(t.BorderStyle=o={})),t.ALL_BORDER_STYLES=[o.dashed,o.dotted,o.solid,o.groove]},4652:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.SourceType=void 0,function(e){e.figma="Figma",e.tokenStudio="TokenStudio",e.figmaVariablesPlugin="FigmaVariablesPlugin"}(o||(t.SourceType=o={}))},5102:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyCalloutType=void 0,function(e){e.info="Info",e.success="Success",e.warning="Warning",e.error="Error"}(o||(t.DocumentationLegacyCalloutType=o={}))},5503:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.WorkspaceSubscriptionPlanInterval=void 0,function(e){e.yearly="yearly",e.monthly="monthly"}(o||(t.WorkspaceSubscriptionPlanInterval=o={}))},5651:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockBehaviorDataType=void 0,function(e){e.item="Item",e.token="Token",e.asset="Asset",e.component="Component",e.figmaNode="FigmaNode",e.figmaComponent="FigmaComponent"}(o||(t.DocsBlockBehaviorDataType=o={}))},5673:(e,t)=>{var o;function r(e){switch(e.type){case o.documentationItem:return`@page:${e.documentationItemId}`;case o.pageHeading:return`@page:${e.documentationItemId}#${e.pageHeadingId}`;case o.url:return e.url;default:return}}Object.defineProperty(t,"__esModule",{value:!0}),t.linkAttributeToDocsLink=t.docsLinkToLinkAttributes=t.docsLinkToUrl=t.DocsLinkRefType=void 0,function(e){e.documentationItem="DocumentationItem",e.pageHeading="PageHeading",e.url="Url"}(o||(t.DocsLinkRefType=o={})),t.docsLinkToUrl=r,t.docsLinkToLinkAttributes=function(e){const t=r(e);if(t)return{href:t,target:e.openInNewTab?"_blank":"_self"}},t.linkAttributeToDocsLink=function(e,t){if(!e)return;const r="_blank"===t;if(e.startsWith("@page:")){if(e.includes("#")){const[t,n]=e.replace("@page:","").split("#");return{type:o.pageHeading,documentationItemId:t,pageHeadingId:n,openInNewTab:r}}return{type:o.documentationItem,documentationItemId:e.replace("@page:",""),openInNewTab:r}}return{type:o.url,url:e,openInNewTab:r}}},5695:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.CustomDomainErrorCode=void 0,function(e){e.generalError="GeneralError",e.dnsNotConfigured="DNSNotConfigured",e.maintenance="Maintenance"}(o||(t.CustomDomainErrorCode=o={}))},5883:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockItemPropertyOptionRenderingStyle=void 0,function(e){e.segmentedControl="SegmentedControl",e.toggleButton="ToggleButton",e.select="Select",e.checkbox="Checkbox"}(o||(t.DocsBlockItemPropertyOptionRenderingStyle=o={}))},5963:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockOptionRenderingStyle=void 0,function(e){e.segmentedControl="SegmentedControl",e.toggleButton="ToggleButton",e.select="Select",e.checkbox="Checkbox"}(o||(t.DocsBlockOptionRenderingStyle=o={}))},6141:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.VisibilityType=void 0,function(e){e.visible="Visible",e.hidden="Hidden"}(o||(t.VisibilityType=o={}))},6192:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.BlurType=void 0,function(e){e.layer="Layer",e.background="Background"}(o||(t.BlurType=o={}))},6298:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.WorkspaceNPMRegistryAuthType=void 0,function(e){e.basic="Basic",e.bearer="Bearer"}(o||(t.WorkspaceNPMRegistryAuthType=o={}))},6644:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockRichTextPropertyStyle=void 0,function(e){e.title1="Title1",e.title2="Title2",e.title3="Title3",e.title4="Title4",e.title5="Title5",e.quote="Quote",e.callout="Callout",e.default="Default"}(o||(t.DocsBlockRichTextPropertyStyle=o={}))},6839:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockItemPropertyType=void 0,function(e){e.richText="RichText",e.multiRichText="MultiRichText",e.text="Text",e.richTextEditor="RichTextEditor",e.boolean="Boolean",e.number="Number",e.singleSelect="SingleSelect",e.multiSelect="MultiSelect",e.image="Image",e.token="Token",e.tokenType="TokenType",e.tokenProperty="TokenProperty",e.component="Component",e.componentProperty="ComponentProperty",e.asset="Asset",e.assetProperty="AssetProperty",e.embedURL="EmbedURL",e.url="URL",e.markdown="Markdown",e.code="Code",e.codeSandbox="CodeSandbox",e.table="Table",e.divider="Divider",e.storybook="Storybook",e.color="Color",e.figmaNode="FigmaNode",e.figmaComponent="FigmaComponent"}(o||(t.DocsBlockItemPropertyType=o={}))},7040:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.TextDecoration=void 0,function(e){e.original="None",e.underline="Underline",e.strikethrough="Strikethrough"}(o||(t.TextDecoration=o={}))},7291:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockItemVariantLayoutWidth=void 0,function(e){e.c1="1",e.c2="2",e.c3="3",e.c4="4",e.c5="5",e.c6="6",e.c7="7",e.c8="8",e.c9="9",e.c10="10",e.c11="11",e.c12="12"}(o||(t.DocsBlockItemVariantLayoutWidth=o={}))},7379:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyItemType=void 0,function(e){e.group="Group",e.page="Page"}(o||(t.DocumentationLegacyItemType=o={}))},7476:(e,t)=>{var o,r;Object.defineProperty(t,"__esModule",{value:!0}),t.TextAlignment=t.Alignment=void 0,function(e){e.left="Left",e.center="Center",e.stretch="Stretch"}(o||(t.Alignment=o={})),function(e){e.left="Left",e.center="Center",e.right="Right"}(r||(t.TextAlignment=r={}))},7479:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockItemPropertyTextStyle=void 0,function(e){e.small="Small",e.regular="Regular",e.bold="Bold"}(o||(t.DocsBlockItemPropertyTextStyle=o={}))},7737:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.CustomDomainState=void 0,function(e){e.initial="Initial",e.domainSetupInProgress="DomainSetupInProgress",e.domainSetupFailed="DomainSetupFailed",e.domainSetupsSucces="DomainSetupSuccess",e.sslSetupInProgress="SSLSetupInProgress",e.sslSetupFailed="SSLSetupFailed",e.sslSetupSuccess="SSLSetupSuccess"}(o||(t.CustomDomainState=o={}))},7968:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.WorkspaceNPMRegistryType=void 0,function(e){e.npmJS="NPMJS",e.gitHub="GitHub",e.azureDevOps="AzureDevOps",e.artifactory="Artifactory",e.custom="Custom"}(o||(t.WorkspaceNPMRegistryType=o={}))},7971:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsSectionType=void 0,function(e){e.plain="Plain",e.tabs="Tabs"}(o||(t.DocsSectionType=o={}))},8042:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.ImportWarningType=void 0,function(e){e.UnsupportedFill="UnsupportedFill",e.UnsupportedStroke="UnsupportedStroke",e.UnsupportedEffect="UnsupportedEffect",e.StyleNotApplied="StyleNotApplied",e.NoPublishedStyles="NoPublishedStyles",e.NoPublishedComponents="NoPublishedComponents",e.NoPublishedAssets="NoPublishedAssets",e.NoVersionFound="NoVersionFound",e.ComponentHasNoThumbnail="ComponentHasNoThumbnail",e.DuplicateImportedStyleId="DuplicateImportedStyleId",e.DuplicateImportedStylePath="DuplicateImportedStylePath",e.NoPublishedElements="NoPublishedElements",e.NoUnpublishedStyles="NoUnpublishedStyles"}(o||(t.ImportWarningType=o={}))},8061:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockItemPropertyRichTextStyle=void 0,function(e){e.title1="Title1",e.title2="Title2",e.title3="Title3",e.title4="Title4",e.title5="Title5",e.quote="Quote",e.callout="Callout",e.ol="OL",e.ul="UL"}(o||(t.DocsBlockItemPropertyRichTextStyle=o={}))},8095:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockItemVariantLayoutType=void 0,function(e){e.column="Column",e.row="Row"}(o||(t.DocsBlockItemVariantLayoutType=o={}))},8607:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.MS_UNITS=t.PX_UNITS=t.RAW_UNITS=t.LINE_HEIGHT_UNITS=t.SIZE_UNITS=t.Unit=void 0,function(e){e.pixels="Pixels",e.percent="Percent",e.rem="Rem",e.ms="Ms",e.raw="Raw"}(o||(t.Unit=o={})),t.SIZE_UNITS=[o.pixels,o.percent,o.rem],t.LINE_HEIGHT_UNITS=[o.pixels,o.percent,o.rem,o.raw],t.RAW_UNITS=[o.raw],t.PX_UNITS=[o.pixels],t.MS_UNITS=[o.ms]},8738:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.AssetFormat=void 0,function(e){e.png="png",e.pdf="pdf",e.svg="svg"}(o||(t.AssetFormat=o={}))},8890:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockImagePropertyAspectRatio=void 0,function(e){e.auto="Auto",e.square="Square",e.landscape="Landscape",e.portrait="Portrait",e.wide="Wide"}(o||(t.DocsBlockImagePropertyAspectRatio=o={}))},9125:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.ShadowType=void 0,function(e){e.drop="Drop",e.inner="Inner"}(o||(t.ShadowType=o={}))},9133:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockOptionColor=void 0,function(e){e.green="Green",e.red="Red",e.yellow="Yellow",e.blue="Blue",e.purple="Purple",e.orange="Orange",e.pink="Pink",e.teal="Teal",e.grey="Grey",e.lightGrey="LightGrey",e.cyan="Cyan",e.fuchsia="Fuchsia"}(o||(t.DocsBlockOptionColor=o={}))},9377:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockItemEntityType=void 0,function(e){e.token="Token",e.tokenGroup="TokenGroup",e.asset="Asset",e.assetGroup="AssetGroup",e.component="Component",e.componentGroup="ComponentGroup"}(o||(t.DocsBlockItemEntityType=o={}))},9478:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.convertRemoteToUserRole=t.UserRole=void 0;const r=o(4379);var n;!function(e){e.owner="Owner",e.admin="Admin",e.creator="Creator",e.contributor="Contributor",e.billing="Billing",e.viewer="Viewer"}(n||(t.UserRole=n={})),t.convertRemoteToUserRole=e=>{switch(e){case"Owner":return n.owner;case"Admin":return n.admin;case"Creator":return n.creator;case"Contributor":return n.contributor;case"Billing":return n.billing;case"Viewer":return n.viewer;default:throw r.SupernovaError.fromMessage(`Unknown role: ${e}`)}}},9896:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyHeadingType=void 0,function(e){e[e.h1=1]="h1",e[e.h2=2]="h2",e[e.h3=3]="h3"}(o||(t.DocumentationLegacyHeadingType=o={}))},9932:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.docsImageRefToUrl=t.DocsImageRefType=void 0,function(e){e.resource="Resource",e.figmaNode="FigmaNode"}(o||(t.DocsImageRefType=o={})),t.docsImageRefToUrl=function(e,t,r){var n;if(e)switch(e.type){case o.resource:return null===(n=e.resource)||void 0===n?void 0:n.url;case o.figmaNode:if(!e.figmaNode||!e.figmaNode.sourceId||!e.figmaNode.frameReferenceId)return;return t.resources.getFigmaFrameHostedUrl({designSystemId:r.dsId,versionId:r.versionId},e.figmaNode.frameReferenceId);default:return}}}},o={};function r(t){var n=o[t];if(void 0!==n)return n.exports;var i=o[t]={exports:{}};return e[t](i,i.exports,r),i.exports}var n={};(()=>{var e=n;Object.defineProperty(e,"__esModule",{value:!0}),e.TokenType=e.TextDecoration=e.TextCase=e.ShadowType=e.RichTextSpanAttributeType=e.GradientType=e.FrameLayout=e.FrameAlignment=e.IconSet=e.SourceType=e.DocsImageRefType=e.DocsLinkRefType=e.DocsSectionType=e.DocsEntityType=e.DocsEntityGroupBehavior=e.DocsBlockTextPropertyStyle=e.DocsBlockRichTextPropertyStyle=e.DocsBlockOptionColor=e.DocsBlockOptionRenderingStyle=e.DocsBlockItemVariantLayoutWidth=e.DocsBlockItemVariantLayoutType=e.DocsBlockItemPropertyType=e.DocsBlockItemPropertyTextStyle=e.DocsBlockItemPropertyRichTextStyle=e.DocsBlockItemPropertyOptionRenderingStyle=e.DocsBlockItemEntityType=e.DocsBlockImagePropertyAspectRatio=e.DocsBlockBehaviorSelectionType=e.DocsBlockBehaviorDataType=e.DocumentationLegacyPageBlockShortcutType=e.DocumentationLegacyPageBlockThemeType=e.DocumentationLegacyPageBlockType=e.DocumentationLegacyPageAssetType=e.DocumentationLegacyItemType=e.DocumentationLegacyHeadingType=e.DocumentationLegacyGroupBehavior=e.DocumentationLegacyCalloutType=e.BorderStyle=e.BorderPosition=e.BlurType=e.AssetScaleType=e.AssetScale=e.AssetFormat=e.Alignment=e.ALL_TOKEN_TYPES=e.ALL_BORDER_STYLES=e.ALL_BORDER_POSITIONS=e.OPTION_TOKEN_TYPES=e.STRING_TOKEN_TYPES=e.DIMENSION_TOKEN_TYPES=void 0,e.PulsarExecutor=e.OutputFileType=e.CustomDomainState=e.CustomDomainErrorCode=e.ImportWarningType=e.WorkspaceNPMRegistryType=e.WorkspaceNPMRegistryAuthType=e.WorkspaceSubscriptionStatus=e.WorkspaceSubscriptionProductCode=e.WorkspaceSubscriptionPlanInterval=e.VisibilityType=e.UserRole=e.Unit=void 0;var t=r(3788);Object.defineProperty(e,"DIMENSION_TOKEN_TYPES",{enumerable:!0,get:function(){return t.DIMENSION_TOKEN_TYPES}}),Object.defineProperty(e,"STRING_TOKEN_TYPES",{enumerable:!0,get:function(){return t.STRING_TOKEN_TYPES}}),Object.defineProperty(e,"OPTION_TOKEN_TYPES",{enumerable:!0,get:function(){return t.OPTION_TOKEN_TYPES}});var o=r(1160);Object.defineProperty(e,"ALL_BORDER_POSITIONS",{enumerable:!0,get:function(){return o.ALL_BORDER_POSITIONS}});var i=r(4546);Object.defineProperty(e,"ALL_BORDER_STYLES",{enumerable:!0,get:function(){return i.ALL_BORDER_STYLES}});var a=r(3788);Object.defineProperty(e,"ALL_TOKEN_TYPES",{enumerable:!0,get:function(){return a.ALL_TOKEN_TYPES}});var l=r(7476);Object.defineProperty(e,"Alignment",{enumerable:!0,get:function(){return l.Alignment}});var s=r(8738);Object.defineProperty(e,"AssetFormat",{enumerable:!0,get:function(){return s.AssetFormat}});var c=r(915);Object.defineProperty(e,"AssetScale",{enumerable:!0,get:function(){return c.AssetScale}});var u=r(899);Object.defineProperty(e,"AssetScaleType",{enumerable:!0,get:function(){return u.AssetScaleType}});var p=r(6192);Object.defineProperty(e,"BlurType",{enumerable:!0,get:function(){return p.BlurType}});var d=r(1160);Object.defineProperty(e,"BorderPosition",{enumerable:!0,get:function(){return d.BorderPosition}});var f=r(4546);Object.defineProperty(e,"BorderStyle",{enumerable:!0,get:function(){return f.BorderStyle}});var T=r(5102);Object.defineProperty(e,"DocumentationLegacyCalloutType",{enumerable:!0,get:function(){return T.DocumentationLegacyCalloutType}});var m=r(2123);Object.defineProperty(e,"DocumentationLegacyGroupBehavior",{enumerable:!0,get:function(){return m.DocumentationLegacyGroupBehavior}});var y=r(9896);Object.defineProperty(e,"DocumentationLegacyHeadingType",{enumerable:!0,get:function(){return y.DocumentationLegacyHeadingType}});var g=r(7379);Object.defineProperty(e,"DocumentationLegacyItemType",{enumerable:!0,get:function(){return g.DocumentationLegacyItemType}});var h=r(1423);Object.defineProperty(e,"DocumentationLegacyPageAssetType",{enumerable:!0,get:function(){return h.DocumentationLegacyPageAssetType}});var b=r(1846);Object.defineProperty(e,"DocumentationLegacyPageBlockType",{enumerable:!0,get:function(){return b.DocumentationLegacyPageBlockType}});var S=r(1601);Object.defineProperty(e,"DocumentationLegacyPageBlockThemeType",{enumerable:!0,get:function(){return S.DocumentationLegacyPageBlockThemeType}});var k=r(2657);Object.defineProperty(e,"DocumentationLegacyPageBlockShortcutType",{enumerable:!0,get:function(){return k.DocumentationLegacyPageBlockShortcutType}});var v=r(5651);Object.defineProperty(e,"DocsBlockBehaviorDataType",{enumerable:!0,get:function(){return v.DocsBlockBehaviorDataType}});var C=r(3733);Object.defineProperty(e,"DocsBlockBehaviorSelectionType",{enumerable:!0,get:function(){return C.DocsBlockBehaviorSelectionType}});var P=r(8890);Object.defineProperty(e,"DocsBlockImagePropertyAspectRatio",{enumerable:!0,get:function(){return P.DocsBlockImagePropertyAspectRatio}});var x=r(9377);Object.defineProperty(e,"DocsBlockItemEntityType",{enumerable:!0,get:function(){return x.DocsBlockItemEntityType}});var O=r(5883);Object.defineProperty(e,"DocsBlockItemPropertyOptionRenderingStyle",{enumerable:!0,get:function(){return O.DocsBlockItemPropertyOptionRenderingStyle}});var D=r(8061);Object.defineProperty(e,"DocsBlockItemPropertyRichTextStyle",{enumerable:!0,get:function(){return D.DocsBlockItemPropertyRichTextStyle}});var _=r(7479);Object.defineProperty(e,"DocsBlockItemPropertyTextStyle",{enumerable:!0,get:function(){return _.DocsBlockItemPropertyTextStyle}});var I=r(6839);Object.defineProperty(e,"DocsBlockItemPropertyType",{enumerable:!0,get:function(){return I.DocsBlockItemPropertyType}});var E=r(8095);Object.defineProperty(e,"DocsBlockItemVariantLayoutType",{enumerable:!0,get:function(){return E.DocsBlockItemVariantLayoutType}});var N=r(7291);Object.defineProperty(e,"DocsBlockItemVariantLayoutWidth",{enumerable:!0,get:function(){return N.DocsBlockItemVariantLayoutWidth}});var F=r(5963);Object.defineProperty(e,"DocsBlockOptionRenderingStyle",{enumerable:!0,get:function(){return F.DocsBlockOptionRenderingStyle}});var R=r(9133);Object.defineProperty(e,"DocsBlockOptionColor",{enumerable:!0,get:function(){return R.DocsBlockOptionColor}});var B=r(6644);Object.defineProperty(e,"DocsBlockRichTextPropertyStyle",{enumerable:!0,get:function(){return B.DocsBlockRichTextPropertyStyle}});var j=r(306);Object.defineProperty(e,"DocsBlockTextPropertyStyle",{enumerable:!0,get:function(){return j.DocsBlockTextPropertyStyle}});var w=r(4068);Object.defineProperty(e,"DocsEntityGroupBehavior",{enumerable:!0,get:function(){return w.DocsEntityGroupBehavior}});var L=r(1233);Object.defineProperty(e,"DocsEntityType",{enumerable:!0,get:function(){return L.DocsEntityType}});var $=r(7971);Object.defineProperty(e,"DocsSectionType",{enumerable:!0,get:function(){return $.DocsSectionType}});var M=r(5673);Object.defineProperty(e,"DocsLinkRefType",{enumerable:!0,get:function(){return M.DocsLinkRefType}});var A=r(9932);Object.defineProperty(e,"DocsImageRefType",{enumerable:!0,get:function(){return A.DocsImageRefType}});var H=r(4652);Object.defineProperty(e,"SourceType",{enumerable:!0,get:function(){return H.SourceType}});var V=r(934);Object.defineProperty(e,"IconSet",{enumerable:!0,get:function(){return V.IconSet}});var W=r(1255);Object.defineProperty(e,"FrameAlignment",{enumerable:!0,get:function(){return W.FrameAlignment}});var U=r(3718);Object.defineProperty(e,"FrameLayout",{enumerable:!0,get:function(){return U.FrameLayout}});var K=r(1);Object.defineProperty(e,"GradientType",{enumerable:!0,get:function(){return K.GradientType}});var G=r(2674);Object.defineProperty(e,"RichTextSpanAttributeType",{enumerable:!0,get:function(){return G.RichTextSpanAttributeType}});var Y=r(9125);Object.defineProperty(e,"ShadowType",{enumerable:!0,get:function(){return Y.ShadowType}});var z=r(922);Object.defineProperty(e,"TextCase",{enumerable:!0,get:function(){return z.TextCase}});var q=r(7040);Object.defineProperty(e,"TextDecoration",{enumerable:!0,get:function(){return q.TextDecoration}});var Z=r(3788);Object.defineProperty(e,"TokenType",{enumerable:!0,get:function(){return Z.TokenType}});var J=r(8607);Object.defineProperty(e,"Unit",{enumerable:!0,get:function(){return J.Unit}});var X=r(9478);Object.defineProperty(e,"UserRole",{enumerable:!0,get:function(){return X.UserRole}});var Q=r(6141);Object.defineProperty(e,"VisibilityType",{enumerable:!0,get:function(){return Q.VisibilityType}});var ee=r(5503);Object.defineProperty(e,"WorkspaceSubscriptionPlanInterval",{enumerable:!0,get:function(){return ee.WorkspaceSubscriptionPlanInterval}});var te=r(4290);Object.defineProperty(e,"WorkspaceSubscriptionProductCode",{enumerable:!0,get:function(){return te.WorkspaceSubscriptionProductCode}});var oe=r(3607);Object.defineProperty(e,"WorkspaceSubscriptionStatus",{enumerable:!0,get:function(){return oe.WorkspaceSubscriptionStatus}});var re=r(6298);Object.defineProperty(e,"WorkspaceNPMRegistryAuthType",{enumerable:!0,get:function(){return re.WorkspaceNPMRegistryAuthType}});var ne=r(7968);Object.defineProperty(e,"WorkspaceNPMRegistryType",{enumerable:!0,get:function(){return ne.WorkspaceNPMRegistryType}});var ie=r(8042);Object.defineProperty(e,"ImportWarningType",{enumerable:!0,get:function(){return ie.ImportWarningType}});var ae=r(5695);Object.defineProperty(e,"CustomDomainErrorCode",{enumerable:!0,get:function(){return ae.CustomDomainErrorCode}});var le=r(7737);Object.defineProperty(e,"CustomDomainState",{enumerable:!0,get:function(){return le.CustomDomainState}});var se=r(2802);Object.defineProperty(e,"OutputFileType",{enumerable:!0,get:function(){return se.OutputFileType}}),Object.defineProperty(e,"PulsarExecutor",{enumerable:!0,get:function(){return se.PulsarExecutor}})})();var i=t;for(var a in n)i[a]=n[a];n.__esModule&&Object.defineProperty(i,"__esModule",{value:!0})})()},"./config.ts":
/*!*******************!*\
  !*** ./config.ts ***!
  \*******************/(e,t)=>{"use strict";var o,r;Object.defineProperty(t,"__esModule",{value:!0}),t.FileStructure=t.ThemeExportStyle=void 0,function(e){e.ApplyDirectly="applyDirectly",e.SeparateFiles="separateFiles",e.MergedTheme="mergedTheme"}(o||(t.ThemeExportStyle=o={})),function(e){e.SeparateByType="separateByType",e.SingleFile="singleFile"}(r||(t.FileStructure=r={}))},"./src/constants/defaults.ts":
/*!***********************************!*\
  !*** ./src/constants/defaults.ts ***!
  \***********************************/(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DEFAULT_CONFIG_FILE_NAMES=t.TAILWIND_ALLOWED_CUSTOMIZATION=t.TAILWIND_TOKEN_PREFIXES=void 0;const r=o(/*! @supernovaio/sdk-exporters */"./node_modules/@supernovaio/sdk-exporters/build/supernova-sdk-typescript.js");t.TAILWIND_TOKEN_PREFIXES={Color:"color",Typography:"text",Dimension:"spacing",Size:"size",Space:"spacing",Opacity:"opacity",FontSize:"text",LineHeight:"leading",LetterSpacing:"tracking",ParagraphSpacing:"paragraph",BorderWidth:"border",BorderRadius:"radius",Duration:"duration",ZIndex:"z",Shadow:"shadow",Border:"border",Gradient:"gradient",String:"string",ProductCopy:"product-copy",FontFamily:"font",FontWeight:"font-weight",TextCase:"text-case",TextDecoration:"text-decoration",Visibility:"visibility",Blur:"blur"},t.TAILWIND_ALLOWED_CUSTOMIZATION=[r.TokenType.color,r.TokenType.space,r.TokenType.size,r.TokenType.fontSize,r.TokenType.lineHeight,r.TokenType.letterSpacing,r.TokenType.radius,r.TokenType.borderWidth,r.TokenType.fontFamily,r.TokenType.fontWeight,r.TokenType.shadow,r.TokenType.opacity,r.TokenType.duration,r.TokenType.zIndex,r.TokenType.blur,r.TokenType.typography,r.TokenType.border,r.TokenType.dimension],t.DEFAULT_CONFIG_FILE_NAMES={Color:"tailwind.color.css",Typography:"tailwind.typography.css",Dimension:"tailwind.dimension.css",Size:"tailwind.size.css",Space:"tailwind.space.css",Opacity:"tailwind.opacity.css",FontSize:"tailwind.font-size.css",LineHeight:"tailwind.line-height.css",LetterSpacing:"tailwind.letter-spacing.css",ParagraphSpacing:"tailwind.paragraph-spacing.css",BorderWidth:"tailwind.border-width.css",BorderRadius:"tailwind.border-radius.css",Duration:"tailwind.duration.css",ZIndex:"tailwind.z-index.css",Shadow:"tailwind.shadow.css",Border:"tailwind.border.css",Gradient:"tailwind.gradient.css",String:"tailwind.string.css",ProductCopy:"tailwind.product-copy.css",FontFamily:"tailwind.font-family.css",FontWeight:"tailwind.font-weight.css",TextCase:"tailwind.text-case.css",TextDecoration:"tailwind.text-decoration.css",Visibility:"tailwind.visibility.css",Blur:"tailwind.blur.css"}},"./src/content/token.ts":
/*!******************************!*\
  !*** ./src/content/token.ts ***!
  \******************************/(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getTokenPrefix=c,t.isAllowedTokenType=u,t.convertedToken=function(e,t,o,a){if(!u(e.tokenType))return null;if(e.tokenType===n.TokenType.typography)return function(e,t,o){const a=r.GeneralHelper.indent(i.exportConfiguration.indent);let l="";l+=p(e,a),i.exportConfiguration.showDescriptions&&e.description&&(l+=`${a}/* ${e.description.trim()} */\n`);const s=T(e,o),c=e.value,u=(u,p="")=>{if(c[u]){const d=c[u],f={...d,referencedTokenId:d.referencedTokenId||null},m={fontSize:n.TokenType.fontSize,lineHeight:n.TokenType.lineHeight,letterSpacing:n.TokenType.letterSpacing,fontWeight:n.TokenType.fontWeight,fontFamily:n.TokenType.fontFamily,textDecoration:n.TokenType.textDecoration,textCase:n.TokenType.textCase,paragraphIndent:n.TokenType.paragraphSpacing,paragraphSpacing:n.TokenType.paragraphSpacing};l+=`${a}--${s}${p}: ${r.CSSHelper.tokenToCSS({...e,value:f,tokenType:m[u]},t,{allowReferences:i.exportConfiguration.useReferences,decimals:i.exportConfiguration.colorPrecision,colorFormat:i.exportConfiguration.colorFormat,forceRemUnit:i.exportConfiguration.forceRemUnit,remBase:i.exportConfiguration.remBase,tokenToVariableRef:e=>`var(--${T(e,o)})`})};\n`}};return u("fontSize"),u("lineHeight","--line-height"),u("letterSpacing","--letter-spacing"),u("fontWeight","--font-weight"),l}(e,t,o);let l=T(e,o);const s=r.CSSHelper.tokenToCSS(e,t,{allowReferences:i.exportConfiguration.useReferences,decimals:i.exportConfiguration.colorPrecision,colorFormat:i.exportConfiguration.colorFormat,forceRemUnit:i.exportConfiguration.forceRemUnit,remBase:i.exportConfiguration.remBase,tokenToVariableRef:(e,l)=>u(e.tokenType)?l?.needsRgb&&e.tokenType===n.TokenType.color&&a?.has(e.id)?`var(--oklch-${T(e,o)})`:`var(--${T(e,o)})`:r.CSSHelper.tokenToCSS(e,t,{allowReferences:!1,decimals:i.exportConfiguration.colorPrecision,colorFormat:i.exportConfiguration.colorFormat,forceRemUnit:i.exportConfiguration.forceRemUnit,remBase:i.exportConfiguration.remBase,tokenToVariableRef:()=>"",valueTransformer:void 0}),valueTransformer:(e,t)=>{if(t.tokenType===n.TokenType.blur){const t=e.match(/^blur\((.*)\)$/);return t?t[1]:e}}}),c=r.GeneralHelper.indent(i.exportConfiguration.indent);let d="";d+=p(e,c),i.exportConfiguration.showDescriptions&&e.description&&(d+=`${c}/* ${e.description.trim()} */\n`);if(e.tokenType===n.TokenType.blur){const t=[...e.tokenPath||[],e.name].join("/").toLowerCase().includes("background")?"backdrop-blur":"blur"===e.name.toLowerCase()?"blur-default":`blur-${e.name}`;l=r.NamingHelper.codeSafeVariableName(t,r.StringCase.kebabCase)}return d+=`${c}--${l}: ${s};`,d},t.tokenVariableName=T,t.analyzeTokensForOklchUtilities=function(e,t){const o=new Set,r=new Map(e.map((e=>[e.id,e])));return e.forEach((e=>{if(e.tokenType===n.TokenType.shadow){e.value.forEach((e=>{if(e.opacity&&e.color.referencedTokenId){const t=r.get(e.color.referencedTokenId);t&&t.tokenType===n.TokenType.color&&o.add(t.id)}}))}else if(e.tokenType===n.TokenType.border){const t=e;if(t.value.opacity&&t.value.color.referencedTokenId){const e=r.get(t.value.color.referencedTokenId);e&&e.tokenType===n.TokenType.color&&o.add(e.id)}}else if(e.tokenType===n.TokenType.gradient){e.value.forEach((e=>{e.stops.forEach((e=>{if(e.opacity&&e.color.referencedTokenId){const t=r.get(e.color.referencedTokenId);t&&t.tokenType===n.TokenType.color&&o.add(t.id)}}))}))}})),o},t.getColorTokenOklchValue=m,t.generateOklchUtilityVariable=function(e,t){const o=`oklch-${T(e,t)}`,n=m(e),a=r.GeneralHelper.indent(i.exportConfiguration.indent);return i.exportConfiguration.showDescriptions&&e.description?`${a}/* OKLCH utility for ${e.description.trim()} */\n${a}--${o}: ${n};`:`${a}--${o}: ${n};`};const r=o(/*! @supernovaio/export-utils */"../../utils/dist/index.js"),n=o(/*! @supernovaio/sdk-exporters */"./node_modules/@supernovaio/sdk-exporters/build/supernova-sdk-typescript.js"),i=o(/*! .. */"./src/index.ts"),a=o(/*! ../constants/defaults */"./src/constants/defaults.ts"),l=o(/*! @supernovaio/export-utils */"../../utils/dist/index.js"),s=o(/*! @supernovaio/export-utils */"../../utils/dist/index.js");function c(e){return a.TAILWIND_TOKEN_PREFIXES[e]}function u(e){return a.TAILWIND_ALLOWED_CUSTOMIZATION.includes(e)}function p(e,t){if(!i.exportConfiguration.debug)return"";return`${t}/* Path: ${[...e.tokenPath||[],e.name].join("/")} */\n${t}/* Token: ${JSON.stringify({name:e.name,id:e.id,type:e.tokenType,path:e.tokenPath,prefix:c(e.tokenType),value:e.value})} */\n`}function d(e){return e.includes("-")&&"text-color"!==e&&"background-color"!==e&&"border-color"!==e&&"box-shadow-color"!==e&&"outline-color"!==e&&"stroke-color"!==e&&"fill-color"!==e&&"ring-color"!==e?e:`${e}-default`}function f(e,t){const o=t.split(",").map((e=>e.trim().toLowerCase())),r=o.filter((e=>!e.startsWith("!"))),n=o.filter((e=>e.startsWith("!"))).map((e=>e.slice(1))),i=r.some((t=>e.includes(t))),a=n.some((t=>e.includes(t))),l=i&&!a;return{matches:l,matchingPattern:l&&r.find((t=>e.includes(t)))||""}}function T(e,t){let o=c(e.tokenType);if(i.exportConfiguration.useColorUtilityPrefixes&&e.tokenType===n.TokenType.color){const n=t.find((t=>t.id===e.parentGroupId)),a=e.tokenPath||[],l=[...a,e.name].join("/").toLowerCase();for(const[t,o]of Object.entries(i.exportConfiguration.colorUtilityPrefixes)){const{matches:n,matchingPattern:s}=f(l,o);if(n){const o=a.findIndex((e=>e.toLowerCase().includes(s))),n=[...o>=0?a.slice(o+1):a,e.name].join("-").toLowerCase().trim().replace(/^[-\s]+|[-\s]+$/g,"");return d(r.NamingHelper.codeSafeVariableName(`${t}-color-${n.replace(t,"")}`,r.StringCase.kebabCase,i.exportConfiguration.findReplace,!0))}}return d(r.NamingHelper.codeSafeVariableNameForToken(e,r.StringCase.kebabCase,n||null,o,i.exportConfiguration.findReplace))}const a=t.find((t=>t.id===e.parentGroupId));return d(r.NamingHelper.codeSafeVariableNameForToken(e,r.StringCase.kebabCase,a||null,o,i.exportConfiguration.findReplace))}function m(e){if(e.tokenType!==n.TokenType.color)throw new Error(`Expected color token, got ${e.tokenType}`);const t=e.value,o=l.ColorHelper.colorToOklch(s.ColorFormat.oklch,{r:Math.round(t.color.r),g:Math.round(t.color.g),b:Math.round(t.color.b)},t.opacity.measure,3).match(/oklch\(([^)]+)\)/);return o?o[1].replace(/%/g,"").trim():""}},"./src/content/typography.ts":
/*!***********************************!*\
  !*** ./src/content/typography.ts ***!
  \***********************************/(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.generateTypographyClass=function(e,t){if(e.tokenType!==n.TokenType.typography)return null;const o="  ";let l="";if(i.exportConfiguration.debug){l+=`${o}/* Path: ${[...e.tokenPath||[],e.name].join("/")} */\n`,l+=`${o}/* Token: ${JSON.stringify({name:e.name,type:e.tokenType,path:e.tokenPath,value:e.value})} */\n`}i.exportConfiguration.showDescriptions&&e.description&&(l+=`${o}/* ${e.description.trim()} */\n`);const s=r.NamingHelper.codeSafeVariableName([...e.tokenPath||[],e.name].join("-"),r.StringCase.kebabCase,i.exportConfiguration.findReplace,!0),c=(0,a.tokenVariableName)(e,t),u=e.value,p=new Map,d={allowReferences:!1,decimals:i.exportConfiguration.colorPrecision,colorFormat:i.exportConfiguration.colorFormat,tokenToVariableRef:()=>"",forceRemUnit:i.exportConfiguration.forceRemUnit,remBase:i.exportConfiguration.remBase};if(l+=`${o}.${s} {\n`,u.fontFamily){const e=u.fontFamily;l+=`${o}  font-family: ${r.CSSHelper.stringTokenValueToCSS(e,p,d)};\n`}l+=`${o}  font-size: var(--${c});\n`,l+=`${o}  font-weight: var(--${c}--font-weight);\n`,u.lineHeight&&(l+=`${o}  line-height: var(--${c}--line-height);\n`);if(l+=`${o}  letter-spacing: var(--${c}--letter-spacing);\n`,u.textDecoration){const e=u.textDecoration;l+=`${o}  text-decoration: ${r.CSSHelper.optionTokenValueToCSS(e,p,d,n.TokenType.textDecoration)};\n`}if(u.textCase){const e=u.textCase;l+=`${o}  text-transform: ${r.CSSHelper.optionTokenValueToCSS(e,p,d,n.TokenType.textCase)};\n`}if(u.paragraphIndent){const e=u.paragraphIndent;l+=`${o}  text-indent: ${r.CSSHelper.dimensionTokenValueToCSS(e,p,d)};\n`}if(u.paragraphSpacing){const e=u.paragraphSpacing;l+=`${o}  margin-bottom: ${r.CSSHelper.dimensionTokenValueToCSS(e,p,d)};\n`}return l+=`${o}}\n`,l};const r=o(/*! @supernovaio/export-utils */"../../utils/dist/index.js"),n=o(/*! @supernovaio/sdk-exporters */"./node_modules/@supernovaio/sdk-exporters/build/supernova-sdk-typescript.js"),i=o(/*! .. */"./src/index.ts"),a=o(/*! ./token */"./src/content/token.ts")},"./src/files/tailwind-file.ts":
/*!************************************!*\
  !*** ./src/files/tailwind-file.ts ***!
  \************************************/(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.styleOutputFile=function(e,t,o="",n){const s=new Map(e.map((e=>[e.id,e]))),c=u(e,o,n);if(0===c.length)return null;const d=(0,l.analyzeTokensForOklchUtilities)(c,t);let y="";d.size>0&&(y=Array.from(d).map((e=>{const o=s.get(e);return o?(0,l.generateOklchUtilityVariable)(o,t):""})).filter(Boolean).join("\n")+"\n");let g="";o||(g=i.exportConfiguration.globalPrefix?`@import "tailwindcss" prefix(${i.exportConfiguration.globalPrefix});\n\n`:'@import "tailwindcss";\n\n');g+=p(o,c.length,Array.from(new Set(c.map((e=>e.tokenType)))));const h=o&&n?i.exportConfiguration.themeSelector.replace("{theme}",o):i.exportConfiguration.cssSelector;let b="";i.exportConfiguration.fileStructure!==a.FileStructure.SeparateByType&&(b+=f(h));b+=y,b+=m(c,s,t,d);const S=i.exportConfiguration.useReferences&&c.some((e=>e.value.referencedTokenId&&null!==e.value.referencedTokenId&&void 0!==e.value.referencedTokenId));g+=`${h==="@theme"&&S?"@theme inline":h} {\n${b}}\n`,g+=T(c,t),i.exportConfiguration.showGeneratedFileDisclaimer&&(g=r.GeneralHelper.addDisclaimer(i.exportConfiguration.disclaimer,g));const k=o?`tailwind.${o}.css`:"tailwind.css";return r.FileHelper.createTextFile({relativePath:"./",fileName:k,content:g})},t.generateStyleFiles=function(e,t,o="",l){const s=new Map(e.map((e=>[e.id,e]))),c=u(e,o,l);if(0===c.length)return[];const d=new Map;c.forEach((e=>{const t=e.tokenType;d.has(t)||d.set(t,[]),d.get(t).push(e)}));const f=o&&l?i.exportConfiguration.themeSelector.replace("{theme}",o):i.exportConfiguration.cssSelector,g=i.exportConfiguration.useReferences&&c.some((e=>e.value.referencedTokenId&&null!==e.value.referencedTokenId&&void 0!==e.value.referencedTokenId)),h="@theme"===f&&g?"@theme inline":f;return Array.from(d.entries()).map((([e,l])=>{if(!i.exportConfiguration.generateEmptyConfigTypeFiles&&0===l.length)return null;let c="";o||(c=i.exportConfiguration.globalPrefix?`@import "tailwindcss" prefix(${i.exportConfiguration.globalPrefix});\n\n`:'@import "tailwindcss";\n\n'),c+=p(o,l.length,[],e);let u="";u+=m(l,s,t,void 0,e),c+=`${h} {\n${u}}\n`,e===n.TokenType.typography&&(c+=T(l,t)),i.exportConfiguration.showGeneratedFileDisclaimer&&(c=r.GeneralHelper.addDisclaimer(i.exportConfiguration.disclaimer,c));const d=y(e);let f="./";return o?f=`./${o}/`:i.exportConfiguration.fileStructure===a.FileStructure.SeparateByType&&(f=i.exportConfiguration.baseStyleFilePath.endsWith("/")?i.exportConfiguration.baseStyleFilePath:`${i.exportConfiguration.baseStyleFilePath}/`),r.FileHelper.createTextFile({relativePath:f,fileName:d,content:c})})).filter((e=>null!==e))},t.resetOutputFile=function(){if(i.exportConfiguration.fileStructure!==a.FileStructure.SeparateByType)return null;if(!d())return null;let e="";i.exportConfiguration.debug&&(e+="/* Debug Information\n",e+=" * Exporter: Tailwind CSS by Supernova\n",e+=" * File: Reset\n",e+=` * Generated: ${(new Date).toISOString()}\n`,e+=" */\n\n");const t=f(i.exportConfiguration.cssSelector);t&&(e+=`${i.exportConfiguration.cssSelector} {\n${t}}\n`);i.exportConfiguration.showGeneratedFileDisclaimer&&(e=r.GeneralHelper.addDisclaimer(i.exportConfiguration.disclaimer,e));return r.FileHelper.createTextFile({relativePath:"./",fileName:"reset.css",content:e})},t.indexOutputFile=function(e,t=[]){if(!i.exportConfiguration.generateIndexFile)return null;let o="";i.exportConfiguration.debug&&(o+="/* Debug Information\n",o+=" * Exporter: Tailwind CSS by Supernova\n",o+=" * File: Index\n",o+=` * Generated: ${(new Date).toISOString()}\n`,o+=" */\n\n");i.exportConfiguration.fileStructure===a.FileStructure.SeparateByType&&d()&&(o+='@import "./reset.css";\n\n');if(i.exportConfiguration.exportBaseValues)if(i.exportConfiguration.fileStructure===a.FileStructure.SingleFile)o+='@import "./tailwind.css";\n';else{Array.from(new Set(e.map((e=>e.tokenType)))).filter((e=>(0,l.isAllowedTokenType)(e))).forEach((e=>{const t=y(e),r=i.exportConfiguration.baseStyleFilePath.endsWith("/")?i.exportConfiguration.baseStyleFilePath:`${i.exportConfiguration.baseStyleFilePath}/`;o+=`@import "${r}${t}";\n`}))}t.forEach((t=>{const n="string"==typeof t?t:r.ThemeHelper.getThemeIdentifier(t);if(i.exportConfiguration.fileStructure===a.FileStructure.SingleFile)o+=`@import "./tailwind.${n}.css";\n`;else{Array.from(new Set(e.map((e=>e.tokenType)))).filter((e=>(0,l.isAllowedTokenType)(e))).forEach((a=>{if(i.exportConfiguration.exportOnlyThemedTokens&&"string"!=typeof t){if(0===r.ThemeHelper.filterThemedTokens(e.filter((e=>e.tokenType===a)),t).length)return}const l=y(a);o+=`@import "./${n}/${l}";\n`}))}})),i.exportConfiguration.showGeneratedFileDisclaimer&&(o=r.GeneralHelper.addDisclaimer(i.exportConfiguration.disclaimer,o));return r.FileHelper.createTextFile({relativePath:i.exportConfiguration.baseIndexFilePath||"./",fileName:i.exportConfiguration.indexFileName||"index.css",content:o})};const r=o(/*! @supernovaio/export-utils */"../../utils/dist/index.js"),n=o(/*! @supernovaio/sdk-exporters */"./node_modules/@supernovaio/sdk-exporters/build/supernova-sdk-typescript.js"),i=o(/*! .. */"./src/index.ts"),a=o(/*! ../../config */"./config.ts"),l=o(/*! ../content/token */"./src/content/token.ts"),s=o(/*! ../content/typography */"./src/content/typography.ts"),c=o(/*! ../constants/defaults */"./src/constants/defaults.ts");function u(e,t="",o){if(!i.exportConfiguration.generateEmptyFiles&&0===e.length)return[];let n=e;return t&&o&&i.exportConfiguration.exportOnlyThemedTokens&&(n=r.ThemeHelper.filterThemedTokens(e,o),0===n.length)?[]:(n=n.filter((e=>(0,l.isAllowedTokenType)(e.tokenType))),n)}function p(e="",t,o=[],r){if(!i.exportConfiguration.debug)return"";let n="/* Debug Information\n";if(n+=" * Exporter: Tailwind CSS by Supernova\n",n+=` * Theme: ${e||"Base"}\n`,r&&(n+=` * Token Type: ${r}\n`),n+=` * Token Count: ${t}\n`,o.length>0&&(n+=` * Token Types: ${o.join(", ")}\n`),n+=` * Color Format: ${i.exportConfiguration.colorFormat}\n`,n+=` * Prefix: ${i.exportConfiguration.globalPrefix||"None"}\n`,!r&&i.exportConfiguration.useColorUtilityPrefixes){n+=" * Color Utility Prefixes:\n";for(const[e,t]of Object.entries(i.exportConfiguration.colorUtilityPrefixes)){n+=`    - ${e}: ${t.split(",").map((e=>e.trim())).join(", ")}\n`}}else n+=" * Color Utility Prefixes: Disabled\n";return n+=` * Generated: ${(new Date).toISOString()}\n`,n+=" */\n\n",n}function d(){return i.exportConfiguration.disableAllDefaults||i.exportConfiguration.disableAnimateDefaults||i.exportConfiguration.disableBlurDefaults||i.exportConfiguration.disableBorderRadiusDefaults||i.exportConfiguration.disableBreakpointDefaults||i.exportConfiguration.disableColorDefaults||i.exportConfiguration.disableContainerDefaults||i.exportConfiguration.disableDropShadowDefaults||i.exportConfiguration.disableFontDefaults||i.exportConfiguration.disableFontWeightDefaults||i.exportConfiguration.disableInsetDefaults||i.exportConfiguration.disableLeadingDefaults||i.exportConfiguration.disablePerspectiveDefaults||i.exportConfiguration.disableShadowDefaults||i.exportConfiguration.disableSpacingDefaults||i.exportConfiguration.disableTextDefaults||i.exportConfiguration.disableTrackingDefaults}function f(e){if(!d()&&"@theme"!==e)return"";const t=r.GeneralHelper.indent(i.exportConfiguration.indent),o=[];return i.exportConfiguration.disableAllDefaults?o.push("--*: initial;"):(i.exportConfiguration.disableAnimateDefaults&&o.push("--animate-*: initial;"),i.exportConfiguration.disableBlurDefaults&&o.push("--blur-*: initial;"),i.exportConfiguration.disableBorderRadiusDefaults&&o.push("--radius-*: initial;"),i.exportConfiguration.disableBreakpointDefaults&&o.push("--breakpoint-*: initial;"),i.exportConfiguration.disableColorDefaults&&o.push("--color-*: initial;"),i.exportConfiguration.disableContainerDefaults&&o.push("--container-*: initial;"),i.exportConfiguration.disableDropShadowDefaults&&o.push("--drop-shadow-*: initial;"),i.exportConfiguration.disableFontDefaults&&o.push("--font-*: initial;"),i.exportConfiguration.disableFontWeightDefaults&&o.push("--font-weight-*: initial;"),i.exportConfiguration.disableInsetDefaults&&o.push("--inset-*: initial;"),i.exportConfiguration.disableLeadingDefaults&&o.push("--leading-*: initial;"),i.exportConfiguration.disablePerspectiveDefaults&&o.push("--perspective-*: initial;"),i.exportConfiguration.disableShadowDefaults&&o.push("--shadow-*: initial;"),i.exportConfiguration.disableSpacingDefaults&&o.push("--spacing-*: initial;"),i.exportConfiguration.disableTextDefaults&&o.push("--text-*: initial;"),i.exportConfiguration.disableTrackingDefaults&&o.push("--tracking-*: initial;")),o.length>0?`\n${t}/* Reset default Tailwind configuration */\n${t}${o.join(`\n${t}`)}\n`:""}function T(e,t){if(!i.exportConfiguration.generateTypographyClasses)return"";const o=e.filter((e=>e.tokenType===n.TokenType.typography));if(0===o.length)return"";let r="\n@layer components {\n";return o.forEach((e=>{const o=(0,s.generateTypographyClass)(e,t);o&&(r+=o)})),r+="}\n",r}function m(e,t,o,n,a){const s=r.GeneralHelper.indent(i.exportConfiguration.indent);let c="";const u=new Map;return a?u.set(a,e):e.forEach((e=>{const t=e.tokenType;u.has(t)||u.set(t,[]),u.get(t).push(e)})),u.forEach(((e,r)=>{c+=`\n${s}/* ${r} */\n`,i.exportConfiguration.debug&&(c+=`${s}/* ${e.length} ${r} tokens */\n`);const a=e.map((e=>(0,l.convertedToken)(e,t,o,n))).filter((e=>null!==e)).join("\n");c+=a+"\n"})),c}function y(e){let t=i.exportConfiguration.customizeConfigFileNames&&i.exportConfiguration.configFileNames[e]||c.DEFAULT_CONFIG_FILE_NAMES[e];return t.toLowerCase().endsWith(".css")||(t+=".css"),t}},"./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.exportConfiguration=void 0,t.generateFiles=function(e,o,a=[]){const l=[];if(t.exportConfiguration.fileStructure===r.FileStructure.SeparateByType){const e=(0,n.resetOutputFile)();e&&l.push(e)}if(t.exportConfiguration.fileStructure===r.FileStructure.SingleFile){const t=(0,n.styleOutputFile)(e,o);t&&l.push(t)}else{const t=(0,n.generateStyleFiles)(e,o);l.push(...t)}a.forEach((a=>{if(t.exportConfiguration.fileStructure===r.FileStructure.SingleFile){const t=(0,n.styleOutputFile)(e,o,i.ThemeHelper.getThemeIdentifier(a),a);t&&l.push(t)}else{const t=(0,n.generateStyleFiles)(e,o,i.ThemeHelper.getThemeIdentifier(a),a);l.push(...t)}}));const s=(0,n.indexOutputFile)(e,a);s&&l.push(s);return l};const r=o(/*! ../config */"./config.ts"),n=o(/*! ./files/tailwind-file */"./src/files/tailwind-file.ts"),i=o(/*! @supernovaio/export-utils */"../../utils/dist/index.js"),a=o(/*! ./content/token */"./src/content/token.ts"),l=o(/*! ./utils/tailwind-class */"./src/utils/tailwind-class.ts");function s(e){return e.filter((e=>null!==e))}t.exportConfiguration=Pulsar.exportConfig(),Pulsar.export((async(e,o)=>{const c={designSystemId:o.dsId,versionId:o.versionId};let u=await e.tokens.getTokens(c),p=await e.tokens.getTokenGroups(c);if(o.brandId){const t=(await e.brands.getBrands(c)).find((e=>e.id===o.brandId||e.idInVersion===o.brandId));if(!t)throw new Error(`Unable to find brand ${o.brandId}.`);u=u.filter((e=>e.brandId===t.id)),p=p.filter((e=>e.brandId===t.id))}if(!o.isPreview&&(t.exportConfiguration.writeClassnameToProperty||t.exportConfiguration.writeCSSVariableNameToProperty)){const o=new i.WriteTokenPropStore(e,c),r=u.filter((e=>(0,a.isAllowedTokenType)(e.tokenType)));t.exportConfiguration.writeClassnameToProperty&&await o.writeTokenProperties(t.exportConfiguration.propertyToWriteClassnameTo,r,(e=>(0,l.variableToTailwindClassName)((0,a.tokenVariableName)(e,p)))),t.exportConfiguration.writeCSSVariableNameToProperty&&await o.writeTokenProperties(t.exportConfiguration.propertyToWriteCSSVariableNameTo,r,(e=>t.exportConfiguration.propertyToWriteCSSVariableNameToIncludesVar?`var(--${(0,a.tokenVariableName)(e,p)})`:(0,a.tokenVariableName)(e,p)))}if(o.themeIds&&o.themeIds.length>0){const a=await e.tokens.getTokenThemes(c),l=o.themeIds.map((e=>{const t=a.find((t=>t.id===e||t.idInVersion===e));if(!t)throw new Error(`Unable to find theme ${e}.`);return t}));switch(t.exportConfiguration.exportThemesAs){case r.ThemeExportStyle.ApplyDirectly:if(u=e.tokens.computeTokensByApplyingThemes(u,u,l),t.exportConfiguration.fileStructure===r.FileStructure.SingleFile)return s([(0,n.styleOutputFile)(u,p),(0,n.indexOutputFile)(u)]);{const e=(0,n.generateStyleFiles)(u,p),t=(0,n.resetOutputFile)(),o=(0,n.indexOutputFile)(u);return[...e,...t?[t]:[],...o?[o]:[]]}case r.ThemeExportStyle.SeparateFiles:let o=[];if(t.exportConfiguration.fileStructure===r.FileStructure.SeparateByType){const e=(0,n.resetOutputFile)();e&&o.push(e)}if(t.exportConfiguration.exportBaseValues)if(t.exportConfiguration.fileStructure===r.FileStructure.SingleFile){const e=(0,n.styleOutputFile)(u,p);e&&o.push(e)}else{const e=(0,n.generateStyleFiles)(u,p);o=[...o,...e]}l.forEach((a=>{const l=e.tokens.computeTokensByApplyingThemes(u,u,[a]);if(t.exportConfiguration.fileStructure===r.FileStructure.SingleFile){const e=(0,n.styleOutputFile)(l,p,i.ThemeHelper.getThemeIdentifier(a),a);e&&o.push(e)}else{const e=(0,n.generateStyleFiles)(l,p,i.ThemeHelper.getThemeIdentifier(a),a);o=[...o,...e]}}));const a=(0,n.indexOutputFile)(u,l);return a&&o.push(a),o;case r.ThemeExportStyle.MergedTheme:let c=[];if(t.exportConfiguration.fileStructure===r.FileStructure.SeparateByType){const e=(0,n.resetOutputFile)();e&&c.push(e)}if(t.exportConfiguration.exportBaseValues)if(t.exportConfiguration.fileStructure===r.FileStructure.SingleFile){const e=(0,n.styleOutputFile)(u,p);e&&c.push(e)}else{const e=(0,n.generateStyleFiles)(u,p);c=[...c,...e]}const d=e.tokens.computeTokensByApplyingThemes(u,u,l);if(t.exportConfiguration.fileStructure===r.FileStructure.SingleFile){const e=(0,n.styleOutputFile)(d,p,"themed",l[0]);e&&c.push(e)}else{const e=(0,n.generateStyleFiles)(d,p,"themed",l[0]);c=[...c,...e]}const f=(0,n.indexOutputFile)(u,["themed"]);return f&&c.push(f),c}}if(t.exportConfiguration.fileStructure===r.FileStructure.SingleFile)return s([t.exportConfiguration.exportBaseValues?(0,n.styleOutputFile)(u,p):null,(0,n.indexOutputFile)(u)]);{const e=t.exportConfiguration.exportBaseValues?(0,n.generateStyleFiles)(u,p):[],o=t.exportConfiguration.fileStructure===r.FileStructure.SeparateByType&&(t.exportConfiguration.disableAllDefaults||t.exportConfiguration.disableAnimateDefaults||t.exportConfiguration.disableBlurDefaults||t.exportConfiguration.disableBorderRadiusDefaults||t.exportConfiguration.disableBreakpointDefaults||t.exportConfiguration.disableColorDefaults||t.exportConfiguration.disableContainerDefaults||t.exportConfiguration.disableDropShadowDefaults||t.exportConfiguration.disableFontDefaults||t.exportConfiguration.disableFontWeightDefaults||t.exportConfiguration.disableInsetDefaults||t.exportConfiguration.disableLeadingDefaults||t.exportConfiguration.disablePerspectiveDefaults||t.exportConfiguration.disableShadowDefaults||t.exportConfiguration.disableSpacingDefaults||t.exportConfiguration.disableTextDefaults||t.exportConfiguration.disableTrackingDefaults)?(0,n.resetOutputFile)():null,i=(0,n.indexOutputFile)(u);return[...e,...o?[o]:[],...i?[i]:[]]}}))},"./src/utils/tailwind-class.ts":
/*!*************************************!*\
  !*** ./src/utils/tailwind-class.ts ***!
  \*************************************/(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.variableToTailwindClassName=function(e){const t=(e.startsWith("--")?e.slice(2):e).split("-");let o="",r="";"color"===t[1]&&("background"===t[0]?o=`bg-${t.slice(2).join("-")}`:"text"===t[0]?o=`text-${t.slice(2).join("-")}`:"border"===t[0]?o=`border-${t.slice(2).join("-")}`:"ring"===t[0]?o=`ring-${t.slice(2).join("-")}`:"divide"===t[0]?o=`divide-${t.slice(2).join("-")}`:"outline"===t[0]?o=`outline-${t.slice(2).join("-")}`:"stroke"===t[0]?o=`stroke-${t.slice(2).join("-")}`:"fill"===t[0]&&(o=`fill-${t.slice(2).join("-")}`));o||("color"===t[0]?(o=`${t.slice(1).join("-")}`,r="[text|bg|...]-"):"spacing"===t[0]?(o=`${t.slice(1).join("-")}`,r="[gap|m|p|...]-"):"text"===t[0]?o=`text-${t.slice(1).join("-")}`:"font"===t[0]?o="weight"===t[1]||"family"===t[1]?`font-${t.slice(2).join("-")}`:`font-${t.slice(1).join("-")}`:"radius"===t[0]?o=`rounded-${t.slice(1).join("-")}`:"shadow"===t[0]?o="inset"===t[1]?`shadow-inner-${t.slice(2).join("-")}`:"drop"===t[1]?`drop-shadow-${t.slice(2).join("-")}`:`shadow-${t.slice(1).join("-")}`:"blur"===t[0]?o=`blur-${t.slice(1).join("-")}`:"tracking"===t[0]?o=`tracking-${t.slice(1).join("-")}`:"leading"===t[0]?o=`leading-${t.slice(1).join("-")}`:"opacity"===t[0]?o=`opacity-${t.slice(1).join("-")}`:"z"===t[0]?o=`z-${t.slice(1).join("-")}`:"border"===t[0]?o="width"===t[1]?`border-${t.slice(2).join("-")}`:`border-${t.slice(1).join("-")}`:"duration"===t[0]?o=`duration-${t.slice(1).join("-")}`:"size"===t[0]?o=`size-${t.slice(1).join("-")}`:"space"===t[0]?o=`space-${t.slice(1).join("-")}`:"line"===t[0]&&"height"===t[1]?o=`leading-${t.slice(2).join("-")}`:"letter"===t[0]&&"spacing"===t[1]?o=`tracking-${t.slice(2).join("-")}`:"font"===t[0]&&"size"===t[1]?o=`text-${t.slice(2).join("-")}`:"typography"===t[0]&&(o=`typography-${t.slice(1).join("-")}`));o||(o=t.join("-"));return"."+r+o}},"../../utils/dist/enums/ColorFormat.js":
/*!*********************************************!*\
  !*** ../../utils/dist/enums/ColorFormat.js ***!
  \*********************************************/(e,t)=>{"use strict";var o;Object.defineProperty(t,"__esModule",{value:!0}),t.ColorFormat=void 0,function(e){e.rgb="rgb",e.rgba="rgba",e.smartRgba="smartRgba",e.hex6="hex6",e.hex8="hex8",e.argbInt="argbInt",e.hashHex6="hashHex6",e.hashHex8="hashHex8",e.smartHashHex="smartHashHex",e.smartHex="smartHex",e.hsl="hsl",e.hsla="hsla",e.smartHsla="smartHsla",e.smartUIColor="smartUIColor",e.oklch="oklch",e.oklcha="oklcha",e.smartOklch="smartOklch"}(o||(t.ColorFormat=o={}))},"../../utils/dist/enums/StringCase.js":
/*!********************************************!*\
  !*** ../../utils/dist/enums/StringCase.js ***!
  \********************************************/(e,t)=>{"use strict";var o;Object.defineProperty(t,"__esModule",{value:!0}),t.StringCase=void 0,function(e){e.camelCase="camelCase",e.capitalCase="capitalCase",e.constantCase="constantCase",e.dotCase="dotCase",e.trainCase="trainCase",e.noCase="noCase",e.kebabCase="kebabCase",e.pascalCase="pascalCase",e.pathCase="pathCase",e.sentenceCase="sentenceCase",e.snakeCase="snakeCase",e.flatCase="flatCase"}(o||(t.StringCase=o={}))},"../../utils/dist/helpers/CSSHelper.js":
/*!*********************************************!*\
  !*** ../../utils/dist/helpers/CSSHelper.js ***!
  \*********************************************/(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CSSHelper=void 0;const r=o(/*! @supernovaio/sdk-exporters */"../../utils/node_modules/@supernovaio/sdk-exporters/build/supernova-sdk-typescript.js"),n=o(/*! ../enums/ColorFormat */"../../utils/dist/enums/ColorFormat.js"),i=o(/*! ./TokenHelper */"../../utils/dist/helpers/TokenHelper.js"),a=o(/*! ./ColorHelper */"../../utils/dist/helpers/ColorHelper.js");t.CSSHelper=class{static handleColorWithCustomOpacity(e,t,o,i){if(t&&e.referencedTokenId){const l=o.get(e.referencedTokenId);if(l&&l.tokenType===r.TokenType.color){const e=i.tokenToVariableRef(l,{needsRgb:!0}),o=a.ColorHelper.roundToDecimals(t.measure,i.decimals);return i.colorFormat===n.ColorFormat.oklch||i.colorFormat===n.ColorFormat.oklcha||i.colorFormat===n.ColorFormat.smartOklch?`oklch(${e} / ${o})`:`rgba(${e}, ${o})`}}return this.colorTokenValueToCSS({...e,...t&&{opacity:t}},o,i)}static tokenToCSS(e,t,o){let n;switch(e.tokenType){case r.TokenType.color:n=this.colorTokenValueToCSS(e.value,t,o);break;case r.TokenType.border:n=this.borderTokenValueToCSS(e.value,t,o);break;case r.TokenType.gradient:n=this.gradientTokenValueToCSS(e.value,t,o);break;case r.TokenType.dimension:case r.TokenType.size:case r.TokenType.space:case r.TokenType.opacity:case r.TokenType.fontSize:case r.TokenType.lineHeight:case r.TokenType.letterSpacing:case r.TokenType.paragraphSpacing:case r.TokenType.borderWidth:case r.TokenType.radius:case r.TokenType.duration:case r.TokenType.zIndex:n=this.dimensionTokenValueToCSS(e.value,t,o);break;case r.TokenType.shadow:n=this.shadowTokenValueToCSS(e.value,t,o);break;case r.TokenType.fontWeight:n=this.fontWeightTokenValueToCSS(e.value,t,o);break;case r.TokenType.fontFamily:case r.TokenType.productCopy:case r.TokenType.string:n=this.stringTokenValueToCSS(e.value,t,o);break;case r.TokenType.textCase:case r.TokenType.textDecoration:case r.TokenType.visibility:n=this.optionTokenValueToCSS(e.value,t,o,e.tokenType);break;case r.TokenType.blur:n=this.blurTokenValueToCSS(e.value,t,o);break;case r.TokenType.typography:n=this.typographyTokenValueToCSS(e.value,t,o);break;default:throw new r.UnreachableCaseError(e.tokenType,"Unsupported token type for transformation to CSS:")}if(o.valueTransformer){const t=o.valueTransformer(n,e);if(void 0!==t)return t}return n}static colorTokenValueToCSS(e,t,o){return a.ColorHelper.formattedColorOrVariableName(e,t,o)}static borderTokenValueToCSS(e,t,o){const r=(0,i.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);if(r)return o.tokenToVariableRef(r);const n=this.handleColorWithCustomOpacity(e.color,e.color.opacity,t,o),a=this.dimensionTokenValueToCSS(e.width,t,o),l=this.borderStyleToCSS(e.style),s=n;this.borderPositionToCSS(e.position);return`${a} ${l} ${s}`}static gradientTokenValueToCSS(e,t,o){return e.map((e=>this.gradientLayerToCSS(e,t,o))).join(", ")}static gradientLayerToCSS(e,t,o){const n=(0,i.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);if(n)return o.tokenToVariableRef(n);const l=a.ColorHelper.roundToDecimals(e.to.x,o.decimals)-a.ColorHelper.roundToDecimals(e.from.x,o.decimals),s=a.ColorHelper.roundToDecimals(e.to.y,o.decimals)-a.ColorHelper.roundToDecimals(e.from.y,o.decimals),c=Math.atan2(s,l)*(180/Math.PI),u=()=>l>=0&&s>0||l>0&&s<=0||l<=0&&s<0?90+c:c-270;let p="";switch(e.type){case r.GradientType.linear:p=`linear-gradient(${u()}deg, `;break;case r.GradientType.radial:p="radial-gradient(circle, ";break;case r.GradientType.angular:p="conic-gradient(";break;default:p=`linear-gradient(${u()}deg, `}return`${p}${e.stops.map((e=>`${this.handleColorWithCustomOpacity(e.color,e.color.opacity,t,o)} ${a.ColorHelper.roundToDecimals(100*e.position,o.decimals)}%`)).join(", ")})`}static dimensionTokenValueToCSS(e,t,o){const n=(0,i.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);if(n)return o.tokenToVariableRef(n);if(o.forceRemUnit&&e.unit===r.Unit.pixels){const t=o.remBase||16,r=e.measure/t;return`${a.ColorHelper.roundToDecimals(r,o.decimals)}rem`}return`${a.ColorHelper.roundToDecimals(e.measure,o.decimals)}${this.unitToCSS(e.unit)}`}static shadowTokenValueToCSS(e,t,o){return e.map((e=>this.shadowLayerToCSS(e,t,o))).join(", ")}static shadowLayerToCSS(e,t,o){const n=(0,i.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);if(n)return o.tokenToVariableRef(n);const l=e=>{if(o.forceRemUnit){const t=e/(o.remBase||16);return`${a.ColorHelper.roundToDecimals(t,o.decimals)}rem`}return`${e}px`},s=this.handleColorWithCustomOpacity(e.color,e.opacity,t,o);return`${e.type===r.ShadowType.inner?"inset ":""}${l(e.x)} ${l(e.y)} ${l(e.radius)} ${l(e.spread)} ${s}`}static fontWeightTokenValueToCSS(e,t,o){const r=(0,i.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);if(r)return o.tokenToVariableRef(r);return`${(0,i.normalizeTextWeight)(e.text)}`}static stringTokenValueToCSS(e,t,o){const r=(0,i.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);return r?o.tokenToVariableRef(r):`"${e.text}"`}static optionTokenValueToCSS(e,t,o,n){const a=(0,i.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);return a?o.tokenToVariableRef(a):n===r.TokenType.textCase?this.textCaseToCSS(e.value):n===r.TokenType.textDecoration?this.textDecorationToCSS(e.value):e.value.toLowerCase()}static blurTokenValueToCSS(e,t,o){const r=(0,i.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);return r?o.tokenToVariableRef(r):`blur(${this.dimensionTokenValueToCSS(e.radius,t,o)})`}static typographyTokenValueToCSS(e,t,o){const n=(0,i.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);if(n)return o.tokenToVariableRef(n);const a=(0,i.sureOptionalReference)(e.fontFamily.referencedTokenId,t,o.allowReferences),l=(0,i.sureOptionalReference)(e.fontWeight.referencedTokenId,t,o.allowReferences),s=(0,i.sureOptionalReference)(e.textDecoration.referencedTokenId,t,o.allowReferences),c=(0,i.sureOptionalReference)(e.textCase.referencedTokenId,t,o.allowReferences),u={fontFamily:a?o.tokenToVariableRef(a):e.fontFamily.text,fontWeight:l?o.tokenToVariableRef(l):(0,i.normalizeTextWeight)(e.fontWeight.text),textDecoration:s?o.tokenToVariableRef(s):e.textDecoration.value===r.TextDecoration.original?this.textDecorationToCSS(e.textDecoration.value):void 0,textCase:c?o.tokenToVariableRef(c):e.textCase.value===r.TextCase.original?this.textCaseToCSS(e.textCase.value):void 0,caps:e.textCase.value===r.TextCase.smallCaps,fontSize:this.dimensionTokenValueToCSS(e.fontSize,t,o),lineHeight:e.lineHeight?this.dimensionTokenValueToCSS(e.lineHeight,t,o):void 0},p=u.fontSize;return`${u.caps?"small-caps ":""}${u.fontWeight} ${u.lineHeight?`${p}/${u.lineHeight}`:p} ${a?u.fontFamily:`"${u.fontFamily}"`}`}static borderStyleToCSS(e){switch(e){case r.BorderStyle.dashed:return"dashed";case r.BorderStyle.dotted:return"dotted";case r.BorderStyle.solid:return"solid";case r.BorderStyle.groove:return"groove";default:return"solid"}}static borderPositionToCSS(e){switch(e){case r.BorderPosition.center:return"center";case r.BorderPosition.inside:return"inside";case r.BorderPosition.outside:default:return"outside"}}static unitToCSS(e){switch(e){case r.Unit.percent:return"%";case r.Unit.pixels:return"px";case r.Unit.rem:return"rem";case r.Unit.raw:return"";case r.Unit.ms:return"ms";default:return"px"}}static textCaseToCSS(e){switch(e){case r.TextCase.original:return"none";case r.TextCase.upper:return"uppercase";case r.TextCase.lower:return"lowercase";case r.TextCase.camel:return"capitalize";case r.TextCase.smallCaps:return"small-caps"}}static textDecorationToCSS(e){switch(e){case r.TextDecoration.original:return"none";case r.TextDecoration.underline:return"underline";case r.TextDecoration.strikethrough:return"line-through"}}}},"../../utils/dist/helpers/ColorHelper.js":
/*!***********************************************!*\
  !*** ../../utils/dist/helpers/ColorHelper.js ***!
  \***********************************************/(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ColorHelper=void 0;const r=o(/*! ../enums/ColorFormat */"../../utils/dist/enums/ColorFormat.js"),n=o(/*! ./TokenHelper */"../../utils/dist/helpers/TokenHelper.js");class i{static formattedColorOrVariableName(e,t,o){let i,a=null,l=null;const s=(0,n.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);if(s)i=o.tokenToVariableRef(s);else{const r=(0,n.sureOptionalReference)(e.color.referencedTokenId,t,o.allowReferences);r&&(a=o.tokenToVariableRef(r));const i=(0,n.sureOptionalReference)(e.opacity.referencedTokenId,t,o.allowReferences);i&&(l=o.tokenToVariableRef(i))}if(i)return i;if(!i&&!a&&!l)return this.formattedColor(e,o.colorFormat,o.decimals);switch(o.colorFormat){case r.ColorFormat.rgb:case r.ColorFormat.rgba:case r.ColorFormat.smartRgba:return this.colorToRgb(o.colorFormat,this.normalizedIntColor(e),e.opacity.measure,o.decimals,a,l);default:return this.formattedColor(e,o.colorFormat,o.decimals)}}static formattedColor(e,t,o=3){switch(t){case r.ColorFormat.hex6:case r.ColorFormat.hex8:case r.ColorFormat.hashHex6:case r.ColorFormat.hashHex8:case r.ColorFormat.smartHex:case r.ColorFormat.smartHashHex:case r.ColorFormat.argbInt:return this.colorToHex(t,this.normalizedIntColor(e),e.opacity.measure);case r.ColorFormat.rgb:case r.ColorFormat.rgba:case r.ColorFormat.smartRgba:return this.colorToRgb(t,this.normalizedIntColor(e),e.opacity.measure,o,null,null);case r.ColorFormat.hsl:case r.ColorFormat.hsla:case r.ColorFormat.smartHsla:return this.colorToHsl(t,this.normalizedFractionalColorHighPrecision(e),e.opacity.measure,o);case r.ColorFormat.smartUIColor:return this.colorToUIColor(this.normalizedIntColor(e),e.opacity.measure,o);case r.ColorFormat.oklch:case r.ColorFormat.oklcha:case r.ColorFormat.smartOklch:return this.colorToOklch(t,this.normalizedIntColor(e),e.opacity.measure,o);default:return this.colorToHex(r.ColorFormat.smartHashHex,this.normalizedIntColor(e),e.opacity.measure)}}static colorToRgb(e,t,o,n,i,a){let l;return l=e===r.ColorFormat.rgba||e===r.ColorFormat.smartRgba&&o<1?`rgba(${i||`${t.r}, ${t.g}, ${t.b}`}, ${a||this.roundToDecimals(o,n)})`:`rgb(${i||`${t.r}, ${t.g}, ${t.b}`})`,l}static colorToHex(e,t,o){let n=`${this.pHex(t.r)}${this.pHex(t.g)}${this.pHex(t.b)}`;return(e===r.ColorFormat.hex8||e===r.ColorFormat.hashHex8||e===r.ColorFormat.smartHex&&o<1||e===r.ColorFormat.smartHashHex&&o<1)&&(n+=`${this.pHex(Math.round(255*o))}`),e===r.ColorFormat.argbInt&&(n=`Color(0x${this.pHex(Math.round(255*o))}${n})`),e!==r.ColorFormat.hashHex6&&e!==r.ColorFormat.hashHex8&&e!==r.ColorFormat.smartHashHex||(n=`#${n}`),n}static colorToHsl(e,t,o,n){const i=t.r,a=t.g,l=t.b,s=Math.max(i,a,l),c=Math.min(i,a,l);let u,p=0,d=0,f=(s+c)/2;if(s===c)p=d=0;else{const e=s-c;switch(d=f>.5?e/(2-s-c):e/(s+c),s){case i:p=(a-l)/e+(a<l?6:0);break;case a:p=(l-i)/e+2;break;case l:p=(i-a)/e+4}p/=6}return u=e===r.ColorFormat.hsla||e===r.ColorFormat.smartHsla&&o<1?`hsla(${Math.round(360*p)}%, ${Math.round(100*d)}%, ${Math.round(100*f)}%, ${this.roundToDecimals(o,n)})`:`hsl(${Math.round(360*p)}%, ${Math.round(100*d)}%, ${Math.round(100*f)}%)`,u}static colorToUIColor(e,t,o=3){let r=`UIColor(rgb: 0x${this.pHex(e.r)}${this.pHex(e.g)}${this.pHex(e.b)})`;return t<1&&(r+=`.withAlphaComponent(${t})`),r}static normalizedIntColor(e){return{r:Math.round(e.color.r),g:Math.round(e.color.g),b:Math.round(e.color.b)}}static normalizedFractionalColor(e,t=3){return{r:this.roundToDecimals(e.color.r/255,t),g:i.roundToDecimals(e.color.g/255,t),b:i.roundToDecimals(e.color.b/255,t)}}static normalizedFractionalColorHighPrecision(e){return{r:e.color.r/255,g:e.color.g/255,b:e.color.b/255}}static roundToDecimals(e,t,o=!1){const r=Math.pow(10,t),n=Math.round(e*r)/r;return o?Number(n.toFixed(t)):parseFloat(n.toFixed(t))}static pHex(e){return e.toString(16).padStart(2,"0")}static colorToOklch(e,t,o,n){const{l:i,c:a,h:l}=this.rgbToOklch(t.r,t.g,t.b);switch(e){case r.ColorFormat.oklcha:return`oklch(${i}% ${a} ${l} / ${this.roundToDecimals(100*o,n)}%)`;case r.ColorFormat.smartOklch:return o<1?`oklch(${i}% ${a} ${l} / ${this.roundToDecimals(100*o,n)}%)`:`oklch(${i}% ${a} ${l})`;case r.ColorFormat.oklch:default:return`oklch(${i}% ${a} ${l})`}}static rgbToOklch(e,t,o){const r=this.sRGBtoLinear(e/255),n=this.sRGBtoLinear(t/255),i=this.sRGBtoLinear(o/255),a=.4124564*r+.3575761*n+.1804375*i,l=.2126729*r+.7151522*n+.072175*i,s=.0193339*r+.119192*n+.9503041*i,c=.8189330101*a+.3618667424*l-.1288597137*s,u=.0329845436*a+.9293118715*l+.0361456387*s,p=.0482003018*a+.2643662691*l+.633851707*s,d=Math.cbrt(c),f=Math.cbrt(u),T=Math.cbrt(p),m=.2104542553*d+.793617785*f-.0040720468*T,y=1.9779984951*d-2.428592205*f+.4505937099*T,g=.0259040371*d+.7827717662*f-.808675766*T,h=Math.sqrt(y*y+g*g);let b=180*Math.atan2(g,y)/Math.PI;return b<0&&(b+=360),{l:this.roundToDecimals(100*m,2),c:this.roundToDecimals(h,3,!0),h:this.roundToDecimals(b,2)}}static sRGBtoLinear(e){return e<=.04045?e/12.92:Math.pow((e+.055)/1.055,2.4)}}t.ColorHelper=i},"../../utils/dist/helpers/FileHelper.js":
/*!**********************************************!*\
  !*** ../../utils/dist/helpers/FileHelper.js ***!
  \**********************************************/(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FileHelper=void 0;const r=o(/*! @supernovaio/sdk-exporters */"../../utils/node_modules/@supernovaio/sdk-exporters/build/supernova-sdk-typescript.js");t.FileHelper=class{static createCopyRemoteFile({relativePath:e,fileName:t,url:o}){return{path:e,name:t,type:r.OutputFileType.copyRemoteUrl,url:o}}static createTextFile({relativePath:e,fileName:t,content:o}){return{path:e,name:t,type:r.OutputFileType.text,content:o}}static createBinaryFile({relativePath:e,fileName:t,data:o}){return{path:e,name:t,type:r.OutputFileType.binary,data:o}}}},"../../utils/dist/helpers/FileNameHelper.js":
/*!**************************************************!*\
  !*** ../../utils/dist/helpers/FileNameHelper.js ***!
  \**************************************************/(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FileNameHelper=void 0;const r=o(/*! ../enums/StringCase */"../../utils/dist/enums/StringCase.js"),n=o(/*! ./NamingHelper */"../../utils/dist/helpers/NamingHelper.js");t.FileNameHelper=class{static ensureFileExtension(e,t){const o=t.startsWith(".")?t:`.${t}`;return e.toLowerCase().endsWith(o.toLowerCase())?e:e+o}static replaceFileExtension(e,t,o){const r=t.startsWith(".")?t:`.${t}`,n=o.startsWith(".")?o:`.${o}`;return e.replace(new RegExp(`${r}$`),n)}static getDefaultStyleFileName(e,t=".css",o=r.StringCase.kebabCase){const i=t.startsWith(".")?t:`.${t}`;return n.NamingHelper.codeSafeVariableName({Color:"color",Typography:"typography",Dimension:"dimension",Size:"size",Space:"space",Opacity:"opacity",FontSize:"font-size",LineHeight:"line-height",LetterSpacing:"letter-spacing",ParagraphSpacing:"paragraph-spacing",BorderWidth:"border-width",BorderRadius:"border-radius",Duration:"duration",ZIndex:"z-index",Shadow:"shadow",Border:"border",Gradient:"gradient",String:"string",ProductCopy:"product-copy",FontFamily:"font-family",FontWeight:"font-weight",TextCase:"text-case",TextDecoration:"text-decoration",Visibility:"visibility",Blur:"blur"}[e],o)+i}}},"../../utils/dist/helpers/GeneralHelper.js":
/*!*************************************************!*\
  !*** ../../utils/dist/helpers/GeneralHelper.js ***!
  \*************************************************/(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GeneralHelper=void 0;t.GeneralHelper=class{static indent(e=2){return" ".repeat(Math.max(0,e))}static addDisclaimer(e,t){if(!e)return t;return`/**\n * ${e.replace(/\n/g,"\n * ")} \n */\n\n${t}`}}},"../../utils/dist/helpers/KotlinHelper.js":
/*!************************************************!*\
  !*** ../../utils/dist/helpers/KotlinHelper.js ***!
  \************************************************/(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.KotlinHelper=t.ImportCollector=t.ImportFlag=void 0;const r=o(/*! @supernovaio/sdk-exporters */"../../utils/node_modules/@supernovaio/sdk-exporters/build/supernova-sdk-typescript.js"),n=o(/*! ./ColorHelper */"../../utils/dist/helpers/ColorHelper.js"),i=o(/*! ./TokenHelper */"../../utils/dist/helpers/TokenHelper.js"),a=o(/*! ./GeneralHelper */"../../utils/dist/helpers/GeneralHelper.js"),l=o(/*! ./NamingHelper */"../../utils/dist/helpers/NamingHelper.js"),s=o(/*! ../enums/StringCase */"../../utils/dist/enums/StringCase.js"),c=o(/*! ../enums/ColorFormat */"../../utils/dist/enums/ColorFormat.js");var u;!function(e){e[e.Color=0]="Color",e[e.Dp=1]="Dp",e[e.Sp=2]="Sp",e[e.Em=3]="Em",e[e.Offset=4]="Offset",e[e.Brush=5]="Brush",e[e.TileMode=6]="TileMode",e[e.Shadow=7]="Shadow",e[e.BorderStroke=8]="BorderStroke",e[e.Modifier=9]="Modifier",e[e.Blur=10]="Blur",e[e.Font=11]="Font",e[e.FontFamily=12]="FontFamily",e[e.FontWeight=13]="FontWeight",e[e.TextDecoration=14]="TextDecoration",e[e.TextStyle=15]="TextStyle",e[e.R=16]="R"}(u||(t.ImportFlag=u={}));t.ImportCollector=class{constructor(e){this.rPackageName=e,this.importFlags=new Set}use(...e){e.forEach((e=>this.importFlags.add(e)))}allImports(){const e=[];return this.rPackageName&&this.importFlags.has(u.R)&&e.push(`import ${this.rPackageName}.R`),this.importFlags.has(u.Color)&&e.push("import androidx.compose.ui.graphics.Color"),this.importFlags.has(u.Dp)&&e.push("import androidx.compose.ui.unit.dp"),this.importFlags.has(u.Sp)&&e.push("import androidx.compose.ui.unit.sp"),this.importFlags.has(u.Em)&&e.push("import androidx.compose.ui.unit.em"),this.importFlags.has(u.Offset)&&e.push("import androidx.compose.ui.geometry.Offset"),this.importFlags.has(u.Brush)&&e.push("import androidx.compose.ui.graphics.Brush"),this.importFlags.has(u.TileMode)&&e.push("import androidx.compose.ui.graphics.TileMode"),this.importFlags.has(u.Shadow)&&e.push("import androidx.compose.ui.graphics.Shadow"),this.importFlags.has(u.BorderStroke)&&e.push("import androidx.compose.foundation.BorderStroke"),this.importFlags.has(u.Modifier)&&(e.push("import androidx.compose.ui.Modifier"),this.importFlags.has(u.Blur)&&e.push("import androidx.compose.ui.draw.blur")),this.importFlags.has(u.FontFamily)&&e.push("import androidx.compose.ui.text.font.FontFamily"),this.importFlags.has(u.Font)&&e.push("import androidx.compose.ui.text.font.Font"),this.importFlags.has(u.FontWeight)&&e.push("import androidx.compose.ui.text.font.FontWeight"),this.importFlags.has(u.TextDecoration)&&e.push("import androidx.compose.ui.text.style.TextDecoration"),this.importFlags.has(u.TextStyle)&&e.push("import androidx.compose.ui.text.TextStyle"),e.sort()}};t.KotlinHelper=class{static tokenValue(e,t,o,n){let i;switch(e.tokenType){case r.TokenType.color:i=this.colorTokenValueToKotlin(e.value,t,o,n);break;case r.TokenType.border:i=this.borderTokenValueToKotlin(e.value,t,o,n);break;case r.TokenType.gradient:i=this.gradientTokenValueToKotlin(e.value,t,o,n);break;case r.TokenType.fontSize:case r.TokenType.lineHeight:i=this.textUnitTokenValueToKotlin(e.value,t,o,n);break;case r.TokenType.letterSpacing:i=this.letterSpacingTokenValueToKotlin(e.value,t,o,n);break;case r.TokenType.dimension:case r.TokenType.size:case r.TokenType.space:case r.TokenType.opacity:case r.TokenType.paragraphSpacing:case r.TokenType.borderWidth:case r.TokenType.radius:case r.TokenType.duration:case r.TokenType.zIndex:i=this.dimensionTokenValueToKotlin(e.value,t,o,n);break;case r.TokenType.shadow:i=this.shadowTokenValueToKotlin(e.value,t,o,n);break;case r.TokenType.fontWeight:i=this.fontWeightTokenValueToKotlin(e.value,t,o,n);break;case r.TokenType.fontFamily:i=this.fontFamilyTokenValueToKotlin(e.value,t,o,n);break;case r.TokenType.productCopy:case r.TokenType.string:i=this.stringTokenValueToKotlin(e.value,t,o);break;case r.TokenType.textCase:case r.TokenType.textDecoration:case r.TokenType.visibility:i=this.optionTokenValueToKotlin(e.value,t,o,e.tokenType,n);break;case r.TokenType.blur:i=this.blurTokenValueToKotlin(e.value,t,o,n);break;case r.TokenType.typography:i=this.typographyTokenValueToKotlin(e.value,t,o,n);break;default:throw new r.UnreachableCaseError(e.tokenType,"Unsupported token type for transformation:")}return i}static colorTokenValueToKotlin(e,t,o,r){r.use(u.Color);const i={...o,colorFormat:c.ColorFormat.argbInt};return n.ColorHelper.formattedColorOrVariableName(e,t,i)}static borderTokenValueToKotlin(e,t,o,r){const n=(0,i.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);if(n)return o.tokenToVariableRef(n);r.use(u.BorderStroke);return`BorderStroke(${this.dimensionTokenValueToKotlin(e.width,t,o,r)}, ${this.colorTokenValueToKotlin(e.color,t,o,r)})`}static gradientTokenValueToKotlin(e,t,o,r){const n=e.map((e=>this.gradientLayerToKotlin(e,t,o,r)));return 1===n.length?n[0]:`listOf(${n.join(", ")})`}static gradientLayerToKotlin(e,t,o,l){const s=(0,i.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);if(s)return o.tokenToVariableRef(s);l.use(u.Brush,u.Offset);const c=e.stops.map((e=>`${n.ColorHelper.roundToDecimals(e.position,o.decimals)+"f"} to ${this.colorTokenValueToKotlin(e.color,t,o,l)}`)).join(", "),p=a.GeneralHelper.indent(o.indent);switch(e.type){case r.GradientType.radial:l.use(u.TileMode);return`Brush.radialGradient(\n${p}${p}${c},\n${p}${p}center = Offset(${((e.from.x+e.to.x)/2).toFixed(2)}f, ${((e.from.y+e.to.y)/2).toFixed(2)}f),\n${p}${p}radius = 0.5f,\n${p}${p}tileMode = TileMode.Clamp\n${p})`;case r.GradientType.angular:return`Brush.sweepGradient(\n${p}${p}${c},\n${p}${p}center = Offset(0.5f, 0.5f)\n${p})`;case r.GradientType.linear:default:return`Brush.linearGradient(\n${p}${p}${c},\n${p}${p}start = Offset(${e.from.x}f, ${e.from.y}f),\n${p}${p}end = Offset(${e.to.x}f, ${e.to.y}f)\n${p})`}}static shadowTokenValueToKotlin(e,t,o,r){const n=e.map((e=>this.shadowLayerToKotlin(e,t,o,r))),i=a.GeneralHelper.indent(o.indent);return 1===n.length?n[0]:`listOf(\n${n.map((e=>`${i}${i}${e}`)).join(",\n")}\n${i})`}static shadowLayerToKotlin(e,t,o,r){const a=(0,i.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);if(a)return o.tokenToVariableRef(a);r.use(u.Shadow,u.Offset);return`Shadow(color = ${this.colorTokenValueToKotlin({...e.color,...e.opacity&&{opacity:e.opacity}},t,o,r)}, offset = Offset(${n.ColorHelper.roundToDecimals(e.x,o.decimals)}f, ${n.ColorHelper.roundToDecimals(e.y,o.decimals)}f), blurRadius = ${n.ColorHelper.roundToDecimals(e.radius,o.decimals)}f)`}static dimensionTokenValueToKotlin(e,t,o,a){const l=(0,i.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);if(l)return o.tokenToVariableRef(l);const s=n.ColorHelper.roundToDecimals(e.measure,o.decimals);if(e.unit===r.Unit.percent){return`${+s/100}f`}return`${s}${this.unitToKotlin(e.unit,a)}`}static textUnitTokenValueToKotlin(e,t,o,a,l=!1){const s=(0,i.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);if(s)return o.tokenToVariableRef(s);const c=n.ColorHelper.roundToDecimals(e.measure,o.decimals);if(e.unit===r.Unit.percent){const e=+c/100;return a.use(l?u.Em:u.Sp),`${e}${l?".em":".sp"}`}return a.use(u.Sp),`${c}.sp`}static letterSpacingTokenValueToKotlin(e,t,o,r){return this.textUnitTokenValueToKotlin(e,t,o,r,!0)}static unitToKotlin(e,t){switch(e){case r.Unit.percent:return"f";case r.Unit.pixels:return t.use(u.Dp),".dp";case r.Unit.rem:return t.use(u.Sp),".sp";case r.Unit.ms:case r.Unit.raw:return"";default:return t.use(u.Dp),".dp"}}static stringTokenValueToKotlin(e,t,o){const r=(0,i.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);return r?o.tokenToVariableRef(r):`"${e.text}"`}static optionTokenValueToKotlin(e,t,o,n,a){const l=(0,i.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);return l?o.tokenToVariableRef(l):n===r.TokenType.textCase?this.textCaseToKotlin(e.value):n===r.TokenType.textDecoration?this.textDecorationToKotlin(e.value,a):this.visibilityToKotlin(e.value)}static textCaseToKotlin(e){switch(e){case r.TextCase.original:return'"none"';case r.TextCase.upper:return'"uppercase"';case r.TextCase.lower:return'"lowercase"';case r.TextCase.camel:return'"capitalize"';case r.TextCase.smallCaps:return'"smallCaps"'}}static textDecorationToKotlin(e,t){switch(t.use(u.TextDecoration),e){case r.TextDecoration.original:return"TextDecoration.None";case r.TextDecoration.underline:return"TextDecoration.Underline";case r.TextDecoration.strikethrough:return"TextDecoration.LineThrough"}}static visibilityToKotlin(e){return e===r.VisibilityType.visible?"true":"false"}static blurTokenValueToKotlin(e,t,o,r){const n=(0,i.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);return n?o.tokenToVariableRef(n):(r.use(u.Modifier,u.Blur),`Modifier.blur(${this.dimensionTokenValueToKotlin(e.radius,t,o,r)})`)}static fontWeightTokenValueToKotlin(e,t,o,r){const n=(0,i.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);if(n)return o.tokenToVariableRef(n);const a=(0,i.normalizeTextWeight)(e.text);return this.fontWeightIntToKotlin(a,r)}static fontWeightIntToKotlin(e,t){switch(t.use(u.FontWeight),e){case 100:return"FontWeight.Thin";case 200:return"FontWeight.ExtraLight";case 300:return"FontWeight.Light";case 400:return"FontWeight.Normal";case 500:return"FontWeight.Medium";case 600:return"FontWeight.SemiBold";case 700:return"FontWeight.Bold";case 800:return"FontWeight.ExtraBold";case 900:return"FontWeight.Black";default:return`FontWeight(${e})`}}static fontFamilyTokenValueToKotlin(e,t,o,r){const n=(0,i.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);if(n)return o.tokenToVariableRef(n);r.use(u.FontFamily,u.Font,u.R);return`FontFamily(Font(R.font.${l.NamingHelper.codeSafeVariableName(e.text,s.StringCase.snakeCase)}))`}static typographyTokenValueToKotlin(e,t,o,n){const l=(0,i.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);if(l)return o.tokenToVariableRef(l);n.use(u.TextStyle,u.TextDecoration);const s=(0,i.sureOptionalReference)(e.fontFamily.referencedTokenId,t,o.allowReferences),c=(0,i.sureOptionalReference)(e.fontWeight.referencedTokenId,t,o.allowReferences),p=(0,i.sureOptionalReference)(e.textDecoration.referencedTokenId,t,o.allowReferences),d=s?o.tokenToVariableRef(s):this.fontFamilyTokenValueToKotlin(e.fontFamily,t,o,n),f=c?o.tokenToVariableRef(c):this.fontWeightIntToKotlin((0,i.normalizeTextWeight)(e.fontWeight.text),n),T=p?o.tokenToVariableRef(p):e.textDecoration.value===r.TextDecoration.original?"TextDecoration.None":this.textDecorationToKotlin(e.textDecoration.value,n),m=this.textUnitTokenValueToKotlin(e.fontSize,t,o,n),y=e.lineHeight?this.textUnitTokenValueToKotlin(e.lineHeight,t,o,n):void 0,g=e.letterSpacing?this.letterSpacingTokenValueToKotlin(e.letterSpacing,t,o,n):void 0,h=[`fontFamily = ${d}`,`fontWeight = ${f}`,`fontSize = ${m}`];y&&h.push(`lineHeight = ${y}`),g&&h.push(`letterSpacing = ${g}`),T&&h.push(`textDecoration = ${T}`);const b=a.GeneralHelper.indent(o.indent);return`TextStyle(\n${h.map((e=>`${b}${b}${e}`)).join(",\n")}\n${b})`}}},"../../utils/dist/helpers/NamingHelper.js":
/*!************************************************!*\
  !*** ../../utils/dist/helpers/NamingHelper.js ***!
  \************************************************/(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.NamingHelper=void 0;const r=o(/*! ../enums/StringCase */"../../utils/dist/enums/StringCase.js"),n=o(/*! change-case */"../../utils/node_modules/change-case/dist/index.js");class i{static applyFindReplace(e,t){if(!t)return e;const o=Object.entries(t).sort((([e],[t])=>t.length-e.length));let r=e;for(const[e,t]of o){const o=e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&"),n=new RegExp(`\\b${o}\\b|(?<=^|\\s)${o}(?=\\s|$)`,"gi");r=r.replace(n,t)}return r}static codeSafeVariableNameForToken(e,t,o,r,n,a=!0){let l=[];o&&(l.push(...o.path),o.isRoot||l.push(o.name));const s=e.name.split(/[\s-_]+/);if(l.length>0&&s.length>1&&s[0].toLowerCase()===l[l.length-1].toLowerCase()?l.push(s.slice(1).join(" ")):l.push(e.name),n){let e=l.join(" ");e=i.applyFindReplace(e,n),l=e.split(/\s+/).filter((e=>e.length>0)).map((e=>e.trim()))}return r&&r.length>0&&l.unshift(r),i.codeSafeVariableName(l,t,void 0,a)}static codeSafeVariableName(e,t,o,a=!1){let l="string"==typeof e?e:e.join(" ");if(l=i.applyFindReplace(l,o),l=l.replaceAll(/[^a-zA-Z0-9_-]/g,"_"),a){const e=(0,n.kebabCase)(l).split("-").filter((e=>e.length>0));l=e.filter(((t,o)=>0===o||t!==e[o-1])).join(" ")}switch(t){case r.StringCase.camelCase:l=(0,n.camelCase)(l);break;case r.StringCase.capitalCase:l=(0,n.capitalCase)(l);break;case r.StringCase.constantCase:l=(0,n.constantCase)(l);break;case r.StringCase.dotCase:l=(0,n.dotCase)(l);break;case r.StringCase.trainCase:l=(0,n.trainCase)(l);break;case r.StringCase.noCase:l=(0,n.noCase)(l);break;case r.StringCase.kebabCase:l=(0,n.kebabCase)(l);break;case r.StringCase.pascalCase:l=(0,n.pascalCase)(l);break;case r.StringCase.pathCase:l=(0,n.pathCase)(l);break;case r.StringCase.sentenceCase:l=(0,n.sentenceCase)(l);break;case r.StringCase.snakeCase:l=(0,n.snakeCase)(l);break;case r.StringCase.flatCase:l=(0,n.camelCase)(l).toLowerCase()}return t!==r.StringCase.snakeCase&&t!==r.StringCase.constantCase&&(l=l.replaceAll("_","")),l.match(/^[^a-zA-Z]/)&&(l="_"+l),l}static nameAsCSSVarReference(e){return`var(--${e})`}static nameAsCSSVarDeclaration(e){return`--${e}`}}t.NamingHelper=i},"../../utils/dist/helpers/ThemeHelper.js":
/*!***********************************************!*\
  !*** ../../utils/dist/helpers/ThemeHelper.js ***!
  \***********************************************/(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ThemeHelper=void 0;const r=o(/*! ./NamingHelper */"../../utils/dist/helpers/NamingHelper.js"),n=o(/*! ../enums/StringCase */"../../utils/dist/enums/StringCase.js");t.ThemeHelper=class{static hasThemedTokens(e,t,o){const r=e.filter((e=>e.tokenType===t)),n=new Set(o.overriddenTokens.map((e=>e.id)));return r.some((e=>n.has(e.id)))}static filterThemedTokens(e,t){const o=new Set(t.overriddenTokens.map((e=>e.id)));return e.filter((e=>o.has(e.id)))}static getThemeIdentifier(e,t=n.StringCase.kebabCase){if("string"==typeof e)return e;const o=e.codeName||e.name;return r.NamingHelper.codeSafeVariableName(o,t)}static getThemeName(e){if("string"==typeof e)return e;const t=e.codeName||e.name;return r.NamingHelper.codeSafeVariableName(t,n.StringCase.capitalCase)}}},"../../utils/dist/helpers/TokenHelper.js":
/*!***********************************************!*\
  !*** ../../utils/dist/helpers/TokenHelper.js ***!
  \***********************************************/(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.sureOptionalReference=function(e,t,o=!0){if(!e||!o)return null;const r=t.get(e);if(!r)throw new Error(`Trying to retrieve unknown referenced token ${e}`);return r},t.normalizeTextWeight=function(e){const t=e.toLowerCase().trim(),o=parseInt(t);if(!isNaN(o))return o;switch(t){case"thin":case"hairline":return 100;case"extra light":case"extralight":case"ultra light":case"ultralight":return 200;case"light":return 300;case"normal":case"regular":case"book":default:return 400;case"medium":return 500;case"semi bold":case"semibold":case"demi bold":case"demibold":return 600;case"bold":return 700;case"extra bold":case"extrabold":case"ultra bold":case"ultrabold":return 800;case"black":case"heavy":return 900}}},"../../utils/dist/helpers/TokenNameTracker.js":
/*!****************************************************!*\
  !*** ../../utils/dist/helpers/TokenNameTracker.js ***!
  \****************************************************/(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TokenNameTracker=void 0;const r=o(/*! ./NamingHelper */"../../utils/dist/helpers/NamingHelper.js");t.TokenNameTracker=class{constructor(){this.tokenNameMap=new Map,this.nameToTokenMap=new Map,this.hierarchyNameMap=new Map}reset(){this.tokenNameMap.clear(),this.nameToTokenMap.clear(),this.hierarchyNameMap.clear()}getSimpleTokenName(e,t,o=!1,n=[]){const i=`${n.join("/")}/${e.name}`;if(!o&&this.tokenNameMap.has(e.id))return this.tokenNameMap.get(e.id);let a=r.NamingHelper.codeSafeVariableName(e.name,t);this.hierarchyNameMap.has(i)||this.hierarchyNameMap.set(i,new Set);const l=this.hierarchyNameMap.get(i);return l.size>0&&!l.has(e.id)&&(a=`${a}_${l.size}`),l.add(e.id),o||(this.tokenNameMap.set(e.id,a),this.nameToTokenMap.set(a,e.id)),a}getTokenName(e,t,o,n,i=!1,a="_copy_"){if(!i&&this.tokenNameMap.has(e.id))return this.tokenNameMap.get(e.id);const l=t.find((t=>t.id===e.parentGroupId));let s=r.NamingHelper.codeSafeVariableNameForToken(e,o,l,n),c=1;for(;this.nameToTokenMap.has(s)&&this.nameToTokenMap.get(s)!==e.id;)s=`${s}${a}${c++}`;return i||(this.tokenNameMap.set(e.id,s),this.nameToTokenMap.set(s,e.id)),s}}},"../../utils/dist/helpers/WriteTokenPropStore.js":
/*!*******************************************************!*\
  !*** ../../utils/dist/helpers/WriteTokenPropStore.js ***!
  \*******************************************************/(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.WriteTokenPropStore=void 0;const r=o(/*! ./NamingHelper */"../../utils/dist/helpers/NamingHelper.js"),n=o(/*! ../enums/StringCase */"../../utils/dist/enums/StringCase.js");t.WriteTokenPropStore=class{constructor(e,t){this.tokenPropertyWriteMap=new Map,this.sdk=e,this.target=t}storeValueForTokenProperty(e,t,o){let r=this.tokenPropertyWriteMap.get(t);r||(r=new Map,this.tokenPropertyWriteMap.set(t,r)),r.set(e,o)}async batchUpdateStoredTokenProperties(){if(0===this.tokenPropertyWriteMap.size)return;let e=await this.sdk.tokens.getTokenProperties(this.target);for(const[t,o]of this.tokenPropertyWriteMap){let i=e.find((e=>e.name===t));if(i||(await this.sdk.tokens.createTokenProperty(this.target,{type:"Generic",name:t,codeName:r.NamingHelper.codeSafeVariableName([t],n.StringCase.camelCase),columnWidth:200,description:"Variable name to use in code"}),e=await this.sdk.tokens.getTokenProperties(this.target),i=e.find((e=>e.name===t))),!i)throw new Error(`Failed to retrieve or create property ${t}.`);const a=Array.from(o).map((([e,t])=>({definitionId:i.id,targetElementId:e.id,value:t})));await this.sdk.bulkOperations.updateElementProperties(this.target,a)}}async writeTokenProperties(e,t,o){const r=e?.trim();if(r){for(const e of t){const t=o(e);this.storeValueForTokenProperty(e,r,t)}await this.batchUpdateStoredTokenProperties()}}}},"../../utils/dist/index.js":
/*!*********************************!*\
  !*** ../../utils/dist/index.js ***!
  \*********************************/function(e,t,o){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,o,r){void 0===r&&(r=o);var n=Object.getOwnPropertyDescriptor(t,o);n&&!("get"in n?!t.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return t[o]}}),Object.defineProperty(e,r,n)}:function(e,t,o,r){void 0===r&&(r=o),e[r]=t[o]}),n=this&&this.__exportStar||function(e,t){for(var o in e)"default"===o||Object.prototype.hasOwnProperty.call(t,o)||r(t,e,o)};Object.defineProperty(t,"__esModule",{value:!0}),n(o(/*! ./helpers/NamingHelper */"../../utils/dist/helpers/NamingHelper.js"),t),n(o(/*! ./helpers/ColorHelper */"../../utils/dist/helpers/ColorHelper.js"),t),n(o(/*! ./helpers/TokenHelper */"../../utils/dist/helpers/TokenHelper.js"),t),n(o(/*! ./helpers/CSSHelper */"../../utils/dist/helpers/CSSHelper.js"),t),n(o(/*! ./helpers/FileHelper */"../../utils/dist/helpers/FileHelper.js"),t),n(o(/*! ./helpers/ThemeHelper */"../../utils/dist/helpers/ThemeHelper.js"),t),n(o(/*! ./helpers/FileNameHelper */"../../utils/dist/helpers/FileNameHelper.js"),t),n(o(/*! ./helpers/GeneralHelper */"../../utils/dist/helpers/GeneralHelper.js"),t),n(o(/*! ./enums/StringCase */"../../utils/dist/enums/StringCase.js"),t),n(o(/*! ./enums/ColorFormat */"../../utils/dist/enums/ColorFormat.js"),t),n(o(/*! ./helpers/TokenNameTracker */"../../utils/dist/helpers/TokenNameTracker.js"),t),n(o(/*! ./helpers/WriteTokenPropStore */"../../utils/dist/helpers/WriteTokenPropStore.js"),t),n(o(/*! ./helpers/KotlinHelper */"../../utils/dist/helpers/KotlinHelper.js"),t)},"../../utils/node_modules/@supernovaio/sdk-exporters/build/supernova-sdk-typescript.js":
/*!*********************************************************************************************!*\
  !*** ../../utils/node_modules/@supernovaio/sdk-exporters/build/supernova-sdk-typescript.js ***!
  \*********************************************************************************************/(e,t)=>{(()=>{"use strict";var e={1:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.GradientType=void 0,function(e){e.linear="Linear",e.radial="Radial",e.angular="Angular"}(o||(t.GradientType=o={}))},306:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockTextPropertyStyle=void 0,function(e){e.title1="Title1",e.title2="Title2",e.title3="Title3",e.title4="Title4",e.title5="Title5",e.default="Default",e.defaultBold="DefaultBold",e.defaultSemibold="DefaultSemibold",e.small="Small",e.smallBold="SmallBold",e.smallSemibold="SmallSemibold",e.custom="Custom"}(o||(t.DocsBlockTextPropertyStyle=o={}))},899:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.AssetScaleType=void 0,function(e){e.aspectFill="AspectFill",e.aspectFit="AspectFit"}(o||(t.AssetScaleType=o={}))},915:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.AssetScale=void 0,function(e){e.x1="x1",e.x2="x2",e.x3="x3",e.x4="x4"}(o||(t.AssetScale=o={}))},922:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.TextCase=void 0,function(e){e.original="Original",e.upper="Upper",e.lower="Lower",e.camel="Camel",e.smallCaps="SmallCaps"}(o||(t.TextCase=o={}))},934:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.IconSet=void 0,function(e){e.checkCircle="CheckCircle",e.crossCircle="CrossCircle",e.alert="Alert"}(o||(t.IconSet=o={}))},1160:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.ALL_BORDER_POSITIONS=t.BorderPosition=void 0,function(e){e.inside="Inside",e.center="Center",e.outside="Outside"}(o||(t.BorderPosition=o={})),t.ALL_BORDER_POSITIONS=[o.inside,o.center,o.outside]},1233:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsEntityType=void 0,function(e){e.group="Group",e.page="Page"}(o||(t.DocsEntityType=o={}))},1255:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.FrameAlignment=void 0,function(e){e.frameHeight="FrameHeight",e.center="Center"}(o||(t.FrameAlignment=o={}))},1423:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyPageAssetType=void 0,function(e){e.image="image",e.figmaFrame="figmaFrame"}(o||(t.DocumentationLegacyPageAssetType=o={}))},1601:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyPageBlockThemeType=void 0,function(e){e.override="Override",e.comparison="Comparison"}(o||(t.DocumentationLegacyPageBlockThemeType=o={}))},1846:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyPageBlockType=void 0,function(e){e.text="Text",e.heading="Heading",e.code="Code",e.unorderedList="UnorderedList",e.orderedList="OrderedList",e.quote="Quote",e.callout="Callout",e.divider="Divider",e.image="Image",e.token="Token",e.tokenList="TokenList",e.tokenGroup="TokenGroup",e.shortcuts="Shortcuts",e.link="Link",e.figmaEmbed="FigmaEmbed",e.youtubeEmbed="YoutubeEmbed",e.storybookEmbed="StorybookEmbed",e.genericEmbed="Embed",e.figmaFrames="FigmaFrames",e.custom="Custom",e.renderCode="RenderCode",e.componentAssets="ComponentAssets",e.column="Column",e.columnItem="ColumnItem",e.tabs="Tabs",e.tabItem="TabItem",e.table="Table",e.tableCell="TableCell",e.tableRow="TableRow"}(o||(t.DocumentationLegacyPageBlockType=o={}))},2123:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyGroupBehavior=void 0,function(e){e.group="Group",e.tabs="Tabs"}(o||(t.DocumentationLegacyGroupBehavior=o={}))},2657:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyPageBlockShortcut=t.DocumentationLegacyPageBlockShortcutType=void 0,function(e){e.external="External",e.internal="Internal"}(o||(t.DocumentationLegacyPageBlockShortcutType=o={})),t.DocumentationLegacyPageBlockShortcut=class{constructor(e){var t;e.url?this.type=o.external:this.type=o.internal,this.title=this.shortcutTitleFromModel(e,this.type),this.description=this.shortcutDescriptionFromModel(e,this.type),this.previewUrl=this.shortcutPreviewUrlFromModel(e),this.type===o.internal&&(null===(t=e.documentationItemPreview)||void 0===t?void 0:t.valid)&&e.documentationItemId?this.internalId=e.documentationItemId:(this.internalId=null,this.type===o.external&&e.url?this.externalUrl=e.url:this.externalUrl=null)}shortcutTitleFromModel(e,t){var r,n,i,a,l;let s=null;return e.title&&e.title.trim().length>0?s=e.title:t===o.internal?s=null!==(n=null===(r=e.documentationItemPreview)||void 0===r?void 0:r.title)&&void 0!==n?n:null:t===o.external&&(s=null!==(l=null!==(a=null===(i=e.urlPreview)||void 0===i?void 0:i.title)&&void 0!==a?a:e.url)&&void 0!==l?l:null),s&&0!==s.trim().length?s:null}shortcutDescriptionFromModel(e,t){var r;let n=null;return e.description&&e.description.trim().length>0?n=e.description:t===o.external&&(n=null===(r=e.urlPreview)||void 0===r?void 0:r.description),n&&0!==n.trim().length?n:null}shortcutPreviewUrlFromModel(e){var t,o,r,n,i;return null!==(i=null!==(r=null!==(t=e.assetUrl)&&void 0!==t?t:null===(o=e.asset)||void 0===o?void 0:o.url)&&void 0!==r?r:null===(n=e.urlPreview)||void 0===n?void 0:n.thumbnailUrl)&&void 0!==i?i:null}}},2674:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.RichTextSpanAttributeType=void 0,function(e){e.bold="Bold",e.italic="Italic",e.link="Link",e.strikethrough="Strikethrough",e.code="Code"}(o||(t.RichTextSpanAttributeType=o={}))},2802:(e,t)=>{var o,r;Object.defineProperty(t,"__esModule",{value:!0}),t.PulsarExecutor=t.OutputFileType=void 0,function(e){e.copyRemoteUrl="copyRemoteUrl",e.text="text",e.binary="binary"}(o||(t.OutputFileType=o={})),function(e){e.supernova="supernova",e.local="local"}(r||(t.PulsarExecutor=r={}))},3607:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.WorkspaceSubscriptionStatus=void 0,function(e){e.active="active",e.gracePeriod="gracePeriod",e.cancelled="cancelled",e.suspended="suspended"}(o||(t.WorkspaceSubscriptionStatus=o={}))},3718:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.FrameLayout=void 0,function(e){e.c8="C8",e.c7="C7",e.c6="C6",e.c5="C5",e.c4="C4",e.c3="C3",e.c2="C2",e.c1="C1",e.c175="C1_75"}(o||(t.FrameLayout=o={}))},3733:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockBehaviorSelectionType=void 0,function(e){e.entity="Entity",e.group="Group",e.entityAndGroup="EntityAndGroup"}(o||(t.DocsBlockBehaviorSelectionType=o={}))},3788:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DT_TOKEN_TYPES=t.tokenTypeIsReferencable=t.REFERENCABLE_TOKEN_TYPES=t.REPLACABLE_TOKEN_TYPES=t.tokenTypeIsNonPure=t.tokenTypeIsPure=t.PURE_TOKEN_TYPES=t.ALL_TOKEN_TYPES=t.MS_DIMENSION_TOKEN_TYPES=t.RAW_DIMENSION_TOKEN_TYPES=t.DIMENSION_TOKEN_TYPES=t.OPTION_TOKEN_TYPES=t.STRING_TOKEN_TYPES=t.TokenType=void 0,function(e){e.color="Color",e.typography="Typography",e.shadow="Shadow",e.border="Border",e.gradient="Gradient",e.blur="Blur",e.radius="BorderRadius",e.borderWidth="BorderWidth",e.duration="Duration",e.fontSize="FontSize",e.dimension="Dimension",e.letterSpacing="LetterSpacing",e.lineHeight="LineHeight",e.opacity="Opacity",e.paragraphSpacing="ParagraphSpacing",e.size="Size",e.space="Space",e.zIndex="ZIndex",e.textDecoration="TextDecoration",e.textCase="TextCase",e.visibility="Visibility",e.fontFamily="FontFamily",e.fontWeight="FontWeight",e.string="String",e.productCopy="ProductCopy"}(o||(t.TokenType=o={})),t.STRING_TOKEN_TYPES=[o.string,o.productCopy,o.fontFamily,o.fontWeight],t.OPTION_TOKEN_TYPES=[o.textCase,o.textDecoration,o.visibility],t.DIMENSION_TOKEN_TYPES=[o.dimension,o.size,o.space,o.opacity,o.fontSize,o.lineHeight,o.letterSpacing,o.paragraphSpacing,o.borderWidth,o.radius,o.duration,o.zIndex],t.RAW_DIMENSION_TOKEN_TYPES=[o.opacity,o.zIndex],t.MS_DIMENSION_TOKEN_TYPES=[o.duration],t.ALL_TOKEN_TYPES=[...t.DIMENSION_TOKEN_TYPES,...t.STRING_TOKEN_TYPES,...t.OPTION_TOKEN_TYPES,o.color,o.gradient,o.border,o.radius,o.shadow,o.typography,o.blur],t.PURE_TOKEN_TYPES=[...t.DIMENSION_TOKEN_TYPES,...t.STRING_TOKEN_TYPES,...t.OPTION_TOKEN_TYPES],t.tokenTypeIsPure=e=>t.PURE_TOKEN_TYPES.includes(e),t.tokenTypeIsNonPure=e=>!(0,t.tokenTypeIsPure)(e),t.REPLACABLE_TOKEN_TYPES=[o.color,...t.DIMENSION_TOKEN_TYPES,...t.STRING_TOKEN_TYPES,...t.OPTION_TOKEN_TYPES],t.REFERENCABLE_TOKEN_TYPES=[o.color,...t.DIMENSION_TOKEN_TYPES,o.fontFamily,o.fontWeight,o.textCase,o.textDecoration],t.tokenTypeIsReferencable=e=>t.REFERENCABLE_TOKEN_TYPES.includes(e),t.DT_TOKEN_TYPES=[o.color,o.shadow,o.gradient,o.typography,o.border,...t.DIMENSION_TOKEN_TYPES,o.fontFamily,o.fontWeight,o.string,...t.OPTION_TOKEN_TYPES]},4068:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsEntityGroupBehavior=void 0,function(e){e.group="Group",e.tabs="Tabs"}(o||(t.DocsEntityGroupBehavior=o={}))},4290:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.WorkspaceSubscriptionProductCode=void 0,function(e){e.free="free",e.team="team",e.teamTest="team_test",e.company="company",e.enterprise="enterprise"}(o||(t.WorkspaceSubscriptionProductCode=o={}))},4379:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.SupernovaError=void 0;class o extends Error{constructor(e,t,o,r,n,i,a){super(e),this.code=t,this.status=o,this.formErrors=r,this.requestId=n,this.serverTime=i,this.url=a}static fromNetworkResponse(e,t,r){var n,i,a;return new o(e.message,e.errorCode||e.reason||e.label||null,e.code||t,null!==(n=e.formErrors)&&void 0!==n?n:null,null!==(i=e.requestId)&&void 0!==i?i:null,null!==(a=e.serverTime)&&void 0!==a?a:null,r)}static fromNoNetworkResponse(e){return new o("No network or internet unreachable","NO_NETWORK",12163,null,(new Date).toISOString(),null,e)}static fromCode(e){return new o(e,e,null,null,null,null,null)}static fromMessage(e){return new o(e,null,null,null,null,null,null)}isFieldErrored(e){return void 0!==this.formErrors.find((t=>t.key===e))}errorForField(e){var t;return null!==(t=this.formErrors.find((t=>t.key===e)))&&void 0!==t?t:null}toString(){var e,t,o,r,n,i;return`\n    Error thrown: ${this.message}\n\n    Code: ${null!==(e=this.code)&&void 0!==e?e:"-"}\n\n    Status: ${null!==(t=this.status)&&void 0!==t?t:"-"}\n\n    Fields: ${JSON.stringify(this.formErrors,null,2)}\n\n    Request ID: ${null!==(o=this.requestId)&&void 0!==o?o:"-"}\n\n    Server time: ${null!==(r=this.serverTime)&&void 0!==r?r:"-"}\n\n    Network URL: ${null!==(n=this.url)&&void 0!==n?n:"-"}\n\n    Stack: ${null!==(i=this.stack)&&void 0!==i?i:"-"}\n    `}toHumanReadable(){return`${this.message}${this.requestId?` (request ${this.requestId})`:""}`}}t.SupernovaError=o},4546:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.ALL_BORDER_STYLES=t.BorderStyle=void 0,function(e){e.dashed="Dashed",e.dotted="Dotted",e.solid="Solid",e.groove="Groove"}(o||(t.BorderStyle=o={})),t.ALL_BORDER_STYLES=[o.dashed,o.dotted,o.solid,o.groove]},4652:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.SourceType=void 0,function(e){e.figma="Figma",e.tokenStudio="TokenStudio",e.figmaVariablesPlugin="FigmaVariablesPlugin"}(o||(t.SourceType=o={}))},5102:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyCalloutType=void 0,function(e){e.info="Info",e.success="Success",e.warning="Warning",e.error="Error"}(o||(t.DocumentationLegacyCalloutType=o={}))},5503:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.WorkspaceSubscriptionPlanInterval=void 0,function(e){e.yearly="yearly",e.monthly="monthly"}(o||(t.WorkspaceSubscriptionPlanInterval=o={}))},5651:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockBehaviorDataType=void 0,function(e){e.item="Item",e.token="Token",e.asset="Asset",e.component="Component",e.figmaNode="FigmaNode",e.figmaComponent="FigmaComponent"}(o||(t.DocsBlockBehaviorDataType=o={}))},5673:(e,t)=>{var o;function r(e){switch(e.type){case o.documentationItem:return`@page:${e.documentationItemId}`;case o.pageHeading:return`@page:${e.documentationItemId}#${e.pageHeadingId}`;case o.url:return e.url;default:return}}Object.defineProperty(t,"__esModule",{value:!0}),t.linkAttributeToDocsLink=t.docsLinkToLinkAttributes=t.docsLinkToUrl=t.DocsLinkRefType=void 0,function(e){e.documentationItem="DocumentationItem",e.pageHeading="PageHeading",e.url="Url"}(o||(t.DocsLinkRefType=o={})),t.docsLinkToUrl=r,t.docsLinkToLinkAttributes=function(e){const t=r(e);if(t)return{href:t,target:e.openInNewTab?"_blank":"_self"}},t.linkAttributeToDocsLink=function(e,t){if(!e)return;const r="_blank"===t;if(e.startsWith("@page:")){if(e.includes("#")){const[t,n]=e.replace("@page:","").split("#");return{type:o.pageHeading,documentationItemId:t,pageHeadingId:n,openInNewTab:r}}return{type:o.documentationItem,documentationItemId:e.replace("@page:",""),openInNewTab:r}}return{type:o.url,url:e,openInNewTab:r}}},5695:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.CustomDomainErrorCode=void 0,function(e){e.generalError="GeneralError",e.dnsNotConfigured="DNSNotConfigured",e.maintenance="Maintenance"}(o||(t.CustomDomainErrorCode=o={}))},5883:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockItemPropertyOptionRenderingStyle=void 0,function(e){e.segmentedControl="SegmentedControl",e.toggleButton="ToggleButton",e.select="Select",e.checkbox="Checkbox"}(o||(t.DocsBlockItemPropertyOptionRenderingStyle=o={}))},5963:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockOptionRenderingStyle=void 0,function(e){e.segmentedControl="SegmentedControl",e.toggleButton="ToggleButton",e.select="Select",e.checkbox="Checkbox"}(o||(t.DocsBlockOptionRenderingStyle=o={}))},6141:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.VisibilityType=void 0,function(e){e.visible="Visible",e.hidden="Hidden"}(o||(t.VisibilityType=o={}))},6192:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.BlurType=void 0,function(e){e.layer="Layer",e.background="Background"}(o||(t.BlurType=o={}))},6298:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.WorkspaceNPMRegistryAuthType=void 0,function(e){e.basic="Basic",e.bearer="Bearer"}(o||(t.WorkspaceNPMRegistryAuthType=o={}))},6644:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockRichTextPropertyStyle=void 0,function(e){e.title1="Title1",e.title2="Title2",e.title3="Title3",e.title4="Title4",e.title5="Title5",e.quote="Quote",e.callout="Callout",e.default="Default"}(o||(t.DocsBlockRichTextPropertyStyle=o={}))},6839:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockItemPropertyType=void 0,function(e){e.richText="RichText",e.multiRichText="MultiRichText",e.text="Text",e.richTextEditor="RichTextEditor",e.boolean="Boolean",e.number="Number",e.singleSelect="SingleSelect",e.multiSelect="MultiSelect",e.image="Image",e.token="Token",e.tokenType="TokenType",e.tokenProperty="TokenProperty",e.component="Component",e.componentProperty="ComponentProperty",e.asset="Asset",e.assetProperty="AssetProperty",e.embedURL="EmbedURL",e.url="URL",e.markdown="Markdown",e.code="Code",e.codeSandbox="CodeSandbox",e.table="Table",e.divider="Divider",e.storybook="Storybook",e.color="Color",e.figmaNode="FigmaNode",e.figmaComponent="FigmaComponent"}(o||(t.DocsBlockItemPropertyType=o={}))},7040:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.TextDecoration=void 0,function(e){e.original="None",e.underline="Underline",e.strikethrough="Strikethrough"}(o||(t.TextDecoration=o={}))},7291:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockItemVariantLayoutWidth=void 0,function(e){e.c1="1",e.c2="2",e.c3="3",e.c4="4",e.c5="5",e.c6="6",e.c7="7",e.c8="8",e.c9="9",e.c10="10",e.c11="11",e.c12="12"}(o||(t.DocsBlockItemVariantLayoutWidth=o={}))},7379:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyItemType=void 0,function(e){e.group="Group",e.page="Page"}(o||(t.DocumentationLegacyItemType=o={}))},7476:(e,t)=>{var o,r;Object.defineProperty(t,"__esModule",{value:!0}),t.TextAlignment=t.Alignment=void 0,function(e){e.left="Left",e.center="Center",e.stretch="Stretch"}(o||(t.Alignment=o={})),function(e){e.left="Left",e.center="Center",e.right="Right"}(r||(t.TextAlignment=r={}))},7479:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockItemPropertyTextStyle=void 0,function(e){e.small="Small",e.regular="Regular",e.bold="Bold"}(o||(t.DocsBlockItemPropertyTextStyle=o={}))},7737:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.CustomDomainState=void 0,function(e){e.initial="Initial",e.domainSetupInProgress="DomainSetupInProgress",e.domainSetupFailed="DomainSetupFailed",e.domainSetupsSucces="DomainSetupSuccess",e.sslSetupInProgress="SSLSetupInProgress",e.sslSetupFailed="SSLSetupFailed",e.sslSetupSuccess="SSLSetupSuccess"}(o||(t.CustomDomainState=o={}))},7968:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.WorkspaceNPMRegistryType=void 0,function(e){e.npmJS="NPMJS",e.gitHub="GitHub",e.azureDevOps="AzureDevOps",e.artifactory="Artifactory",e.custom="Custom"}(o||(t.WorkspaceNPMRegistryType=o={}))},7971:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsSectionType=void 0,function(e){e.plain="Plain",e.tabs="Tabs"}(o||(t.DocsSectionType=o={}))},8042:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.ImportWarningType=void 0,function(e){e.UnsupportedFill="UnsupportedFill",e.UnsupportedStroke="UnsupportedStroke",e.UnsupportedEffect="UnsupportedEffect",e.StyleNotApplied="StyleNotApplied",e.NoPublishedStyles="NoPublishedStyles",e.NoPublishedComponents="NoPublishedComponents",e.NoPublishedAssets="NoPublishedAssets",e.NoVersionFound="NoVersionFound",e.ComponentHasNoThumbnail="ComponentHasNoThumbnail",e.DuplicateImportedStyleId="DuplicateImportedStyleId",e.DuplicateImportedStylePath="DuplicateImportedStylePath",e.NoPublishedElements="NoPublishedElements",e.NoUnpublishedStyles="NoUnpublishedStyles"}(o||(t.ImportWarningType=o={}))},8061:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockItemPropertyRichTextStyle=void 0,function(e){e.title1="Title1",e.title2="Title2",e.title3="Title3",e.title4="Title4",e.title5="Title5",e.quote="Quote",e.callout="Callout",e.ol="OL",e.ul="UL"}(o||(t.DocsBlockItemPropertyRichTextStyle=o={}))},8095:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockItemVariantLayoutType=void 0,function(e){e.column="Column",e.row="Row"}(o||(t.DocsBlockItemVariantLayoutType=o={}))},8607:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.MS_UNITS=t.PX_UNITS=t.RAW_UNITS=t.LINE_HEIGHT_UNITS=t.SIZE_UNITS=t.Unit=void 0,function(e){e.pixels="Pixels",e.percent="Percent",e.rem="Rem",e.ms="Ms",e.raw="Raw"}(o||(t.Unit=o={})),t.SIZE_UNITS=[o.pixels,o.percent,o.rem],t.LINE_HEIGHT_UNITS=[o.pixels,o.percent,o.rem,o.raw],t.RAW_UNITS=[o.raw],t.PX_UNITS=[o.pixels],t.MS_UNITS=[o.ms]},8738:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.AssetFormat=void 0,function(e){e.png="png",e.pdf="pdf",e.svg="svg"}(o||(t.AssetFormat=o={}))},8890:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockImagePropertyAspectRatio=void 0,function(e){e.auto="Auto",e.square="Square",e.landscape="Landscape",e.portrait="Portrait",e.wide="Wide"}(o||(t.DocsBlockImagePropertyAspectRatio=o={}))},9125:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.ShadowType=void 0,function(e){e.drop="Drop",e.inner="Inner"}(o||(t.ShadowType=o={}))},9133:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockOptionColor=void 0,function(e){e.green="Green",e.red="Red",e.yellow="Yellow",e.blue="Blue",e.purple="Purple",e.orange="Orange",e.pink="Pink",e.teal="Teal",e.grey="Grey",e.lightGrey="LightGrey",e.cyan="Cyan",e.fuchsia="Fuchsia"}(o||(t.DocsBlockOptionColor=o={}))},9377:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockItemEntityType=void 0,function(e){e.token="Token",e.tokenGroup="TokenGroup",e.asset="Asset",e.assetGroup="AssetGroup",e.component="Component",e.componentGroup="ComponentGroup"}(o||(t.DocsBlockItemEntityType=o={}))},9478:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.convertRemoteToUserRole=t.UserRole=void 0;const r=o(4379);var n;!function(e){e.owner="Owner",e.admin="Admin",e.creator="Creator",e.contributor="Contributor",e.billing="Billing",e.viewer="Viewer"}(n||(t.UserRole=n={})),t.convertRemoteToUserRole=e=>{switch(e){case"Owner":return n.owner;case"Admin":return n.admin;case"Creator":return n.creator;case"Contributor":return n.contributor;case"Billing":return n.billing;case"Viewer":return n.viewer;default:throw r.SupernovaError.fromMessage(`Unknown role: ${e}`)}}},9896:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyHeadingType=void 0,function(e){e[e.h1=1]="h1",e[e.h2=2]="h2",e[e.h3=3]="h3"}(o||(t.DocumentationLegacyHeadingType=o={}))},9932:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.docsImageRefToUrl=t.DocsImageRefType=void 0,function(e){e.resource="Resource",e.figmaNode="FigmaNode"}(o||(t.DocsImageRefType=o={})),t.docsImageRefToUrl=function(e,t,r){var n;if(e)switch(e.type){case o.resource:return null===(n=e.resource)||void 0===n?void 0:n.url;case o.figmaNode:if(!e.figmaNode||!e.figmaNode.sourceId||!e.figmaNode.frameReferenceId)return;return t.resources.getFigmaFrameHostedUrl({designSystemId:r.dsId,versionId:r.versionId},e.figmaNode.frameReferenceId);default:return}}}},o={};function r(t){var n=o[t];if(void 0!==n)return n.exports;var i=o[t]={exports:{}};return e[t](i,i.exports,r),i.exports}var n={};(()=>{var e=n;Object.defineProperty(e,"__esModule",{value:!0}),e.TokenType=e.TextDecoration=e.TextCase=e.ShadowType=e.RichTextSpanAttributeType=e.GradientType=e.FrameLayout=e.FrameAlignment=e.IconSet=e.SourceType=e.DocsImageRefType=e.DocsLinkRefType=e.DocsSectionType=e.DocsEntityType=e.DocsEntityGroupBehavior=e.DocsBlockTextPropertyStyle=e.DocsBlockRichTextPropertyStyle=e.DocsBlockOptionColor=e.DocsBlockOptionRenderingStyle=e.DocsBlockItemVariantLayoutWidth=e.DocsBlockItemVariantLayoutType=e.DocsBlockItemPropertyType=e.DocsBlockItemPropertyTextStyle=e.DocsBlockItemPropertyRichTextStyle=e.DocsBlockItemPropertyOptionRenderingStyle=e.DocsBlockItemEntityType=e.DocsBlockImagePropertyAspectRatio=e.DocsBlockBehaviorSelectionType=e.DocsBlockBehaviorDataType=e.DocumentationLegacyPageBlockShortcutType=e.DocumentationLegacyPageBlockThemeType=e.DocumentationLegacyPageBlockType=e.DocumentationLegacyPageAssetType=e.DocumentationLegacyItemType=e.DocumentationLegacyHeadingType=e.DocumentationLegacyGroupBehavior=e.DocumentationLegacyCalloutType=e.BorderStyle=e.BorderPosition=e.BlurType=e.AssetScaleType=e.AssetScale=e.AssetFormat=e.Alignment=e.ALL_TOKEN_TYPES=e.ALL_BORDER_STYLES=e.ALL_BORDER_POSITIONS=e.OPTION_TOKEN_TYPES=e.STRING_TOKEN_TYPES=e.DIMENSION_TOKEN_TYPES=void 0,e.PulsarExecutor=e.OutputFileType=e.CustomDomainState=e.CustomDomainErrorCode=e.ImportWarningType=e.WorkspaceNPMRegistryType=e.WorkspaceNPMRegistryAuthType=e.WorkspaceSubscriptionStatus=e.WorkspaceSubscriptionProductCode=e.WorkspaceSubscriptionPlanInterval=e.VisibilityType=e.UserRole=e.Unit=void 0;var t=r(3788);Object.defineProperty(e,"DIMENSION_TOKEN_TYPES",{enumerable:!0,get:function(){return t.DIMENSION_TOKEN_TYPES}}),Object.defineProperty(e,"STRING_TOKEN_TYPES",{enumerable:!0,get:function(){return t.STRING_TOKEN_TYPES}}),Object.defineProperty(e,"OPTION_TOKEN_TYPES",{enumerable:!0,get:function(){return t.OPTION_TOKEN_TYPES}});var o=r(1160);Object.defineProperty(e,"ALL_BORDER_POSITIONS",{enumerable:!0,get:function(){return o.ALL_BORDER_POSITIONS}});var i=r(4546);Object.defineProperty(e,"ALL_BORDER_STYLES",{enumerable:!0,get:function(){return i.ALL_BORDER_STYLES}});var a=r(3788);Object.defineProperty(e,"ALL_TOKEN_TYPES",{enumerable:!0,get:function(){return a.ALL_TOKEN_TYPES}});var l=r(7476);Object.defineProperty(e,"Alignment",{enumerable:!0,get:function(){return l.Alignment}});var s=r(8738);Object.defineProperty(e,"AssetFormat",{enumerable:!0,get:function(){return s.AssetFormat}});var c=r(915);Object.defineProperty(e,"AssetScale",{enumerable:!0,get:function(){return c.AssetScale}});var u=r(899);Object.defineProperty(e,"AssetScaleType",{enumerable:!0,get:function(){return u.AssetScaleType}});var p=r(6192);Object.defineProperty(e,"BlurType",{enumerable:!0,get:function(){return p.BlurType}});var d=r(1160);Object.defineProperty(e,"BorderPosition",{enumerable:!0,get:function(){return d.BorderPosition}});var f=r(4546);Object.defineProperty(e,"BorderStyle",{enumerable:!0,get:function(){return f.BorderStyle}});var T=r(5102);Object.defineProperty(e,"DocumentationLegacyCalloutType",{enumerable:!0,get:function(){return T.DocumentationLegacyCalloutType}});var m=r(2123);Object.defineProperty(e,"DocumentationLegacyGroupBehavior",{enumerable:!0,get:function(){return m.DocumentationLegacyGroupBehavior}});var y=r(9896);Object.defineProperty(e,"DocumentationLegacyHeadingType",{enumerable:!0,get:function(){return y.DocumentationLegacyHeadingType}});var g=r(7379);Object.defineProperty(e,"DocumentationLegacyItemType",{enumerable:!0,get:function(){return g.DocumentationLegacyItemType}});var h=r(1423);Object.defineProperty(e,"DocumentationLegacyPageAssetType",{enumerable:!0,get:function(){return h.DocumentationLegacyPageAssetType}});var b=r(1846);Object.defineProperty(e,"DocumentationLegacyPageBlockType",{enumerable:!0,get:function(){return b.DocumentationLegacyPageBlockType}});var S=r(1601);Object.defineProperty(e,"DocumentationLegacyPageBlockThemeType",{enumerable:!0,get:function(){return S.DocumentationLegacyPageBlockThemeType}});var k=r(2657);Object.defineProperty(e,"DocumentationLegacyPageBlockShortcutType",{enumerable:!0,get:function(){return k.DocumentationLegacyPageBlockShortcutType}});var v=r(5651);Object.defineProperty(e,"DocsBlockBehaviorDataType",{enumerable:!0,get:function(){return v.DocsBlockBehaviorDataType}});var C=r(3733);Object.defineProperty(e,"DocsBlockBehaviorSelectionType",{enumerable:!0,get:function(){return C.DocsBlockBehaviorSelectionType}});var P=r(8890);Object.defineProperty(e,"DocsBlockImagePropertyAspectRatio",{enumerable:!0,get:function(){return P.DocsBlockImagePropertyAspectRatio}});var x=r(9377);Object.defineProperty(e,"DocsBlockItemEntityType",{enumerable:!0,get:function(){return x.DocsBlockItemEntityType}});var O=r(5883);Object.defineProperty(e,"DocsBlockItemPropertyOptionRenderingStyle",{enumerable:!0,get:function(){return O.DocsBlockItemPropertyOptionRenderingStyle}});var D=r(8061);Object.defineProperty(e,"DocsBlockItemPropertyRichTextStyle",{enumerable:!0,get:function(){return D.DocsBlockItemPropertyRichTextStyle}});var _=r(7479);Object.defineProperty(e,"DocsBlockItemPropertyTextStyle",{enumerable:!0,get:function(){return _.DocsBlockItemPropertyTextStyle}});var I=r(6839);Object.defineProperty(e,"DocsBlockItemPropertyType",{enumerable:!0,get:function(){return I.DocsBlockItemPropertyType}});var E=r(8095);Object.defineProperty(e,"DocsBlockItemVariantLayoutType",{enumerable:!0,get:function(){return E.DocsBlockItemVariantLayoutType}});var N=r(7291);Object.defineProperty(e,"DocsBlockItemVariantLayoutWidth",{enumerable:!0,get:function(){return N.DocsBlockItemVariantLayoutWidth}});var F=r(5963);Object.defineProperty(e,"DocsBlockOptionRenderingStyle",{enumerable:!0,get:function(){return F.DocsBlockOptionRenderingStyle}});var R=r(9133);Object.defineProperty(e,"DocsBlockOptionColor",{enumerable:!0,get:function(){return R.DocsBlockOptionColor}});var B=r(6644);Object.defineProperty(e,"DocsBlockRichTextPropertyStyle",{enumerable:!0,get:function(){return B.DocsBlockRichTextPropertyStyle}});var j=r(306);Object.defineProperty(e,"DocsBlockTextPropertyStyle",{enumerable:!0,get:function(){return j.DocsBlockTextPropertyStyle}});var w=r(4068);Object.defineProperty(e,"DocsEntityGroupBehavior",{enumerable:!0,get:function(){return w.DocsEntityGroupBehavior}});var L=r(1233);Object.defineProperty(e,"DocsEntityType",{enumerable:!0,get:function(){return L.DocsEntityType}});var $=r(7971);Object.defineProperty(e,"DocsSectionType",{enumerable:!0,get:function(){return $.DocsSectionType}});var M=r(5673);Object.defineProperty(e,"DocsLinkRefType",{enumerable:!0,get:function(){return M.DocsLinkRefType}});var A=r(9932);Object.defineProperty(e,"DocsImageRefType",{enumerable:!0,get:function(){return A.DocsImageRefType}});var H=r(4652);Object.defineProperty(e,"SourceType",{enumerable:!0,get:function(){return H.SourceType}});var V=r(934);Object.defineProperty(e,"IconSet",{enumerable:!0,get:function(){return V.IconSet}});var W=r(1255);Object.defineProperty(e,"FrameAlignment",{enumerable:!0,get:function(){return W.FrameAlignment}});var U=r(3718);Object.defineProperty(e,"FrameLayout",{enumerable:!0,get:function(){return U.FrameLayout}});var K=r(1);Object.defineProperty(e,"GradientType",{enumerable:!0,get:function(){return K.GradientType}});var G=r(2674);Object.defineProperty(e,"RichTextSpanAttributeType",{enumerable:!0,get:function(){return G.RichTextSpanAttributeType}});var Y=r(9125);Object.defineProperty(e,"ShadowType",{enumerable:!0,get:function(){return Y.ShadowType}});var z=r(922);Object.defineProperty(e,"TextCase",{enumerable:!0,get:function(){return z.TextCase}});var q=r(7040);Object.defineProperty(e,"TextDecoration",{enumerable:!0,get:function(){return q.TextDecoration}});var Z=r(3788);Object.defineProperty(e,"TokenType",{enumerable:!0,get:function(){return Z.TokenType}});var J=r(8607);Object.defineProperty(e,"Unit",{enumerable:!0,get:function(){return J.Unit}});var X=r(9478);Object.defineProperty(e,"UserRole",{enumerable:!0,get:function(){return X.UserRole}});var Q=r(6141);Object.defineProperty(e,"VisibilityType",{enumerable:!0,get:function(){return Q.VisibilityType}});var ee=r(5503);Object.defineProperty(e,"WorkspaceSubscriptionPlanInterval",{enumerable:!0,get:function(){return ee.WorkspaceSubscriptionPlanInterval}});var te=r(4290);Object.defineProperty(e,"WorkspaceSubscriptionProductCode",{enumerable:!0,get:function(){return te.WorkspaceSubscriptionProductCode}});var oe=r(3607);Object.defineProperty(e,"WorkspaceSubscriptionStatus",{enumerable:!0,get:function(){return oe.WorkspaceSubscriptionStatus}});var re=r(6298);Object.defineProperty(e,"WorkspaceNPMRegistryAuthType",{enumerable:!0,get:function(){return re.WorkspaceNPMRegistryAuthType}});var ne=r(7968);Object.defineProperty(e,"WorkspaceNPMRegistryType",{enumerable:!0,get:function(){return ne.WorkspaceNPMRegistryType}});var ie=r(8042);Object.defineProperty(e,"ImportWarningType",{enumerable:!0,get:function(){return ie.ImportWarningType}});var ae=r(5695);Object.defineProperty(e,"CustomDomainErrorCode",{enumerable:!0,get:function(){return ae.CustomDomainErrorCode}});var le=r(7737);Object.defineProperty(e,"CustomDomainState",{enumerable:!0,get:function(){return le.CustomDomainState}});var se=r(2802);Object.defineProperty(e,"OutputFileType",{enumerable:!0,get:function(){return se.OutputFileType}}),Object.defineProperty(e,"PulsarExecutor",{enumerable:!0,get:function(){return se.PulsarExecutor}})})();var i=t;for(var a in n)i[a]=n[a];n.__esModule&&Object.defineProperty(i,"__esModule",{value:!0})})()},"../../utils/node_modules/change-case/dist/index.js":
/*!**********************************************************!*\
  !*** ../../utils/node_modules/change-case/dist/index.js ***!
  \**********************************************************/(e,t,o)=>{"use strict";o.r(t),o.d(t,{camelCase:()=>d,capitalCase:()=>m,constantCase:()=>y,dotCase:()=>g,kebabCase:()=>h,noCase:()=>p,pascalCase:()=>f,pascalSnakeCase:()=>T,pathCase:()=>b,sentenceCase:()=>S,snakeCase:()=>k,split:()=>c,splitSeparateNumbers:()=>u,trainCase:()=>v});const r=/([\p{Ll}\d])(\p{Lu})/gu,n=/(\p{Lu})([\p{Lu}][\p{Ll}])/gu,i=/(\d)\p{Ll}|(\p{L})\d/u,a=/[^\p{L}\d]+/giu,l="$1\0$2",s="";function c(e){let t=e.trim();t=t.replace(r,l).replace(n,l),t=t.replace(a,"\0");let o=0,i=t.length;for(;"\0"===t.charAt(o);)o++;if(o===i)return[];for(;"\0"===t.charAt(i-1);)i--;return t.slice(o,i).split(/\0/g)}function u(e){const t=c(e);for(let e=0;e<t.length;e++){const o=t[e],r=i.exec(o);if(r){const n=r.index+(r[1]??r[2]).length;t.splice(e,1,o.slice(0,n),o.slice(n))}}return t}function p(e,t){const[o,r,n]=D(e,t);return o+r.map(C(t?.locale)).join(t?.delimiter??" ")+n}function d(e,t){const[o,r,n]=D(e,t),i=C(t?.locale),a=P(t?.locale),l=t?.mergeAmbiguousCharacters?x(i,a):O(i,a);return o+r.map(((e,t)=>0===t?i(e):l(e,t))).join(t?.delimiter??"")+n}function f(e,t){const[o,r,n]=D(e,t),i=C(t?.locale),a=P(t?.locale),l=t?.mergeAmbiguousCharacters?x(i,a):O(i,a);return o+r.map(l).join(t?.delimiter??"")+n}function T(e,t){return m(e,{delimiter:"_",...t})}function m(e,t){const[o,r,n]=D(e,t),i=C(t?.locale),a=P(t?.locale);return o+r.map(x(i,a)).join(t?.delimiter??" ")+n}function y(e,t){const[o,r,n]=D(e,t);return o+r.map(P(t?.locale)).join(t?.delimiter??"_")+n}function g(e,t){return p(e,{delimiter:".",...t})}function h(e,t){return p(e,{delimiter:"-",...t})}function b(e,t){return p(e,{delimiter:"/",...t})}function S(e,t){const[o,r,n]=D(e,t),i=C(t?.locale),a=P(t?.locale),l=x(i,a);return o+r.map(((e,t)=>0===t?l(e):i(e))).join(t?.delimiter??" ")+n}function k(e,t){return p(e,{delimiter:"_",...t})}function v(e,t){return m(e,{delimiter:"-",...t})}function C(e){return!1===e?e=>e.toLowerCase():t=>t.toLocaleLowerCase(e)}function P(e){return!1===e?e=>e.toUpperCase():t=>t.toLocaleUpperCase(e)}function x(e,t){return o=>`${t(o[0])}${e(o.slice(1))}`}function O(e,t){return(o,r)=>{const n=o[0];return(r>0&&n>="0"&&n<="9"?"_"+n:t(n))+e(o.slice(1))}}function D(e,t={}){const o=t.split??(t.separateNumbers?u:c),r=t.prefixCharacters??s,n=t.suffixCharacters??s;let i=0,a=e.length;for(;i<e.length;){const t=e.charAt(i);if(!r.includes(t))break;i++}for(;a>i;){const t=a-1,o=e.charAt(t);if(!n.includes(o))break;a=t}return[e.slice(0,i),o(e.slice(i,a)),e.slice(a)]}}},t={};function o(r){var n=t[r];if(void 0!==n)return n.exports;var i=t[r]={exports:{}};return e[r].call(i.exports,i,i.exports,o),i.exports}o.d=(e,t)=>{for(var r in t)o.o(t,r)&&!o.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};o("./src/index.ts")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,