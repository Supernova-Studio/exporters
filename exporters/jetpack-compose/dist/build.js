(()=>{var e={"../../utils/dist/enums/ColorFormat.js":
/*!*********************************************!*\
  !*** ../../utils/dist/enums/ColorFormat.js ***!
  \*********************************************/(e,t)=>{"use strict";var o;Object.defineProperty(t,"__esModule",{value:!0}),t.ColorFormat=void 0,function(e){e.rgb="rgb",e.rgba="rgba",e.smartRgba="smartRgba",e.hex6="hex6",e.hex8="hex8",e.hashHex6="hashHex6",e.hashHex8="hashHex8",e.smartHashHex="smartHashHex",e.smartHex="smartHex",e.hsl="hsl",e.hsla="hsla",e.smartHsla="smartHsla",e.smartUIColor="smartUIColor",e.oklch="oklch",e.oklcha="oklcha",e.smartOklch="smartOklch"}(o||(t.ColorFormat=o={}))},"../../utils/dist/enums/StringCase.js":
/*!********************************************!*\
  !*** ../../utils/dist/enums/StringCase.js ***!
  \********************************************/(e,t)=>{"use strict";var o;Object.defineProperty(t,"__esModule",{value:!0}),t.StringCase=void 0,function(e){e.camelCase="camelCase",e.capitalCase="capitalCase",e.constantCase="constantCase",e.dotCase="dotCase",e.trainCase="trainCase",e.noCase="noCase",e.kebabCase="kebabCase",e.pascalCase="pascalCase",e.pathCase="pathCase",e.sentenceCase="sentenceCase",e.snakeCase="snakeCase",e.flatCase="flatCase"}(o||(t.StringCase=o={}))},"../../utils/dist/helpers/CSSHelper.js":
/*!*********************************************!*\
  !*** ../../utils/dist/helpers/CSSHelper.js ***!
  \*********************************************/(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CSSHelper=void 0;const r=o(/*! @supernovaio/sdk-exporters */"../../utils/node_modules/@supernovaio/sdk-exporters/build/supernova-sdk-typescript.js"),n=o(/*! ./TokenHelper */"../../utils/dist/helpers/TokenHelper.js"),i=o(/*! ./ColorHelper */"../../utils/dist/helpers/ColorHelper.js");t.CSSHelper=class{static tokenToCSS(e,t,o){let n;switch(e.tokenType){case r.TokenType.color:n=this.colorTokenValueToCSS(e.value,t,o);break;case r.TokenType.border:n=this.borderTokenValueToCSS(e.value,t,o);break;case r.TokenType.gradient:n=this.gradientTokenValueToCSS(e.value,t,o);break;case r.TokenType.dimension:case r.TokenType.size:case r.TokenType.space:case r.TokenType.opacity:case r.TokenType.fontSize:case r.TokenType.lineHeight:case r.TokenType.letterSpacing:case r.TokenType.paragraphSpacing:case r.TokenType.borderWidth:case r.TokenType.radius:case r.TokenType.duration:case r.TokenType.zIndex:n=this.dimensionTokenValueToCSS(e.value,t,o);break;case r.TokenType.shadow:n=this.shadowTokenValueToCSS(e.value,t,o);break;case r.TokenType.fontWeight:n=this.fontWeightTokenValueToCSS(e.value,t,o);break;case r.TokenType.fontFamily:case r.TokenType.productCopy:case r.TokenType.string:n=this.stringTokenValueToCSS(e.value,t,o);break;case r.TokenType.textCase:case r.TokenType.textDecoration:case r.TokenType.visibility:n=this.optionTokenValueToCSS(e.value,t,o,e.tokenType);break;case r.TokenType.blur:n=this.blurTokenValueToCSS(e.value,t,o);break;case r.TokenType.typography:n=this.typographyTokenValueToCSS(e.value,t,o);break;default:throw new r.UnreachableCaseError(e.tokenType,"Unsupported token type for transformation to CSS:")}if(o.valueTransformer){const t=o.valueTransformer(n,e);if(void 0!==t)return t}return n}static colorTokenValueToCSS(e,t,o){return i.ColorHelper.formattedColorOrVariableName(e,t,o)}static borderTokenValueToCSS(e,t,o){const r=(0,n.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);if(r)return o.tokenToVariableRef(r);const i=this.dimensionTokenValueToCSS(e.width,t,o),a=this.borderStyleToCSS(e.style),s=this.colorTokenValueToCSS(e.color,t,o);this.borderPositionToCSS(e.position);return`${i} ${a} ${s}`}static gradientTokenValueToCSS(e,t,o){return e.map((e=>this.gradientLayerToCSS(e,t,o))).join(", ")}static gradientLayerToCSS(e,t,o){const a=(0,n.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);if(a)return o.tokenToVariableRef(a);const s=i.ColorHelper.roundToDecimals(e.to.x,o.decimals)-i.ColorHelper.roundToDecimals(e.from.x,o.decimals),l=i.ColorHelper.roundToDecimals(e.to.y,o.decimals)-i.ColorHelper.roundToDecimals(e.from.y,o.decimals),c=Math.atan2(l,s)*(180/Math.PI),u=()=>s>=0&&l>0||s>0&&l<=0||s<=0&&l<0?90+c:c-270;let p="";switch(e.type){case r.GradientType.linear:p=`linear-gradient(${u()}deg, `;break;case r.GradientType.radial:p="radial-gradient(circle, ";break;case r.GradientType.angular:p="conic-gradient(";break;default:p=`linear-gradient(${u()}deg, `}return`${p}${e.stops.map((e=>`${this.colorTokenValueToCSS(e.color,t,o)} ${i.ColorHelper.roundToDecimals(100*e.position,o.decimals)}%`)).join(", ")})`}static dimensionTokenValueToCSS(e,t,o){const a=(0,n.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);if(a)return o.tokenToVariableRef(a);if(o.forceRemUnit&&e.unit===r.Unit.pixels){const t=o.remBase||16,r=e.measure/t;return`${i.ColorHelper.roundToDecimals(r,o.decimals)}rem`}return`${i.ColorHelper.roundToDecimals(e.measure,o.decimals)}${this.unitToCSS(e.unit)}`}static shadowTokenValueToCSS(e,t,o){return e.map((e=>this.shadowLayerToCSS(e,t,o))).join(", ")}static shadowLayerToCSS(e,t,o){const a=(0,n.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);if(a)return o.tokenToVariableRef(a);const s=e=>{if(o.forceRemUnit){const t=e/(o.remBase||16);return`${i.ColorHelper.roundToDecimals(t,o.decimals)}rem`}return`${e}px`};return`${e.type===r.ShadowType.inner?"inset ":""}${s(e.x)} ${s(e.y)} ${s(e.radius)} ${s(e.spread)} ${this.colorTokenValueToCSS({...e.color,...e.opacity&&{opacity:e.opacity}},t,o)}`}static fontWeightTokenValueToCSS(e,t,o){const r=(0,n.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);if(r)return o.tokenToVariableRef(r);return`${(0,n.normalizeTextWeight)(e.text)}`}static stringTokenValueToCSS(e,t,o){const r=(0,n.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);return r?o.tokenToVariableRef(r):`"${e.text}"`}static optionTokenValueToCSS(e,t,o,i){const a=(0,n.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);return a?o.tokenToVariableRef(a):i===r.TokenType.textCase?this.textCaseToCSS(e.value):i===r.TokenType.textDecoration?this.textDecorationToCSS(e.value):e.value.toLowerCase()}static blurTokenValueToCSS(e,t,o){const r=(0,n.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);return r?o.tokenToVariableRef(r):`blur(${this.dimensionTokenValueToCSS(e.radius,t,o)})`}static typographyTokenValueToCSS(e,t,o){const i=(0,n.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);if(i)return o.tokenToVariableRef(i);const a=(0,n.sureOptionalReference)(e.fontFamily.referencedTokenId,t,o.allowReferences),s=(0,n.sureOptionalReference)(e.fontWeight.referencedTokenId,t,o.allowReferences),l=(0,n.sureOptionalReference)(e.textDecoration.referencedTokenId,t,o.allowReferences),c=(0,n.sureOptionalReference)(e.textCase.referencedTokenId,t,o.allowReferences),u={fontFamily:a?o.tokenToVariableRef(a):e.fontFamily.text,fontWeight:s?o.tokenToVariableRef(s):(0,n.normalizeTextWeight)(e.fontWeight.text),textDecoration:l?o.tokenToVariableRef(l):e.textDecoration.value===r.TextDecoration.original?this.textDecorationToCSS(e.textDecoration.value):void 0,textCase:c?o.tokenToVariableRef(c):e.textCase.value===r.TextCase.original?this.textCaseToCSS(e.textCase.value):void 0,caps:e.textCase.value===r.TextCase.smallCaps,fontSize:this.dimensionTokenValueToCSS(e.fontSize,t,o),lineHeight:e.lineHeight?this.dimensionTokenValueToCSS(e.lineHeight,t,o):void 0},p=u.fontSize;return`${u.caps?"small-caps ":""}${u.fontWeight} ${u.lineHeight?`${p}/${u.lineHeight}`:p} ${a?u.fontFamily:`"${u.fontFamily}"`}`}static borderStyleToCSS(e){switch(e){case r.BorderStyle.dashed:return"dashed";case r.BorderStyle.dotted:return"dotted";case r.BorderStyle.solid:return"solid";case r.BorderStyle.groove:return"groove";default:return"solid"}}static borderPositionToCSS(e){switch(e){case r.BorderPosition.center:return"center";case r.BorderPosition.inside:return"inside";case r.BorderPosition.outside:default:return"outside"}}static unitToCSS(e){switch(e){case r.Unit.percent:return"%";case r.Unit.pixels:return"px";case r.Unit.rem:return"rem";case r.Unit.raw:return"";case r.Unit.ms:return"ms";default:return"px"}}static textCaseToCSS(e){switch(e){case r.TextCase.original:return"none";case r.TextCase.upper:return"uppercase";case r.TextCase.lower:return"lowercase";case r.TextCase.camel:return"capitalize";case r.TextCase.smallCaps:return"small-caps"}}static textDecorationToCSS(e){switch(e){case r.TextDecoration.original:return"none";case r.TextDecoration.underline:return"underline";case r.TextDecoration.strikethrough:return"line-through"}}}},"../../utils/dist/helpers/ColorHelper.js":
/*!***********************************************!*\
  !*** ../../utils/dist/helpers/ColorHelper.js ***!
  \***********************************************/(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ColorHelper=void 0;const r=o(/*! ../enums/ColorFormat */"../../utils/dist/enums/ColorFormat.js"),n=o(/*! ./TokenHelper */"../../utils/dist/helpers/TokenHelper.js");class i{static formattedColorOrVariableName(e,t,o){let i,a=null,s=null;const l=(0,n.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);if(l)i=o.tokenToVariableRef(l);else{const r=(0,n.sureOptionalReference)(e.color.referencedTokenId,t,o.allowReferences);r&&(a=o.tokenToVariableRef(r));const i=(0,n.sureOptionalReference)(e.opacity.referencedTokenId,t,o.allowReferences);i&&(s=o.tokenToVariableRef(i))}if(i)return i;if(!i&&!a&&!s){const t=this.formattedColor(e,o.colorFormat,o.decimals);return o.rawColorTokenFormatter?o.rawColorTokenFormatter(t):t}let c;switch(o.colorFormat){case r.ColorFormat.rgb:case r.ColorFormat.rgba:case r.ColorFormat.smartRgba:c=this.colorToRgb(o.colorFormat,this.normalizedIntColor(e),e.opacity.measure,o.decimals,a,s);break;default:c=this.formattedColor(e,o.colorFormat,o.decimals)}return o.rawColorTokenFormatter?o.rawColorTokenFormatter(c):c}static formattedColor(e,t,o=3){switch(t){case r.ColorFormat.hex6:case r.ColorFormat.hex8:case r.ColorFormat.hashHex6:case r.ColorFormat.hashHex8:case r.ColorFormat.smartHex:case r.ColorFormat.smartHashHex:return this.colorToHex(t,this.normalizedIntColor(e),e.opacity.measure);case r.ColorFormat.rgb:case r.ColorFormat.rgba:case r.ColorFormat.smartRgba:return this.colorToRgb(t,this.normalizedIntColor(e),e.opacity.measure,o,null,null);case r.ColorFormat.hsl:case r.ColorFormat.hsla:case r.ColorFormat.smartHsla:return this.colorToHsl(t,this.normalizedFractionalColor(e),e.opacity.measure,o);case r.ColorFormat.smartUIColor:return this.colorToUIColor(this.normalizedIntColor(e),e.opacity.measure,o);case r.ColorFormat.oklch:case r.ColorFormat.oklcha:case r.ColorFormat.smartOklch:return this.colorToOklch(t,this.normalizedIntColor(e),e.opacity.measure,o);default:return this.colorToHex(r.ColorFormat.smartHashHex,this.normalizedIntColor(e),e.opacity.measure)}}static colorToRgb(e,t,o,n,i,a){let s;return s=e===r.ColorFormat.rgba||e===r.ColorFormat.smartRgba&&o<1?`rgba(${i||`${t.r}, ${t.g}, ${t.b}`}, ${a||this.roundToDecimals(o,n)})`:`rgb(${i||`${t.r}, ${t.g}, ${t.b}`})`,s}static colorToHex(e,t,o){let n=`${this.pHex(t.r)}${this.pHex(t.g)}${this.pHex(t.b)}`;return(e===r.ColorFormat.hex8||e===r.ColorFormat.hashHex8||e===r.ColorFormat.smartHex&&o<1||e===r.ColorFormat.smartHashHex&&o<1)&&(n+=`${this.pHex(Math.round(255*o))}`),e!==r.ColorFormat.hashHex6&&e!==r.ColorFormat.hashHex8&&e!==r.ColorFormat.smartHashHex||(n=`#${n}`),n}static colorToHsl(e,t,o,n){const i=Math.max(t.r,t.g,t.b),a=Math.min(t.r,t.g,t.b);let s,l=0,c=0,u=(i+a)/2;if(i===a)l=c=0;else{const e=i-a;switch(c=u>.5?e/(2-i-a):e/(i+a),i){case t.r:l=(t.g-t.b)/e+(t.g<t.b?6:0);break;case t.g:l=(t.b-t.r)/e+2;break;case t.b:l=(t.r-t.g)/e+4}l/=6}return s=e===r.ColorFormat.hsla||e===r.ColorFormat.smartHsla&&o<1?`hsla(${Math.round(360*l)}%, ${Math.round(100*c)}%, ${Math.round(100*u)}%, ${this.roundToDecimals(o,n)})`:`hsl(${Math.round(360*l)}%, ${Math.round(100*c)}%, ${Math.round(100*u)}%)`,s}static colorToUIColor(e,t,o=3){let r=`UIColor(rgb: 0x${this.pHex(e.r)}${this.pHex(e.g)}${this.pHex(e.b)})`;return t<1&&(r+=`.withAlphaComponent(${t})`),r}static normalizedIntColor(e){return{r:Math.round(e.color.r),g:Math.round(e.color.g),b:Math.round(e.color.b)}}static normalizedFractionalColor(e,t=3){return{r:this.roundToDecimals(e.color.r/255,t),g:i.roundToDecimals(e.color.g/255,t),b:i.roundToDecimals(e.color.b/255,t)}}static roundToDecimals(e,t,o=!1){const r=Math.pow(10,t),n=Math.round(e*r)/r;return o?Number(n.toFixed(t)):parseFloat(n.toFixed(t))}static pHex(e){return e.toString(16).padStart(2,"0")}static colorToOklch(e,t,o,n){const{l:i,c:a,h:s}=this.rgbToOklch(t.r,t.g,t.b);switch(e){case r.ColorFormat.oklcha:return`oklch(${i}% ${a} ${s} / ${this.roundToDecimals(100*o,n)}%)`;case r.ColorFormat.smartOklch:return o<1?`oklch(${i}% ${a} ${s} / ${this.roundToDecimals(100*o,n)}%)`:`oklch(${i}% ${a} ${s})`;case r.ColorFormat.oklch:default:return`oklch(${i}% ${a} ${s})`}}static rgbToOklch(e,t,o){const r=this.sRGBtoLinear(e/255),n=this.sRGBtoLinear(t/255),i=this.sRGBtoLinear(o/255),a=.4124564*r+.3575761*n+.1804375*i,s=.2126729*r+.7151522*n+.072175*i,l=.0193339*r+.119192*n+.9503041*i,c=.8189330101*a+.3618667424*s-.1288597137*l,u=.0329845436*a+.9293118715*s+.0361456387*l,p=.0482003018*a+.2643662691*s+.633851707*l,d=Math.cbrt(c),T=Math.cbrt(u),m=Math.cbrt(p),f=.2104542553*d+.793617785*T-.0040720468*m,y=1.9779984951*d-2.428592205*T+.4505937099*m,h=.0259040371*d+.7827717662*T-.808675766*m,g=Math.sqrt(y*y+h*h);let k=180*Math.atan2(h,y)/Math.PI;return k<0&&(k+=360),{l:this.roundToDecimals(100*f,2),c:this.roundToDecimals(g,3,!0),h:this.roundToDecimals(k,2)}}static sRGBtoLinear(e){return e<=.04045?e/12.92:Math.pow((e+.055)/1.055,2.4)}}t.ColorHelper=i},"../../utils/dist/helpers/FileHelper.js":
/*!**********************************************!*\
  !*** ../../utils/dist/helpers/FileHelper.js ***!
  \**********************************************/(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FileHelper=void 0;const r=o(/*! @supernovaio/sdk-exporters */"../../utils/node_modules/@supernovaio/sdk-exporters/build/supernova-sdk-typescript.js");t.FileHelper=class{static createCopyRemoteFile({relativePath:e,fileName:t,url:o}){return{path:e,name:t,type:r.OutputFileType.copyRemoteUrl,url:o}}static createTextFile({relativePath:e,fileName:t,content:o}){return{path:e,name:t,type:r.OutputFileType.text,content:o}}static createBinaryFile({relativePath:e,fileName:t,data:o}){return{path:e,name:t,type:r.OutputFileType.binary,data:o}}}},"../../utils/dist/helpers/FileNameHelper.js":
/*!**************************************************!*\
  !*** ../../utils/dist/helpers/FileNameHelper.js ***!
  \**************************************************/(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FileNameHelper=void 0;const r=o(/*! ../enums/StringCase */"../../utils/dist/enums/StringCase.js"),n=o(/*! ./NamingHelper */"../../utils/dist/helpers/NamingHelper.js");t.FileNameHelper=class{static ensureFileExtension(e,t){const o=t.startsWith(".")?t:`.${t}`;return e.toLowerCase().endsWith(o.toLowerCase())?e:e+o}static replaceFileExtension(e,t,o){const r=t.startsWith(".")?t:`.${t}`,n=o.startsWith(".")?o:`.${o}`;return e.replace(new RegExp(`${r}$`),n)}static getDefaultStyleFileName(e,t=".css",o=r.StringCase.kebabCase){const i=t.startsWith(".")?t:`.${t}`;return n.NamingHelper.codeSafeVariableName({Color:"color",Typography:"typography",Dimension:"dimension",Size:"size",Space:"space",Opacity:"opacity",FontSize:"font-size",LineHeight:"line-height",LetterSpacing:"letter-spacing",ParagraphSpacing:"paragraph-spacing",BorderWidth:"border-width",BorderRadius:"border-radius",Duration:"duration",ZIndex:"z-index",Shadow:"shadow",Border:"border",Gradient:"gradient",String:"string",ProductCopy:"product-copy",FontFamily:"font-family",FontWeight:"font-weight",TextCase:"text-case",TextDecoration:"text-decoration",Visibility:"visibility",Blur:"blur"}[e],o)+i}}},"../../utils/dist/helpers/GeneralHelper.js":
/*!*************************************************!*\
  !*** ../../utils/dist/helpers/GeneralHelper.js ***!
  \*************************************************/(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GeneralHelper=void 0;t.GeneralHelper=class{static indent(e=2){return" ".repeat(Math.max(0,e))}static addDisclaimer(e,t){if(!e)return t;return`/**\n * ${e.replace(/\n/g,"\n * ")} \n */\n\n${t}`}}},"../../utils/dist/helpers/KotlinHelper.js":
/*!************************************************!*\
  !*** ../../utils/dist/helpers/KotlinHelper.js ***!
  \************************************************/(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.KotlinHelper=t.ImportCollector=t.ImportFlag=void 0;const r=o(/*! @supernovaio/sdk-exporters */"../../utils/node_modules/@supernovaio/sdk-exporters/build/supernova-sdk-typescript.js"),n=o(/*! ./ColorHelper */"../../utils/dist/helpers/ColorHelper.js"),i=o(/*! ./TokenHelper */"../../utils/dist/helpers/TokenHelper.js"),a=o(/*! ./GeneralHelper */"../../utils/dist/helpers/GeneralHelper.js");var s;!function(e){e[e.Color=0]="Color",e[e.Dp=1]="Dp",e[e.Sp=2]="Sp",e[e.Offset=3]="Offset",e[e.Brush=4]="Brush",e[e.TileMode=5]="TileMode",e[e.Shadow=6]="Shadow",e[e.BorderStroke=7]="BorderStroke",e[e.Modifier=8]="Modifier",e[e.Blur=9]="Blur",e[e.FontWeight=10]="FontWeight",e[e.TextDecoration=11]="TextDecoration",e[e.TextStyle=12]="TextStyle"}(s||(t.ImportFlag=s={}));t.ImportCollector=class{constructor(){this.flags=new Set}use(...e){e.forEach((e=>this.flags.add(e)))}allImports(){const e=[];return this.flags.has(s.Color)&&e.push("import androidx.compose.ui.graphics.Color"),this.flags.has(s.Dp)&&e.push("import androidx.compose.ui.unit.dp"),this.flags.has(s.Sp)&&e.push("import androidx.compose.ui.unit.sp"),this.flags.has(s.Offset)&&e.push("import androidx.compose.ui.geometry.Offset"),this.flags.has(s.Brush)&&e.push("import androidx.compose.ui.graphics.Brush"),this.flags.has(s.TileMode)&&e.push("import androidx.compose.ui.graphics.TileMode"),this.flags.has(s.Shadow)&&e.push("import androidx.compose.ui.graphics.Shadow"),this.flags.has(s.BorderStroke)&&e.push("import androidx.compose.foundation.BorderStroke"),this.flags.has(s.Modifier)&&(e.push("import androidx.compose.ui.Modifier"),this.flags.has(s.Blur)&&e.push("import androidx.compose.ui.draw.blur")),this.flags.has(s.FontWeight)&&e.push("import androidx.compose.ui.text.font.FontWeight"),this.flags.has(s.TextDecoration)&&e.push("import androidx.compose.ui.text.TextDecoration"),this.flags.has(s.TextStyle)&&e.push("import androidx.compose.ui.text.TextStyle"),e.sort()}};t.KotlinHelper=class{static tokenValue(e,t,o,n){const i={rawColorTokenFormatter:e=>`Color(0x${e})`,...o};let a;switch(e.tokenType){case r.TokenType.color:a=this.colorTokenValueToKotlin(e.value,t,i,n);break;case r.TokenType.border:a=this.borderTokenValueToKotlin(e.value,t,i,n);break;case r.TokenType.gradient:a=this.gradientTokenValueToKotlin(e.value,t,i,n);break;case r.TokenType.dimension:case r.TokenType.size:case r.TokenType.space:case r.TokenType.opacity:case r.TokenType.fontSize:case r.TokenType.lineHeight:case r.TokenType.letterSpacing:case r.TokenType.paragraphSpacing:case r.TokenType.borderWidth:case r.TokenType.radius:case r.TokenType.duration:case r.TokenType.zIndex:a=this.dimensionTokenValueToKotlin(e.value,t,i,n);break;case r.TokenType.shadow:a=this.shadowTokenValueToKotlin(e.value,t,i,n);break;case r.TokenType.fontWeight:a=this.fontWeightTokenValueToKotlin(e.value,t,i,n);break;case r.TokenType.fontFamily:case r.TokenType.productCopy:case r.TokenType.string:a=this.stringTokenValueToKotlin(e.value,t,i);break;case r.TokenType.textCase:case r.TokenType.textDecoration:case r.TokenType.visibility:a=this.optionTokenValueToKotlin(e.value,t,i,e.tokenType,n);break;case r.TokenType.blur:a=this.blurTokenValueToKotlin(e.value,t,i,n);break;case r.TokenType.typography:a=this.typographyTokenValueToKotlin(e.value,t,i,n);break;default:throw new r.UnreachableCaseError(e.tokenType,"Unsupported token type for transformation:")}return a}static colorTokenValueToKotlin(e,t,o,r){return r.use(s.Color),n.ColorHelper.formattedColorOrVariableName(e,t,o)}static borderTokenValueToKotlin(e,t,o,r){const n=(0,i.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);if(n)return o.tokenToVariableRef(n);r.use(s.BorderStroke);return`BorderStroke(${this.dimensionTokenValueToKotlin(e.width,t,o,r)}, ${this.colorTokenValueToKotlin(e.color,t,o,r)})`}static gradientTokenValueToKotlin(e,t,o,r){const n=e.map((e=>this.gradientLayerToKotlin(e,t,o,r)));return 1===n.length?n[0]:`listOf(${n.join(", ")})`}static gradientLayerToKotlin(e,t,o,l){const c=(0,i.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);if(c)return o.tokenToVariableRef(c);l.use(s.Brush,s.Offset);const u=e.stops.map((e=>this.colorTokenValueToKotlin(e.color,t,o,l))).join(", "),p=e.stops.map((e=>n.ColorHelper.roundToDecimals(e.position,o.decimals)+"f")).join(", "),d=a.GeneralHelper.indent(o.indent);switch(e.type){case r.GradientType.radial:l.use(s.TileMode);return`Brush.radialGradient(\n${d}${d}colors = listOf(${u}),\n${d}${d}center = Offset(${((e.from.x+e.to.x)/2).toFixed(2)}f, ${((e.from.y+e.to.y)/2).toFixed(2)}f),\n${d}${d}radius = 0.5f,\n${d}${d}tileMode = TileMode.Clamp,\n${d}${d}stops = floatArrayOf(${p})\n${d})`;case r.GradientType.angular:return`Brush.sweepGradient(\n${d}${d}colors = listOf(${u}),\n${d}${d}center = Offset(0.5f, 0.5f),\n${d}${d}stops = floatArrayOf(${p})\n${d})`;case r.GradientType.linear:default:return`Brush.linearGradient(\n${d}${d}colors = listOf(${u}),\n${d}${d}stops = floatArrayOf(${p}),\n${d}${d}start = Offset(${e.from.x}f, ${e.from.y}f),\n${d}${d}end = Offset(${e.to.x}f, ${e.to.y}f)\n${d})`}}static shadowTokenValueToKotlin(e,t,o,r){const n=e.map((e=>this.shadowLayerToKotlin(e,t,o,r))),i=a.GeneralHelper.indent(o.indent);return 1===n.length?n[0]:`listOf(\n${n.map((e=>`${i}${i}${e}`)).join(",\n")}\n${i})`}static shadowLayerToKotlin(e,t,o,r){const a=(0,i.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);if(a)return o.tokenToVariableRef(a);r.use(s.Shadow,s.Offset);return`Shadow(color = ${this.colorTokenValueToKotlin({...e.color,...e.opacity&&{opacity:e.opacity}},t,o,r)}, offset = Offset(${n.ColorHelper.roundToDecimals(e.x,o.decimals)}f, ${n.ColorHelper.roundToDecimals(e.y,o.decimals)}f), blurRadius = ${n.ColorHelper.roundToDecimals(e.radius,o.decimals)}f)`}static dimensionTokenValueToKotlin(e,t,o,a){const s=(0,i.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);if(s)return o.tokenToVariableRef(s);const l=n.ColorHelper.roundToDecimals(e.measure,o.decimals);if(e.unit===r.Unit.percent){return`${+l/100}f`}return`${l}${this.unitToKotlin(e.unit,a)}`}static unitToKotlin(e,t){switch(e){case r.Unit.percent:return"f";case r.Unit.pixels:return t.use(s.Dp),".dp";case r.Unit.rem:return t.use(s.Sp),".sp";case r.Unit.ms:case r.Unit.raw:return"";default:return t.use(s.Dp),".dp"}}static stringTokenValueToKotlin(e,t,o){const r=(0,i.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);return r?o.tokenToVariableRef(r):`"${e.text}"`}static optionTokenValueToKotlin(e,t,o,n,a){const s=(0,i.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);return s?o.tokenToVariableRef(s):n===r.TokenType.textCase?this.textCaseToKotlin(e.value):n===r.TokenType.textDecoration?this.textDecorationToKotlin(e.value,a):this.visibilityToKotlin(e.value)}static textCaseToKotlin(e){switch(e){case r.TextCase.original:return'"none"';case r.TextCase.upper:return'"uppercase"';case r.TextCase.lower:return'"lowercase"';case r.TextCase.camel:return'"capitalize"';case r.TextCase.smallCaps:return'"smallCaps"'}}static textDecorationToKotlin(e,t){switch(t.use(s.TextDecoration),e){case r.TextDecoration.original:return"TextDecoration.None";case r.TextDecoration.underline:return"TextDecoration.Underline";case r.TextDecoration.strikethrough:return"TextDecoration.LineThrough"}}static visibilityToKotlin(e){return e===r.VisibilityType.visible?"true":"false"}static blurTokenValueToKotlin(e,t,o,r){const n=(0,i.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);return n?o.tokenToVariableRef(n):(r.use(s.Modifier,s.Blur),`Modifier.blur(${this.dimensionTokenValueToKotlin(e.radius,t,o,r)})`)}static fontWeightTokenValueToKotlin(e,t,o,r){const n=(0,i.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);if(n)return o.tokenToVariableRef(n);const a=(0,i.normalizeTextWeight)(e.text);return this.fontWeightIntToKotlin(a,r)}static fontWeightIntToKotlin(e,t){switch(t.use(s.FontWeight),e){case 100:return"FontWeight.Thin";case 200:return"FontWeight.ExtraLight";case 300:return"FontWeight.Light";case 400:return"FontWeight.Normal";case 500:return"FontWeight.Medium";case 600:return"FontWeight.SemiBold";case 700:return"FontWeight.Bold";case 800:return"FontWeight.ExtraBold";case 900:return"FontWeight.Black";default:return`FontWeight(${e})`}}static typographyTokenValueToKotlin(e,t,o,n){const l=(0,i.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);if(l)return o.tokenToVariableRef(l);n.use(s.TextStyle,s.TextDecoration);const c=(0,i.sureOptionalReference)(e.fontFamily.referencedTokenId,t,o.allowReferences),u=(0,i.sureOptionalReference)(e.fontWeight.referencedTokenId,t,o.allowReferences),p=(0,i.sureOptionalReference)(e.textDecoration.referencedTokenId,t,o.allowReferences),d=c?o.tokenToVariableRef(c):`"${e.fontFamily.text}"`,T=u?o.tokenToVariableRef(u):this.fontWeightIntToKotlin((0,i.normalizeTextWeight)(e.fontWeight.text),n),m=p?o.tokenToVariableRef(p):e.textDecoration.value===r.TextDecoration.original?"TextDecoration.None":this.textDecorationToKotlin(e.textDecoration.value,n),f=this.dimensionTokenValueToKotlin(e.fontSize,t,o,n),y=e.lineHeight?this.dimensionTokenValueToKotlin(e.lineHeight,t,o,n):void 0,h=e.letterSpacing?this.dimensionTokenValueToKotlin(e.letterSpacing,t,o,n):void 0,g=[`fontFamily = ${d}`,`fontWeight = ${T}`,`fontSize = ${f}`];y&&g.push(`lineHeight = ${y}`),h&&g.push(`letterSpacing = ${h}`),m&&g.push(`textDecoration = ${m}`);const k=a.GeneralHelper.indent(o.indent);return`TextStyle(\n${g.map((e=>`${k}${k}${e}`)).join(",\n")}\n${k})`}}},"../../utils/dist/helpers/NamingHelper.js":
/*!************************************************!*\
  !*** ../../utils/dist/helpers/NamingHelper.js ***!
  \************************************************/(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.NamingHelper=void 0;const r=o(/*! ../enums/StringCase */"../../utils/dist/enums/StringCase.js"),n=o(/*! change-case */"../../utils/node_modules/change-case/dist/index.js");class i{static applyFindReplace(e,t){if(!t)return e;const o=Object.entries(t).sort((([e],[t])=>t.length-e.length));let r=e;for(const[e,t]of o){const o=e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&"),n=new RegExp(`\\b${o}\\b|(?<=^|\\s)${o}(?=\\s|$)`,"gi");r=r.replace(n,t)}return r}static codeSafeVariableNameForToken(e,t,o,r,n,a=!0){let s=[];o&&(s.push(...o.path),o.isRoot||s.push(o.name));const l=e.name.split(/[\s-_]+/);if(s.length>0&&l.length>1&&l[0].toLowerCase()===s[s.length-1].toLowerCase()?s.push(l.slice(1).join(" ")):s.push(e.name),n){let e=s.join(" ");e=i.applyFindReplace(e,n),s=e.split(/\s+/).filter((e=>e.length>0)).map((e=>e.trim()))}return r&&r.length>0&&s.unshift(r),i.codeSafeVariableName(s,t,void 0,a)}static codeSafeVariableName(e,t,o,a=!1){let s="string"==typeof e?e:e.join(" ");if(s=i.applyFindReplace(s,o),s=s.replaceAll(/[^a-zA-Z0-9_-]/g,"_"),a){const e=(0,n.kebabCase)(s).split("-").filter((e=>e.length>0));s=e.filter(((t,o)=>0===o||t!==e[o-1])).join(" ")}switch(t){case r.StringCase.camelCase:s=(0,n.camelCase)(s);break;case r.StringCase.capitalCase:s=(0,n.capitalCase)(s);break;case r.StringCase.constantCase:s=(0,n.constantCase)(s);break;case r.StringCase.dotCase:s=(0,n.dotCase)(s);break;case r.StringCase.trainCase:s=(0,n.trainCase)(s);break;case r.StringCase.noCase:s=(0,n.noCase)(s);break;case r.StringCase.kebabCase:s=(0,n.kebabCase)(s);break;case r.StringCase.pascalCase:s=(0,n.pascalCase)(s);break;case r.StringCase.pathCase:s=(0,n.pathCase)(s);break;case r.StringCase.sentenceCase:s=(0,n.sentenceCase)(s);break;case r.StringCase.snakeCase:s=(0,n.snakeCase)(s);break;case r.StringCase.flatCase:s=(0,n.camelCase)(s).toLowerCase()}return t!==r.StringCase.snakeCase&&t!==r.StringCase.constantCase&&(s=s.replaceAll("_","")),s.match(/^[^a-zA-Z]/)&&(s="_"+s),s}static nameAsCSSVarReference(e){return`var(--${e})`}static nameAsCSSVarDeclaration(e){return`--${e}`}}t.NamingHelper=i},"../../utils/dist/helpers/ThemeHelper.js":
/*!***********************************************!*\
  !*** ../../utils/dist/helpers/ThemeHelper.js ***!
  \***********************************************/(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ThemeHelper=void 0;const r=o(/*! ./NamingHelper */"../../utils/dist/helpers/NamingHelper.js"),n=o(/*! ../enums/StringCase */"../../utils/dist/enums/StringCase.js");t.ThemeHelper=class{static hasThemedTokens(e,t,o){const r=e.filter((e=>e.tokenType===t)),n=new Set(o.overriddenTokens.map((e=>e.id)));return r.some((e=>n.has(e.id)))}static filterThemedTokens(e,t){const o=new Set(t.overriddenTokens.map((e=>e.id)));return e.filter((e=>o.has(e.id)))}static getThemeIdentifier(e,t=n.StringCase.kebabCase){if("string"==typeof e)return e;const o=e.codeName||e.name;return r.NamingHelper.codeSafeVariableName(o,t)}static getThemeName(e){if("string"==typeof e)return e;const t=e.codeName||e.name;return r.NamingHelper.codeSafeVariableName(t,n.StringCase.capitalCase)}}},"../../utils/dist/helpers/TokenHelper.js":
/*!***********************************************!*\
  !*** ../../utils/dist/helpers/TokenHelper.js ***!
  \***********************************************/(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.sureOptionalReference=function(e,t,o=!0){if(!e||!o)return null;const r=t.get(e);if(!r)throw new Error(`Trying to retrieve unknown referenced token ${e}`);return r},t.normalizeTextWeight=function(e){const t=e.toLowerCase().trim(),o=parseInt(t);if(!isNaN(o))return o;switch(t){case"thin":case"hairline":return 100;case"extra light":case"extralight":case"ultra light":case"ultralight":return 200;case"light":return 300;case"normal":case"regular":case"book":default:return 400;case"medium":return 500;case"semi bold":case"semibold":case"demi bold":case"demibold":return 600;case"bold":return 700;case"extra bold":case"extrabold":case"ultra bold":case"ultrabold":return 800;case"black":case"heavy":return 900}}},"../../utils/dist/helpers/TokenNameTracker.js":
/*!****************************************************!*\
  !*** ../../utils/dist/helpers/TokenNameTracker.js ***!
  \****************************************************/(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TokenNameTracker=void 0;const r=o(/*! ./NamingHelper */"../../utils/dist/helpers/NamingHelper.js");t.TokenNameTracker=class{constructor(){this.tokenNameMap=new Map,this.nameToTokenMap=new Map,this.hierarchyNameMap=new Map}reset(){this.tokenNameMap.clear(),this.nameToTokenMap.clear(),this.hierarchyNameMap.clear()}getSimpleTokenName(e,t,o=!1,n=[]){const i=`${n.join("/")}/${e.name}`;if(!o&&this.tokenNameMap.has(e.id))return this.tokenNameMap.get(e.id);let a=r.NamingHelper.codeSafeVariableName(e.name,t);this.hierarchyNameMap.has(i)||this.hierarchyNameMap.set(i,new Set);const s=this.hierarchyNameMap.get(i);return s.size>0&&!s.has(e.id)&&(a=`${a}_${s.size}`),s.add(e.id),o||(this.tokenNameMap.set(e.id,a),this.nameToTokenMap.set(a,e.id)),a}getTokenName(e,t,o,n,i=!1){if(!i&&this.tokenNameMap.has(e.id))return this.tokenNameMap.get(e.id);const a=t.find((t=>t.id===e.parentGroupId));let s=r.NamingHelper.codeSafeVariableNameForToken(e,o,a,n),l=1;for(;this.nameToTokenMap.has(s)&&this.nameToTokenMap.get(s)!==e.id;)s=`${s}_copy_${l++}`;return i||(this.tokenNameMap.set(e.id,s),this.nameToTokenMap.set(s,e.id)),s}}},"../../utils/dist/helpers/WriteTokenPropStore.js":
/*!*******************************************************!*\
  !*** ../../utils/dist/helpers/WriteTokenPropStore.js ***!
  \*******************************************************/(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.WriteTokenPropStore=void 0;const r=o(/*! ./NamingHelper */"../../utils/dist/helpers/NamingHelper.js"),n=o(/*! ../enums/StringCase */"../../utils/dist/enums/StringCase.js");t.WriteTokenPropStore=class{constructor(e,t){this.tokenPropertyWriteMap=new Map,this.sdk=e,this.target=t}storeValueForTokenProperty(e,t,o){let r=this.tokenPropertyWriteMap.get(t);r||(r=new Map,this.tokenPropertyWriteMap.set(t,r)),r.set(e,o)}async batchUpdateStoredTokenProperties(){if(0===this.tokenPropertyWriteMap.size)return;let e=await this.sdk.tokens.getTokenProperties(this.target);for(const[t,o]of this.tokenPropertyWriteMap){let i=e.find((e=>e.name===t));if(i||(await this.sdk.tokens.createTokenProperty(this.target,{type:"Generic",name:t,codeName:r.NamingHelper.codeSafeVariableName([t],n.StringCase.camelCase),columnWidth:200,description:"Variable name to use in code"}),e=await this.sdk.tokens.getTokenProperties(this.target),i=e.find((e=>e.name===t))),!i)throw new Error(`Failed to retrieve or create property ${t}.`);const a=Array.from(o).map((([e,t])=>({definitionId:i.id,targetElementId:e.id,value:t})));await this.sdk.bulkOperations.updateElementProperties(this.target,a)}}async writeTokenProperties(e,t,o){const r=e?.trim();if(r){for(const e of t){const t=o(e);this.storeValueForTokenProperty(e,r,t)}await this.batchUpdateStoredTokenProperties()}}}},"../../utils/dist/index.js":
/*!*********************************!*\
  !*** ../../utils/dist/index.js ***!
  \*********************************/function(e,t,o){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,o,r){void 0===r&&(r=o);var n=Object.getOwnPropertyDescriptor(t,o);n&&!("get"in n?!t.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return t[o]}}),Object.defineProperty(e,r,n)}:function(e,t,o,r){void 0===r&&(r=o),e[r]=t[o]}),n=this&&this.__exportStar||function(e,t){for(var o in e)"default"===o||Object.prototype.hasOwnProperty.call(t,o)||r(t,e,o)};Object.defineProperty(t,"__esModule",{value:!0}),n(o(/*! ./helpers/NamingHelper */"../../utils/dist/helpers/NamingHelper.js"),t),n(o(/*! ./helpers/ColorHelper */"../../utils/dist/helpers/ColorHelper.js"),t),n(o(/*! ./helpers/TokenHelper */"../../utils/dist/helpers/TokenHelper.js"),t),n(o(/*! ./helpers/CSSHelper */"../../utils/dist/helpers/CSSHelper.js"),t),n(o(/*! ./helpers/FileHelper */"../../utils/dist/helpers/FileHelper.js"),t),n(o(/*! ./helpers/ThemeHelper */"../../utils/dist/helpers/ThemeHelper.js"),t),n(o(/*! ./helpers/FileNameHelper */"../../utils/dist/helpers/FileNameHelper.js"),t),n(o(/*! ./helpers/GeneralHelper */"../../utils/dist/helpers/GeneralHelper.js"),t),n(o(/*! ./enums/StringCase */"../../utils/dist/enums/StringCase.js"),t),n(o(/*! ./enums/ColorFormat */"../../utils/dist/enums/ColorFormat.js"),t),n(o(/*! ./helpers/TokenNameTracker */"../../utils/dist/helpers/TokenNameTracker.js"),t),n(o(/*! ./helpers/WriteTokenPropStore */"../../utils/dist/helpers/WriteTokenPropStore.js"),t),n(o(/*! ./helpers/KotlinHelper */"../../utils/dist/helpers/KotlinHelper.js"),t)},"../../utils/node_modules/@supernovaio/sdk-exporters/build/supernova-sdk-typescript.js":
/*!*********************************************************************************************!*\
  !*** ../../utils/node_modules/@supernovaio/sdk-exporters/build/supernova-sdk-typescript.js ***!
  \*********************************************************************************************/(e,t)=>{(()=>{"use strict";var e={1:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.GradientType=void 0,function(e){e.linear="Linear",e.radial="Radial",e.angular="Angular"}(o||(t.GradientType=o={}))},306:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockTextPropertyStyle=void 0,function(e){e.title1="Title1",e.title2="Title2",e.title3="Title3",e.title4="Title4",e.title5="Title5",e.default="Default",e.defaultBold="DefaultBold",e.defaultSemibold="DefaultSemibold",e.small="Small",e.smallBold="SmallBold",e.smallSemibold="SmallSemibold",e.custom="Custom"}(o||(t.DocsBlockTextPropertyStyle=o={}))},899:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.AssetScaleType=void 0,function(e){e.aspectFill="AspectFill",e.aspectFit="AspectFit"}(o||(t.AssetScaleType=o={}))},915:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.AssetScale=void 0,function(e){e.x1="x1",e.x2="x2",e.x3="x3",e.x4="x4"}(o||(t.AssetScale=o={}))},922:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.TextCase=void 0,function(e){e.original="Original",e.upper="Upper",e.lower="Lower",e.camel="Camel",e.smallCaps="SmallCaps"}(o||(t.TextCase=o={}))},934:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.IconSet=void 0,function(e){e.checkCircle="CheckCircle",e.crossCircle="CrossCircle",e.alert="Alert"}(o||(t.IconSet=o={}))},1160:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.ALL_BORDER_POSITIONS=t.BorderPosition=void 0,function(e){e.inside="Inside",e.center="Center",e.outside="Outside"}(o||(t.BorderPosition=o={})),t.ALL_BORDER_POSITIONS=[o.inside,o.center,o.outside]},1233:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsEntityType=void 0,function(e){e.group="Group",e.page="Page"}(o||(t.DocsEntityType=o={}))},1255:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.FrameAlignment=void 0,function(e){e.frameHeight="FrameHeight",e.center="Center"}(o||(t.FrameAlignment=o={}))},1423:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyPageAssetType=void 0,function(e){e.image="image",e.figmaFrame="figmaFrame"}(o||(t.DocumentationLegacyPageAssetType=o={}))},1601:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyPageBlockThemeType=void 0,function(e){e.override="Override",e.comparison="Comparison"}(o||(t.DocumentationLegacyPageBlockThemeType=o={}))},1846:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyPageBlockType=void 0,function(e){e.text="Text",e.heading="Heading",e.code="Code",e.unorderedList="UnorderedList",e.orderedList="OrderedList",e.quote="Quote",e.callout="Callout",e.divider="Divider",e.image="Image",e.token="Token",e.tokenList="TokenList",e.tokenGroup="TokenGroup",e.shortcuts="Shortcuts",e.link="Link",e.figmaEmbed="FigmaEmbed",e.youtubeEmbed="YoutubeEmbed",e.storybookEmbed="StorybookEmbed",e.genericEmbed="Embed",e.figmaFrames="FigmaFrames",e.custom="Custom",e.renderCode="RenderCode",e.componentAssets="ComponentAssets",e.column="Column",e.columnItem="ColumnItem",e.tabs="Tabs",e.tabItem="TabItem",e.table="Table",e.tableCell="TableCell",e.tableRow="TableRow"}(o||(t.DocumentationLegacyPageBlockType=o={}))},2123:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyGroupBehavior=void 0,function(e){e.group="Group",e.tabs="Tabs"}(o||(t.DocumentationLegacyGroupBehavior=o={}))},2657:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyPageBlockShortcut=t.DocumentationLegacyPageBlockShortcutType=void 0,function(e){e.external="External",e.internal="Internal"}(o||(t.DocumentationLegacyPageBlockShortcutType=o={})),t.DocumentationLegacyPageBlockShortcut=class{constructor(e){var t;e.url?this.type=o.external:this.type=o.internal,this.title=this.shortcutTitleFromModel(e,this.type),this.description=this.shortcutDescriptionFromModel(e,this.type),this.previewUrl=this.shortcutPreviewUrlFromModel(e),this.type===o.internal&&(null===(t=e.documentationItemPreview)||void 0===t?void 0:t.valid)&&e.documentationItemId?this.internalId=e.documentationItemId:(this.internalId=null,this.type===o.external&&e.url?this.externalUrl=e.url:this.externalUrl=null)}shortcutTitleFromModel(e,t){var r,n,i,a,s;let l=null;return e.title&&e.title.trim().length>0?l=e.title:t===o.internal?l=null!==(n=null===(r=e.documentationItemPreview)||void 0===r?void 0:r.title)&&void 0!==n?n:null:t===o.external&&(l=null!==(s=null!==(a=null===(i=e.urlPreview)||void 0===i?void 0:i.title)&&void 0!==a?a:e.url)&&void 0!==s?s:null),l&&0!==l.trim().length?l:null}shortcutDescriptionFromModel(e,t){var r;let n=null;return e.description&&e.description.trim().length>0?n=e.description:t===o.external&&(n=null===(r=e.urlPreview)||void 0===r?void 0:r.description),n&&0!==n.trim().length?n:null}shortcutPreviewUrlFromModel(e){var t,o,r,n,i;return null!==(i=null!==(r=null!==(t=e.assetUrl)&&void 0!==t?t:null===(o=e.asset)||void 0===o?void 0:o.url)&&void 0!==r?r:null===(n=e.urlPreview)||void 0===n?void 0:n.thumbnailUrl)&&void 0!==i?i:null}}},2674:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.RichTextSpanAttributeType=void 0,function(e){e.bold="Bold",e.italic="Italic",e.link="Link",e.strikethrough="Strikethrough",e.code="Code"}(o||(t.RichTextSpanAttributeType=o={}))},2802:(e,t)=>{var o,r;Object.defineProperty(t,"__esModule",{value:!0}),t.PulsarExecutor=t.OutputFileType=void 0,function(e){e.copyRemoteUrl="copyRemoteUrl",e.text="text",e.binary="binary"}(o||(t.OutputFileType=o={})),function(e){e.supernova="supernova",e.local="local"}(r||(t.PulsarExecutor=r={}))},3607:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.WorkspaceSubscriptionStatus=void 0,function(e){e.active="active",e.gracePeriod="gracePeriod",e.cancelled="cancelled",e.suspended="suspended"}(o||(t.WorkspaceSubscriptionStatus=o={}))},3718:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.FrameLayout=void 0,function(e){e.c8="C8",e.c7="C7",e.c6="C6",e.c5="C5",e.c4="C4",e.c3="C3",e.c2="C2",e.c1="C1",e.c175="C1_75"}(o||(t.FrameLayout=o={}))},3733:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockBehaviorSelectionType=void 0,function(e){e.entity="Entity",e.group="Group",e.entityAndGroup="EntityAndGroup"}(o||(t.DocsBlockBehaviorSelectionType=o={}))},3788:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DT_TOKEN_TYPES=t.tokenTypeIsReferencable=t.REFERENCABLE_TOKEN_TYPES=t.REPLACABLE_TOKEN_TYPES=t.tokenTypeIsNonPure=t.tokenTypeIsPure=t.PURE_TOKEN_TYPES=t.ALL_TOKEN_TYPES=t.MS_DIMENSION_TOKEN_TYPES=t.RAW_DIMENSION_TOKEN_TYPES=t.DIMENSION_TOKEN_TYPES=t.OPTION_TOKEN_TYPES=t.STRING_TOKEN_TYPES=t.TokenType=void 0,function(e){e.color="Color",e.typography="Typography",e.shadow="Shadow",e.border="Border",e.gradient="Gradient",e.blur="Blur",e.radius="BorderRadius",e.borderWidth="BorderWidth",e.duration="Duration",e.fontSize="FontSize",e.dimension="Dimension",e.letterSpacing="LetterSpacing",e.lineHeight="LineHeight",e.opacity="Opacity",e.paragraphSpacing="ParagraphSpacing",e.size="Size",e.space="Space",e.zIndex="ZIndex",e.textDecoration="TextDecoration",e.textCase="TextCase",e.visibility="Visibility",e.fontFamily="FontFamily",e.fontWeight="FontWeight",e.string="String",e.productCopy="ProductCopy"}(o||(t.TokenType=o={})),t.STRING_TOKEN_TYPES=[o.string,o.productCopy,o.fontFamily,o.fontWeight],t.OPTION_TOKEN_TYPES=[o.textCase,o.textDecoration,o.visibility],t.DIMENSION_TOKEN_TYPES=[o.dimension,o.size,o.space,o.opacity,o.fontSize,o.lineHeight,o.letterSpacing,o.paragraphSpacing,o.borderWidth,o.radius,o.duration,o.zIndex],t.RAW_DIMENSION_TOKEN_TYPES=[o.opacity,o.zIndex],t.MS_DIMENSION_TOKEN_TYPES=[o.duration],t.ALL_TOKEN_TYPES=[...t.DIMENSION_TOKEN_TYPES,...t.STRING_TOKEN_TYPES,...t.OPTION_TOKEN_TYPES,o.color,o.gradient,o.border,o.radius,o.shadow,o.typography,o.blur],t.PURE_TOKEN_TYPES=[...t.DIMENSION_TOKEN_TYPES,...t.STRING_TOKEN_TYPES,...t.OPTION_TOKEN_TYPES],t.tokenTypeIsPure=e=>t.PURE_TOKEN_TYPES.includes(e),t.tokenTypeIsNonPure=e=>!(0,t.tokenTypeIsPure)(e),t.REPLACABLE_TOKEN_TYPES=[o.color,...t.DIMENSION_TOKEN_TYPES,...t.STRING_TOKEN_TYPES,...t.OPTION_TOKEN_TYPES],t.REFERENCABLE_TOKEN_TYPES=[o.color,...t.DIMENSION_TOKEN_TYPES,o.fontFamily,o.fontWeight,o.textCase,o.textDecoration],t.tokenTypeIsReferencable=e=>t.REFERENCABLE_TOKEN_TYPES.includes(e),t.DT_TOKEN_TYPES=[o.color,o.shadow,o.gradient,o.typography,o.border,...t.DIMENSION_TOKEN_TYPES,o.fontFamily,o.fontWeight,o.string,...t.OPTION_TOKEN_TYPES]},4068:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsEntityGroupBehavior=void 0,function(e){e.group="Group",e.tabs="Tabs"}(o||(t.DocsEntityGroupBehavior=o={}))},4290:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.WorkspaceSubscriptionProductCode=void 0,function(e){e.free="free",e.team="team",e.teamTest="team_test",e.company="company",e.enterprise="enterprise"}(o||(t.WorkspaceSubscriptionProductCode=o={}))},4379:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.SupernovaError=void 0;class o extends Error{constructor(e,t,o,r,n,i,a){super(e),this.code=t,this.status=o,this.formErrors=r,this.requestId=n,this.serverTime=i,this.url=a}static fromNetworkResponse(e,t,r){var n,i,a;return new o(e.message,e.errorCode||e.reason||e.label||null,e.code||t,null!==(n=e.formErrors)&&void 0!==n?n:null,null!==(i=e.requestId)&&void 0!==i?i:null,null!==(a=e.serverTime)&&void 0!==a?a:null,r)}static fromNoNetworkResponse(e){return new o("No network or internet unreachable","NO_NETWORK",12163,null,(new Date).toISOString(),null,e)}static fromCode(e){return new o(e,e,null,null,null,null,null)}static fromMessage(e){return new o(e,null,null,null,null,null,null)}isFieldErrored(e){return void 0!==this.formErrors.find((t=>t.key===e))}errorForField(e){var t;return null!==(t=this.formErrors.find((t=>t.key===e)))&&void 0!==t?t:null}toString(){var e,t,o,r,n,i;return`\n    Error thrown: ${this.message}\n\n    Code: ${null!==(e=this.code)&&void 0!==e?e:"-"}\n\n    Status: ${null!==(t=this.status)&&void 0!==t?t:"-"}\n\n    Fields: ${JSON.stringify(this.formErrors,null,2)}\n\n    Request ID: ${null!==(o=this.requestId)&&void 0!==o?o:"-"}\n\n    Server time: ${null!==(r=this.serverTime)&&void 0!==r?r:"-"}\n\n    Network URL: ${null!==(n=this.url)&&void 0!==n?n:"-"}\n\n    Stack: ${null!==(i=this.stack)&&void 0!==i?i:"-"}\n    `}toHumanReadable(){return`${this.message}${this.requestId?` (request ${this.requestId})`:""}`}}t.SupernovaError=o},4546:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.ALL_BORDER_STYLES=t.BorderStyle=void 0,function(e){e.dashed="Dashed",e.dotted="Dotted",e.solid="Solid",e.groove="Groove"}(o||(t.BorderStyle=o={})),t.ALL_BORDER_STYLES=[o.dashed,o.dotted,o.solid,o.groove]},4652:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.SourceType=void 0,function(e){e.figma="Figma",e.tokenStudio="TokenStudio",e.figmaVariablesPlugin="FigmaVariablesPlugin"}(o||(t.SourceType=o={}))},5102:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyCalloutType=void 0,function(e){e.info="Info",e.success="Success",e.warning="Warning",e.error="Error"}(o||(t.DocumentationLegacyCalloutType=o={}))},5503:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.WorkspaceSubscriptionPlanInterval=void 0,function(e){e.yearly="yearly",e.monthly="monthly"}(o||(t.WorkspaceSubscriptionPlanInterval=o={}))},5651:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockBehaviorDataType=void 0,function(e){e.item="Item",e.token="Token",e.asset="Asset",e.component="Component",e.figmaNode="FigmaNode",e.figmaComponent="FigmaComponent"}(o||(t.DocsBlockBehaviorDataType=o={}))},5673:(e,t)=>{var o;function r(e){switch(e.type){case o.documentationItem:return`@page:${e.documentationItemId}`;case o.pageHeading:return`@page:${e.documentationItemId}#${e.pageHeadingId}`;case o.url:return e.url;default:return}}Object.defineProperty(t,"__esModule",{value:!0}),t.linkAttributeToDocsLink=t.docsLinkToLinkAttributes=t.docsLinkToUrl=t.DocsLinkRefType=void 0,function(e){e.documentationItem="DocumentationItem",e.pageHeading="PageHeading",e.url="Url"}(o||(t.DocsLinkRefType=o={})),t.docsLinkToUrl=r,t.docsLinkToLinkAttributes=function(e){const t=r(e);if(t)return{href:t,target:e.openInNewTab?"_blank":"_self"}},t.linkAttributeToDocsLink=function(e,t){if(!e)return;const r="_blank"===t;if(e.startsWith("@page:")){if(e.includes("#")){const[t,n]=e.replace("@page:","").split("#");return{type:o.pageHeading,documentationItemId:t,pageHeadingId:n,openInNewTab:r}}return{type:o.documentationItem,documentationItemId:e.replace("@page:",""),openInNewTab:r}}return{type:o.url,url:e,openInNewTab:r}}},5695:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.CustomDomainErrorCode=void 0,function(e){e.generalError="GeneralError",e.dnsNotConfigured="DNSNotConfigured",e.maintenance="Maintenance"}(o||(t.CustomDomainErrorCode=o={}))},5883:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockItemPropertyOptionRenderingStyle=void 0,function(e){e.segmentedControl="SegmentedControl",e.toggleButton="ToggleButton",e.select="Select",e.checkbox="Checkbox"}(o||(t.DocsBlockItemPropertyOptionRenderingStyle=o={}))},5963:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockOptionRenderingStyle=void 0,function(e){e.segmentedControl="SegmentedControl",e.toggleButton="ToggleButton",e.select="Select",e.checkbox="Checkbox"}(o||(t.DocsBlockOptionRenderingStyle=o={}))},6141:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.VisibilityType=void 0,function(e){e.visible="Visible",e.hidden="Hidden"}(o||(t.VisibilityType=o={}))},6192:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.BlurType=void 0,function(e){e.layer="Layer",e.background="Background"}(o||(t.BlurType=o={}))},6298:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.WorkspaceNPMRegistryAuthType=void 0,function(e){e.basic="Basic",e.bearer="Bearer"}(o||(t.WorkspaceNPMRegistryAuthType=o={}))},6644:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockRichTextPropertyStyle=void 0,function(e){e.title1="Title1",e.title2="Title2",e.title3="Title3",e.title4="Title4",e.title5="Title5",e.quote="Quote",e.callout="Callout",e.default="Default"}(o||(t.DocsBlockRichTextPropertyStyle=o={}))},6839:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockItemPropertyType=void 0,function(e){e.richText="RichText",e.multiRichText="MultiRichText",e.text="Text",e.richTextEditor="RichTextEditor",e.boolean="Boolean",e.number="Number",e.singleSelect="SingleSelect",e.multiSelect="MultiSelect",e.image="Image",e.token="Token",e.tokenType="TokenType",e.tokenProperty="TokenProperty",e.component="Component",e.componentProperty="ComponentProperty",e.asset="Asset",e.assetProperty="AssetProperty",e.embedURL="EmbedURL",e.url="URL",e.markdown="Markdown",e.code="Code",e.codeSandbox="CodeSandbox",e.table="Table",e.divider="Divider",e.storybook="Storybook",e.color="Color",e.figmaNode="FigmaNode",e.figmaComponent="FigmaComponent"}(o||(t.DocsBlockItemPropertyType=o={}))},7040:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.TextDecoration=void 0,function(e){e.original="None",e.underline="Underline",e.strikethrough="Strikethrough"}(o||(t.TextDecoration=o={}))},7291:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockItemVariantLayoutWidth=void 0,function(e){e.c1="1",e.c2="2",e.c3="3",e.c4="4",e.c5="5",e.c6="6",e.c7="7",e.c8="8",e.c9="9",e.c10="10",e.c11="11",e.c12="12"}(o||(t.DocsBlockItemVariantLayoutWidth=o={}))},7379:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyItemType=void 0,function(e){e.group="Group",e.page="Page"}(o||(t.DocumentationLegacyItemType=o={}))},7476:(e,t)=>{var o,r;Object.defineProperty(t,"__esModule",{value:!0}),t.TextAlignment=t.Alignment=void 0,function(e){e.left="Left",e.center="Center",e.stretch="Stretch"}(o||(t.Alignment=o={})),function(e){e.left="Left",e.center="Center",e.right="Right"}(r||(t.TextAlignment=r={}))},7479:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockItemPropertyTextStyle=void 0,function(e){e.small="Small",e.regular="Regular",e.bold="Bold"}(o||(t.DocsBlockItemPropertyTextStyle=o={}))},7737:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.CustomDomainState=void 0,function(e){e.initial="Initial",e.domainSetupInProgress="DomainSetupInProgress",e.domainSetupFailed="DomainSetupFailed",e.domainSetupsSucces="DomainSetupSuccess",e.sslSetupInProgress="SSLSetupInProgress",e.sslSetupFailed="SSLSetupFailed",e.sslSetupSuccess="SSLSetupSuccess"}(o||(t.CustomDomainState=o={}))},7968:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.WorkspaceNPMRegistryType=void 0,function(e){e.npmJS="NPMJS",e.gitHub="GitHub",e.azureDevOps="AzureDevOps",e.artifactory="Artifactory",e.custom="Custom"}(o||(t.WorkspaceNPMRegistryType=o={}))},7971:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsSectionType=void 0,function(e){e.plain="Plain",e.tabs="Tabs"}(o||(t.DocsSectionType=o={}))},8042:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.ImportWarningType=void 0,function(e){e.UnsupportedFill="UnsupportedFill",e.UnsupportedStroke="UnsupportedStroke",e.UnsupportedEffect="UnsupportedEffect",e.StyleNotApplied="StyleNotApplied",e.NoPublishedStyles="NoPublishedStyles",e.NoPublishedComponents="NoPublishedComponents",e.NoPublishedAssets="NoPublishedAssets",e.NoVersionFound="NoVersionFound",e.ComponentHasNoThumbnail="ComponentHasNoThumbnail",e.DuplicateImportedStyleId="DuplicateImportedStyleId",e.DuplicateImportedStylePath="DuplicateImportedStylePath",e.NoPublishedElements="NoPublishedElements",e.NoUnpublishedStyles="NoUnpublishedStyles"}(o||(t.ImportWarningType=o={}))},8061:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockItemPropertyRichTextStyle=void 0,function(e){e.title1="Title1",e.title2="Title2",e.title3="Title3",e.title4="Title4",e.title5="Title5",e.quote="Quote",e.callout="Callout",e.ol="OL",e.ul="UL"}(o||(t.DocsBlockItemPropertyRichTextStyle=o={}))},8095:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockItemVariantLayoutType=void 0,function(e){e.column="Column",e.row="Row"}(o||(t.DocsBlockItemVariantLayoutType=o={}))},8607:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.MS_UNITS=t.PX_UNITS=t.RAW_UNITS=t.LINE_HEIGHT_UNITS=t.SIZE_UNITS=t.Unit=void 0,function(e){e.pixels="Pixels",e.percent="Percent",e.rem="Rem",e.ms="Ms",e.raw="Raw"}(o||(t.Unit=o={})),t.SIZE_UNITS=[o.pixels,o.percent,o.rem],t.LINE_HEIGHT_UNITS=[o.pixels,o.percent,o.rem,o.raw],t.RAW_UNITS=[o.raw],t.PX_UNITS=[o.pixels],t.MS_UNITS=[o.ms]},8738:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.AssetFormat=void 0,function(e){e.png="png",e.pdf="pdf",e.svg="svg"}(o||(t.AssetFormat=o={}))},8890:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockImagePropertyAspectRatio=void 0,function(e){e.auto="Auto",e.square="Square",e.landscape="Landscape",e.portrait="Portrait",e.wide="Wide"}(o||(t.DocsBlockImagePropertyAspectRatio=o={}))},9125:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.ShadowType=void 0,function(e){e.drop="Drop",e.inner="Inner"}(o||(t.ShadowType=o={}))},9133:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockOptionColor=void 0,function(e){e.green="Green",e.red="Red",e.yellow="Yellow",e.blue="Blue",e.purple="Purple",e.orange="Orange",e.pink="Pink",e.teal="Teal",e.grey="Grey",e.lightGrey="LightGrey",e.cyan="Cyan",e.fuchsia="Fuchsia"}(o||(t.DocsBlockOptionColor=o={}))},9377:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockItemEntityType=void 0,function(e){e.token="Token",e.tokenGroup="TokenGroup",e.asset="Asset",e.assetGroup="AssetGroup",e.component="Component",e.componentGroup="ComponentGroup"}(o||(t.DocsBlockItemEntityType=o={}))},9478:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.convertRemoteToUserRole=t.UserRole=void 0;const r=o(4379);var n;!function(e){e.owner="Owner",e.admin="Admin",e.creator="Creator",e.contributor="Contributor",e.billing="Billing",e.viewer="Viewer"}(n||(t.UserRole=n={})),t.convertRemoteToUserRole=e=>{switch(e){case"Owner":return n.owner;case"Admin":return n.admin;case"Creator":return n.creator;case"Contributor":return n.contributor;case"Billing":return n.billing;case"Viewer":return n.viewer;default:throw r.SupernovaError.fromMessage(`Unknown role: ${e}`)}}},9896:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyHeadingType=void 0,function(e){e[e.h1=1]="h1",e[e.h2=2]="h2",e[e.h3=3]="h3"}(o||(t.DocumentationLegacyHeadingType=o={}))},9932:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.docsImageRefToUrl=t.DocsImageRefType=void 0,function(e){e.resource="Resource",e.figmaNode="FigmaNode"}(o||(t.DocsImageRefType=o={})),t.docsImageRefToUrl=function(e,t,r){var n;if(e)switch(e.type){case o.resource:return null===(n=e.resource)||void 0===n?void 0:n.url;case o.figmaNode:if(!e.figmaNode||!e.figmaNode.sourceId||!e.figmaNode.frameReferenceId)return;return t.resources.getFigmaFrameHostedUrl({designSystemId:r.dsId,versionId:r.versionId},e.figmaNode.frameReferenceId);default:return}}}},o={};function r(t){var n=o[t];if(void 0!==n)return n.exports;var i=o[t]={exports:{}};return e[t](i,i.exports,r),i.exports}var n={};(()=>{var e=n;Object.defineProperty(e,"__esModule",{value:!0}),e.TokenType=e.TextDecoration=e.TextCase=e.ShadowType=e.RichTextSpanAttributeType=e.GradientType=e.FrameLayout=e.FrameAlignment=e.IconSet=e.SourceType=e.DocsImageRefType=e.DocsLinkRefType=e.DocsSectionType=e.DocsEntityType=e.DocsEntityGroupBehavior=e.DocsBlockTextPropertyStyle=e.DocsBlockRichTextPropertyStyle=e.DocsBlockOptionColor=e.DocsBlockOptionRenderingStyle=e.DocsBlockItemVariantLayoutWidth=e.DocsBlockItemVariantLayoutType=e.DocsBlockItemPropertyType=e.DocsBlockItemPropertyTextStyle=e.DocsBlockItemPropertyRichTextStyle=e.DocsBlockItemPropertyOptionRenderingStyle=e.DocsBlockItemEntityType=e.DocsBlockImagePropertyAspectRatio=e.DocsBlockBehaviorSelectionType=e.DocsBlockBehaviorDataType=e.DocumentationLegacyPageBlockShortcutType=e.DocumentationLegacyPageBlockThemeType=e.DocumentationLegacyPageBlockType=e.DocumentationLegacyPageAssetType=e.DocumentationLegacyItemType=e.DocumentationLegacyHeadingType=e.DocumentationLegacyGroupBehavior=e.DocumentationLegacyCalloutType=e.BorderStyle=e.BorderPosition=e.BlurType=e.AssetScaleType=e.AssetScale=e.AssetFormat=e.Alignment=e.ALL_TOKEN_TYPES=e.ALL_BORDER_STYLES=e.ALL_BORDER_POSITIONS=e.OPTION_TOKEN_TYPES=e.STRING_TOKEN_TYPES=e.DIMENSION_TOKEN_TYPES=void 0,e.PulsarExecutor=e.OutputFileType=e.CustomDomainState=e.CustomDomainErrorCode=e.ImportWarningType=e.WorkspaceNPMRegistryType=e.WorkspaceNPMRegistryAuthType=e.WorkspaceSubscriptionStatus=e.WorkspaceSubscriptionProductCode=e.WorkspaceSubscriptionPlanInterval=e.VisibilityType=e.UserRole=e.Unit=void 0;var t=r(3788);Object.defineProperty(e,"DIMENSION_TOKEN_TYPES",{enumerable:!0,get:function(){return t.DIMENSION_TOKEN_TYPES}}),Object.defineProperty(e,"STRING_TOKEN_TYPES",{enumerable:!0,get:function(){return t.STRING_TOKEN_TYPES}}),Object.defineProperty(e,"OPTION_TOKEN_TYPES",{enumerable:!0,get:function(){return t.OPTION_TOKEN_TYPES}});var o=r(1160);Object.defineProperty(e,"ALL_BORDER_POSITIONS",{enumerable:!0,get:function(){return o.ALL_BORDER_POSITIONS}});var i=r(4546);Object.defineProperty(e,"ALL_BORDER_STYLES",{enumerable:!0,get:function(){return i.ALL_BORDER_STYLES}});var a=r(3788);Object.defineProperty(e,"ALL_TOKEN_TYPES",{enumerable:!0,get:function(){return a.ALL_TOKEN_TYPES}});var s=r(7476);Object.defineProperty(e,"Alignment",{enumerable:!0,get:function(){return s.Alignment}});var l=r(8738);Object.defineProperty(e,"AssetFormat",{enumerable:!0,get:function(){return l.AssetFormat}});var c=r(915);Object.defineProperty(e,"AssetScale",{enumerable:!0,get:function(){return c.AssetScale}});var u=r(899);Object.defineProperty(e,"AssetScaleType",{enumerable:!0,get:function(){return u.AssetScaleType}});var p=r(6192);Object.defineProperty(e,"BlurType",{enumerable:!0,get:function(){return p.BlurType}});var d=r(1160);Object.defineProperty(e,"BorderPosition",{enumerable:!0,get:function(){return d.BorderPosition}});var T=r(4546);Object.defineProperty(e,"BorderStyle",{enumerable:!0,get:function(){return T.BorderStyle}});var m=r(5102);Object.defineProperty(e,"DocumentationLegacyCalloutType",{enumerable:!0,get:function(){return m.DocumentationLegacyCalloutType}});var f=r(2123);Object.defineProperty(e,"DocumentationLegacyGroupBehavior",{enumerable:!0,get:function(){return f.DocumentationLegacyGroupBehavior}});var y=r(9896);Object.defineProperty(e,"DocumentationLegacyHeadingType",{enumerable:!0,get:function(){return y.DocumentationLegacyHeadingType}});var h=r(7379);Object.defineProperty(e,"DocumentationLegacyItemType",{enumerable:!0,get:function(){return h.DocumentationLegacyItemType}});var g=r(1423);Object.defineProperty(e,"DocumentationLegacyPageAssetType",{enumerable:!0,get:function(){return g.DocumentationLegacyPageAssetType}});var k=r(1846);Object.defineProperty(e,"DocumentationLegacyPageBlockType",{enumerable:!0,get:function(){return k.DocumentationLegacyPageBlockType}});var b=r(1601);Object.defineProperty(e,"DocumentationLegacyPageBlockThemeType",{enumerable:!0,get:function(){return b.DocumentationLegacyPageBlockThemeType}});var S=r(2657);Object.defineProperty(e,"DocumentationLegacyPageBlockShortcutType",{enumerable:!0,get:function(){return S.DocumentationLegacyPageBlockShortcutType}});var v=r(5651);Object.defineProperty(e,"DocsBlockBehaviorDataType",{enumerable:!0,get:function(){return v.DocsBlockBehaviorDataType}});var C=r(3733);Object.defineProperty(e,"DocsBlockBehaviorSelectionType",{enumerable:!0,get:function(){return C.DocsBlockBehaviorSelectionType}});var P=r(8890);Object.defineProperty(e,"DocsBlockImagePropertyAspectRatio",{enumerable:!0,get:function(){return P.DocsBlockImagePropertyAspectRatio}});var O=r(9377);Object.defineProperty(e,"DocsBlockItemEntityType",{enumerable:!0,get:function(){return O.DocsBlockItemEntityType}});var x=r(5883);Object.defineProperty(e,"DocsBlockItemPropertyOptionRenderingStyle",{enumerable:!0,get:function(){return x.DocsBlockItemPropertyOptionRenderingStyle}});var _=r(8061);Object.defineProperty(e,"DocsBlockItemPropertyRichTextStyle",{enumerable:!0,get:function(){return _.DocsBlockItemPropertyRichTextStyle}});var D=r(7479);Object.defineProperty(e,"DocsBlockItemPropertyTextStyle",{enumerable:!0,get:function(){return D.DocsBlockItemPropertyTextStyle}});var I=r(6839);Object.defineProperty(e,"DocsBlockItemPropertyType",{enumerable:!0,get:function(){return I.DocsBlockItemPropertyType}});var N=r(8095);Object.defineProperty(e,"DocsBlockItemVariantLayoutType",{enumerable:!0,get:function(){return N.DocsBlockItemVariantLayoutType}});var R=r(7291);Object.defineProperty(e,"DocsBlockItemVariantLayoutWidth",{enumerable:!0,get:function(){return R.DocsBlockItemVariantLayoutWidth}});var E=r(5963);Object.defineProperty(e,"DocsBlockOptionRenderingStyle",{enumerable:!0,get:function(){return E.DocsBlockOptionRenderingStyle}});var F=r(9133);Object.defineProperty(e,"DocsBlockOptionColor",{enumerable:!0,get:function(){return F.DocsBlockOptionColor}});var j=r(6644);Object.defineProperty(e,"DocsBlockRichTextPropertyStyle",{enumerable:!0,get:function(){return j.DocsBlockRichTextPropertyStyle}});var B=r(306);Object.defineProperty(e,"DocsBlockTextPropertyStyle",{enumerable:!0,get:function(){return B.DocsBlockTextPropertyStyle}});var w=r(4068);Object.defineProperty(e,"DocsEntityGroupBehavior",{enumerable:!0,get:function(){return w.DocsEntityGroupBehavior}});var M=r(1233);Object.defineProperty(e,"DocsEntityType",{enumerable:!0,get:function(){return M.DocsEntityType}});var $=r(7971);Object.defineProperty(e,"DocsSectionType",{enumerable:!0,get:function(){return $.DocsSectionType}});var L=r(5673);Object.defineProperty(e,"DocsLinkRefType",{enumerable:!0,get:function(){return L.DocsLinkRefType}});var H=r(9932);Object.defineProperty(e,"DocsImageRefType",{enumerable:!0,get:function(){return H.DocsImageRefType}});var V=r(4652);Object.defineProperty(e,"SourceType",{enumerable:!0,get:function(){return V.SourceType}});var A=r(934);Object.defineProperty(e,"IconSet",{enumerable:!0,get:function(){return A.IconSet}});var W=r(1255);Object.defineProperty(e,"FrameAlignment",{enumerable:!0,get:function(){return W.FrameAlignment}});var K=r(3718);Object.defineProperty(e,"FrameLayout",{enumerable:!0,get:function(){return K.FrameLayout}});var U=r(1);Object.defineProperty(e,"GradientType",{enumerable:!0,get:function(){return U.GradientType}});var G=r(2674);Object.defineProperty(e,"RichTextSpanAttributeType",{enumerable:!0,get:function(){return G.RichTextSpanAttributeType}});var z=r(9125);Object.defineProperty(e,"ShadowType",{enumerable:!0,get:function(){return z.ShadowType}});var Y=r(922);Object.defineProperty(e,"TextCase",{enumerable:!0,get:function(){return Y.TextCase}});var q=r(7040);Object.defineProperty(e,"TextDecoration",{enumerable:!0,get:function(){return q.TextDecoration}});var Z=r(3788);Object.defineProperty(e,"TokenType",{enumerable:!0,get:function(){return Z.TokenType}});var X=r(8607);Object.defineProperty(e,"Unit",{enumerable:!0,get:function(){return X.Unit}});var J=r(9478);Object.defineProperty(e,"UserRole",{enumerable:!0,get:function(){return J.UserRole}});var Q=r(6141);Object.defineProperty(e,"VisibilityType",{enumerable:!0,get:function(){return Q.VisibilityType}});var ee=r(5503);Object.defineProperty(e,"WorkspaceSubscriptionPlanInterval",{enumerable:!0,get:function(){return ee.WorkspaceSubscriptionPlanInterval}});var te=r(4290);Object.defineProperty(e,"WorkspaceSubscriptionProductCode",{enumerable:!0,get:function(){return te.WorkspaceSubscriptionProductCode}});var oe=r(3607);Object.defineProperty(e,"WorkspaceSubscriptionStatus",{enumerable:!0,get:function(){return oe.WorkspaceSubscriptionStatus}});var re=r(6298);Object.defineProperty(e,"WorkspaceNPMRegistryAuthType",{enumerable:!0,get:function(){return re.WorkspaceNPMRegistryAuthType}});var ne=r(7968);Object.defineProperty(e,"WorkspaceNPMRegistryType",{enumerable:!0,get:function(){return ne.WorkspaceNPMRegistryType}});var ie=r(8042);Object.defineProperty(e,"ImportWarningType",{enumerable:!0,get:function(){return ie.ImportWarningType}});var ae=r(5695);Object.defineProperty(e,"CustomDomainErrorCode",{enumerable:!0,get:function(){return ae.CustomDomainErrorCode}});var se=r(7737);Object.defineProperty(e,"CustomDomainState",{enumerable:!0,get:function(){return se.CustomDomainState}});var le=r(2802);Object.defineProperty(e,"OutputFileType",{enumerable:!0,get:function(){return le.OutputFileType}}),Object.defineProperty(e,"PulsarExecutor",{enumerable:!0,get:function(){return le.PulsarExecutor}})})();var i=t;for(var a in n)i[a]=n[a];n.__esModule&&Object.defineProperty(i,"__esModule",{value:!0})})()},"../../utils/node_modules/change-case/dist/index.js":
/*!**********************************************************!*\
  !*** ../../utils/node_modules/change-case/dist/index.js ***!
  \**********************************************************/(e,t,o)=>{"use strict";o.r(t),o.d(t,{camelCase:()=>d,capitalCase:()=>f,constantCase:()=>y,dotCase:()=>h,kebabCase:()=>g,noCase:()=>p,pascalCase:()=>T,pascalSnakeCase:()=>m,pathCase:()=>k,sentenceCase:()=>b,snakeCase:()=>S,split:()=>c,splitSeparateNumbers:()=>u,trainCase:()=>v});const r=/([\p{Ll}\d])(\p{Lu})/gu,n=/(\p{Lu})([\p{Lu}][\p{Ll}])/gu,i=/(\d)\p{Ll}|(\p{L})\d/u,a=/[^\p{L}\d]+/giu,s="$1\0$2",l="";function c(e){let t=e.trim();t=t.replace(r,s).replace(n,s),t=t.replace(a,"\0");let o=0,i=t.length;for(;"\0"===t.charAt(o);)o++;if(o===i)return[];for(;"\0"===t.charAt(i-1);)i--;return t.slice(o,i).split(/\0/g)}function u(e){const t=c(e);for(let e=0;e<t.length;e++){const o=t[e],r=i.exec(o);if(r){const n=r.index+(r[1]??r[2]).length;t.splice(e,1,o.slice(0,n),o.slice(n))}}return t}function p(e,t){const[o,r,n]=_(e,t);return o+r.map(C(t?.locale)).join(t?.delimiter??" ")+n}function d(e,t){const[o,r,n]=_(e,t),i=C(t?.locale),a=P(t?.locale),s=t?.mergeAmbiguousCharacters?O(i,a):x(i,a);return o+r.map(((e,t)=>0===t?i(e):s(e,t))).join(t?.delimiter??"")+n}function T(e,t){const[o,r,n]=_(e,t),i=C(t?.locale),a=P(t?.locale),s=t?.mergeAmbiguousCharacters?O(i,a):x(i,a);return o+r.map(s).join(t?.delimiter??"")+n}function m(e,t){return f(e,{delimiter:"_",...t})}function f(e,t){const[o,r,n]=_(e,t),i=C(t?.locale),a=P(t?.locale);return o+r.map(O(i,a)).join(t?.delimiter??" ")+n}function y(e,t){const[o,r,n]=_(e,t);return o+r.map(P(t?.locale)).join(t?.delimiter??"_")+n}function h(e,t){return p(e,{delimiter:".",...t})}function g(e,t){return p(e,{delimiter:"-",...t})}function k(e,t){return p(e,{delimiter:"/",...t})}function b(e,t){const[o,r,n]=_(e,t),i=C(t?.locale),a=P(t?.locale),s=O(i,a);return o+r.map(((e,t)=>0===t?s(e):i(e))).join(t?.delimiter??" ")+n}function S(e,t){return p(e,{delimiter:"_",...t})}function v(e,t){return f(e,{delimiter:"-",...t})}function C(e){return!1===e?e=>e.toLowerCase():t=>t.toLocaleLowerCase(e)}function P(e){return!1===e?e=>e.toUpperCase():t=>t.toLocaleUpperCase(e)}function O(e,t){return o=>`${t(o[0])}${e(o.slice(1))}`}function x(e,t){return(o,r)=>{const n=o[0];return(r>0&&n>="0"&&n<="9"?"_"+n:t(n))+e(o.slice(1))}}function _(e,t={}){const o=t.split??(t.separateNumbers?u:c),r=t.prefixCharacters??l,n=t.suffixCharacters??l;let i=0,a=e.length;for(;i<e.length;){const t=e.charAt(i);if(!r.includes(t))break;i++}for(;a>i;){const t=a-1,o=e.charAt(t);if(!n.includes(o))break;a=t}return[e.slice(0,i),o(e.slice(i,a)),e.slice(a)]}},"./config.ts":
/*!*******************!*\
  !*** ./config.ts ***!
  \*******************/(e,t)=>{"use strict";var o,r,n;Object.defineProperty(t,"__esModule",{value:!0}),t.TokenNameStructure=t.FileStructure=t.ThemeExportStyle=void 0,function(e){e.ApplyDirectly="applyDirectly",e.SeparateFiles="separateFiles",e.MergedTheme="mergedTheme"}(o||(t.ThemeExportStyle=o={})),function(e){e.SeparateByType="separateByType",e.SingleFile="singleFile"}(r||(t.FileStructure=r={})),function(e){e.PathAndName="pathAndName",e.NameOnly="nameOnly",e.CollectionPathAndName="collectionPathAndName"}(n||(t.TokenNameStructure=n={}))},"./src/constants/defaults.ts":
/*!***********************************!*\
  !*** ./src/constants/defaults.ts ***!
  \***********************************/(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DEFAULT_TOKEN_PREFIXES=t.DEFAULT_TOKEN_TYPE_FILE_NAMES=void 0,t.DEFAULT_TOKEN_TYPE_FILE_NAMES={Color:"ColorTokens.kt",Typography:"TypographyTokens.kt",Dimension:"DimensionTokens.kt",Size:"SizeTokens.kt",Space:"SpaceTokens.kt",Opacity:"OpacityTokens.kt",FontSize:"FontSizeTokens.kt",LineHeight:"LineHeightTokens.kt",LetterSpacing:"LetterSpacingTokens.kt",ParagraphSpacing:"ParagraphSpacingTokens.kt",BorderWidth:"BorderWidthTokens.kt",BorderRadius:"BorderRadiusTokens.kt",Duration:"DurationTokens.kt",ZIndex:"ZIndexTokens.kt",Shadow:"ShadowTokens.kt",Border:"BorderTokens.kt",Gradient:"GradientTokens.kt",String:"StringTokens.kt",ProductCopy:"ProductCopyTokens.kt",FontFamily:"FontFamilyTokens.kt",FontWeight:"FontWeightTokens.kt",TextCase:"TextCaseTokens.kt",TextDecoration:"TextDecorationTokens.kt",Visibility:"VisibilityTokens.kt",Blur:"BlurTokens.kt"},t.DEFAULT_TOKEN_PREFIXES={Color:"color",Typography:"typography",Dimension:"dimension",Size:"size",Space:"space",Opacity:"opacity",FontSize:"fontSize",LineHeight:"lineHeight",LetterSpacing:"letterSpacing",ParagraphSpacing:"paragraphSpacing",BorderWidth:"borderWidth",BorderRadius:"borderRadius",Duration:"duration",ZIndex:"zIndex",Shadow:"shadow",Border:"border",Gradient:"gradient",String:"string",ProductCopy:"productCopy",FontFamily:"fontFamily",FontWeight:"fontWeight",TextCase:"textCase",TextDecoration:"textDecoration",Visibility:"visibility",Blur:"blur"}},"./src/content/token.ts":
/*!******************************!*\
  !*** ./src/content/token.ts ***!
  \******************************/(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getTokenPrefix=function(e){return n.exportConfiguration.customizeTokenPrefixes?n.exportConfiguration.tokenPrefixes[e]:i.DEFAULT_TOKEN_PREFIXES[e]},t.convertedToken=function(e,t,o,i=[],s){const l=(0,a.tokenName)(e,o,i),c={colorFormat:r.ColorFormat.hex8,allowReferences:n.exportConfiguration.useReferences,decimals:0,indent:n.exportConfiguration.indent,tokenToVariableRef:e=>(0,a.tokenName)(e,o,i)},u=r.KotlinHelper.tokenValue(e,t,c,s),p=r.GeneralHelper.indent(n.exportConfiguration.indent),d=n.exportConfiguration.showDescriptions&&e.description?.trim()?`/* ${e.description.trim()} */\n${p}`:"";return`${p}${d}val ${l} = ${u}`};const r=o(/*! @supernovaio/export-utils */"../../utils/dist/index.js"),n=o(/*! .. */"./src/index.ts"),i=o(/*! ../constants/defaults */"./src/constants/defaults.ts"),a=o(/*! ../utils/token-name-utils */"./src/utils/token-name-utils.ts")},"./src/files/object-file.ts":
/*!**********************************!*\
  !*** ./src/files/object-file.ts ***!
  \**********************************/(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.generateObjectFiles=function(e,t,o,i){if(!n.exportConfiguration.exportBaseValues&&!o)return[];if(n.exportConfiguration.fileStructure===a.FileStructure.SingleFile){const a=function(e,t,o,i=[]){let a=e;if(o&&n.exportConfiguration.exportOnlyThemedTokens&&(a=r.ThemeHelper.filterThemedTokens(a,o),0===a.length))return null;if(!n.exportConfiguration.generateEmptyFiles&&0===a.length)return null;const s=r.FileNameHelper.ensureFileExtension(n.exportConfiguration.singleFileName,"kt"),c=o?`./${r.ThemeHelper.getThemeIdentifier(o,r.StringCase.snakeCase)}`:n.exportConfiguration.nonThemedFilePath,u=l(a,s,o,e,t,i);return r.FileHelper.createTextFile({relativePath:c,fileName:s,content:u})}(e,t,o,i);return a?[a]:[]}return[...new Set(e.map((e=>e.tokenType)))].map((a=>function(e,t,o,i,a){if(!n.exportConfiguration.exportBaseValues&&!i)return null;let c=t.filter((t=>t.tokenType===e));if(i&&n.exportConfiguration.exportOnlyThemedTokens&&(c=r.ThemeHelper.filterThemedTokens(c,i),0===c.length))return null;if(!n.exportConfiguration.generateEmptyFiles&&0===c.length)return null;let u=(0,s.getTokenTypeFileName)(e);const p=i?`./${r.ThemeHelper.getThemeIdentifier(i,r.StringCase.snakeCase)}`:n.exportConfiguration.nonThemedFilePath,d=l(c,u,i,t,o,a);return r.FileHelper.createTextFile({relativePath:p,fileName:u,content:d})}(a,e,t,o,i))).filter((e=>null!==e))};const r=o(/*! @supernovaio/export-utils */"../../utils/dist/index.js"),n=o(/*! .. */"./src/index.ts"),i=o(/*! ../content/token */"./src/content/token.ts"),a=o(/*! ../../config */"./config.ts"),s=o(/*! ../utils/file-utils */"./src/utils/file-utils.ts");function l(e,t,o,a,s,l){const c=o?r.ThemeHelper.getThemeIdentifier(o,r.StringCase.snakeCase):r.NamingHelper.codeSafeVariableName(n.exportConfiguration.nonThemedFilePath,r.StringCase.dotCase),u=`package ${[n.exportConfiguration.packagePrefixName,c].filter(Boolean).join(".")}`,p=new r.ImportCollector,d=`@Immutable\nobject ${t.endsWith(".kt")?t.slice(0,-3):t}`,T=new Map(a.map((e=>[e.id,e]))),m=e.map((e=>(0,i.convertedToken)(e,T,s,l,p))).join("\n");let f=`${u}\n\n${["import androidx.compose.runtime.Immutable",...p.allImports()].sort().join("\n")}\n\n${d} {\n${m}\n}`;return n.exportConfiguration.showGeneratedFileDisclaimer&&(f=r.GeneralHelper.addDisclaimer(n.exportConfiguration.disclaimer,f)),f}},"./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.exportConfiguration=void 0;const r=o(/*! ./files/object-file */"./src/files/object-file.ts"),n=o(/*! @supernovaio/export-utils */"../../utils/dist/index.js"),i=o(/*! ./utils/token-name-utils */"./src/utils/token-name-utils.ts");function a(e){return e.filter((e=>null!==e))}t.exportConfiguration=Pulsar.exportConfig(),Pulsar.export((async(e,o)=>{const s={designSystemId:o.dsId,versionId:o.versionId};let l=[],c=await e.tokens.getTokens(s),u=await e.tokens.getTokenGroups(s),p=await e.tokens.getTokenCollections(s);if(o.brandId){const t=(await e.brands.getBrands(s)).find((e=>e.id===o.brandId||e.idInVersion===o.brandId));if(!t)throw new Error(`Unable to find brand ${o.brandId}.`);c=c.filter((e=>e.brandId===t.id)),u=u.filter((e=>e.brandId===t.id))}if(o.themeIds&&o.themeIds.length>0){const n=await e.tokens.getTokenThemes(s),i=o.themeIds.map((e=>{const t=n.find((t=>t.id===e||t.idInVersion===e));if(!t)throw new Error(`Unable to find theme ${e}.`);return t})).flatMap((t=>{const o=e.tokens.computeTokensByApplyingThemes(c,c,[t]);return(0,r.generateObjectFiles)(o,u,t,p)}));l=a([...t.exportConfiguration.exportBaseValues?(0,r.generateObjectFiles)(c,u,void 0,p):[],...i])}else{l=a([...t.exportConfiguration.exportBaseValues?(0,r.generateObjectFiles)(c,u,void 0,p):[]])}if(!o.isPreview&&t.exportConfiguration.writeNameToProperty){const o=new n.WriteTokenPropStore(e,s);await o.writeTokenProperties(t.exportConfiguration.propertyToWriteNameTo,c,(e=>(0,i.tokenName)(e,u,p)))}return l}))},"./src/utils/file-utils.ts":
/*!*********************************!*\
  !*** ./src/utils/file-utils.ts ***!
  \*********************************/(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getTokenTypeFileName=function(e){const t=n.exportConfiguration.customizeSeparatedByTypeFileNames?n.exportConfiguration.separatedByTypeFileNames[e]:i.DEFAULT_TOKEN_TYPE_FILE_NAMES[e];return r.FileNameHelper.ensureFileExtension(t,"kt")};const r=o(/*! @supernovaio/export-utils */"../../utils/dist/index.js"),n=o(/*! .. */"./src/index.ts"),i=o(/*! ../constants/defaults */"./src/constants/defaults.ts")},"./src/utils/token-name-utils.ts":
/*!***************************************!*\
  !*** ./src/utils/token-name-utils.ts ***!
  \***************************************/(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.tokenName=function(e,t,o=[]){const s=(0,a.getTokenPrefix)(e.tokenType),l=t.find((t=>t.id===e.parentGroupId));let c=null;r.exportConfiguration.tokenNameStructure===n.TokenNameStructure.CollectionPathAndName&&e.collectionId&&(c=o.find((t=>t.persistentId===e.collectionId))??{name:e.collectionId});return i.NamingHelper.codeSafeVariableNameForToken(e,i.StringCase.camelCase,r.exportConfiguration.tokenNameStructure!==n.TokenNameStructure.NameOnly?l:null,[r.exportConfiguration.globalNamePrefix,s,c?.name].filter(Boolean).join(""))};const r=o(/*! ../index */"./src/index.ts"),n=o(/*! ../../config */"./config.ts"),i=o(/*! @supernovaio/export-utils */"../../utils/dist/index.js"),a=o(/*! ../content/token */"./src/content/token.ts")}},t={};function o(r){var n=t[r];if(void 0!==n)return n.exports;var i=t[r]={exports:{}};return e[r].call(i.exports,i,i.exports,o),i.exports}o.d=(e,t)=>{for(var r in t)o.o(t,r)&&!o.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};o("./src/index.ts")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGQuanMiLCJtYXBwaW5ncyI6Ijs7O3NFQUdBLElBQUlBLEVBRkpDLE9BQU9DLGVBQWVDLEVBQVMsYUFBYyxDQUFFQyxPQUFPLElBQ3RERCxFQUFRSCxpQkFBYyxFQUV0QixTQUFXQSxHQUVQQSxFQUFpQixJQUFJLE1BRXJCQSxFQUFrQixLQUFJLE9BRXRCQSxFQUF1QixVQUFJLFlBRTNCQSxFQUFrQixLQUFJLE9BRXRCQSxFQUFrQixLQUFJLE9BRXRCQSxFQUFzQixTQUFJLFdBRTFCQSxFQUFzQixTQUFJLFdBRTFCQSxFQUEwQixhQUFJLGVBRTlCQSxFQUFzQixTQUFJLFdBRTFCQSxFQUFpQixJQUFJLE1BRXJCQSxFQUFrQixLQUFJLE9BRXRCQSxFQUF1QixVQUFJLFlBRTNCQSxFQUEwQixhQUFJLGVBRTlCQSxFQUFtQixNQUFJLFFBRXZCQSxFQUFvQixPQUFJLFNBRXhCQSxFQUF3QixXQUFJLFlBQy9CLENBakNELENBaUNHQSxJQUFnQkcsRUFBUUgsWUFBY0EsRUFBYyxDQUFDLEc7OztxRUM5QnhELElBQUlLLEVBTkpKLE9BQU9DLGVBQWVDLEVBQVMsYUFBYyxDQUFFQyxPQUFPLElBQ3RERCxFQUFRRSxnQkFBYSxFQU1yQixTQUFXQSxHQUVQQSxFQUFzQixVQUFJLFlBRTFCQSxFQUF3QixZQUFJLGNBRTVCQSxFQUF5QixhQUFJLGVBRTdCQSxFQUFvQixRQUFJLFVBRXhCQSxFQUFzQixVQUFJLFlBRTFCQSxFQUFtQixPQUFJLFNBRXZCQSxFQUFzQixVQUFJLFlBRTFCQSxFQUF1QixXQUFJLGFBRTNCQSxFQUFxQixTQUFJLFdBRXpCQSxFQUF5QixhQUFJLGVBRTdCQSxFQUFzQixVQUFJLFlBRTFCQSxFQUFxQixTQUFJLFVBQzVCLENBekJELENBeUJHQSxJQUFlRixFQUFRRSxXQUFhQSxFQUFhLENBQUMsRzs7O3dFQ2hDckRKLE9BQU9DLGVBQWVDLEVBQVMsYUFBYyxDQUFFQyxPQUFPLElBQ3RERCxFQUFRRyxlQUFZLEVBQ3BCLE1BQU1DLEVBQWtCLG1DQUFRLHlGQUMxQkMsRUFBZ0Isc0JBQVEsMkNBQ3hCQyxFQUFnQixzQkFBUSwyQ0E0VDlCTixFQUFRRyxVQTFUUixNQUNJLGlCQUFPSSxDQUFXQyxFQUFPQyxFQUFXQyxHQUVoQyxJQUFJQyxFQUNKLE9BQVFILEVBQU1JLFdBQ1YsS0FBS1IsRUFBZ0JTLFVBQVVDLE1BQzNCSCxFQUFXSSxLQUFLQyxxQkFBcUJSLEVBQU1QLE1BQU9RLEVBQVdDLEdBQzdELE1BQ0osS0FBS04sRUFBZ0JTLFVBQVVJLE9BQzNCTixFQUFXSSxLQUFLRyxzQkFBc0JWLEVBQU1QLE1BQU9RLEVBQVdDLEdBQzlELE1BQ0osS0FBS04sRUFBZ0JTLFVBQVVNLFNBQzNCUixFQUFXSSxLQUFLSyx3QkFBd0JaLEVBQU1QLE1BQU9RLEVBQVdDLEdBQ2hFLE1BQ0osS0FBS04sRUFBZ0JTLFVBQVVRLFVBQy9CLEtBQUtqQixFQUFnQlMsVUFBVVMsS0FDL0IsS0FBS2xCLEVBQWdCUyxVQUFVVSxNQUMvQixLQUFLbkIsRUFBZ0JTLFVBQVVXLFFBQy9CLEtBQUtwQixFQUFnQlMsVUFBVVksU0FDL0IsS0FBS3JCLEVBQWdCUyxVQUFVYSxXQUMvQixLQUFLdEIsRUFBZ0JTLFVBQVVjLGNBQy9CLEtBQUt2QixFQUFnQlMsVUFBVWUsaUJBQy9CLEtBQUt4QixFQUFnQlMsVUFBVWdCLFlBQy9CLEtBQUt6QixFQUFnQlMsVUFBVWlCLE9BQy9CLEtBQUsxQixFQUFnQlMsVUFBVWtCLFNBQy9CLEtBQUszQixFQUFnQlMsVUFBVW1CLE9BQzNCckIsRUFBV0ksS0FBS2tCLHlCQUF5QnpCLEVBQU1QLE1BQU9RLEVBQVdDLEdBQ2pFLE1BQ0osS0FBS04sRUFBZ0JTLFVBQVVxQixPQUMzQnZCLEVBQVdJLEtBQUtvQixzQkFBc0IzQixFQUFNUCxNQUFPUSxFQUFXQyxHQUM5RCxNQUNKLEtBQUtOLEVBQWdCUyxVQUFVdUIsV0FDM0J6QixFQUFXSSxLQUFLc0IsMEJBQTBCN0IsRUFBTVAsTUFBT1EsRUFBV0MsR0FDbEUsTUFDSixLQUFLTixFQUFnQlMsVUFBVXlCLFdBQy9CLEtBQUtsQyxFQUFnQlMsVUFBVTBCLFlBQy9CLEtBQUtuQyxFQUFnQlMsVUFBVTJCLE9BQzNCN0IsRUFBV0ksS0FBSzBCLHNCQUFzQmpDLEVBQU1QLE1BQU9RLEVBQVdDLEdBQzlELE1BQ0osS0FBS04sRUFBZ0JTLFVBQVU2QixTQUMvQixLQUFLdEMsRUFBZ0JTLFVBQVU4QixlQUMvQixLQUFLdkMsRUFBZ0JTLFVBQVUrQixXQUMzQmpDLEVBQVdJLEtBQUs4QixzQkFBc0JyQyxFQUFNUCxNQUFPUSxFQUFXQyxFQUFTRixFQUFNSSxXQUM3RSxNQUNKLEtBQUtSLEVBQWdCUyxVQUFVaUMsS0FDM0JuQyxFQUFXSSxLQUFLZ0Msb0JBQW9CdkMsRUFBTVAsTUFBT1EsRUFBV0MsR0FDNUQsTUFDSixLQUFLTixFQUFnQlMsVUFBVW1DLFdBQzNCckMsRUFBV0ksS0FBS2tDLDBCQUEwQnpDLEVBQU1QLE1BQU9RLEVBQVdDLEdBQ2xFLE1BQ0osUUFDSSxNQUFNLElBQUlOLEVBQWdCOEMscUJBQXFCMUMsRUFBTUksVUFBVyxxREFHeEUsR0FBSUYsRUFBUXlDLGlCQUFrQixDQUMxQixNQUFNQyxFQUFtQjFDLEVBQVF5QyxpQkFBaUJ4QyxFQUFVSCxHQUM1RCxRQUF5QjZDLElBQXJCRCxFQUNBLE9BQU9BLENBRWYsQ0FDQSxPQUFPekMsQ0FDWCxDQUNBLDJCQUFPSyxDQUFxQkYsRUFBT0wsRUFBV0MsR0FDMUMsT0FBT0osRUFBY2dELFlBQVlDLDZCQUE2QnpDLEVBQU9MLEVBQVdDLEVBQ3BGLENBQ0EsNEJBQU9RLENBQXNCRCxFQUFRUixFQUFXQyxHQUM1QyxNQUFNOEMsR0FBWSxFQUFJbkQsRUFBY29ELHVCQUF1QnhDLEVBQU95QyxrQkFBbUJqRCxFQUFXQyxFQUFRaUQsaUJBQ3hHLEdBQUlILEVBQ0EsT0FBTzlDLEVBQVFrRCxtQkFBbUJKLEdBRXRDLE1BQU1LLEVBQ0s5QyxLQUFLa0IseUJBQXlCaEIsRUFBTzZDLE1BQU9yRCxFQUFXQyxHQUQ1RG1ELEVBRUs5QyxLQUFLZ0QsaUJBQWlCOUMsRUFBTytDLE9BRmxDSCxFQUdLOUMsS0FBS0MscUJBQXFCQyxFQUFPSCxNQUFPTCxFQUFXQyxHQUNoREssS0FBS2tELG9CQUFvQmhELEVBQU9pRCxVQUU5QyxNQUFPLEdBQUdMLEtBQWNBLEtBQWNBLEdBQzFDLENBQ0EsOEJBQU96QyxDQUF3QitDLEVBQVcxRCxFQUFXQyxHQUVqRCxPQUFPeUQsRUFBVUMsS0FBS2pELEdBQWFKLEtBQUtzRCxtQkFBbUJsRCxFQUFVVixFQUFXQyxLQUFVNEQsS0FBSyxLQUNuRyxDQUVBLHlCQUFPRCxDQUFtQnBFLEVBQU9RLEVBQVdDLEdBQ3hDLE1BQU04QyxHQUFZLEVBQUluRCxFQUFjb0QsdUJBQXVCeEQsRUFBTXlELGtCQUFtQmpELEVBQVdDLEVBQVFpRCxpQkFDdkcsR0FBSUgsRUFDQSxPQUFPOUMsRUFBUWtELG1CQUFtQkosR0FFdEMsTUFBTWUsRUFBU2pFLEVBQWNnRCxZQUFZa0IsZ0JBQWdCdkUsRUFBTXdFLEdBQUdDLEVBQUdoRSxFQUFRaUUsVUFDekVyRSxFQUFjZ0QsWUFBWWtCLGdCQUFnQnZFLEVBQU0yRSxLQUFLRixFQUFHaEUsRUFBUWlFLFVBQzlERSxFQUFTdkUsRUFBY2dELFlBQVlrQixnQkFBZ0J2RSxFQUFNd0UsR0FBR0ssRUFBR3BFLEVBQVFpRSxVQUN6RXJFLEVBQWNnRCxZQUFZa0IsZ0JBQWdCdkUsRUFBTTJFLEtBQUtFLEVBQUdwRSxFQUFRaUUsVUFFOURJLEVBRE1DLEtBQUtDLE1BQU1KLEVBQVFOLElBQ1osSUFBTVMsS0FBS0UsSUFDeEJDLEVBQVcsSUFDVFosR0FBVSxHQUFLTSxFQUFTLEdBSXhCTixFQUFTLEdBQUtNLEdBQVUsR0FJeEJOLEdBQVUsR0FBS00sRUFBUyxFQU5qQixHQUFLRSxFQVdUQSxFQUFNLElBRWpCLElBQUlLLEVBQWUsR0FDbkIsT0FBUW5GLEVBQU1vRixNQUNWLEtBQUtqRixFQUFnQmtGLGFBQWFDLE9BQzlCSCxFQUFlLG1CQUFtQkQsV0FDbEMsTUFDSixLQUFLL0UsRUFBZ0JrRixhQUFhRSxPQUM5QkosRUFBZSwyQkFDZixNQUNKLEtBQUtoRixFQUFnQmtGLGFBQWFHLFFBQzlCTCxFQUFlLGtCQUNmLE1BQ0osUUFDSUEsRUFBZSxtQkFBbUJELFdBUzFDLE1BQU8sR0FBR0MsSUFMSW5GLEVBQU15RixNQUNmdEIsS0FBS3VCLEdBQ0MsR0FBRzVFLEtBQUtDLHFCQUFxQjJFLEVBQUs3RSxNQUFPTCxFQUFXQyxNQUFZSixFQUFjZ0QsWUFBWWtCLGdCQUFnQyxJQUFoQm1CLEVBQUt6QixTQUFnQnhELEVBQVFpRSxlQUU3SUwsS0FBSyxRQUVkLENBQ0EsK0JBQU9yQyxDQUF5QlosRUFBV1osRUFBV0MsR0FDbEQsTUFBTThDLEdBQVksRUFBSW5ELEVBQWNvRCx1QkFBdUJwQyxFQUFVcUMsa0JBQW1CakQsRUFBV0MsRUFBUWlELGlCQUMzRyxHQUFJSCxFQUNBLE9BQU85QyxFQUFRa0QsbUJBQW1CSixHQUd0QyxHQUFJOUMsRUFBUWtGLGNBQWdCdkUsRUFBVXdFLE9BQVN6RixFQUFnQjBGLEtBQUtDLE9BQVEsQ0FDeEUsTUFBTUMsRUFBVXRGLEVBQVFzRixTQUFXLEdBQzdCQyxFQUFXNUUsRUFBVTZFLFFBQVVGLEVBQ3JDLE1BQU8sR0FBRzFGLEVBQWNnRCxZQUFZa0IsZ0JBQWdCeUIsRUFBVXZGLEVBQVFpRSxjQUMxRSxDQUNBLE1BQU8sR0FBR3JFLEVBQWNnRCxZQUFZa0IsZ0JBQWdCbkQsRUFBVTZFLFFBQVN4RixFQUFRaUUsWUFBWTVELEtBQUtvRixVQUFVOUUsRUFBVXdFLE9BQ3hILENBQ0EsNEJBQU8xRCxDQUFzQmlFLEVBQVMzRixFQUFXQyxHQUM3QyxPQUFPMEYsRUFBUWhDLEtBQUtpQyxHQUFVdEYsS0FBS3VGLGlCQUFpQkQsRUFBTzVGLEVBQVdDLEtBQVU0RCxLQUFLLEtBQ3pGLENBQ0EsdUJBQU9nQyxDQUFpQnJHLEVBQU9RLEVBQVdDLEdBQ3RDLE1BQU04QyxHQUFZLEVBQUluRCxFQUFjb0QsdUJBQXVCeEQsRUFBTXlELGtCQUFtQmpELEVBQVdDLEVBQVFpRCxpQkFDdkcsR0FBSUgsRUFDQSxPQUFPOUMsRUFBUWtELG1CQUFtQkosR0FHdEMsTUFBTStDLEVBQWdCQyxJQUNsQixHQUFJOUYsRUFBUWtGLGFBQWMsQ0FDdEIsTUFDTUssRUFBV08sR0FERDlGLEVBQVFzRixTQUFXLElBRW5DLE1BQU8sR0FBRzFGLEVBQWNnRCxZQUFZa0IsZ0JBQWdCeUIsRUFBVXZGLEVBQVFpRSxjQUMxRSxDQUNBLE1BQU8sR0FBRzZCLEtBQU0sRUFFcEIsTUFBTyxHQUFHdkcsRUFBTW9GLE9BQVNqRixFQUFnQnFHLFdBQVdDLE1BQVEsU0FBVyxLQUFLSCxFQUFhdEcsRUFBTXlFLE1BQU02QixFQUFhdEcsRUFBTTZFLE1BQU15QixFQUFhdEcsRUFBTTZCLFdBQVd5RSxFQUFhdEcsRUFBTTBHLFdBQVc1RixLQUFLQyxxQkFBcUIsSUFDN01mLEVBQU1hLFNBQ0xiLEVBQU11QixTQUFXLENBQUVBLFFBQVN2QixFQUFNdUIsVUFDdkNmLEVBQVdDLElBQ2xCLENBQ0EsZ0NBQU8yQixDQUEwQnBDLEVBQU9RLEVBQVdDLEdBQy9DLE1BQU04QyxHQUFZLEVBQUluRCxFQUFjb0QsdUJBQXVCeEQsRUFBTXlELGtCQUFtQmpELEVBQVdDLEVBQVFpRCxpQkFDdkcsR0FBSUgsRUFDQSxPQUFPOUMsRUFBUWtELG1CQUFtQkosR0FJdEMsTUFBTyxJQURrQixFQUFJbkQsRUFBY3VHLHFCQUFxQjNHLEVBQU00RyxPQUUxRSxDQUNBLDRCQUFPcEUsQ0FBc0J4QyxFQUFPUSxFQUFXQyxHQUMzQyxNQUFNOEMsR0FBWSxFQUFJbkQsRUFBY29ELHVCQUF1QnhELEVBQU15RCxrQkFBbUJqRCxFQUFXQyxFQUFRaUQsaUJBQ3ZHLE9BQUlILEVBQ085QyxFQUFRa0QsbUJBQW1CSixHQUUvQixJQUFJdkQsRUFBTTRHLE9BQ3JCLENBQ0EsNEJBQU9oRSxDQUFzQmlFLEVBQVFyRyxFQUFXQyxFQUFTRSxHQUNyRCxNQUFNNEMsR0FBWSxFQUFJbkQsRUFBY29ELHVCQUF1QnFELEVBQU9wRCxrQkFBbUJqRCxFQUFXQyxFQUFRaUQsaUJBQ3hHLE9BQUlILEVBQ085QyxFQUFRa0QsbUJBQW1CSixHQUVsQzVDLElBQWNSLEVBQWdCUyxVQUFVNkIsU0FDakMzQixLQUFLZ0csY0FBY0QsRUFBTzdHLE9BRWpDVyxJQUFjUixFQUFnQlMsVUFBVThCLGVBQ2pDNUIsS0FBS2lHLG9CQUFvQkYsRUFBTzdHLE9BR3BDNkcsRUFBTzdHLE1BQU1nSCxhQUN4QixDQUNBLDBCQUFPbEUsQ0FBb0JELEVBQU1yQyxFQUFXQyxHQUN4QyxNQUFNOEMsR0FBWSxFQUFJbkQsRUFBY29ELHVCQUF1QlgsRUFBS1ksa0JBQW1CakQsRUFBV0MsRUFBUWlELGlCQUN0RyxPQUFJSCxFQUNPOUMsRUFBUWtELG1CQUFtQkosR0FFL0IsUUFBUXpDLEtBQUtrQix5QkFBeUJhLEVBQUtoQixPQUFRckIsRUFBV0MsS0FDekUsQ0FDQSxnQ0FBT3VDLENBQTBCRCxFQUFZdkMsRUFBV0MsR0FFcEQsTUFBTThDLEdBQVksRUFBSW5ELEVBQWNvRCx1QkFBdUJULEVBQVdVLGtCQUFtQmpELEVBQVdDLEVBQVFpRCxpQkFDNUcsR0FBSUgsRUFDQSxPQUFPOUMsRUFBUWtELG1CQUFtQkosR0FHdEMsTUFBTTBELEdBQXNCLEVBQUk3RyxFQUFjb0QsdUJBQXVCVCxFQUFXVixXQUFXb0Isa0JBQW1CakQsRUFBV0MsRUFBUWlELGlCQUMzSHdELEdBQXNCLEVBQUk5RyxFQUFjb0QsdUJBQXVCVCxFQUFXWixXQUFXc0Isa0JBQW1CakQsRUFBV0MsRUFBUWlELGlCQUMzSHlELEdBQXNCLEVBQUkvRyxFQUFjb0QsdUJBQXVCVCxFQUFXTCxlQUFlZSxrQkFBbUJqRCxFQUFXQyxFQUFRaUQsaUJBQy9IMEQsR0FBZ0IsRUFBSWhILEVBQWNvRCx1QkFBdUJULEVBQVdOLFNBQVNnQixrQkFBbUJqRCxFQUFXQyxFQUFRaUQsaUJBQ25IRSxFQUFPLENBQ1R2QixXQUFZNEUsRUFBc0J4RyxFQUFRa0QsbUJBQW1Cc0QsR0FBdUJsRSxFQUFXVixXQUFXdUUsS0FDMUd6RSxXQUFZK0UsRUFDTnpHLEVBQVFrRCxtQkFBbUJ1RCxJQUMzQixFQUFJOUcsRUFBY3VHLHFCQUFxQjVELEVBQVdaLFdBQVd5RSxNQUNuRWxFLGVBQWdCeUUsRUFDVjFHLEVBQVFrRCxtQkFBbUJ3RCxHQUMzQnBFLEVBQVdMLGVBQWUxQyxRQUFVRyxFQUFnQmtILGVBQWVDLFNBQy9EeEcsS0FBS2lHLG9CQUFvQmhFLEVBQVdMLGVBQWUxQyxZQUNuRG9ELEVBQ1ZYLFNBQVUyRSxFQUNKM0csRUFBUWtELG1CQUFtQnlELEdBQzNCckUsRUFBV04sU0FBU3pDLFFBQVVHLEVBQWdCb0gsU0FBU0QsU0FDbkR4RyxLQUFLZ0csY0FBYy9ELEVBQVdOLFNBQVN6QyxZQUN2Q29ELEVBQ1ZvRSxLQUFNekUsRUFBV04sU0FBU3pDLFFBQVVHLEVBQWdCb0gsU0FBU0UsVUFDN0RqRyxTQUFVVixLQUFLa0IseUJBQXlCZSxFQUFXdkIsU0FBVWhCLEVBQVdDLEdBQ3hFZ0IsV0FBWXNCLEVBQVd0QixXQUNqQlgsS0FBS2tCLHlCQUF5QmUsRUFBV3RCLFdBQVlqQixFQUFXQyxRQUNoRTJDLEdBTUpzRSxFQUFlOUQsRUFBS3BDLFNBSTFCLE1BQU8sR0FOY29DLEVBQUs0RCxLQUFPLGNBQWdCLEtBQzFCNUQsRUFBS3pCLGNBR015QixFQUFLbkMsV0FBYSxHQUFHaUcsS0FENUI5RCxFQUFLbkMsYUFDOERpRyxLQUN2RVQsRUFBc0JyRCxFQUFLdkIsV0FBYSxJQUFLdUIsRUFBS3ZCLGVBRTdFLENBQ0EsdUJBQU95QixDQUFpQjZELEdBQ3BCLE9BQVFBLEdBQ0osS0FBS3hILEVBQWdCeUgsWUFBWUMsT0FDN0IsTUFBTyxTQUNYLEtBQUsxSCxFQUFnQnlILFlBQVlFLE9BQzdCLE1BQU8sU0FDWCxLQUFLM0gsRUFBZ0J5SCxZQUFZRyxNQUM3QixNQUFPLFFBQ1gsS0FBSzVILEVBQWdCeUgsWUFBWUksT0FDN0IsTUFBTyxTQUNYLFFBQ0ksTUFBTyxRQUVuQixDQUNBLDBCQUFPaEUsQ0FBb0JpRSxHQUN2QixPQUFRQSxHQUNKLEtBQUs5SCxFQUFnQitILGVBQWVDLE9BQ2hDLE1BQU8sU0FDWCxLQUFLaEksRUFBZ0IrSCxlQUFlRSxPQUNoQyxNQUFPLFNBQ1gsS0FBS2pJLEVBQWdCK0gsZUFBZUcsUUFFcEMsUUFDSSxNQUFPLFVBRW5CLENBQ0EsZ0JBQU9uQyxDQUFVTixHQUNiLE9BQVFBLEdBQ0osS0FBS3pGLEVBQWdCMEYsS0FBS3lDLFFBQ3RCLE1BQU8sSUFDWCxLQUFLbkksRUFBZ0IwRixLQUFLQyxPQUN0QixNQUFPLEtBQ1gsS0FBSzNGLEVBQWdCMEYsS0FBSzBDLElBQ3RCLE1BQU8sTUFDWCxLQUFLcEksRUFBZ0IwRixLQUFLMkMsSUFDdEIsTUFBTyxHQUNYLEtBQUtySSxFQUFnQjBGLEtBQUs0QyxHQUN0QixNQUFPLEtBQ1gsUUFDSSxNQUFPLEtBRW5CLENBQ0Esb0JBQU8zQixDQUFjckUsR0FDakIsT0FBUUEsR0FDSixLQUFLdEMsRUFBZ0JvSCxTQUFTRCxTQUMxQixNQUFPLE9BQ1gsS0FBS25ILEVBQWdCb0gsU0FBU21CLE1BQzFCLE1BQU8sWUFDWCxLQUFLdkksRUFBZ0JvSCxTQUFTb0IsTUFDMUIsTUFBTyxZQUNYLEtBQUt4SSxFQUFnQm9ILFNBQVNxQixNQUMxQixNQUFPLGFBQ1gsS0FBS3pJLEVBQWdCb0gsU0FBU0UsVUFDMUIsTUFBTyxhQUVuQixDQUNBLDBCQUFPVixDQUFvQnJFLEdBQ3ZCLE9BQVFBLEdBQ0osS0FBS3ZDLEVBQWdCa0gsZUFBZUMsU0FDaEMsTUFBTyxPQUNYLEtBQUtuSCxFQUFnQmtILGVBQWV3QixVQUNoQyxNQUFPLFlBQ1gsS0FBSzFJLEVBQWdCa0gsZUFBZXlCLGNBQ2hDLE1BQU8sZUFFbkIsRTs7OzBFQzlUSmpKLE9BQU9DLGVBQWVDLEVBQVMsYUFBYyxDQUFFQyxPQUFPLElBQ3RERCxFQUFRc0QsaUJBQWMsRUFDdEIsTUFBTTBGLEVBQWdCLDZCQUFRLHlDQUN4QjNJLEVBQWdCLHNCQUFRLDJDQUU5QixNQUFNaUQsRUFTRixtQ0FBT0MsQ0FBNkJ6QyxFQUFPTCxFQUFXQyxHQUNsRCxJQUFJdUksRUFDQUMsRUFBcUIsS0FDckJDLEVBQXVCLEtBRTNCLE1BQU1DLEdBQVksRUFBSS9JLEVBQWNvRCx1QkFBdUIzQyxFQUFNNEMsa0JBQW1CakQsRUFBV0MsRUFBUWlELGlCQUN2RyxHQUFJeUYsRUFDQUgsRUFBb0J2SSxFQUFRa0QsbUJBQW1Cd0YsT0FFOUMsQ0FDRCxNQUFNQyxHQUFhLEVBQUloSixFQUFjb0QsdUJBQXVCM0MsRUFBTUEsTUFBTTRDLGtCQUFtQmpELEVBQVdDLEVBQVFpRCxpQkFDMUcwRixJQUNBSCxFQUFxQnhJLEVBQVFrRCxtQkFBbUJ5RixJQUVwRCxNQUFNQyxHQUFlLEVBQUlqSixFQUFjb0QsdUJBQXVCM0MsRUFBTVUsUUFBUWtDLGtCQUFtQmpELEVBQVdDLEVBQVFpRCxpQkFDOUcyRixJQUNBSCxFQUF1QnpJLEVBQVFrRCxtQkFBbUIwRixHQUUxRCxDQUVBLEdBQUlMLEVBQ0EsT0FBT0EsRUFHWCxJQUFLQSxJQUFzQkMsSUFBdUJDLEVBQXNCLENBQ3BFLE1BQU1JLEVBQVN4SSxLQUFLeUksZUFBZTFJLEVBQU9KLEVBQVErSSxZQUFhL0ksRUFBUWlFLFVBQ3ZFLE9BQU9qRSxFQUFRZ0osdUJBQXlCaEosRUFBUWdKLHVCQUF1QkgsR0FBVUEsQ0FDckYsQ0FFQSxJQUFJQSxFQUNKLE9BQVE3SSxFQUFRK0ksYUFDWixLQUFLVCxFQUFjbkosWUFBWThKLElBQy9CLEtBQUtYLEVBQWNuSixZQUFZK0osS0FDL0IsS0FBS1osRUFBY25KLFlBQVlnSyxVQUMzQk4sRUFBU3hJLEtBQUsrSSxXQUFXcEosRUFBUStJLFlBQWExSSxLQUFLZ0osbUJBQW1CakosR0FBUUEsRUFBTVUsUUFBUTBFLFFBQVN4RixFQUFRaUUsU0FBVXVFLEVBQW9CQyxHQUMzSSxNQUNKLFFBQ0lJLEVBQVN4SSxLQUFLeUksZUFBZTFJLEVBQU9KLEVBQVErSSxZQUFhL0ksRUFBUWlFLFVBRXpFLE9BQU9qRSxFQUFRZ0osdUJBQXlCaEosRUFBUWdKLHVCQUF1QkgsR0FBVUEsQ0FDckYsQ0FJQSxxQkFBT0MsQ0FBZTFJLEVBQU9rSixFQUFRckYsRUFBVyxHQUM1QyxPQUFRcUYsR0FDSixLQUFLaEIsRUFBY25KLFlBQVlvSyxLQUMvQixLQUFLakIsRUFBY25KLFlBQVlxSyxLQUMvQixLQUFLbEIsRUFBY25KLFlBQVlzSyxTQUMvQixLQUFLbkIsRUFBY25KLFlBQVl1SyxTQUMvQixLQUFLcEIsRUFBY25KLFlBQVl3SyxTQUMvQixLQUFLckIsRUFBY25KLFlBQVl5SyxhQUMzQixPQUFPdkosS0FBS3dKLFdBQVdQLEVBQVFqSixLQUFLZ0osbUJBQW1CakosR0FBUUEsRUFBTVUsUUFBUTBFLFNBQ2pGLEtBQUs4QyxFQUFjbkosWUFBWThKLElBQy9CLEtBQUtYLEVBQWNuSixZQUFZK0osS0FDL0IsS0FBS1osRUFBY25KLFlBQVlnSyxVQUMzQixPQUFPOUksS0FBSytJLFdBQVdFLEVBQVFqSixLQUFLZ0osbUJBQW1CakosR0FBUUEsRUFBTVUsUUFBUTBFLFFBQVN2QixFQUFVLEtBQU0sTUFDMUcsS0FBS3FFLEVBQWNuSixZQUFZMkssSUFDL0IsS0FBS3hCLEVBQWNuSixZQUFZNEssS0FDL0IsS0FBS3pCLEVBQWNuSixZQUFZNkssVUFDM0IsT0FBTzNKLEtBQUs0SixXQUFXWCxFQUFRakosS0FBSzZKLDBCQUEwQjlKLEdBQVFBLEVBQU1VLFFBQVEwRSxRQUFTdkIsR0FDakcsS0FBS3FFLEVBQWNuSixZQUFZZ0wsYUFDM0IsT0FBTzlKLEtBQUsrSixlQUFlL0osS0FBS2dKLG1CQUFtQmpKLEdBQVFBLEVBQU1VLFFBQVEwRSxRQUFTdkIsR0FDdEYsS0FBS3FFLEVBQWNuSixZQUFZa0wsTUFDL0IsS0FBSy9CLEVBQWNuSixZQUFZbUwsT0FDL0IsS0FBS2hDLEVBQWNuSixZQUFZb0wsV0FDM0IsT0FBT2xLLEtBQUttSyxhQUFhbEIsRUFBUWpKLEtBQUtnSixtQkFBbUJqSixHQUFRQSxFQUFNVSxRQUFRMEUsUUFBU3ZCLEdBQzVGLFFBQ0ksT0FBTzVELEtBQUt3SixXQUFXdkIsRUFBY25KLFlBQVl5SyxhQUFjdkosS0FBS2dKLG1CQUFtQmpKLEdBQVFBLEVBQU1VLFFBQVEwRSxTQUV6SCxDQUVBLGlCQUFPNEQsQ0FBV0UsRUFBUWxKLEVBQU9xSyxFQUFPeEcsRUFBVXlHLEVBQWlCQyxHQUMvRCxJQUFJQyxFQU9KLE9BTElBLEVBREF0QixJQUFXaEIsRUFBY25KLFlBQVkrSixNQUFTSSxJQUFXaEIsRUFBY25KLFlBQVlnSyxXQUFhc0IsRUFBUSxFQUN6RixRQUFRQyxHQUFvQyxHQUFHdEssRUFBTXlLLE1BQU16SyxFQUFNMEssTUFBTTFLLEVBQU0ySyxRQUFRSixHQUF3Q3RLLEtBQUt5RCxnQkFBZ0IyRyxFQUFPeEcsTUFHekosT0FBT3lHLEdBQW9DLEdBQUd0SyxFQUFNeUssTUFBTXpLLEVBQU0wSyxNQUFNMUssRUFBTTJLLE9BRXhGSCxDQUNYLENBRUEsaUJBQU9mLENBQVdQLEVBQVFsSixFQUFPcUssR0FFN0IsSUFBSU8sRUFBZSxHQUFHM0ssS0FBSzRLLEtBQUs3SyxFQUFNeUssS0FBS3hLLEtBQUs0SyxLQUFLN0ssRUFBTTBLLEtBQUt6SyxLQUFLNEssS0FBSzdLLEVBQU0ySyxLQVloRixPQVhJekIsSUFBV2hCLEVBQWNuSixZQUFZcUssTUFDckNGLElBQVdoQixFQUFjbkosWUFBWXVLLFVBQ3BDSixJQUFXaEIsRUFBY25KLFlBQVl3SyxVQUFZYyxFQUFRLEdBQ3pEbkIsSUFBV2hCLEVBQWNuSixZQUFZeUssY0FBZ0JhLEVBQVEsS0FFOURPLEdBQWdCLEdBQUczSyxLQUFLNEssS0FBSzNHLEtBQUs0RyxNQUFjLElBQVJULE9BRXhDbkIsSUFBV2hCLEVBQWNuSixZQUFZc0ssVUFBWUgsSUFBV2hCLEVBQWNuSixZQUFZdUssVUFBWUosSUFBV2hCLEVBQWNuSixZQUFZeUssZUFFdklvQixFQUFlLElBQUlBLEtBRWhCQSxDQUNYLENBRUEsaUJBQU9mLENBQVdYLEVBQVFsSixFQUFPcUssRUFBT3hHLEdBRXBDLE1BQU1rSCxFQUFNN0csS0FBSzZHLElBQUkvSyxFQUFNeUssRUFBR3pLLEVBQU0wSyxFQUFHMUssRUFBTTJLLEdBQ3ZDSyxFQUFNOUcsS0FBSzhHLElBQUloTCxFQUFNeUssRUFBR3pLLEVBQU0wSyxFQUFHMUssRUFBTTJLLEdBQzdDLElBc0JJTSxFQXRCQUMsRUFBSSxFQUNKQyxFQUFJLEVBQ0pDLEdBQUtMLEVBQU1DLEdBQU8sRUFDdEIsR0FBSUQsSUFBUUMsRUFDUkUsRUFBSUMsRUFBSSxNQUVQLENBQ0QsTUFBTUUsRUFBUU4sRUFBTUMsRUFFcEIsT0FEQUcsRUFBSUMsRUFBSSxHQUFNQyxHQUFTLEVBQUlOLEVBQU1DLEdBQU9LLEdBQVNOLEVBQU1DLEdBQy9DRCxHQUNKLEtBQUsvSyxFQUFNeUssRUFDUFMsR0FBS2xMLEVBQU0wSyxFQUFJMUssRUFBTTJLLEdBQUtVLEdBQVNyTCxFQUFNMEssRUFBSTFLLEVBQU0ySyxFQUFJLEVBQUksR0FDM0QsTUFDSixLQUFLM0ssRUFBTTBLLEVBQ1BRLEdBQUtsTCxFQUFNMkssRUFBSTNLLEVBQU15SyxHQUFLWSxFQUFRLEVBQ2xDLE1BQ0osS0FBS3JMLEVBQU0ySyxFQUNQTyxHQUFLbEwsRUFBTXlLLEVBQUl6SyxFQUFNMEssR0FBS1csRUFBUSxFQUcxQ0gsR0FBSyxDQUNULENBUUEsT0FMSUQsRUFEQS9CLElBQVdoQixFQUFjbkosWUFBWTRLLE1BQVNULElBQVdoQixFQUFjbkosWUFBWTZLLFdBQWFTLEVBQVEsRUFDekYsUUFBUW5HLEtBQUs0RyxNQUFVLElBQUpJLFFBQWNoSCxLQUFLNEcsTUFBVSxJQUFKSyxRQUFjakgsS0FBSzRHLE1BQVUsSUFBSk0sUUFBY25MLEtBQUt5RCxnQkFBZ0IyRyxFQUFPeEcsTUFHL0csT0FBT0ssS0FBSzRHLE1BQVUsSUFBSkksUUFBY2hILEtBQUs0RyxNQUFVLElBQUpLLFFBQWNqSCxLQUFLNEcsTUFBVSxJQUFKTSxPQUVoRkgsQ0FDWCxDQUVBLHFCQUFPakIsQ0FBZWhLLEVBQU9xSyxFQUFPeEcsRUFBVyxHQUMzQyxJQUFJeUgsRUFBbUIsa0JBQWtCckwsS0FBSzRLLEtBQUs3SyxFQUFNeUssS0FBS3hLLEtBQUs0SyxLQUFLN0ssRUFBTTBLLEtBQUt6SyxLQUFLNEssS0FBSzdLLEVBQU0ySyxNQUluRyxPQUhJTixFQUFRLElBQ1JpQixHQUFvQix1QkFBdUJqQixNQUV4Q2lCLENBQ1gsQ0FFQSx5QkFBT3JDLENBQW1CakosR0FDdEIsTUFBTyxDQUNIeUssRUFBR3ZHLEtBQUs0RyxNQUFNOUssRUFBTUEsTUFBTXlLLEdBQzFCQyxFQUFHeEcsS0FBSzRHLE1BQU05SyxFQUFNQSxNQUFNMEssR0FDMUJDLEVBQUd6RyxLQUFLNEcsTUFBTTlLLEVBQU1BLE1BQU0ySyxHQUVsQyxDQUVBLGdDQUFPYixDQUEwQjlKLEVBQU82RCxFQUFXLEdBQy9DLE1BQU8sQ0FDSDRHLEVBQUd4SyxLQUFLeUQsZ0JBQWdCMUQsRUFBTUEsTUFBTXlLLEVBQUksSUFBSzVHLEdBQzdDNkcsRUFBR2xJLEVBQVlrQixnQkFBZ0IxRCxFQUFNQSxNQUFNMEssRUFBSSxJQUFLN0csR0FDcEQ4RyxFQUFHbkksRUFBWWtCLGdCQUFnQjFELEVBQU1BLE1BQU0ySyxFQUFJLElBQUs5RyxHQUU1RCxDQUVBLHNCQUFPSCxDQUFnQnZFLEVBQU8wRSxFQUFVMEgsR0FBb0IsR0FDeEQsTUFBTUMsRUFBYXRILEtBQUt1SCxJQUFJLEdBQUk1SCxHQUMxQjZILEVBQVV4SCxLQUFLNEcsTUFBTTNMLEVBQVFxTSxHQUFjQSxFQUNqRCxPQUFJRCxFQUVPSSxPQUFPRCxFQUFRRSxRQUFRL0gsSUFHM0JnSSxXQUFXSCxFQUFRRSxRQUFRL0gsR0FDdEMsQ0FFQSxXQUFPZ0gsQ0FBSzFMLEdBQ1IsT0FBT0EsRUFBTTJNLFNBQVMsSUFBSUMsU0FBUyxFQUFHLElBQzFDLENBUUEsbUJBQU8zQixDQUFhbEIsRUFBUWxKLEVBQU9xSyxFQUFPeEcsR0FFdEMsTUFBTSxFQUFFdUgsRUFBQyxFQUFFWSxFQUFDLEVBQUVkLEdBQU1qTCxLQUFLZ00sV0FBV2pNLEVBQU15SyxFQUFHekssRUFBTTBLLEVBQUcxSyxFQUFNMkssR0FFNUQsT0FBUXpCLEdBQ0osS0FBS2hCLEVBQWNuSixZQUFZbUwsT0FDM0IsTUFBTyxTQUFTa0IsTUFBTVksS0FBS2QsT0FBT2pMLEtBQUt5RCxnQkFBd0IsSUFBUjJHLEVBQWF4RyxPQUN4RSxLQUFLcUUsRUFBY25KLFlBQVlvTCxXQUMzQixPQUFPRSxFQUFRLEVBQ1QsU0FBU2UsTUFBTVksS0FBS2QsT0FBT2pMLEtBQUt5RCxnQkFBd0IsSUFBUjJHLEVBQWF4RyxPQUM3RCxTQUFTdUgsTUFBTVksS0FBS2QsS0FDOUIsS0FBS2hELEVBQWNuSixZQUFZa0wsTUFDL0IsUUFDSSxNQUFPLFNBQVNtQixNQUFNWSxLQUFLZCxLQUV2QyxDQUtBLGlCQUFPZSxDQUFXeEIsRUFBR0MsRUFBR0MsR0FFcEIsTUFBTXVCLEVBQUtqTSxLQUFLa00sYUFBYTFCLEVBQUksS0FDM0IyQixFQUFLbk0sS0FBS2tNLGFBQWF6QixFQUFJLEtBQzNCMkIsRUFBS3BNLEtBQUtrTSxhQUFheEIsRUFBSSxLQUUzQi9HLEVBQUksU0FBWXNJLEVBQUssU0FBWUUsRUFBSyxTQUFZQyxFQUNsRHJJLEVBQUksU0FBWWtJLEVBQUssU0FBWUUsRUFBSyxRQUFZQyxFQUNsREMsRUFBSSxTQUFZSixFQUFLLFFBQVlFLEVBQUssU0FBWUMsRUFFbERFLEVBQVEsWUFBZTNJLEVBQUksWUFBZUksRUFBSSxZQUFlc0ksRUFDN0RFLEVBQVEsWUFBZTVJLEVBQUksWUFBZUksRUFBSSxZQUFlc0ksRUFDN0RHLEVBQVEsWUFBZTdJLEVBQUksWUFBZUksRUFBSSxXQUFlc0ksRUFFN0RJLEVBQUt4SSxLQUFLeUksS0FBS0osR0FDZkssRUFBSzFJLEtBQUt5SSxLQUFLSCxHQUNmSyxFQUFLM0ksS0FBS3lJLEtBQUtGLEdBRWZLLEVBQUksWUFBZUosRUFBSyxXQUFlRSxFQUFLLFlBQWVDLEVBQzNERSxFQUFRLGFBQWVMLEVBQUssWUFBZUUsRUFBSyxZQUFlQyxFQUMvREcsRUFBUSxZQUFlTixFQUFLLFlBQWVFLEVBQUssV0FBZUMsRUFFL0RJLEVBQUkvSSxLQUFLZ0osS0FBS0gsRUFBUUEsRUFBUUMsRUFBUUEsR0FDNUMsSUFBSTlCLEVBQStCLElBQTNCaEgsS0FBS0MsTUFBTTZJLEVBQU9ELEdBQWU3SSxLQUFLRSxHQU05QyxPQUpJOEcsRUFBSSxJQUNKQSxHQUFLLEtBR0YsQ0FDSEUsRUFBR25MLEtBQUt5RCxnQkFBb0IsSUFBSm9KLEVBQVMsR0FDakNkLEVBQUcvTCxLQUFLeUQsZ0JBQWdCdUosRUFBRyxHQUFHLEdBQzlCL0IsRUFBR2pMLEtBQUt5RCxnQkFBZ0J3SCxFQUFHLEdBRW5DLENBSUEsbUJBQU9pQixDQUFhdkksR0FDaEIsT0FBT0EsR0FBSyxPQUNOQSxFQUFJLE1BQ0pNLEtBQUt1SCxLQUFLN0gsRUFBSSxNQUFTLE1BQU8sSUFDeEMsRUFFSjFFLEVBQVFzRCxZQUFjQSxDOzs7eUVDblF0QnhELE9BQU9DLGVBQWVDLEVBQVMsYUFBYyxDQUFFQyxPQUFPLElBQ3RERCxFQUFRaU8sZ0JBQWEsRUFDckIsTUFBTTdOLEVBQWtCLG1DQUFRLHlGQStCaENKLEVBQVFpTyxXQTdCUixNQUVJLDJCQUFPQyxFQUFxQixhQUFFQyxFQUFZLFNBQUVDLEVBQVEsSUFBRUMsSUFDbEQsTUFBTyxDQUNIQyxLQUFNSCxFQUNOSSxLQUFNSCxFQUNOL0ksS0FBTWpGLEVBQWdCb08sZUFBZUMsY0FDckNKLElBQUtBLEVBRWIsQ0FFQSxxQkFBT0ssRUFBZSxhQUFFUCxFQUFZLFNBQUVDLEVBQVEsUUFBRU8sSUFDNUMsTUFBTyxDQUNITCxLQUFNSCxFQUNOSSxLQUFNSCxFQUNOL0ksS0FBTWpGLEVBQWdCb08sZUFBZTNILEtBQ3JDOEgsUUFBU0EsRUFFakIsQ0FFQSx1QkFBT0MsRUFBaUIsYUFBRVQsRUFBWSxTQUFFQyxFQUFRLEtBQUV2SyxJQUM5QyxNQUFPLENBQ0h5SyxLQUFNSCxFQUNOSSxLQUFNSCxFQUNOL0ksS0FBTWpGLEVBQWdCb08sZUFBZUssT0FDckNoTCxLQUFNQSxFQUVkLEU7Ozs2RUMvQkovRCxPQUFPQyxlQUFlQyxFQUFTLGFBQWMsQ0FBRUMsT0FBTyxJQUN0REQsRUFBUThPLG9CQUFpQixFQUN6QixNQUFNQyxFQUFlLDRCQUFRLHdDQUN2QkMsRUFBaUIsdUJBQVEsNENBMEQvQmhQLEVBQVE4TyxlQXpEUixNQUlJLDBCQUFPRyxDQUFvQmIsRUFBVWMsR0FFakMsTUFBTUMsRUFBc0JELEVBQVVFLFdBQVcsS0FBT0YsRUFBWSxJQUFJQSxJQUN4RSxPQUFLZCxFQUFTbkgsY0FBY29JLFNBQVNGLEVBQW9CbEksZUFHbERtSCxFQUZJQSxFQUFXZSxDQUcxQixDQUlBLDJCQUFPRyxDQUFxQmxCLEVBQVVtQixFQUFRQyxHQUUxQyxNQUFNQyxFQUFtQkYsRUFBT0gsV0FBVyxLQUFPRyxFQUFTLElBQUlBLElBQ3pERyxFQUFtQkYsRUFBT0osV0FBVyxLQUFPSSxFQUFTLElBQUlBLElBQy9ELE9BQU9wQixFQUFTdUIsUUFBUSxJQUFJQyxPQUFPLEdBQUdILE1BQXNCQyxFQUNoRSxDQUlBLDhCQUFPRyxDQUF3QnhLLEVBQU02SixFQUFZLE9BQVFZLEVBQWFmLEVBQWE3TyxXQUFXNlAsV0FDMUYsTUE0Qk1aLEVBQXNCRCxFQUFVRSxXQUFXLEtBQU9GLEVBQVksSUFBSUEsSUFDeEUsT0FBT0YsRUFBZWdCLGFBQWFDLHFCQTdCakIsQ0FDZEMsTUFBTyxRQUNQQyxXQUFZLGFBQ1pDLFVBQVcsWUFDWEMsS0FBTSxPQUNOQyxNQUFPLFFBQ1BDLFFBQVMsVUFDVEMsU0FBVSxZQUNWQyxXQUFZLGNBQ1pDLGNBQWUsaUJBQ2ZDLGlCQUFrQixvQkFDbEJDLFlBQWEsZUFDYkMsYUFBYyxnQkFDZEMsU0FBVSxXQUNWQyxPQUFRLFVBQ1JDLE9BQVEsU0FDUkMsT0FBUSxTQUNSQyxTQUFVLFdBQ1ZDLE9BQVEsU0FDUkMsWUFBYSxlQUNiQyxXQUFZLGNBQ1pDLFdBQVksY0FDWjlKLFNBQVUsWUFDVkYsZUFBZ0Isa0JBQ2hCaUssV0FBWSxhQUNaQyxLQUFNLFFBSXdEbk0sR0FBT3lLLEdBQWNYLENBQzNGLEU7OzswRUMzREpyUCxPQUFPQyxlQUFlQyxFQUFTLGFBQWMsQ0FBRUMsT0FBTyxJQUN0REQsRUFBUXlSLG1CQUFnQixFQXdCeEJ6UixFQUFReVIsY0F2QlIsTUFNSSxhQUFPQyxDQUFPQyxFQUFTLEdBQ25CLE1BQU8sSUFBSUMsT0FBTzVNLEtBQUs2RyxJQUFJLEVBQUc4RixHQUNsQyxDQU9BLG9CQUFPRSxDQUFjQyxFQUFZbkQsR0FDN0IsSUFBS21ELEVBQ0QsT0FBT25ELEVBR1gsTUFBTyxXQURxQm1ELEVBQVduQyxRQUFRLE1BQU8scUJBQ0poQixHQUN0RCxFOzs7MkVDdkJKN08sT0FBT0MsZUFBZUMsRUFBUyxhQUFjLENBQUVDLE9BQU8sSUFDdERELEVBQVErUixhQUFlL1IsRUFBUWdTLGdCQUFrQmhTLEVBQVFpUyxnQkFBYSxFQUN0RSxNQUFNN1IsRUFBa0IsbUNBQVEseUZBQzFCRSxFQUFnQixzQkFBUSwyQ0FDeEJELEVBQWdCLHNCQUFRLDJDQUN4QjZSLEVBQWtCLHdCQUFRLDZDQUdoQyxJQUFJRCxHQUNKLFNBQVdBLEdBQ1BBLEVBQVdBLEVBQWtCLE1BQUksR0FBSyxRQUN0Q0EsRUFBV0EsRUFBZSxHQUFJLEdBQUssS0FDbkNBLEVBQVdBLEVBQWUsR0FBSSxHQUFLLEtBQ25DQSxFQUFXQSxFQUFtQixPQUFJLEdBQUssU0FDdkNBLEVBQVdBLEVBQWtCLE1BQUksR0FBSyxRQUN0Q0EsRUFBV0EsRUFBcUIsU0FBSSxHQUFLLFdBQ3pDQSxFQUFXQSxFQUFtQixPQUFJLEdBQUssU0FDdkNBLEVBQVdBLEVBQXlCLGFBQUksR0FBSyxlQUM3Q0EsRUFBV0EsRUFBcUIsU0FBSSxHQUFLLFdBQ3pDQSxFQUFXQSxFQUFpQixLQUFJLEdBQUssT0FDckNBLEVBQVdBLEVBQXVCLFdBQUksSUFBTSxhQUM1Q0EsRUFBV0EsRUFBMkIsZUFBSSxJQUFNLGlCQUNoREEsRUFBV0EsRUFBc0IsVUFBSSxJQUFNLFdBQzlDLENBZEQsQ0FjR0EsSUFBZWpTLEVBQVFpUyxXQUFhQSxFQUFhLENBQUMsSUFnRHJEalMsRUFBUWdTLGdCQTlDUixNQUNJLFdBQUFHLEdBQ0lwUixLQUFLcVIsTUFBUSxJQUFJQyxHQUNyQixDQUtBLEdBQUFDLElBQU9GLEdBQ0hBLEVBQU1HLFNBQVM3TixHQUFNM0QsS0FBS3FSLE1BQU1JLElBQUk5TixJQUN4QyxDQUlBLFVBQUErTixHQUNJLE1BQU1DLEVBQWEsR0E0Qm5CLE9BM0JJM1IsS0FBS3FSLE1BQU1PLElBQUlWLEVBQVcvQixRQUMxQndDLEVBQVdFLEtBQUssNkNBQ2hCN1IsS0FBS3FSLE1BQU1PLElBQUlWLEVBQVdZLEtBQzFCSCxFQUFXRSxLQUFLLHNDQUNoQjdSLEtBQUtxUixNQUFNTyxJQUFJVixFQUFXYSxLQUMxQkosRUFBV0UsS0FBSyxzQ0FDaEI3UixLQUFLcVIsTUFBTU8sSUFBSVYsRUFBV2MsU0FDMUJMLEVBQVdFLEtBQUssOENBQ2hCN1IsS0FBS3FSLE1BQU1PLElBQUlWLEVBQVdlLFFBQzFCTixFQUFXRSxLQUFLLDZDQUNoQjdSLEtBQUtxUixNQUFNTyxJQUFJVixFQUFXZ0IsV0FDMUJQLEVBQVdFLEtBQUssZ0RBQ2hCN1IsS0FBS3FSLE1BQU1PLElBQUlWLEVBQVdqQixTQUMxQjBCLEVBQVdFLEtBQUssOENBQ2hCN1IsS0FBS3FSLE1BQU1PLElBQUlWLEVBQVdpQixlQUMxQlIsRUFBV0UsS0FBSyxtREFDaEI3UixLQUFLcVIsTUFBTU8sSUFBSVYsRUFBV2tCLFlBQzFCVCxFQUFXRSxLQUFLLHVDQUNaN1IsS0FBS3FSLE1BQU1PLElBQUlWLEVBQVdULE9BQzFCa0IsRUFBV0UsS0FBSyx5Q0FFcEI3UixLQUFLcVIsTUFBTU8sSUFBSVYsRUFBV1gsYUFDMUJvQixFQUFXRSxLQUFLLG1EQUNoQjdSLEtBQUtxUixNQUFNTyxJQUFJVixFQUFXM0ssaUJBQzFCb0wsRUFBV0UsS0FBSyxrREFDaEI3UixLQUFLcVIsTUFBTU8sSUFBSVYsRUFBV21CLFlBQzFCVixFQUFXRSxLQUFLLDZDQUNiRixFQUFXVyxNQUN0QixHQXVVSnJULEVBQVErUixhQXBVUixNQUNJLGlCQUFPdUIsQ0FBVzlTLEVBQU9DLEVBQVdDLEVBQVM2UyxHQUN6QyxNQUFNQyxFQUFnQixDQUNsQjlKLHVCQUF5QitKLEdBQ2QsV0FBV0EsUUFFbkIvUyxHQUdQLElBQUlULEVBQ0osT0FBUU8sRUFBTUksV0FDVixLQUFLUixFQUFnQlMsVUFBVUMsTUFDM0JiLEVBQVFjLEtBQUsyUyx3QkFBd0JsVCxFQUFNUCxNQUFPUSxFQUFXK1MsRUFBZUQsR0FDNUUsTUFDSixLQUFLblQsRUFBZ0JTLFVBQVVJLE9BQzNCaEIsRUFBUWMsS0FBSzRTLHlCQUF5Qm5ULEVBQU1QLE1BQU9RLEVBQVcrUyxFQUFlRCxHQUM3RSxNQUNKLEtBQUtuVCxFQUFnQlMsVUFBVU0sU0FDM0JsQixFQUFRYyxLQUFLNlMsMkJBQTJCcFQsRUFBTVAsTUFBT1EsRUFBVytTLEVBQWVELEdBQy9FLE1BQ0osS0FBS25ULEVBQWdCUyxVQUFVUSxVQUMvQixLQUFLakIsRUFBZ0JTLFVBQVVTLEtBQy9CLEtBQUtsQixFQUFnQlMsVUFBVVUsTUFDL0IsS0FBS25CLEVBQWdCUyxVQUFVVyxRQUMvQixLQUFLcEIsRUFBZ0JTLFVBQVVZLFNBQy9CLEtBQUtyQixFQUFnQlMsVUFBVWEsV0FDL0IsS0FBS3RCLEVBQWdCUyxVQUFVYyxjQUMvQixLQUFLdkIsRUFBZ0JTLFVBQVVlLGlCQUMvQixLQUFLeEIsRUFBZ0JTLFVBQVVnQixZQUMvQixLQUFLekIsRUFBZ0JTLFVBQVVpQixPQUMvQixLQUFLMUIsRUFBZ0JTLFVBQVVrQixTQUMvQixLQUFLM0IsRUFBZ0JTLFVBQVVtQixPQUMzQi9CLEVBQVFjLEtBQUs4Uyw0QkFBNEJyVCxFQUFNUCxNQUFPUSxFQUFXK1MsRUFBZUQsR0FDaEYsTUFDSixLQUFLblQsRUFBZ0JTLFVBQVVxQixPQUMzQmpDLEVBQVFjLEtBQUsrUyx5QkFBeUJ0VCxFQUFNUCxNQUFPUSxFQUFXK1MsRUFBZUQsR0FDN0UsTUFDSixLQUFLblQsRUFBZ0JTLFVBQVV1QixXQUMzQm5DLEVBQVFjLEtBQUtnVCw2QkFBNkJ2VCxFQUFNUCxNQUFPUSxFQUFXK1MsRUFBZUQsR0FDakYsTUFDSixLQUFLblQsRUFBZ0JTLFVBQVV5QixXQUMvQixLQUFLbEMsRUFBZ0JTLFVBQVUwQixZQUMvQixLQUFLbkMsRUFBZ0JTLFVBQVUyQixPQUMzQnZDLEVBQVFjLEtBQUtpVCx5QkFBeUJ4VCxFQUFNUCxNQUFPUSxFQUFXK1MsR0FDOUQsTUFDSixLQUFLcFQsRUFBZ0JTLFVBQVU2QixTQUMvQixLQUFLdEMsRUFBZ0JTLFVBQVU4QixlQUMvQixLQUFLdkMsRUFBZ0JTLFVBQVUrQixXQUMzQjNDLEVBQVFjLEtBQUtrVCx5QkFBeUJ6VCxFQUFNUCxNQUFPUSxFQUFXK1MsRUFBZWhULEVBQU1JLFVBQVcyUyxHQUM5RixNQUNKLEtBQUtuVCxFQUFnQlMsVUFBVWlDLEtBQzNCN0MsRUFBUWMsS0FBS21ULHVCQUF1QjFULEVBQU1QLE1BQU9RLEVBQVcrUyxFQUFlRCxHQUMzRSxNQUNKLEtBQUtuVCxFQUFnQlMsVUFBVW1DLFdBQzNCL0MsRUFBUWMsS0FBS29ULDZCQUE2QjNULEVBQU1QLE1BQU9RLEVBQVcrUyxFQUFlRCxHQUNqRixNQUNKLFFBQ0ksTUFBTSxJQUFJblQsRUFBZ0I4QyxxQkFBcUIxQyxFQUFNSSxVQUFXLDhDQUV4RSxPQUFPWCxDQUNYLENBQ0EsOEJBQU95VCxDQUF3QjVTLEVBQU9MLEVBQVdDLEVBQVM2UyxHQUV0RCxPQURBQSxFQUFnQmpCLElBQUlMLEVBQVcvQixPQUN4QjVQLEVBQWNnRCxZQUFZQyw2QkFBNkJ6QyxFQUFPTCxFQUFXQyxFQUNwRixDQUNBLCtCQUFPaVQsQ0FBeUIxUyxFQUFRUixFQUFXQyxFQUFTNlMsR0FDeEQsTUFBTS9QLEdBQVksRUFBSW5ELEVBQWNvRCx1QkFBdUJ4QyxFQUFPeUMsa0JBQW1CakQsRUFBV0MsRUFBUWlELGlCQUN4RyxHQUFJSCxFQUNBLE9BQU85QyxFQUFRa0QsbUJBQW1CSixHQUV0QytQLEVBQWdCakIsSUFBSUwsRUFBV2lCLGNBRy9CLE1BQU8sZ0JBRlVuUyxLQUFLOFMsNEJBQTRCNVMsRUFBTzZDLE1BQU9yRCxFQUFXQyxFQUFTNlMsT0FDbkV4UyxLQUFLMlMsd0JBQXdCelMsRUFBT0gsTUFBT0wsRUFBV0MsRUFBUzZTLEtBRXBGLENBQ0EsaUNBQU9LLENBQTJCelAsRUFBVzFELEVBQVdDLEVBQVM2UyxHQUc3RCxNQUFNYSxFQUFTalEsRUFBVUMsS0FBS29ILEdBQU16SyxLQUFLc1Qsc0JBQXNCN0ksRUFBRy9LLEVBQVdDLEVBQVM2UyxLQUN0RixPQUF5QixJQUFsQmEsRUFBT0UsT0FBZUYsRUFBTyxHQUFLLFVBQVVBLEVBQU85UCxLQUFLLFFBQ25FLENBRUEsNEJBQU8rUCxDQUFzQnBVLEVBQU9RLEVBQVdDLEVBQVM2UyxHQUNwRCxNQUFNL1AsR0FBWSxFQUFJbkQsRUFBY29ELHVCQUF1QnhELEVBQU15RCxrQkFBbUJqRCxFQUFXQyxFQUFRaUQsaUJBQ3ZHLEdBQUlILEVBQ0EsT0FBTzlDLEVBQVFrRCxtQkFBbUJKLEdBRXRDK1AsRUFBZ0JqQixJQUFJTCxFQUFXZSxNQUFPZixFQUFXYyxRQUVqRCxNQUFNd0IsRUFBWXRVLEVBQU15RixNQUNuQnRCLEtBQUt1QixHQUFTNUUsS0FBSzJTLHdCQUF3Qi9OLEVBQUs3RSxNQUFPTCxFQUFXQyxFQUFTNlMsS0FDM0VqUCxLQUFLLE1BQ0prUSxFQUFXdlUsRUFBTXlGLE1BQ2xCdEIsS0FBS3VCLEdBQVNyRixFQUFjZ0QsWUFBWWtCLGdCQUFnQm1CLEVBQUt6QixTQUFVeEQsRUFBUWlFLFVBQVksTUFDM0ZMLEtBQUssTUFDSm1RLEVBQWV2QyxFQUFnQlQsY0FBY0MsT0FBT2hSLEVBQVFnUixRQUVsRSxPQUFRelIsRUFBTW9GLE1BQ1YsS0FBS2pGLEVBQWdCa0YsYUFBYUUsT0FDOUIrTixFQUFnQmpCLElBQUlMLEVBQVdnQixVQUkvQixNQUNJLDBCQUFHd0IsSUFBZUEsb0JBQStCRixRQUM5Q0UsSUFBZUEsc0JBSkp4VSxFQUFNMkUsS0FBS0YsRUFBSXpFLEVBQU13RSxHQUFHQyxHQUFLLEdBQUdnSSxRQUFRLFVBQ3hDek0sRUFBTTJFLEtBQUtFLEVBQUk3RSxFQUFNd0UsR0FBR0ssR0FBSyxHQUFHNEgsUUFBUSxVQUluRCtILElBQWVBLG9CQUNmQSxJQUFlQSxnQ0FDZkEsSUFBZUEseUJBQW9DRCxPQUNuREMsS0FDWCxLQUFLclUsRUFBZ0JrRixhQUFhRyxRQUU5QixNQUNJLHlCQUFHZ1AsSUFBZUEsb0JBQStCRixRQUM5Q0UsSUFBZUEsa0NBQ2ZBLElBQWVBLHlCQUFvQ0QsT0FDbkRDLEtBQ1gsS0FBS3JVLEVBQWdCa0YsYUFBYUMsT0FDbEMsUUFDSSxNQUNJLDBCQUFHa1AsSUFBZUEsb0JBQStCRixRQUM5Q0UsSUFBZUEseUJBQW9DRCxRQUNuREMsSUFBZUEsbUJBQThCeFUsRUFBTTJFLEtBQUtGLE9BQU96RSxFQUFNMkUsS0FBS0UsU0FDMUUyUCxJQUFlQSxpQkFBNEJ4VSxFQUFNd0UsR0FBR0MsT0FBT3pFLEVBQU13RSxHQUFHSyxRQUNwRTJQLEtBRW5CLENBQ0EsK0JBQU9YLENBQXlCMU4sRUFBUzNGLEVBQVdDLEVBQVM2UyxHQUN6RCxNQUFNYSxFQUFTaE8sRUFBUWhDLEtBQUs2SCxHQUFNbEwsS0FBSzJULG9CQUFvQnpJLEVBQUd4TCxFQUFXQyxFQUFTNlMsS0FDNUVrQixFQUFldkMsRUFBZ0JULGNBQWNDLE9BQU9oUixFQUFRZ1IsUUFHbEUsT0FBeUIsSUFBbEIwQyxFQUFPRSxPQUNSRixFQUFPLEdBQ08sWUFBR0EsRUFBT2hRLEtBQUs4SCxHQUFNLEdBQUd1SSxJQUFlQSxJQUFldkksTUFBSzVILEtBQUssV0FBZ0JtUSxJQUN4RyxDQUNBLDBCQUFPQyxDQUFvQnpVLEVBQU9RLEVBQVdDLEVBQVM2UyxHQUNsRCxNQUFNL1AsR0FBWSxFQUFJbkQsRUFBY29ELHVCQUF1QnhELEVBQU15RCxrQkFBbUJqRCxFQUFXQyxFQUFRaUQsaUJBQ3ZHLEdBQUlILEVBQ0EsT0FBTzlDLEVBQVFrRCxtQkFBbUJKLEdBRXRDK1AsRUFBZ0JqQixJQUFJTCxFQUFXakIsT0FBUWlCLEVBQVdjLFFBTWxELE1BQU8sa0JBTFVoUyxLQUFLMlMsd0JBQXdCLElBQUt6VCxFQUFNYSxTQUFXYixFQUFNdUIsU0FBVyxDQUFFQSxRQUFTdkIsRUFBTXVCLFVBQWNmLEVBQVdDLEVBQVM2Uyx1QkFFeEhqVCxFQUFjZ0QsWUFBWWtCLGdCQUFnQnZFLEVBQU15RSxFQUFHaEUsRUFBUWlFLGVBQzNEckUsRUFBY2dELFlBQVlrQixnQkFBZ0J2RSxFQUFNNkUsRUFBR3BFLEVBQVFpRSw2QkFDOURyRSxFQUFjZ0QsWUFBWWtCLGdCQUFnQnZFLEVBQU02QixPQUFRcEIsRUFBUWlFLGFBRWpGLENBQ0Esa0NBQU9rUCxDQUE0QnhTLEVBQVdaLEVBQVdDLEVBQVM2UyxHQUM5RCxNQUFNL1AsR0FBWSxFQUFJbkQsRUFBY29ELHVCQUF1QnBDLEVBQVVxQyxrQkFBbUJqRCxFQUFXQyxFQUFRaUQsaUJBQzNHLEdBQUlILEVBQ0EsT0FBTzlDLEVBQVFrRCxtQkFBbUJKLEdBRXRDLE1BQU1nSixFQUFVbE0sRUFBY2dELFlBQVlrQixnQkFBZ0JuRCxFQUFVNkUsUUFBU3hGLEVBQVFpRSxVQUVyRixHQUFJdEQsRUFBVXdFLE9BQVN6RixFQUFnQjBGLEtBQUt5QyxRQUFTLENBRWpELE1BQU8sSUFEV2lFLEVBQVUsTUFFaEMsQ0FDQSxNQUFPLEdBQUdBLElBQVV6TCxLQUFLNFQsYUFBYXRULEVBQVV3RSxLQUFNME4sSUFDMUQsQ0FFQSxtQkFBT29CLENBQWE5TyxFQUFNME4sR0FDdEIsT0FBUTFOLEdBQ0osS0FBS3pGLEVBQWdCMEYsS0FBS3lDLFFBRXRCLE1BQU8sSUFDWCxLQUFLbkksRUFBZ0IwRixLQUFLQyxPQUd0QixPQURBd04sRUFBZ0JqQixJQUFJTCxFQUFXWSxJQUN4QixNQUNYLEtBQUt6UyxFQUFnQjBGLEtBQUswQyxJQUd0QixPQURBK0ssRUFBZ0JqQixJQUFJTCxFQUFXYSxJQUN4QixNQUNYLEtBQUsxUyxFQUFnQjBGLEtBQUs0QyxHQUMxQixLQUFLdEksRUFBZ0IwRixLQUFLMkMsSUFFdEIsTUFBTyxHQUNYLFFBRUksT0FEQThLLEVBQWdCakIsSUFBSUwsRUFBV1ksSUFDeEIsTUFFbkIsQ0FDQSwrQkFBT21CLENBQXlCL1QsRUFBT1EsRUFBV0MsR0FDOUMsTUFBTThDLEdBQVksRUFBSW5ELEVBQWNvRCx1QkFBdUJ4RCxFQUFNeUQsa0JBQW1CakQsRUFBV0MsRUFBUWlELGlCQUN2RyxPQUFJSCxFQUNPOUMsRUFBUWtELG1CQUFtQkosR0FFL0IsSUFBSXZELEVBQU00RyxPQUNyQixDQUNBLCtCQUFPb04sQ0FBeUJuTixFQUFRckcsRUFBV0MsRUFBU0UsRUFBVzJTLEdBQ25FLE1BQU0vUCxHQUFZLEVBQUluRCxFQUFjb0QsdUJBQXVCcUQsRUFBT3BELGtCQUFtQmpELEVBQVdDLEVBQVFpRCxpQkFDeEcsT0FBSUgsRUFDTzlDLEVBQVFrRCxtQkFBbUJKLEdBRWxDNUMsSUFBY1IsRUFBZ0JTLFVBQVU2QixTQUNqQzNCLEtBQUs2VCxpQkFBaUI5TixFQUFPN0csT0FFcENXLElBQWNSLEVBQWdCUyxVQUFVOEIsZUFDakM1QixLQUFLOFQsdUJBQXVCL04sRUFBTzdHLE1BQU9zVCxHQUU5Q3hTLEtBQUsrVCxtQkFBbUJoTyxFQUFPN0csTUFDMUMsQ0FDQSx1QkFBTzJVLENBQWlCbFMsR0FFcEIsT0FBUUEsR0FDSixLQUFLdEMsRUFBZ0JvSCxTQUFTRCxTQUMxQixNQUFPLFNBQ1gsS0FBS25ILEVBQWdCb0gsU0FBU21CLE1BQzFCLE1BQU8sY0FDWCxLQUFLdkksRUFBZ0JvSCxTQUFTb0IsTUFDMUIsTUFBTyxjQUNYLEtBQUt4SSxFQUFnQm9ILFNBQVNxQixNQUMxQixNQUFPLGVBQ1gsS0FBS3pJLEVBQWdCb0gsU0FBU0UsVUFDMUIsTUFBTyxjQUVuQixDQUNBLDZCQUFPbU4sQ0FBdUJsUyxFQUFnQjRRLEdBRzFDLE9BRkFBLEVBQWdCakIsSUFBSUwsRUFBVzNLLGdCQUV2QjNFLEdBQ0osS0FBS3ZDLEVBQWdCa0gsZUFBZUMsU0FDaEMsTUFBTyxzQkFDWCxLQUFLbkgsRUFBZ0JrSCxlQUFld0IsVUFDaEMsTUFBTywyQkFDWCxLQUFLMUksRUFBZ0JrSCxlQUFleUIsY0FDaEMsTUFBTyw2QkFFbkIsQ0FDQSx5QkFBTytMLENBQW1CbFMsR0FDdEIsT0FBT0EsSUFBZXhDLEVBQWdCMlUsZUFBZUMsUUFBVSxPQUFTLE9BQzVFLENBQ0EsNkJBQU9kLENBQXVCcFIsRUFBTXJDLEVBQVdDLEVBQVM2UyxHQUNwRCxNQUFNL1AsR0FBWSxFQUFJbkQsRUFBY29ELHVCQUF1QlgsRUFBS1ksa0JBQW1CakQsRUFBV0MsRUFBUWlELGlCQUN0RyxPQUFJSCxFQUNPOUMsRUFBUWtELG1CQUFtQkosSUFFdEMrUCxFQUFnQmpCLElBQUlMLEVBQVdrQixTQUFVbEIsRUFBV1QsTUFDN0MsaUJBQWlCelEsS0FBSzhTLDRCQUE0Qi9RLEVBQUtoQixPQUFRckIsRUFBV0MsRUFBUzZTLE1BQzlGLENBQ0EsbUNBQU9RLENBQTZCOVQsRUFBT1EsRUFBV0MsRUFBUzZTLEdBQzNELE1BQU0vUCxHQUFZLEVBQUluRCxFQUFjb0QsdUJBQXVCeEQsRUFBTXlELGtCQUFtQmpELEVBQVdDLEVBQVFpRCxpQkFDdkcsR0FBSUgsRUFDQSxPQUFPOUMsRUFBUWtELG1CQUFtQkosR0FHdEMsTUFBTXlSLEdBQW1CLEVBQUk1VSxFQUFjdUcscUJBQXFCM0csRUFBTTRHLE1BQ3RFLE9BQU85RixLQUFLbVUsc0JBQXNCRCxFQUFrQjFCLEVBQ3hELENBQ0EsNEJBQU8yQixDQUFzQkMsRUFBUTVCLEdBRWpDLE9BREFBLEVBQWdCakIsSUFBSUwsRUFBV1gsWUFDdkI2RCxHQUNKLEtBQUssSUFDRCxNQUFPLGtCQUNYLEtBQUssSUFDRCxNQUFPLHdCQUNYLEtBQUssSUFDRCxNQUFPLG1CQUNYLEtBQUssSUFDRCxNQUFPLG9CQUNYLEtBQUssSUFDRCxNQUFPLG9CQUNYLEtBQUssSUFDRCxNQUFPLHNCQUNYLEtBQUssSUFDRCxNQUFPLGtCQUNYLEtBQUssSUFDRCxNQUFPLHVCQUNYLEtBQUssSUFDRCxNQUFPLG1CQUNYLFFBRUksTUFBTyxjQUFjQSxLQUVqQyxDQUNBLG1DQUFPaEIsQ0FBNkJuUixFQUFZdkMsRUFBV0MsRUFBUzZTLEdBRWhFLE1BQU0vUCxHQUFZLEVBQUluRCxFQUFjb0QsdUJBQXVCVCxFQUFXVSxrQkFBbUJqRCxFQUFXQyxFQUFRaUQsaUJBQzVHLEdBQUlILEVBQ0EsT0FBTzlDLEVBQVFrRCxtQkFBbUJKLEdBRXRDK1AsRUFBZ0JqQixJQUFJTCxFQUFXbUIsVUFBV25CLEVBQVczSyxnQkFFckQsTUFBTThOLEdBQWdCLEVBQUkvVSxFQUFjb0QsdUJBQXVCVCxFQUFXVixXQUFXb0Isa0JBQW1CakQsRUFBV0MsRUFBUWlELGlCQUNySDBSLEdBQWdCLEVBQUloVixFQUFjb0QsdUJBQXVCVCxFQUFXWixXQUFXc0Isa0JBQW1CakQsRUFBV0MsRUFBUWlELGlCQUNySDJSLEdBQWdCLEVBQUlqVixFQUFjb0QsdUJBQXVCVCxFQUFXTCxlQUFlZSxrQkFBbUJqRCxFQUFXQyxFQUFRaUQsaUJBRXpINFIsRUFBZ0JILEVBQWdCMVUsRUFBUWtELG1CQUFtQndSLEdBQWlCLElBQUlwUyxFQUFXVixXQUFXdUUsUUFDdEcyTyxFQUFnQkgsRUFDaEIzVSxFQUFRa0QsbUJBQW1CeVIsR0FDM0J0VSxLQUFLbVUsdUJBQXNCLEVBQUk3VSxFQUFjdUcscUJBQXFCNUQsRUFBV1osV0FBV3lFLE1BQU8wTSxHQUMvRmtDLEVBQW9CSCxFQUNwQjVVLEVBQVFrRCxtQkFBbUIwUixHQUMzQnRTLEVBQVdMLGVBQWUxQyxRQUFVRyxFQUFnQmtILGVBQWVDLFNBQy9ELHNCQUNBeEcsS0FBSzhULHVCQUF1QjdSLEVBQVdMLGVBQWUxQyxNQUFPc1QsR0FDakVtQyxFQUFjM1UsS0FBSzhTLDRCQUE0QjdRLEVBQVd2QixTQUFVaEIsRUFBV0MsRUFBUzZTLEdBQ3hGb0MsRUFBZ0IzUyxFQUFXdEIsV0FDM0JYLEtBQUs4Uyw0QkFBNEI3USxFQUFXdEIsV0FBWWpCLEVBQVdDLEVBQVM2UyxRQUM1RWxRLEVBQ0F1UyxFQUFtQjVTLEVBQVdyQixjQUM5QlosS0FBSzhTLDRCQUE0QjdRLEVBQVdyQixjQUFlbEIsRUFBV0MsRUFBUzZTLFFBQy9FbFEsRUFFQXdTLEVBQVEsQ0FDVixnQkFBZ0JOLElBQ2hCLGdCQUFnQkMsSUFDaEIsY0FBY0UsS0FFZEMsR0FDQUUsRUFBTWpELEtBQUssZ0JBQWdCK0MsS0FDM0JDLEdBQ0FDLEVBQU1qRCxLQUFLLG1CQUFtQmdELEtBQzlCSCxHQUNBSSxFQUFNakQsS0FBSyxvQkFBb0I2QyxLQUNuQyxNQUFNaEIsRUFBZXZDLEVBQWdCVCxjQUFjQyxPQUFPaFIsRUFBUWdSLFFBR2xFLE1BQU8sZUFETW1FLEVBQU16UixLQUFLMFIsR0FBTSxHQUFHckIsSUFBZUEsSUFBZXFCLE1BQUt4UixLQUFLLFdBQzFDbVEsSUFDbkMsRTs7OzJFQzFZSjNVLE9BQU9DLGVBQWVDLEVBQVMsYUFBYyxDQUFFQyxPQUFPLElBQ3RERCxFQUFRZ1Esa0JBQWUsRUFDdkIsTUFBTWpCLEVBQWUsNEJBQVEsd0NBQ3ZCZ0gsRUFBZ0Isb0JBQVEsc0RBQzlCLE1BQU0vRixFQU9GLHVCQUFPZ0csQ0FBaUJuUCxFQUFNb1AsR0FDMUIsSUFBS0EsRUFDRCxPQUFPcFAsRUFFWCxNQUFNcVAsRUFBaUJwVyxPQUFPcVcsUUFBUUYsR0FDakM1QyxNQUFLLEVBQUUrQyxJQUFLM0ssS0FBT0EsRUFBRTZJLE9BQVM4QixFQUFFOUIsU0FDckMsSUFBSS9LLEVBQVMxQyxFQUNiLElBQUssTUFBT3dQLEVBQU0xRyxLQUFZdUcsRUFBZ0IsQ0FFMUMsTUFBTUksRUFBY0QsRUFBSzFHLFFBQVEsc0JBQXVCLFFBS2xENEcsRUFBVSxJQUFJM0csT0FFcEIsTUFBTTBHLGtCQUVXQSxhQUF3QixNQUd6Qy9NLEVBQVNBLEVBQU9vRyxRQUFRNEcsRUFBUzVHLEVBQ3JDLENBQ0EsT0FBT3BHLENBQ1gsQ0FDQSxtQ0FBT2lOLENBQTZCaFcsRUFBT3dKLEVBQVF5TSxFQUFRQyxFQUFRVCxFQUFhVSxHQUEyQixHQUV2RyxJQUFJQyxFQUFZLEdBRVpILElBQ0FHLEVBQVVoRSxRQUFRNkQsRUFBT25JLE1BQ3BCbUksRUFBT0ksUUFDUkQsRUFBVWhFLEtBQUs2RCxFQUFPbEksT0FNOUIsTUFBTXVJLEVBQWlCdFcsRUFBTStOLEtBQUt3SSxNQUFNLFdBWXhDLEdBVElILEVBQVV0QyxPQUFTLEdBQUt3QyxFQUFleEMsT0FBUyxHQUNoRHdDLEVBQWUsR0FBRzdQLGdCQUFrQjJQLEVBQVVBLEVBQVV0QyxPQUFTLEdBQUdyTixjQUNwRTJQLEVBQVVoRSxLQUFLa0UsRUFBZUUsTUFBTSxHQUFHMVMsS0FBSyxNQUc1Q3NTLEVBQVVoRSxLQUFLcFMsRUFBTStOLE1BSXJCMEgsRUFBYSxDQUViLElBQUlnQixFQUFjTCxFQUFVdFMsS0FBSyxLQUVqQzJTLEVBQWNqSCxFQUFhZ0csaUJBQWlCaUIsRUFBYWhCLEdBRXpEVyxFQUFZSyxFQUNQRixNQUFNLE9BQ05HLFFBQU9DLEdBQUtBLEVBQUU3QyxPQUFTLElBQ3ZCbFEsS0FBSStTLEdBQUtBLEVBQUVDLFFBQ3BCLENBTUEsT0FKSVYsR0FBVUEsRUFBT3BDLE9BQVMsR0FDMUJzQyxFQUFVUyxRQUFRWCxHQUdmMUcsRUFBYUMscUJBQXFCMkcsRUFBVzVNLE9BQVEzRyxFQUFXc1QsRUFDM0UsQ0FPQSwyQkFBTzFHLENBQXFCMkcsRUFBVzVNLEVBQVFpTSxFQUFhVSxHQUEyQixHQUVuRixJQUFJVyxFQUFnQyxpQkFBZFYsRUFBeUJBLEVBQVlBLEVBQVV0UyxLQUFLLEtBTTFFLEdBSkFnVCxFQUFXdEgsRUFBYWdHLGlCQUFpQnNCLEVBQVVyQixHQUVuRHFCLEVBQVdBLEVBQVNDLFdBQVcsa0JBQW1CLEtBRTlDWixFQUEwQixDQUUxQixNQUVNYSxHQUZtQixFQUFJekIsRUFBY2hHLFdBQVd1SCxHQUVUUCxNQUFNLEtBQUtHLFFBQU9DLEdBQUtBLEVBQUU3QyxPQUFTLElBTy9FZ0QsRUFMd0JFLEVBQW9CTixRQUFPLENBQUNPLEVBQVVDLElBRXpDLElBQVZBLEdBQWVELElBQWFELEVBQW9CRSxFQUFRLEtBR3hDcFQsS0FBSyxJQUNwQyxDQUNBLE9BQVEwRixHQUNKLEtBQUsrRSxFQUFhN08sV0FBV3lYLFVBQ3pCTCxHQUFXLEVBQUl2QixFQUFjNEIsV0FBV0wsR0FDeEMsTUFDSixLQUFLdkksRUFBYTdPLFdBQVcwWCxZQUN6Qk4sR0FBVyxFQUFJdkIsRUFBYzZCLGFBQWFOLEdBQzFDLE1BQ0osS0FBS3ZJLEVBQWE3TyxXQUFXMlgsYUFDekJQLEdBQVcsRUFBSXZCLEVBQWM4QixjQUFjUCxHQUMzQyxNQUNKLEtBQUt2SSxFQUFhN08sV0FBVzRYLFFBQ3pCUixHQUFXLEVBQUl2QixFQUFjK0IsU0FBU1IsR0FDdEMsTUFDSixLQUFLdkksRUFBYTdPLFdBQVc2WCxVQUN6QlQsR0FBVyxFQUFJdkIsRUFBY2dDLFdBQVdULEdBQ3hDLE1BQ0osS0FBS3ZJLEVBQWE3TyxXQUFXOFgsT0FDekJWLEdBQVcsRUFBSXZCLEVBQWNpQyxRQUFRVixHQUNyQyxNQUNKLEtBQUt2SSxFQUFhN08sV0FBVzZQLFVBQ3pCdUgsR0FBVyxFQUFJdkIsRUFBY2hHLFdBQVd1SCxHQUN4QyxNQUNKLEtBQUt2SSxFQUFhN08sV0FBVytYLFdBQ3pCWCxHQUFXLEVBQUl2QixFQUFja0MsWUFBWVgsR0FDekMsTUFDSixLQUFLdkksRUFBYTdPLFdBQVdnWSxTQUN6QlosR0FBVyxFQUFJdkIsRUFBY21DLFVBQVVaLEdBQ3ZDLE1BQ0osS0FBS3ZJLEVBQWE3TyxXQUFXaVksYUFDekJiLEdBQVcsRUFBSXZCLEVBQWNvQyxjQUFjYixHQUMzQyxNQUNKLEtBQUt2SSxFQUFhN08sV0FBV2tZLFVBQ3pCZCxHQUFXLEVBQUl2QixFQUFjcUMsV0FBV2QsR0FDeEMsTUFDSixLQUFLdkksRUFBYTdPLFdBQVdtWSxTQUN6QmYsR0FBVyxFQUFJdkIsRUFBYzRCLFdBQVdMLEdBQVVyUSxjQWExRCxPQVBJK0MsSUFBVytFLEVBQWE3TyxXQUFXa1ksV0FBYXBPLElBQVcrRSxFQUFhN08sV0FBVzJYLGVBQ25GUCxFQUFXQSxFQUFTQyxXQUFXLElBQUssS0FHcENELEVBQVNnQixNQUFNLGdCQUNmaEIsRUFBVyxJQUFNQSxHQUVkQSxDQUNYLENBRUEsNEJBQU9pQixDQUFzQmhLLEdBQ3pCLE1BQU8sU0FBU0EsSUFDcEIsQ0FFQSw4QkFBT2lLLENBQXdCakssR0FDM0IsTUFBTyxLQUFLQSxHQUNoQixFQUVKdk8sRUFBUWdRLGFBQWVBLEM7OzswRUNyS3ZCbFEsT0FBT0MsZUFBZUMsRUFBUyxhQUFjLENBQUVDLE9BQU8sSUFDdERELEVBQVF5WSxpQkFBYyxFQUN0QixNQUFNekosRUFBaUIsdUJBQVEsNENBQ3pCRCxFQUFlLDRCQUFRLHdDQWdEN0IvTyxFQUFReVksWUEvQ1IsTUFRSSxzQkFBT0MsQ0FBZ0JDLEVBQVF0VCxFQUFNdVQsR0FDakMsTUFBTUMsRUFBZUYsRUFBT3pCLFFBQVExVyxHQUFVQSxFQUFNSSxZQUFjeUUsSUFDNUR5VCxFQUFxQixJQUFJekcsSUFBSXVHLEVBQU1HLGlCQUFpQjNVLEtBQUk0VSxHQUFLQSxFQUFFQyxNQUNyRSxPQUFPSixFQUFhSyxNQUFLMVksR0FBU3NZLEVBQW1CbkcsSUFBSW5TLEVBQU15WSxLQUNuRSxDQU9BLHlCQUFPRSxDQUFtQlIsRUFBUUMsR0FDOUIsTUFBTUUsRUFBcUIsSUFBSXpHLElBQUl1RyxFQUFNRyxpQkFBaUIzVSxLQUFJNFUsR0FBS0EsRUFBRUMsTUFDckUsT0FBT04sRUFBT3pCLFFBQU8xVyxHQUFTc1ksRUFBbUJuRyxJQUFJblMsRUFBTXlZLEtBQy9ELENBT0EseUJBQU9HLENBQW1CUixFQUFPOUksRUFBYWYsRUFBYTdPLFdBQVc2UCxXQUNsRSxHQUFxQixpQkFBVjZJLEVBQ1AsT0FBT0EsRUFDWCxNQUFNUyxFQUFhVCxFQUFNVSxVQUFZVixFQUFNckssS0FDM0MsT0FBT1MsRUFBZWdCLGFBQWFDLHFCQUFxQm9KLEVBQVl2SixFQUN4RSxDQU1BLG1CQUFPeUosQ0FBYVgsR0FDaEIsR0FBcUIsaUJBQVZBLEVBQ1AsT0FBT0EsRUFDWCxNQUFNUyxFQUFhVCxFQUFNVSxVQUFZVixFQUFNckssS0FDM0MsT0FBT1MsRUFBZWdCLGFBQWFDLHFCQUFxQm9KLEVBQVl0SyxFQUFhN08sV0FBVzBYLFlBQ2hHLEU7Ozt3RUNqREo5WCxPQUFPQyxlQUFlQyxFQUFTLGFBQWMsQ0FBRUMsT0FBTyxJQUN0REQsRUFBUXlELHNCQUdSLFNBQStCK1YsRUFBYS9ZLEVBQVdrRCxHQUFrQixHQUNyRSxJQUFLNlYsSUFBZ0I3VixFQUNqQixPQUFPLEtBRVgsTUFBTW5ELEVBQVFDLEVBQVVnWixJQUFJRCxHQUM1QixJQUFLaFosRUFDRCxNQUFNLElBQUlrWixNQUFNLCtDQUErQ0YsS0FFbkUsT0FBT2haLENBQ1gsRUFYQVIsRUFBUTRHLG9CQVlSLFNBQTZCdU8sR0FFekIsTUFBTXdFLEVBQWlCeEUsRUFBT2xPLGNBQWNtUSxPQUV0Q3dDLEVBQWdCQyxTQUFTRixHQUMvQixJQUFLRyxNQUFNRixHQUNQLE9BQU9BLEVBR1gsT0FBUUQsR0FDSixJQUFLLE9BRUwsSUFBSyxXQUNELE9BQU8sSUFDWCxJQUFLLGNBQ0wsSUFBSyxhQUNMLElBQUssY0FDTCxJQUFLLGFBQ0QsT0FBTyxJQUNYLElBQUssUUFDRCxPQUFPLElBQ1gsSUFBSyxTQUNMLElBQUssVUFDTCxJQUFLLE9BbUJMLFFBRUksT0FBTyxJQW5CWCxJQUFLLFNBQ0QsT0FBTyxJQUNYLElBQUssWUFDTCxJQUFLLFdBQ0wsSUFBSyxZQUNMLElBQUssV0FDRCxPQUFPLElBQ1gsSUFBSyxPQUNELE9BQU8sSUFDWCxJQUFLLGFBQ0wsSUFBSyxZQUNMLElBQUssYUFDTCxJQUFLLFlBQ0QsT0FBTyxJQUNYLElBQUssUUFDTCxJQUFLLFFBQ0QsT0FBTyxJQUtuQixDOzs7K0VDNURBN1osT0FBT0MsZUFBZUMsRUFBUyxhQUFjLENBQUVDLE9BQU8sSUFDdERELEVBQVErWixzQkFBbUIsRUFDM0IsTUFBTS9LLEVBQWlCLHVCQUFRLDRDQXVGL0JoUCxFQUFRK1osaUJBakZSLE1BQ0ksV0FBQTVILEdBRUlwUixLQUFLaVosYUFBZSxJQUFJQyxJQUV4QmxaLEtBQUttWixlQUFpQixJQUFJRCxJQUUxQmxaLEtBQUtvWixpQkFBbUIsSUFBSUYsR0FDaEMsQ0FJQSxLQUFBRyxHQUNJclosS0FBS2laLGFBQWFLLFFBQ2xCdFosS0FBS21aLGVBQWVHLFFBQ3BCdFosS0FBS29aLGlCQUFpQkUsT0FDMUIsQ0FLQSxrQkFBQUMsQ0FBbUI5WixFQUFPd0osRUFBUXVRLEdBQVksRUFBT2pNLEVBQU8sSUFHeEQsTUFDTWtNLEVBQW1CLEdBREpsTSxFQUFLaEssS0FBSyxRQUNhOUQsRUFBTStOLE9BRWxELElBQUtnTSxHQUFheFosS0FBS2laLGFBQWFySCxJQUFJblMsRUFBTXlZLElBQzFDLE9BQU9sWSxLQUFLaVosYUFBYVAsSUFBSWpaLEVBQU15WSxJQUd2QyxJQUFJMUssRUFBT1MsRUFBZWdCLGFBQWFDLHFCQUFxQnpQLEVBQU0rTixLQUFNdkUsR0FFbkVqSixLQUFLb1osaUJBQWlCeEgsSUFBSTZILElBQzNCelosS0FBS29aLGlCQUFpQk0sSUFBSUQsRUFBa0IsSUFBSW5JLEtBRXBELE1BQU1xSSxFQUFnQjNaLEtBQUtvWixpQkFBaUJWLElBQUllLEdBWWhELE9BVklFLEVBQWNwWixLQUFPLElBQU1vWixFQUFjL0gsSUFBSW5TLEVBQU15WSxNQUNuRDFLLEVBQU8sR0FBR0EsS0FBUW1NLEVBQWNwWixRQUdwQ29aLEVBQWNsSSxJQUFJaFMsRUFBTXlZLElBRW5Cc0IsSUFDRHhaLEtBQUtpWixhQUFhUyxJQUFJamEsRUFBTXlZLEdBQUkxSyxHQUNoQ3hOLEtBQUttWixlQUFlTyxJQUFJbE0sRUFBTS9OLEVBQU15WSxLQUVqQzFLLENBQ1gsQ0FXQSxZQUFBb00sQ0FBYW5hLEVBQU9vYSxFQUFhNVEsRUFBUTBNLEVBQVE2RCxHQUFZLEdBRXpELElBQUtBLEdBQWF4WixLQUFLaVosYUFBYXJILElBQUluUyxFQUFNeVksSUFDMUMsT0FBT2xZLEtBQUtpWixhQUFhUCxJQUFJalosRUFBTXlZLElBRXZDLE1BQU14QyxFQUFTbUUsRUFBWXZFLE1BQU13RSxHQUFVQSxFQUFNNUIsS0FBT3pZLEVBQU1zYSxnQkFFOUQsSUFBSXZNLEVBQU9TLEVBQWVnQixhQUFhd0csNkJBQTZCaFcsRUFBT3dKLEVBQVF5TSxFQUFRQyxHQUN2RnFFLEVBQVUsRUFFZCxLQUFPaGEsS0FBS21aLGVBQWV2SCxJQUFJcEUsSUFBU3hOLEtBQUttWixlQUFlVCxJQUFJbEwsS0FBVS9OLEVBQU15WSxJQUM1RTFLLEVBQU8sR0FBR0EsVUFBYXdNLE1BTzNCLE9BSktSLElBQ0R4WixLQUFLaVosYUFBYVMsSUFBSWphLEVBQU15WSxHQUFJMUssR0FDaEN4TixLQUFLbVosZUFBZU8sSUFBSWxNLEVBQU0vTixFQUFNeVksS0FFakMxSyxDQUNYLEU7OztrRkN2Rkp6TyxPQUFPQyxlQUFlQyxFQUFTLGFBQWMsQ0FBRUMsT0FBTyxJQUN0REQsRUFBUWdiLHlCQUFzQixFQUM5QixNQUFNaE0sRUFBaUIsdUJBQVEsNENBQ3pCRCxFQUFlLDRCQUFRLHdDQTJGN0IvTyxFQUFRZ2Isb0JBdkZSLE1BTUksV0FBQTdJLENBQVk4SSxFQUFLQyxHQUtibmEsS0FBS29hLHNCQUF3QixJQUFJbEIsSUFDakNsWixLQUFLa2EsSUFBTUEsRUFDWGxhLEtBQUttYSxPQUFTQSxDQUNsQixDQU9BLDBCQUFBRSxDQUEyQjVhLEVBQU82YSxFQUFjcGIsR0FFNUMsSUFBSXFiLEVBQVd2YSxLQUFLb2Esc0JBQXNCMUIsSUFBSTRCLEdBQ3pDQyxJQUNEQSxFQUFXLElBQUlyQixJQUNmbFosS0FBS29hLHNCQUFzQlYsSUFBSVksRUFBY0MsSUFHakRBLEVBQVNiLElBQUlqYSxFQUFPUCxFQUN4QixDQUtBLHNDQUFNc2IsR0FFRixHQUF3QyxJQUFwQ3hhLEtBQUtvYSxzQkFBc0I3WixLQUMzQixPQUdKLElBQUlrYSxRQUFtQnphLEtBQUtrYSxJQUFJdEMsT0FBTzhDLG1CQUFtQjFhLEtBQUttYSxRQUUvRCxJQUFLLE1BQU9HLEVBQWNDLEtBQWF2YSxLQUFLb2Esc0JBQXVCLENBQy9ELElBQUlPLEVBQVdGLEVBQVduRixNQUFNc0YsR0FBU0EsRUFBS3BOLE9BQVM4TSxJQWF2RCxHQVhLSyxVQUNXM2EsS0FBS2thLElBQUl0QyxPQUFPaUQsb0JBQW9CN2EsS0FBS21hLE9BQVEsQ0FDekQ3VixLQUFNLFVBQ05rSixLQUFNOE0sRUFDTi9CLFNBQVV0SyxFQUFlZ0IsYUFBYUMscUJBQXFCLENBQUNvTCxHQUFldE0sRUFBYTdPLFdBQVd5WCxXQUNuR2tFLFlBQWEsSUFDYkMsWUFBYSxpQ0FFakJOLFFBQW1CemEsS0FBS2thLElBQUl0QyxPQUFPOEMsbUJBQW1CMWEsS0FBS21hLFFBQzNEUSxFQUFXRixFQUFXbkYsTUFBTXNGLEdBQVNBLEVBQUtwTixPQUFTOE0sTUFFbERLLEVBQ0QsTUFBTSxJQUFJaEMsTUFBTSx5Q0FBeUMyQixNQUc3RCxNQUFNVSxFQUFVQyxNQUFNcFgsS0FBSzBXLEdBQVVsWCxLQUFJLEVBQUU1RCxFQUFPeWIsTUFBa0IsQ0FDaEVDLGFBQWNSLEVBQVN6QyxHQUN2QmtELGdCQUFpQjNiLEVBQU15WSxHQUN2QmhaLE1BQU9nYyxZQUVMbGIsS0FBS2thLElBQUltQixlQUFlQyx3QkFBd0J0YixLQUFLbWEsT0FBUWEsRUFDdkUsQ0FDSixDQU9BLDBCQUFNTyxDQUFxQmpCLEVBQWMxQyxFQUFRNEQsR0FDN0MsTUFBTUMsRUFBc0JuQixHQUFjakUsT0FDMUMsR0FBS29GLEVBQUwsQ0FHQSxJQUFLLE1BQU1oYyxLQUFTbVksRUFBUSxDQUN4QixNQUFNMVksRUFBUXNjLEVBQWUvYixHQUM3Qk8sS0FBS3FhLDJCQUEyQjVhLEVBQU9nYyxFQUFxQnZjLEVBQ2hFLE9BQ01jLEtBQUt3YSxrQ0FMWCxDQU1KLEU7OztrRUM1RkosSUFBSWtCLEVBQW1CMWIsTUFBUUEsS0FBSzBiLGtCQUFxQjNjLE9BQU80YyxPQUFTLFNBQVVDLEVBQUdDLEVBQUdDLEVBQUdDLFFBQzdFelosSUFBUHlaLElBQWtCQSxFQUFLRCxHQUMzQixJQUFJRSxFQUFPamQsT0FBT2tkLHlCQUF5QkosRUFBR0MsR0FDekNFLEtBQVMsUUFBU0EsR0FBUUgsRUFBRUssV0FBYUYsRUFBS0csVUFBWUgsRUFBS0ksZ0JBQ2xFSixFQUFPLENBQUVLLFlBQVksRUFBTTNELElBQUssV0FBYSxPQUFPbUQsRUFBRUMsRUFBSSxJQUU1RC9jLE9BQU9DLGVBQWU0YyxFQUFHRyxFQUFJQyxFQUNoQyxFQUFJLFNBQVVKLEVBQUdDLEVBQUdDLEVBQUdDLFFBQ1R6WixJQUFQeVosSUFBa0JBLEVBQUtELEdBQzNCRixFQUFFRyxHQUFNRixFQUFFQyxFQUNiLEdBQ0dRLEVBQWdCdGMsTUFBUUEsS0FBS3NjLGNBQWlCLFNBQVNULEVBQUc1YyxHQUMxRCxJQUFLLElBQUk4VixLQUFLOEcsRUFBYSxZQUFOOUcsR0FBb0JoVyxPQUFPd2QsVUFBVUMsZUFBZUMsS0FBS3hkLEVBQVM4VixJQUFJMkcsRUFBZ0J6YyxFQUFTNGMsRUFBRzlHLEVBQzNILEVBQ0FoVyxPQUFPQyxlQUFlQyxFQUFTLGFBQWMsQ0FBRUMsT0FBTyxJQUN0RG9kLEVBQWEsK0JBQVEsNENBQTJCcmQsR0FDaERxZCxFQUFhLDhCQUFRLDJDQUEwQnJkLEdBQy9DcWQsRUFBYSw4QkFBUSwyQ0FBMEJyZCxHQUMvQ3FkLEVBQWEsNEJBQVEseUNBQXdCcmQsR0FDN0NxZCxFQUFhLDZCQUFRLDBDQUF5QnJkLEdBQzlDcWQsRUFBYSw4QkFBUSwyQ0FBMEJyZCxHQUMvQ3FkLEVBQWEsaUNBQVEsOENBQTZCcmQsR0FDbERxZCxFQUFhLGdDQUFRLDZDQUE0QnJkLEdBQ2pEcWQsRUFBYSwyQkFBUSx3Q0FBdUJyZCxHQUM1Q3FkLEVBQWEsNEJBQVEseUNBQXdCcmQsR0FDN0NxZCxFQUFhLG1DQUFRLGdEQUErQnJkLEdBQ3BEcWQsRUFBYSxzQ0FBUSxtREFBa0NyZCxHQUN2RHFkLEVBQWEsK0JBQVEsNENBQTJCcmQsRTs7O3lHQzVCaEQsTUFBTSxhQUFhLElBQUl5ZCxFQUFFLENBQUMsRUFBRSxDQUFDQSxFQUFFekUsS0FBSyxJQUFJMkQsRUFBRTdjLE9BQU9DLGVBQWVpWixFQUFFLGFBQWEsQ0FBQy9ZLE9BQU0sSUFBSytZLEVBQUUxVCxrQkFBYSxFQUFPLFNBQVNtWSxHQUFHQSxFQUFFbFksT0FBTyxTQUFTa1ksRUFBRWpZLE9BQU8sU0FBU2lZLEVBQUVoWSxRQUFRLFNBQVMsQ0FBbkUsQ0FBcUVrWCxJQUFJM0QsRUFBRTFULGFBQWFxWCxFQUFFLENBQUMsR0FBRSxFQUFHLElBQUksQ0FBQ2MsRUFBRXpFLEtBQUssSUFBSTJELEVBQUU3YyxPQUFPQyxlQUFlaVosRUFBRSxhQUFhLENBQUMvWSxPQUFNLElBQUsrWSxFQUFFMEUsZ0NBQTJCLEVBQU8sU0FBU0QsR0FBR0EsRUFBRUUsT0FBTyxTQUFTRixFQUFFRyxPQUFPLFNBQVNILEVBQUVJLE9BQU8sU0FBU0osRUFBRUssT0FBTyxTQUFTTCxFQUFFTSxPQUFPLFNBQVNOLEVBQUVPLFFBQVEsVUFBVVAsRUFBRVEsWUFBWSxjQUFjUixFQUFFUyxnQkFBZ0Isa0JBQWtCVCxFQUFFVSxNQUFNLFFBQVFWLEVBQUVXLFVBQVUsWUFBWVgsRUFBRVksY0FBYyxnQkFBZ0JaLEVBQUVhLE9BQU8sUUFBUSxDQUFuUixDQUFxUjNCLElBQUkzRCxFQUFFMEUsMkJBQTJCZixFQUFFLENBQUMsR0FBRSxFQUFHLElBQUksQ0FBQ2MsRUFBRXpFLEtBQUssSUFBSTJELEVBQUU3YyxPQUFPQyxlQUFlaVosRUFBRSxhQUFhLENBQUMvWSxPQUFNLElBQUsrWSxFQUFFdUYsb0JBQWUsRUFBTyxTQUFTZCxHQUFHQSxFQUFFZSxXQUFXLGFBQWFmLEVBQUVnQixVQUFVLFdBQVcsQ0FBN0QsQ0FBK0Q5QixJQUFJM0QsRUFBRXVGLGVBQWU1QixFQUFFLENBQUMsR0FBRSxFQUFHLElBQUksQ0FBQ2MsRUFBRXpFLEtBQUssSUFBSTJELEVBQUU3YyxPQUFPQyxlQUFlaVosRUFBRSxhQUFhLENBQUMvWSxPQUFNLElBQUsrWSxFQUFFMEYsZ0JBQVcsRUFBTyxTQUFTakIsR0FBR0EsRUFBRWtCLEdBQUcsS0FBS2xCLEVBQUVtQixHQUFHLEtBQUtuQixFQUFFb0IsR0FBRyxLQUFLcEIsRUFBRXFCLEdBQUcsSUFBSSxDQUFuRCxDQUFxRG5DLElBQUkzRCxFQUFFMEYsV0FBVy9CLEVBQUUsQ0FBQyxHQUFFLEVBQUcsSUFBSSxDQUFDYyxFQUFFekUsS0FBSyxJQUFJMkQsRUFBRTdjLE9BQU9DLGVBQWVpWixFQUFFLGFBQWEsQ0FBQy9ZLE9BQU0sSUFBSytZLEVBQUV4UixjQUFTLEVBQU8sU0FBU2lXLEdBQUdBLEVBQUVsVyxTQUFTLFdBQVdrVyxFQUFFOVUsTUFBTSxRQUFROFUsRUFBRTdVLE1BQU0sUUFBUTZVLEVBQUU1VSxNQUFNLFFBQVE0VSxFQUFFL1YsVUFBVSxXQUFXLENBQXpHLENBQTJHaVYsSUFBSTNELEVBQUV4UixTQUFTbVYsRUFBRSxDQUFDLEdBQUUsRUFBRyxJQUFJLENBQUNjLEVBQUV6RSxLQUFLLElBQUkyRCxFQUFFN2MsT0FBT0MsZUFBZWlaLEVBQUUsYUFBYSxDQUFDL1ksT0FBTSxJQUFLK1ksRUFBRStGLGFBQVEsRUFBTyxTQUFTdEIsR0FBR0EsRUFBRXVCLFlBQVksY0FBY3ZCLEVBQUV3QixZQUFZLGNBQWN4QixFQUFFeUIsTUFBTSxPQUFPLENBQW5GLENBQXFGdkMsSUFBSTNELEVBQUUrRixRQUFRcEMsRUFBRSxDQUFDLEdBQUUsRUFBRyxLQUFLLENBQUNjLEVBQUV6RSxLQUFLLElBQUkyRCxFQUFFN2MsT0FBT0MsZUFBZWlaLEVBQUUsYUFBYSxDQUFDL1ksT0FBTSxJQUFLK1ksRUFBRW1HLHFCQUFxQm5HLEVBQUU3USxvQkFBZSxFQUFPLFNBQVNzVixHQUFHQSxFQUFFcFYsT0FBTyxTQUFTb1YsRUFBRXJWLE9BQU8sU0FBU3FWLEVBQUVuVixRQUFRLFNBQVMsQ0FBbkUsQ0FBcUVxVSxJQUFJM0QsRUFBRTdRLGVBQWV3VSxFQUFFLENBQUMsSUFBSTNELEVBQUVtRyxxQkFBcUIsQ0FBQ3hDLEVBQUV0VSxPQUFPc1UsRUFBRXZVLE9BQU91VSxFQUFFclUsUUFBTyxFQUFHLEtBQUssQ0FBQ21WLEVBQUV6RSxLQUFLLElBQUkyRCxFQUFFN2MsT0FBT0MsZUFBZWlaLEVBQUUsYUFBYSxDQUFDL1ksT0FBTSxJQUFLK1ksRUFBRW9HLG9CQUFlLEVBQU8sU0FBUzNCLEdBQUdBLEVBQUU1QyxNQUFNLFFBQVE0QyxFQUFFNEIsS0FBSyxNQUFNLENBQXpDLENBQTJDMUMsSUFBSTNELEVBQUVvRyxlQUFlekMsRUFBRSxDQUFDLEdBQUUsRUFBRyxLQUFLLENBQUNjLEVBQUV6RSxLQUFLLElBQUkyRCxFQUFFN2MsT0FBT0MsZUFBZWlaLEVBQUUsYUFBYSxDQUFDL1ksT0FBTSxJQUFLK1ksRUFBRXNHLG9CQUFlLEVBQU8sU0FBUzdCLEdBQUdBLEVBQUU4QixZQUFZLGNBQWM5QixFQUFFclYsT0FBTyxRQUFRLENBQXpELENBQTJEdVUsSUFBSTNELEVBQUVzRyxlQUFlM0MsRUFBRSxDQUFDLEdBQUUsRUFBRyxLQUFLLENBQUNjLEVBQUV6RSxLQUFLLElBQUkyRCxFQUFFN2MsT0FBT0MsZUFBZWlaLEVBQUUsYUFBYSxDQUFDL1ksT0FBTSxJQUFLK1ksRUFBRXdHLHNDQUFpQyxFQUFPLFNBQVMvQixHQUFHQSxFQUFFZ0MsTUFBTSxRQUFRaEMsRUFBRWlDLFdBQVcsWUFBWSxDQUFyRCxDQUF1RC9DLElBQUkzRCxFQUFFd0csaUNBQWlDN0MsRUFBRSxDQUFDLEdBQUUsRUFBRyxLQUFLLENBQUNjLEVBQUV6RSxLQUFLLElBQUkyRCxFQUFFN2MsT0FBT0MsZUFBZWlaLEVBQUUsYUFBYSxDQUFDL1ksT0FBTSxJQUFLK1ksRUFBRTJHLDJDQUFzQyxFQUFPLFNBQVNsQyxHQUFHQSxFQUFFbUMsU0FBUyxXQUFXbkMsRUFBRW9DLFdBQVcsWUFBWSxDQUEzRCxDQUE2RGxELElBQUkzRCxFQUFFMkcsc0NBQXNDaEQsRUFBRSxDQUFDLEdBQUUsRUFBRyxLQUFLLENBQUNjLEVBQUV6RSxLQUFLLElBQUkyRCxFQUFFN2MsT0FBT0MsZUFBZWlaLEVBQUUsYUFBYSxDQUFDL1ksT0FBTSxJQUFLK1ksRUFBRThHLHNDQUFpQyxFQUFPLFNBQVNyQyxHQUFHQSxFQUFFNVcsS0FBSyxPQUFPNFcsRUFBRXNDLFFBQVEsVUFBVXRDLEVBQUV1QyxLQUFLLE9BQU92QyxFQUFFd0MsY0FBYyxnQkFBZ0J4QyxFQUFFeUMsWUFBWSxjQUFjekMsRUFBRTBDLE1BQU0sUUFBUTFDLEVBQUUyQyxRQUFRLFVBQVUzQyxFQUFFNEMsUUFBUSxVQUFVNUMsRUFBRWdDLE1BQU0sUUFBUWhDLEVBQUVqZCxNQUFNLFFBQVFpZCxFQUFFNkMsVUFBVSxZQUFZN0MsRUFBRThDLFdBQVcsYUFBYTlDLEVBQUUrQyxVQUFVLFlBQVkvQyxFQUFFZ0QsS0FBSyxPQUFPaEQsRUFBRWlELFdBQVcsYUFBYWpELEVBQUVrRCxhQUFhLGVBQWVsRCxFQUFFbUQsZUFBZSxpQkFBaUJuRCxFQUFFb0QsYUFBYSxRQUFRcEQsRUFBRXFELFlBQVksY0FBY3JELEVBQUVhLE9BQU8sU0FBU2IsRUFBRXNELFdBQVcsYUFBYXRELEVBQUV1RCxnQkFBZ0Isa0JBQWtCdkQsRUFBRXdELE9BQU8sU0FBU3hELEVBQUV5RCxXQUFXLGFBQWF6RCxFQUFFMEQsS0FBSyxPQUFPMUQsRUFBRTJELFFBQVEsVUFBVTNELEVBQUU0RCxNQUFNLFFBQVE1RCxFQUFFNkQsVUFBVSxZQUFZN0QsRUFBRThELFNBQVMsVUFBVSxDQUFocEIsQ0FBa3BCNUUsSUFBSTNELEVBQUU4RyxpQ0FBaUNuRCxFQUFFLENBQUMsR0FBRSxFQUFHLEtBQUssQ0FBQ2MsRUFBRXpFLEtBQUssSUFBSTJELEVBQUU3YyxPQUFPQyxlQUFlaVosRUFBRSxhQUFhLENBQUMvWSxPQUFNLElBQUsrWSxFQUFFd0ksc0NBQWlDLEVBQU8sU0FBUy9ELEdBQUdBLEVBQUU1QyxNQUFNLFFBQVE0QyxFQUFFMEQsS0FBSyxNQUFNLENBQXpDLENBQTJDeEUsSUFBSTNELEVBQUV3SSxpQ0FBaUM3RSxFQUFFLENBQUMsR0FBRSxFQUFHLEtBQUssQ0FBQ2MsRUFBRXpFLEtBQUssSUFBSTJELEVBQUU3YyxPQUFPQyxlQUFlaVosRUFBRSxhQUFhLENBQUMvWSxPQUFNLElBQUsrWSxFQUFFeUkscUNBQXFDekksRUFBRTBJLDhDQUF5QyxFQUFPLFNBQVNqRSxHQUFHQSxFQUFFa0UsU0FBUyxXQUFXbEUsRUFBRW1FLFNBQVMsVUFBVSxDQUF2RCxDQUF5RGpGLElBQUkzRCxFQUFFMEkseUNBQXlDL0UsRUFBRSxDQUFDLElBQUkzRCxFQUFFeUkscUNBQXFDLE1BQU0sV0FBQXRQLENBQVlzTCxHQUFHLElBQUl6RSxFQUFFeUUsRUFBRXBQLElBQUl0TixLQUFLc0UsS0FBS3NYLEVBQUVnRixTQUFTNWdCLEtBQUtzRSxLQUFLc1gsRUFBRWlGLFNBQVM3Z0IsS0FBSzhnQixNQUFNOWdCLEtBQUsrZ0IsdUJBQXVCckUsRUFBRTFjLEtBQUtzRSxNQUFNdEUsS0FBSythLFlBQVkvYSxLQUFLZ2hCLDZCQUE2QnRFLEVBQUUxYyxLQUFLc0UsTUFBTXRFLEtBQUtpaEIsV0FBV2poQixLQUFLa2hCLDRCQUE0QnhFLEdBQUcxYyxLQUFLc0UsT0FBT3NYLEVBQUVpRixXQUFXLFFBQVE1SSxFQUFFeUUsRUFBRXlFLGdDQUEyQixJQUFTbEosT0FBRSxFQUFPQSxFQUFFbUosUUFBUTFFLEVBQUUyRSxvQkFBb0JyaEIsS0FBS3NoQixXQUFXNUUsRUFBRTJFLHFCQUFxQnJoQixLQUFLc2hCLFdBQVcsS0FBS3RoQixLQUFLc0UsT0FBT3NYLEVBQUVnRixVQUFVbEUsRUFBRXBQLElBQUl0TixLQUFLdWhCLFlBQVk3RSxFQUFFcFAsSUFBSXROLEtBQUt1aEIsWUFBWSxLQUFLLENBQUMsc0JBQUFSLENBQXVCckUsRUFBRXpFLEdBQUcsSUFBSXpOLEVBQUVnWCxFQUFFQyxFQUFFcE0sRUFBRXRKLEVBQUUsSUFBSVosRUFBRSxLQUFLLE9BQU91UixFQUFFb0UsT0FBT3BFLEVBQUVvRSxNQUFNekssT0FBTzlDLE9BQU8sRUFBRXBJLEVBQUV1UixFQUFFb0UsTUFBTTdJLElBQUkyRCxFQUFFaUYsU0FBUzFWLEVBQUUsUUFBUXFXLEVBQUUsUUFBUWhYLEVBQUVrUyxFQUFFeUUsZ0NBQTJCLElBQVMzVyxPQUFFLEVBQU9BLEVBQUVzVyxhQUFRLElBQVNVLEVBQUVBLEVBQUUsS0FBS3ZKLElBQUkyRCxFQUFFZ0YsV0FBV3pWLEVBQUUsUUFBUVksRUFBRSxRQUFRc0osRUFBRSxRQUFRb00sRUFBRS9FLEVBQUVnRixrQkFBYSxJQUFTRCxPQUFFLEVBQU9BLEVBQUVYLGFBQVEsSUFBU3pMLEVBQUVBLEVBQUVxSCxFQUFFcFAsV0FBTSxJQUFTdkIsRUFBRUEsRUFBRSxNQUFNWixHQUFHLElBQUlBLEVBQUVrTCxPQUFPOUMsT0FBT3BJLEVBQUUsSUFBSSxDQUFDLDRCQUFBNlYsQ0FBNkJ0RSxFQUFFekUsR0FBRyxJQUFJek4sRUFBRSxJQUFJZ1gsRUFBRSxLQUFLLE9BQU85RSxFQUFFM0IsYUFBYTJCLEVBQUUzQixZQUFZMUUsT0FBTzlDLE9BQU8sRUFBRWlPLEVBQUU5RSxFQUFFM0IsWUFBWTlDLElBQUkyRCxFQUFFZ0YsV0FBV1ksRUFBRSxRQUFRaFgsRUFBRWtTLEVBQUVnRixrQkFBYSxJQUFTbFgsT0FBRSxFQUFPQSxFQUFFdVEsYUFBYXlHLEdBQUcsSUFBSUEsRUFBRW5MLE9BQU85QyxPQUFPaU8sRUFBRSxJQUFJLENBQUMsMkJBQUFOLENBQTRCeEUsR0FBRyxJQUFJekUsRUFBRTJELEVBQUVwUixFQUFFZ1gsRUFBRUMsRUFBRSxPQUFPLFFBQVFBLEVBQUUsUUFBUWpYLEVBQUUsUUFBUXlOLEVBQUV5RSxFQUFFaUYsZ0JBQVcsSUFBUzFKLEVBQUVBLEVBQUUsUUFBUTJELEVBQUVjLEVBQUVrRixhQUFRLElBQVNoRyxPQUFFLEVBQU9BLEVBQUV0TyxXQUFNLElBQVM5QyxFQUFFQSxFQUFFLFFBQVFnWCxFQUFFOUUsRUFBRWdGLGtCQUFhLElBQVNGLE9BQUUsRUFBT0EsRUFBRUssb0JBQWUsSUFBU0osRUFBRUEsRUFBRSxJQUFJLEVBQUMsRUFBRyxLQUFLLENBQUMvRSxFQUFFekUsS0FBSyxJQUFJMkQsRUFBRTdjLE9BQU9DLGVBQWVpWixFQUFFLGFBQWEsQ0FBQy9ZLE9BQU0sSUFBSytZLEVBQUU2SiwrQkFBMEIsRUFBTyxTQUFTcEYsR0FBR0EsRUFBRXFGLEtBQUssT0FBT3JGLEVBQUVzRixPQUFPLFNBQVN0RixFQUFFZ0QsS0FBSyxPQUFPaEQsRUFBRTFVLGNBQWMsZ0JBQWdCMFUsRUFBRXVDLEtBQUssTUFBTSxDQUF2RyxDQUF5R3JELElBQUkzRCxFQUFFNkosMEJBQTBCbEcsRUFBRSxDQUFDLEdBQUUsRUFBRyxLQUFLLENBQUNjLEVBQUV6RSxLQUFLLElBQUkyRCxFQUFFcFIsRUFBRXpMLE9BQU9DLGVBQWVpWixFQUFFLGFBQWEsQ0FBQy9ZLE9BQU0sSUFBSytZLEVBQUVnSyxlQUFlaEssRUFBRXhLLG9CQUFlLEVBQU8sU0FBU2lQLEdBQUdBLEVBQUVoUCxjQUFjLGdCQUFnQmdQLEVBQUU1VyxLQUFLLE9BQU80VyxFQUFFNU8sT0FBTyxRQUFRLENBQTNFLENBQTZFOE4sSUFBSTNELEVBQUV4SyxlQUFlbU8sRUFBRSxDQUFDLElBQUksU0FBU2MsR0FBR0EsRUFBRXdGLFVBQVUsWUFBWXhGLEVBQUV5RixNQUFNLE9BQU8sQ0FBbkQsQ0FBcUQzWCxJQUFJeU4sRUFBRWdLLGVBQWV6WCxFQUFFLENBQUMsR0FBRSxFQUFHLEtBQUssQ0FBQ2tTLEVBQUV6RSxLQUFLLElBQUkyRCxFQUFFN2MsT0FBT0MsZUFBZWlaLEVBQUUsYUFBYSxDQUFDL1ksT0FBTSxJQUFLK1ksRUFBRW1LLGlDQUE0QixFQUFPLFNBQVMxRixHQUFHQSxFQUFFMkYsT0FBTyxTQUFTM0YsRUFBRTRGLFlBQVksY0FBYzVGLEVBQUU2RixVQUFVLFlBQVk3RixFQUFFOEYsVUFBVSxXQUFXLENBQXpHLENBQTJHNUcsSUFBSTNELEVBQUVtSyw0QkFBNEJ4RyxFQUFFLENBQUMsR0FBRSxFQUFHLEtBQUssQ0FBQ2MsRUFBRXpFLEtBQUssSUFBSTJELEVBQUU3YyxPQUFPQyxlQUFlaVosRUFBRSxhQUFhLENBQUMvWSxPQUFNLElBQUsrWSxFQUFFd0ssaUJBQVksRUFBTyxTQUFTL0YsR0FBR0EsRUFBRWdHLEdBQUcsS0FBS2hHLEVBQUVpRyxHQUFHLEtBQUtqRyxFQUFFa0csR0FBRyxLQUFLbEcsRUFBRW1HLEdBQUcsS0FBS25HLEVBQUVvRyxHQUFHLEtBQUtwRyxFQUFFcUcsR0FBRyxLQUFLckcsRUFBRXNHLEdBQUcsS0FBS3RHLEVBQUV1RyxHQUFHLEtBQUt2RyxFQUFFd0csS0FBSyxPQUFPLENBQTFHLENBQTRHdEgsSUFBSTNELEVBQUV3SyxZQUFZN0csRUFBRSxDQUFDLEdBQUUsRUFBRyxLQUFLLENBQUNjLEVBQUV6RSxLQUFLLElBQUkyRCxFQUFFN2MsT0FBT0MsZUFBZWlaLEVBQUUsYUFBYSxDQUFDL1ksT0FBTSxJQUFLK1ksRUFBRWtMLG9DQUErQixFQUFPLFNBQVN6RyxHQUFHQSxFQUFFMEcsT0FBTyxTQUFTMUcsRUFBRTVDLE1BQU0sUUFBUTRDLEVBQUUyRyxlQUFlLGdCQUFnQixDQUEvRSxDQUFpRnpILElBQUkzRCxFQUFFa0wsK0JBQStCdkgsRUFBRSxDQUFDLEdBQUUsRUFBRyxLQUFLLENBQUNjLEVBQUV6RSxLQUFLLElBQUkyRCxFQUFFN2MsT0FBT0MsZUFBZWlaLEVBQUUsYUFBYSxDQUFDL1ksT0FBTSxJQUFLK1ksRUFBRXFMLGVBQWVyTCxFQUFFc0wsd0JBQXdCdEwsRUFBRXVMLHlCQUF5QnZMLEVBQUV3TCx1QkFBdUJ4TCxFQUFFeUwsbUJBQW1CekwsRUFBRTBMLGdCQUFnQjFMLEVBQUUyTCxpQkFBaUIzTCxFQUFFNEwsZ0JBQWdCNUwsRUFBRTZMLHlCQUF5QjdMLEVBQUU4TCwwQkFBMEI5TCxFQUFFK0wsc0JBQXNCL0wsRUFBRWdNLG1CQUFtQmhNLEVBQUVpTSxtQkFBbUJqTSxFQUFFblksZUFBVSxFQUFPLFNBQVM0YyxHQUFHQSxFQUFFM2MsTUFBTSxRQUFRMmMsRUFBRXphLFdBQVcsYUFBYXlhLEVBQUV2YixPQUFPLFNBQVN1YixFQUFFeGMsT0FBTyxTQUFTd2MsRUFBRXRjLFNBQVMsV0FBV3NjLEVBQUUzYSxLQUFLLE9BQU8yYSxFQUFFM2IsT0FBTyxlQUFlMmIsRUFBRTViLFlBQVksY0FBYzRiLEVBQUUxYixTQUFTLFdBQVcwYixFQUFFaGMsU0FBUyxXQUFXZ2MsRUFBRXBjLFVBQVUsWUFBWW9jLEVBQUU5YixjQUFjLGdCQUFnQjhiLEVBQUUvYixXQUFXLGFBQWErYixFQUFFamMsUUFBUSxVQUFVaWMsRUFBRTdiLGlCQUFpQixtQkFBbUI2YixFQUFFbmMsS0FBSyxPQUFPbWMsRUFBRWxjLE1BQU0sUUFBUWtjLEVBQUV6YixPQUFPLFNBQVN5YixFQUFFOWEsZUFBZSxpQkFBaUI4YSxFQUFFL2EsU0FBUyxXQUFXK2EsRUFBRTdhLFdBQVcsYUFBYTZhLEVBQUVuYixXQUFXLGFBQWFtYixFQUFFcmIsV0FBVyxhQUFhcWIsRUFBRWpiLE9BQU8sU0FBU2liLEVBQUVsYixZQUFZLGFBQWEsQ0FBN2tCLENBQStrQm9hLElBQUkzRCxFQUFFblksVUFBVThiLEVBQUUsQ0FBQyxJQUFJM0QsRUFBRWlNLG1CQUFtQixDQUFDdEksRUFBRW5hLE9BQU9tYSxFQUFFcGEsWUFBWW9hLEVBQUVyYSxXQUFXcWEsRUFBRXZhLFlBQVk0VyxFQUFFZ00sbUJBQW1CLENBQUNySSxFQUFFamEsU0FBU2lhLEVBQUVoYSxlQUFlZ2EsRUFBRS9aLFlBQVlvVyxFQUFFK0wsc0JBQXNCLENBQUNwSSxFQUFFdGIsVUFBVXNiLEVBQUVyYixLQUFLcWIsRUFBRXBiLE1BQU1vYixFQUFFbmIsUUFBUW1iLEVBQUVsYixTQUFTa2IsRUFBRWpiLFdBQVdpYixFQUFFaGIsY0FBY2diLEVBQUUvYSxpQkFBaUIrYSxFQUFFOWEsWUFBWThhLEVBQUU3YSxPQUFPNmEsRUFBRTVhLFNBQVM0YSxFQUFFM2EsUUFBUWdYLEVBQUU4TCwwQkFBMEIsQ0FBQ25JLEVBQUVuYixRQUFRbWIsRUFBRTNhLFFBQVFnWCxFQUFFNkwseUJBQXlCLENBQUNsSSxFQUFFNWEsVUFBVWlYLEVBQUU0TCxnQkFBZ0IsSUFBSTVMLEVBQUUrTCx5QkFBeUIvTCxFQUFFaU0sc0JBQXNCak0sRUFBRWdNLG1CQUFtQnJJLEVBQUU3YixNQUFNNmIsRUFBRXhiLFNBQVN3YixFQUFFMWIsT0FBTzBiLEVBQUU3YSxPQUFPNmEsRUFBRXphLE9BQU95YSxFQUFFM1osV0FBVzJaLEVBQUU3WixNQUFNa1csRUFBRTJMLGlCQUFpQixJQUFJM0wsRUFBRStMLHlCQUF5Qi9MLEVBQUVpTSxzQkFBc0JqTSxFQUFFZ00sb0JBQW9CaE0sRUFBRTBMLGdCQUFnQmpILEdBQUd6RSxFQUFFMkwsaUJBQWlCTyxTQUFTekgsR0FBR3pFLEVBQUV5TCxtQkFBbUJoSCxLQUFJLEVBQUd6RSxFQUFFMEwsaUJBQWlCakgsR0FBR3pFLEVBQUV3TCx1QkFBdUIsQ0FBQzdILEVBQUU3YixTQUFTa1ksRUFBRStMLHlCQUF5Qi9MLEVBQUVpTSxzQkFBc0JqTSxFQUFFZ00sb0JBQW9CaE0sRUFBRXVMLHlCQUF5QixDQUFDNUgsRUFBRTdiLFNBQVNrWSxFQUFFK0wsc0JBQXNCcEksRUFBRXJhLFdBQVdxYSxFQUFFdmEsV0FBV3VhLEVBQUVqYSxTQUFTaWEsRUFBRWhhLGdCQUFnQnFXLEVBQUVzTCx3QkFBd0I3RyxHQUFHekUsRUFBRXVMLHlCQUF5QlcsU0FBU3pILEdBQUd6RSxFQUFFcUwsZUFBZSxDQUFDMUgsRUFBRTdiLE1BQU02YixFQUFFemEsT0FBT3lhLEVBQUV4YixTQUFTd2IsRUFBRTNaLFdBQVcyWixFQUFFMWIsVUFBVStYLEVBQUUrTCxzQkFBc0JwSSxFQUFFcmEsV0FBV3FhLEVBQUV2YSxXQUFXdWEsRUFBRW5hLFVBQVV3VyxFQUFFZ00sbUJBQWtCLEVBQUcsS0FBSyxDQUFDdkgsRUFBRXpFLEtBQUssSUFBSTJELEVBQUU3YyxPQUFPQyxlQUFlaVosRUFBRSxhQUFhLENBQUMvWSxPQUFNLElBQUsrWSxFQUFFbU0sNkJBQXdCLEVBQU8sU0FBUzFILEdBQUdBLEVBQUU1QyxNQUFNLFFBQVE0QyxFQUFFMEQsS0FBSyxNQUFNLENBQXpDLENBQTJDeEUsSUFBSTNELEVBQUVtTSx3QkFBd0J4SSxFQUFFLENBQUMsR0FBRSxFQUFHLEtBQUssQ0FBQ2MsRUFBRXpFLEtBQUssSUFBSTJELEVBQUU3YyxPQUFPQyxlQUFlaVosRUFBRSxhQUFhLENBQUMvWSxPQUFNLElBQUsrWSxFQUFFb00sc0NBQWlDLEVBQU8sU0FBUzNILEdBQUdBLEVBQUU0SCxLQUFLLE9BQU81SCxFQUFFNkgsS0FBSyxPQUFPN0gsRUFBRThILFNBQVMsWUFBWTlILEVBQUUrSCxRQUFRLFVBQVUvSCxFQUFFZ0ksV0FBVyxZQUFZLENBQTVHLENBQThHOUksSUFBSTNELEVBQUVvTSxpQ0FBaUN6SSxFQUFFLENBQUMsR0FBRSxFQUFHLEtBQUssQ0FBQ2MsRUFBRXpFLEtBQUtsWixPQUFPQyxlQUFlaVosRUFBRSxhQUFhLENBQUMvWSxPQUFNLElBQUsrWSxFQUFFME0sb0JBQWUsRUFBTyxNQUFNL0ksVUFBVWpELE1BQU0sV0FBQXZILENBQVlzTCxFQUFFekUsRUFBRTJELEVBQUVwUixFQUFFZ1gsRUFBRUMsRUFBRXBNLEdBQUd1UCxNQUFNbEksR0FBRzFjLEtBQUtpZixLQUFLaEgsRUFBRWpZLEtBQUs2a0IsT0FBT2pKLEVBQUU1YixLQUFLOGtCLFdBQVd0YSxFQUFFeEssS0FBSytrQixVQUFVdkQsRUFBRXhoQixLQUFLZ2xCLFdBQVd2RCxFQUFFemhCLEtBQUtzTixJQUFJK0gsQ0FBQyxDQUFDLDBCQUFPNFAsQ0FBb0J2SSxFQUFFekUsRUFBRXpOLEdBQUcsSUFBSWdYLEVBQUVDLEVBQUVwTSxFQUFFLE9BQU8sSUFBSXVHLEVBQUVjLEVBQUV3SSxRQUFReEksRUFBRXlJLFdBQVd6SSxFQUFFMEksUUFBUTFJLEVBQUUySSxPQUFPLEtBQUszSSxFQUFFdUMsTUFBTWhILEVBQUUsUUFBUXVKLEVBQUU5RSxFQUFFb0ksa0JBQWEsSUFBU3RELEVBQUVBLEVBQUUsS0FBSyxRQUFRQyxFQUFFL0UsRUFBRXFJLGlCQUFZLElBQVN0RCxFQUFFQSxFQUFFLEtBQUssUUFBUXBNLEVBQUVxSCxFQUFFc0ksa0JBQWEsSUFBUzNQLEVBQUVBLEVBQUUsS0FBSzdLLEVBQUUsQ0FBQyw0QkFBTzhhLENBQXNCNUksR0FBRyxPQUFPLElBQUlkLEVBQUUscUNBQXFDLGFBQWEsTUFBTSxNQUFLLElBQUsySixNQUFNQyxjQUFjLEtBQUs5SSxFQUFFLENBQUMsZUFBTytJLENBQVMvSSxHQUFHLE9BQU8sSUFBSWQsRUFBRWMsRUFBRUEsRUFBRSxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssQ0FBQyxrQkFBT2dKLENBQVloSixHQUFHLE9BQU8sSUFBSWQsRUFBRWMsRUFBRSxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxDQUFDLGNBQUFpSixDQUFlakosR0FBRyxZQUFPLElBQVMxYyxLQUFLOGtCLFdBQVd4UCxNQUFNMkMsR0FBR0EsRUFBRTJOLE1BQU1sSixHQUFHLENBQUMsYUFBQW1KLENBQWNuSixHQUFHLElBQUl6RSxFQUFFLE9BQU8sUUFBUUEsRUFBRWpZLEtBQUs4a0IsV0FBV3hQLE1BQU0yQyxHQUFHQSxFQUFFMk4sTUFBTWxKLFdBQU0sSUFBU3pFLEVBQUVBLEVBQUUsSUFBSSxDQUFDLFFBQUFwTSxHQUFXLElBQUk2USxFQUFFekUsRUFBRTJELEVBQUVwUixFQUFFZ1gsRUFBRUMsRUFBRSxNQUFNLHVCQUF1QnpoQixLQUFLa2xCLHdCQUF3QixRQUFReEksRUFBRTFjLEtBQUtpZixZQUFPLElBQVN2QyxFQUFFQSxFQUFFLHNCQUFzQixRQUFRekUsRUFBRWpZLEtBQUs2a0IsY0FBUyxJQUFTNU0sRUFBRUEsRUFBRSxzQkFBc0I2TixLQUFLQyxVQUFVL2xCLEtBQUs4a0IsV0FBVyxLQUFLLHlCQUF5QixRQUFRbEosRUFBRTViLEtBQUsra0IsaUJBQVksSUFBU25KLEVBQUVBLEVBQUUsMkJBQTJCLFFBQVFwUixFQUFFeEssS0FBS2dsQixrQkFBYSxJQUFTeGEsRUFBRUEsRUFBRSwyQkFBMkIsUUFBUWdYLEVBQUV4aEIsS0FBS3NOLFdBQU0sSUFBU2tVLEVBQUVBLEVBQUUscUJBQXFCLFFBQVFDLEVBQUV6aEIsS0FBS2dtQixhQUFRLElBQVN2RSxFQUFFQSxFQUFFLFdBQVcsQ0FBQyxlQUFBd0UsR0FBa0IsTUFBTSxHQUFHam1CLEtBQUtrbEIsVUFBVWxsQixLQUFLK2tCLFVBQVUsYUFBYS9rQixLQUFLK2tCLGFBQWEsSUFBSSxFQUFFOU0sRUFBRTBNLGVBQWUvSSxHQUFHLEtBQUssQ0FBQ2MsRUFBRXpFLEtBQUssSUFBSTJELEVBQUU3YyxPQUFPQyxlQUFlaVosRUFBRSxhQUFhLENBQUMvWSxPQUFNLElBQUsrWSxFQUFFaU8sa0JBQWtCak8sRUFBRW5SLGlCQUFZLEVBQU8sU0FBUzRWLEdBQUdBLEVBQUUzVixPQUFPLFNBQVMyVixFQUFFMVYsT0FBTyxTQUFTMFYsRUFBRXpWLE1BQU0sUUFBUXlWLEVBQUV4VixPQUFPLFFBQVEsQ0FBakYsQ0FBbUYwVSxJQUFJM0QsRUFBRW5SLFlBQVk4VSxFQUFFLENBQUMsSUFBSTNELEVBQUVpTyxrQkFBa0IsQ0FBQ3RLLEVBQUU3VSxPQUFPNlUsRUFBRTVVLE9BQU80VSxFQUFFM1UsTUFBTTJVLEVBQUUxVSxPQUFNLEVBQUcsS0FBSyxDQUFDd1YsRUFBRXpFLEtBQUssSUFBSTJELEVBQUU3YyxPQUFPQyxlQUFlaVosRUFBRSxhQUFhLENBQUMvWSxPQUFNLElBQUsrWSxFQUFFa08sZ0JBQVcsRUFBTyxTQUFTekosR0FBR0EsRUFBRTBKLE1BQU0sUUFBUTFKLEVBQUUySixZQUFZLGNBQWMzSixFQUFFNEoscUJBQXFCLHNCQUFzQixDQUFyRyxDQUF1RzFLLElBQUkzRCxFQUFFa08sV0FBV3ZLLEVBQUUsQ0FBQyxHQUFFLEVBQUcsS0FBSyxDQUFDYyxFQUFFekUsS0FBSyxJQUFJMkQsRUFBRTdjLE9BQU9DLGVBQWVpWixFQUFFLGFBQWEsQ0FBQy9ZLE9BQU0sSUFBSytZLEVBQUVzTyxvQ0FBK0IsRUFBTyxTQUFTN0osR0FBR0EsRUFBRThKLEtBQUssT0FBTzlKLEVBQUUrSixRQUFRLFVBQVUvSixFQUFFZ0ssUUFBUSxVQUFVaEssRUFBRWlLLE1BQU0sT0FBTyxDQUFqRixDQUFtRi9LLElBQUkzRCxFQUFFc08sK0JBQStCM0ssRUFBRSxDQUFDLEdBQUUsRUFBRyxLQUFLLENBQUNjLEVBQUV6RSxLQUFLLElBQUkyRCxFQUFFN2MsT0FBT0MsZUFBZWlaLEVBQUUsYUFBYSxDQUFDL1ksT0FBTSxJQUFLK1ksRUFBRTJPLHVDQUFrQyxFQUFPLFNBQVNsSyxHQUFHQSxFQUFFbUssT0FBTyxTQUFTbkssRUFBRW9LLFFBQVEsU0FBUyxDQUFqRCxDQUFtRGxMLElBQUkzRCxFQUFFMk8sa0NBQWtDaEwsRUFBRSxDQUFDLEdBQUUsRUFBRyxLQUFLLENBQUNjLEVBQUV6RSxLQUFLLElBQUkyRCxFQUFFN2MsT0FBT0MsZUFBZWlaLEVBQUUsYUFBYSxDQUFDL1ksT0FBTSxJQUFLK1ksRUFBRThPLCtCQUEwQixFQUFPLFNBQVNySyxHQUFHQSxFQUFFc0ssS0FBSyxPQUFPdEssRUFBRWpkLE1BQU0sUUFBUWlkLEVBQUVrRixNQUFNLFFBQVFsRixFQUFFdUssVUFBVSxZQUFZdkssRUFBRXdLLFVBQVUsWUFBWXhLLEVBQUV5SyxlQUFlLGdCQUFnQixDQUEzSSxDQUE2SXZMLElBQUkzRCxFQUFFOE8sMEJBQTBCbkwsRUFBRSxDQUFDLEdBQUUsRUFBRyxLQUFLLENBQUNjLEVBQUV6RSxLQUFLLElBQUkyRCxFQUFFLFNBQVNwUixFQUFFa1MsR0FBRyxPQUFPQSxFQUFFcFksTUFBTSxLQUFLc1gsRUFBRXdMLGtCQUFrQixNQUFNLFNBQVMxSyxFQUFFMkUsc0JBQXNCLEtBQUt6RixFQUFFeUwsWUFBWSxNQUFNLFNBQVMzSyxFQUFFMkUsdUJBQXVCM0UsRUFBRTRLLGdCQUFnQixLQUFLMUwsRUFBRXRPLElBQUksT0FBT29QLEVBQUVwUCxJQUFJLFFBQVEsT0FBTyxDQUFDdk8sT0FBT0MsZUFBZWlaLEVBQUUsYUFBYSxDQUFDL1ksT0FBTSxJQUFLK1ksRUFBRXNQLHdCQUF3QnRQLEVBQUV1UCx5QkFBeUJ2UCxFQUFFd1AsY0FBY3hQLEVBQUV5UCxxQkFBZ0IsRUFBTyxTQUFTaEwsR0FBR0EsRUFBRTBLLGtCQUFrQixvQkFBb0IxSyxFQUFFMkssWUFBWSxjQUFjM0ssRUFBRXBQLElBQUksS0FBSyxDQUEzRixDQUE2RnNPLElBQUkzRCxFQUFFeVAsZ0JBQWdCOUwsRUFBRSxDQUFDLElBQUkzRCxFQUFFd1AsY0FBY2pkLEVBQUV5TixFQUFFdVAseUJBQXlCLFNBQVM5SyxHQUFHLE1BQU16RSxFQUFFek4sRUFBRWtTLEdBQUcsR0FBR3pFLEVBQUUsTUFBTSxDQUFDMFAsS0FBSzFQLEVBQUVrQyxPQUFPdUMsRUFBRWtMLGFBQWEsU0FBUyxRQUFRLEVBQUUzUCxFQUFFc1Asd0JBQXdCLFNBQVM3SyxFQUFFekUsR0FBRyxJQUFJeUUsRUFBRSxPQUFPLE1BQU1sUyxFQUFFLFdBQVd5TixFQUFFLEdBQUd5RSxFQUFFck8sV0FBVyxVQUFVLENBQUMsR0FBR3FPLEVBQUV5SCxTQUFTLEtBQUssQ0FBQyxNQUFNbE0sRUFBRXVKLEdBQUc5RSxFQUFFOU4sUUFBUSxTQUFTLElBQUlvSCxNQUFNLEtBQUssTUFBTSxDQUFDMVIsS0FBS3NYLEVBQUV5TCxZQUFZaEcsb0JBQW9CcEosRUFBRXFQLGNBQWM5RixFQUFFb0csYUFBYXBkLEVBQUUsQ0FBQyxNQUFNLENBQUNsRyxLQUFLc1gsRUFBRXdMLGtCQUFrQi9GLG9CQUFvQjNFLEVBQUU5TixRQUFRLFNBQVMsSUFBSWdaLGFBQWFwZCxFQUFFLENBQUMsTUFBTSxDQUFDbEcsS0FBS3NYLEVBQUV0TyxJQUFJQSxJQUFJb1AsRUFBRWtMLGFBQWFwZCxFQUFFLEdBQUcsS0FBSyxDQUFDa1MsRUFBRXpFLEtBQUssSUFBSTJELEVBQUU3YyxPQUFPQyxlQUFlaVosRUFBRSxhQUFhLENBQUMvWSxPQUFNLElBQUsrWSxFQUFFNFAsMkJBQXNCLEVBQU8sU0FBU25MLEdBQUdBLEVBQUVvTCxhQUFhLGVBQWVwTCxFQUFFcUwsaUJBQWlCLG1CQUFtQnJMLEVBQUVzTCxZQUFZLGFBQWEsQ0FBM0csQ0FBNkdwTSxJQUFJM0QsRUFBRTRQLHNCQUFzQmpNLEVBQUUsQ0FBQyxHQUFFLEVBQUcsS0FBSyxDQUFDYyxFQUFFekUsS0FBSyxJQUFJMkQsRUFBRTdjLE9BQU9DLGVBQWVpWixFQUFFLGFBQWEsQ0FBQy9ZLE9BQU0sSUFBSytZLEVBQUVnUSwrQ0FBMEMsRUFBTyxTQUFTdkwsR0FBR0EsRUFBRXdMLGlCQUFpQixtQkFBbUJ4TCxFQUFFeUwsYUFBYSxlQUFlekwsRUFBRTBMLE9BQU8sU0FBUzFMLEVBQUUyTCxTQUFTLFVBQVUsQ0FBdkgsQ0FBeUh6TSxJQUFJM0QsRUFBRWdRLDBDQUEwQ3JNLEVBQUUsQ0FBQyxHQUFFLEVBQUcsS0FBSyxDQUFDYyxFQUFFekUsS0FBSyxJQUFJMkQsRUFBRTdjLE9BQU9DLGVBQWVpWixFQUFFLGFBQWEsQ0FBQy9ZLE9BQU0sSUFBSytZLEVBQUVxUSxtQ0FBOEIsRUFBTyxTQUFTNUwsR0FBR0EsRUFBRXdMLGlCQUFpQixtQkFBbUJ4TCxFQUFFeUwsYUFBYSxlQUFlekwsRUFBRTBMLE9BQU8sU0FBUzFMLEVBQUUyTCxTQUFTLFVBQVUsQ0FBdkgsQ0FBeUh6TSxJQUFJM0QsRUFBRXFRLDhCQUE4QjFNLEVBQUUsQ0FBQyxHQUFFLEVBQUcsS0FBSyxDQUFDYyxFQUFFekUsS0FBSyxJQUFJMkQsRUFBRTdjLE9BQU9DLGVBQWVpWixFQUFFLGFBQWEsQ0FBQy9ZLE9BQU0sSUFBSytZLEVBQUVqRSxvQkFBZSxFQUFPLFNBQVMwSSxHQUFHQSxFQUFFekksUUFBUSxVQUFVeUksRUFBRTZMLE9BQU8sUUFBUSxDQUFqRCxDQUFtRDNNLElBQUkzRCxFQUFFakUsZUFBZTRILEVBQUUsQ0FBQyxHQUFFLEVBQUcsS0FBSyxDQUFDYyxFQUFFekUsS0FBSyxJQUFJMkQsRUFBRTdjLE9BQU9DLGVBQWVpWixFQUFFLGFBQWEsQ0FBQy9ZLE9BQU0sSUFBSytZLEVBQUV1USxjQUFTLEVBQU8sU0FBUzlMLEdBQUdBLEVBQUVwWCxNQUFNLFFBQVFvWCxFQUFFK0wsV0FBVyxZQUFZLENBQXJELENBQXVEN00sSUFBSTNELEVBQUV1USxTQUFTNU0sRUFBRSxDQUFDLEdBQUUsRUFBRyxLQUFLLENBQUNjLEVBQUV6RSxLQUFLLElBQUkyRCxFQUFFN2MsT0FBT0MsZUFBZWlaLEVBQUUsYUFBYSxDQUFDL1ksT0FBTSxJQUFLK1ksRUFBRXlRLGtDQUE2QixFQUFPLFNBQVNoTSxHQUFHQSxFQUFFaU0sTUFBTSxRQUFRak0sRUFBRWtNLE9BQU8sUUFBUSxDQUE3QyxDQUErQ2hOLElBQUkzRCxFQUFFeVEsNkJBQTZCOU0sRUFBRSxDQUFDLEdBQUUsRUFBRyxLQUFLLENBQUNjLEVBQUV6RSxLQUFLLElBQUkyRCxFQUFFN2MsT0FBT0MsZUFBZWlaLEVBQUUsYUFBYSxDQUFDL1ksT0FBTSxJQUFLK1ksRUFBRTRRLG9DQUErQixFQUFPLFNBQVNuTSxHQUFHQSxFQUFFRSxPQUFPLFNBQVNGLEVBQUVHLE9BQU8sU0FBU0gsRUFBRUksT0FBTyxTQUFTSixFQUFFSyxPQUFPLFNBQVNMLEVBQUVNLE9BQU8sU0FBU04sRUFBRTBDLE1BQU0sUUFBUTFDLEVBQUUyQyxRQUFRLFVBQVUzQyxFQUFFTyxRQUFRLFNBQVMsQ0FBN0osQ0FBK0pyQixJQUFJM0QsRUFBRTRRLCtCQUErQmpOLEVBQUUsQ0FBQyxHQUFFLEVBQUcsS0FBSyxDQUFDYyxFQUFFekUsS0FBSyxJQUFJMkQsRUFBRTdjLE9BQU9DLGVBQWVpWixFQUFFLGFBQWEsQ0FBQy9ZLE9BQU0sSUFBSytZLEVBQUU2USwrQkFBMEIsRUFBTyxTQUFTcE0sR0FBR0EsRUFBRXFNLFNBQVMsV0FBV3JNLEVBQUVzTSxjQUFjLGdCQUFnQnRNLEVBQUU1VyxLQUFLLE9BQU80VyxFQUFFdU0sZUFBZSxpQkFBaUJ2TSxFQUFFd00sUUFBUSxVQUFVeE0sRUFBRXlNLE9BQU8sU0FBU3pNLEVBQUUwTSxhQUFhLGVBQWUxTSxFQUFFMk0sWUFBWSxjQUFjM00sRUFBRWdDLE1BQU0sUUFBUWhDLEVBQUVqZCxNQUFNLFFBQVFpZCxFQUFFN2MsVUFBVSxZQUFZNmMsRUFBRTRNLGNBQWMsZ0JBQWdCNU0sRUFBRXVLLFVBQVUsWUFBWXZLLEVBQUU2TSxrQkFBa0Isb0JBQW9CN00sRUFBRWtGLE1BQU0sUUFBUWxGLEVBQUU4TSxjQUFjLGdCQUFnQjlNLEVBQUUrTSxTQUFTLFdBQVcvTSxFQUFFcFAsSUFBSSxNQUFNb1AsRUFBRWdOLFNBQVMsV0FBV2hOLEVBQUV1QyxLQUFLLE9BQU92QyxFQUFFaU4sWUFBWSxjQUFjak4sRUFBRTRELE1BQU0sUUFBUTVELEVBQUU0QyxRQUFRLFVBQVU1QyxFQUFFa04sVUFBVSxZQUFZbE4sRUFBRTNjLE1BQU0sUUFBUTJjLEVBQUV3SyxVQUFVLFlBQVl4SyxFQUFFeUssZUFBZSxnQkFBZ0IsQ0FBam9CLENBQW1vQnZMLElBQUkzRCxFQUFFNlEsMEJBQTBCbE4sRUFBRSxDQUFDLEdBQUUsRUFBRyxLQUFLLENBQUNjLEVBQUV6RSxLQUFLLElBQUkyRCxFQUFFN2MsT0FBT0MsZUFBZWlaLEVBQUUsYUFBYSxDQUFDL1ksT0FBTSxJQUFLK1ksRUFBRTFSLG9CQUFlLEVBQU8sU0FBU21XLEdBQUdBLEVBQUVsVyxTQUFTLE9BQU9rVyxFQUFFM1UsVUFBVSxZQUFZMlUsRUFBRTFVLGNBQWMsZUFBZSxDQUFyRixDQUF1RjRULElBQUkzRCxFQUFFMVIsZUFBZXFWLEVBQUUsQ0FBQyxHQUFFLEVBQUcsS0FBSyxDQUFDYyxFQUFFekUsS0FBSyxJQUFJMkQsRUFBRTdjLE9BQU9DLGVBQWVpWixFQUFFLGFBQWEsQ0FBQy9ZLE9BQU0sSUFBSytZLEVBQUU0UixxQ0FBZ0MsRUFBTyxTQUFTbk4sR0FBR0EsRUFBRXVHLEdBQUcsSUFBSXZHLEVBQUVzRyxHQUFHLElBQUl0RyxFQUFFcUcsR0FBRyxJQUFJckcsRUFBRW9HLEdBQUcsSUFBSXBHLEVBQUVtRyxHQUFHLElBQUluRyxFQUFFa0csR0FBRyxJQUFJbEcsRUFBRWlHLEdBQUcsSUFBSWpHLEVBQUVnRyxHQUFHLElBQUloRyxFQUFFb04sR0FBRyxJQUFJcE4sRUFBRXFOLElBQUksS0FBS3JOLEVBQUVzTixJQUFJLEtBQUt0TixFQUFFdU4sSUFBSSxJQUFJLENBQTdILENBQStIck8sSUFBSTNELEVBQUU0UixnQ0FBZ0NqTyxFQUFFLENBQUMsR0FBRSxFQUFHLEtBQUssQ0FBQ2MsRUFBRXpFLEtBQUssSUFBSTJELEVBQUU3YyxPQUFPQyxlQUFlaVosRUFBRSxhQUFhLENBQUMvWSxPQUFNLElBQUsrWSxFQUFFaVMsaUNBQTRCLEVBQU8sU0FBU3hOLEdBQUdBLEVBQUU1QyxNQUFNLFFBQVE0QyxFQUFFNEIsS0FBSyxNQUFNLENBQXpDLENBQTJDMUMsSUFBSTNELEVBQUVpUyw0QkFBNEJ0TyxFQUFFLENBQUMsR0FBRSxFQUFHLEtBQUssQ0FBQ2MsRUFBRXpFLEtBQUssSUFBSTJELEVBQUVwUixFQUFFekwsT0FBT0MsZUFBZWlaLEVBQUUsYUFBYSxDQUFDL1ksT0FBTSxJQUFLK1ksRUFBRWtTLGNBQWNsUyxFQUFFbVMsZUFBVSxFQUFPLFNBQVMxTixHQUFHQSxFQUFFMk4sS0FBSyxPQUFPM04sRUFBRXJWLE9BQU8sU0FBU3FWLEVBQUU0TixRQUFRLFNBQVMsQ0FBL0QsQ0FBaUUxTyxJQUFJM0QsRUFBRW1TLFVBQVV4TyxFQUFFLENBQUMsSUFBSSxTQUFTYyxHQUFHQSxFQUFFMk4sS0FBSyxPQUFPM04sRUFBRXJWLE9BQU8sU0FBU3FWLEVBQUU2TixNQUFNLE9BQU8sQ0FBM0QsQ0FBNkQvZixJQUFJeU4sRUFBRWtTLGNBQWMzZixFQUFFLENBQUMsR0FBRSxFQUFHLEtBQUssQ0FBQ2tTLEVBQUV6RSxLQUFLLElBQUkyRCxFQUFFN2MsT0FBT0MsZUFBZWlaLEVBQUUsYUFBYSxDQUFDL1ksT0FBTSxJQUFLK1ksRUFBRXVTLG9DQUErQixFQUFPLFNBQVM5TixHQUFHQSxFQUFFVSxNQUFNLFFBQVFWLEVBQUUrTixRQUFRLFVBQVUvTixFQUFFcUYsS0FBSyxNQUFNLENBQTdELENBQStEbkcsSUFBSTNELEVBQUV1UywrQkFBK0I1TyxFQUFFLENBQUMsR0FBRSxFQUFHLEtBQUssQ0FBQ2MsRUFBRXpFLEtBQUssSUFBSTJELEVBQUU3YyxPQUFPQyxlQUFlaVosRUFBRSxhQUFhLENBQUMvWSxPQUFNLElBQUsrWSxFQUFFeVMsdUJBQWtCLEVBQU8sU0FBU2hPLEdBQUdBLEVBQUVpTyxRQUFRLFVBQVVqTyxFQUFFa08sc0JBQXNCLHdCQUF3QmxPLEVBQUVtTyxrQkFBa0Isb0JBQW9Cbk8sRUFBRW9PLG1CQUFtQixxQkFBcUJwTyxFQUFFcU8sbUJBQW1CLHFCQUFxQnJPLEVBQUVzTyxlQUFlLGlCQUFpQnRPLEVBQUV1TyxnQkFBZ0IsaUJBQWlCLENBQWpSLENBQW1SclAsSUFBSTNELEVBQUV5UyxrQkFBa0I5TyxFQUFFLENBQUMsR0FBRSxFQUFHLEtBQUssQ0FBQ2MsRUFBRXpFLEtBQUssSUFBSTJELEVBQUU3YyxPQUFPQyxlQUFlaVosRUFBRSxhQUFhLENBQUMvWSxPQUFNLElBQUsrWSxFQUFFaVQsOEJBQXlCLEVBQU8sU0FBU3hPLEdBQUdBLEVBQUV5TyxNQUFNLFFBQVF6TyxFQUFFME8sT0FBTyxTQUFTMU8sRUFBRTJPLFlBQVksY0FBYzNPLEVBQUU0TyxZQUFZLGNBQWM1TyxFQUFFYSxPQUFPLFFBQVEsQ0FBdkgsQ0FBeUgzQixJQUFJM0QsRUFBRWlULHlCQUF5QnRQLEVBQUUsQ0FBQyxHQUFFLEVBQUcsS0FBSyxDQUFDYyxFQUFFekUsS0FBSyxJQUFJMkQsRUFBRTdjLE9BQU9DLGVBQWVpWixFQUFFLGFBQWEsQ0FBQy9ZLE9BQU0sSUFBSytZLEVBQUVzVCxxQkFBZ0IsRUFBTyxTQUFTN08sR0FBR0EsRUFBRThPLE1BQU0sUUFBUTlPLEVBQUUwRCxLQUFLLE1BQU0sQ0FBekMsQ0FBMkN4RSxJQUFJM0QsRUFBRXNULGdCQUFnQjNQLEVBQUUsQ0FBQyxHQUFFLEVBQUcsS0FBSyxDQUFDYyxFQUFFekUsS0FBSyxJQUFJMkQsRUFBRTdjLE9BQU9DLGVBQWVpWixFQUFFLGFBQWEsQ0FBQy9ZLE9BQU0sSUFBSytZLEVBQUV3VCx1QkFBa0IsRUFBTyxTQUFTL08sR0FBR0EsRUFBRWdQLGdCQUFnQixrQkFBa0JoUCxFQUFFaVAsa0JBQWtCLG9CQUFvQmpQLEVBQUVrUCxrQkFBa0Isb0JBQW9CbFAsRUFBRW1QLGdCQUFnQixrQkFBa0JuUCxFQUFFb1Asa0JBQWtCLG9CQUFvQnBQLEVBQUVxUCxzQkFBc0Isd0JBQXdCclAsRUFBRXNQLGtCQUFrQixvQkFBb0J0UCxFQUFFdVAsZUFBZSxpQkFBaUJ2UCxFQUFFd1Asd0JBQXdCLDBCQUEwQnhQLEVBQUV5UCx5QkFBeUIsMkJBQTJCelAsRUFBRTBQLDJCQUEyQiw2QkFBNkIxUCxFQUFFMlAsb0JBQW9CLHNCQUFzQjNQLEVBQUU0UCxvQkFBb0IscUJBQXFCLENBQWprQixDQUFta0IxUSxJQUFJM0QsRUFBRXdULGtCQUFrQjdQLEVBQUUsQ0FBQyxHQUFFLEVBQUcsS0FBSyxDQUFDYyxFQUFFekUsS0FBSyxJQUFJMkQsRUFBRTdjLE9BQU9DLGVBQWVpWixFQUFFLGFBQWEsQ0FBQy9ZLE9BQU0sSUFBSytZLEVBQUVzVSx3Q0FBbUMsRUFBTyxTQUFTN1AsR0FBR0EsRUFBRUUsT0FBTyxTQUFTRixFQUFFRyxPQUFPLFNBQVNILEVBQUVJLE9BQU8sU0FBU0osRUFBRUssT0FBTyxTQUFTTCxFQUFFTSxPQUFPLFNBQVNOLEVBQUUwQyxNQUFNLFFBQVExQyxFQUFFMkMsUUFBUSxVQUFVM0MsRUFBRThQLEdBQUcsS0FBSzlQLEVBQUUrUCxHQUFHLElBQUksQ0FBN0osQ0FBK0o3USxJQUFJM0QsRUFBRXNVLG1DQUFtQzNRLEVBQUUsQ0FBQyxHQUFFLEVBQUcsS0FBSyxDQUFDYyxFQUFFekUsS0FBSyxJQUFJMkQsRUFBRTdjLE9BQU9DLGVBQWVpWixFQUFFLGFBQWEsQ0FBQy9ZLE9BQU0sSUFBSytZLEVBQUV5VSxvQ0FBK0IsRUFBTyxTQUFTaFEsR0FBR0EsRUFBRXdELE9BQU8sU0FBU3hELEVBQUVpUSxJQUFJLEtBQUssQ0FBekMsQ0FBMkMvUSxJQUFJM0QsRUFBRXlVLCtCQUErQjlRLEVBQUUsQ0FBQyxHQUFFLEVBQUcsS0FBSyxDQUFDYyxFQUFFekUsS0FBSyxJQUFJMkQsRUFBRTdjLE9BQU9DLGVBQWVpWixFQUFFLGFBQWEsQ0FBQy9ZLE9BQU0sSUFBSytZLEVBQUUyVSxTQUFTM1UsRUFBRTRVLFNBQVM1VSxFQUFFNlUsVUFBVTdVLEVBQUU4VSxrQkFBa0I5VSxFQUFFK1UsV0FBVy9VLEVBQUVsVCxVQUFLLEVBQU8sU0FBUzJYLEdBQUdBLEVBQUUxWCxPQUFPLFNBQVMwWCxFQUFFbFYsUUFBUSxVQUFVa1YsRUFBRWpWLElBQUksTUFBTWlWLEVBQUUvVSxHQUFHLEtBQUsrVSxFQUFFaFYsSUFBSSxLQUFLLENBQW5GLENBQXFGa1UsSUFBSTNELEVBQUVsVCxLQUFLNlcsRUFBRSxDQUFDLElBQUkzRCxFQUFFK1UsV0FBVyxDQUFDcFIsRUFBRTVXLE9BQU80VyxFQUFFcFUsUUFBUW9VLEVBQUVuVSxLQUFLd1EsRUFBRThVLGtCQUFrQixDQUFDblIsRUFBRTVXLE9BQU80VyxFQUFFcFUsUUFBUW9VLEVBQUVuVSxJQUFJbVUsRUFBRWxVLEtBQUt1USxFQUFFNlUsVUFBVSxDQUFDbFIsRUFBRWxVLEtBQUt1USxFQUFFNFUsU0FBUyxDQUFDalIsRUFBRTVXLFFBQVFpVCxFQUFFMlUsU0FBUyxDQUFDaFIsRUFBRWpVLEdBQUUsRUFBRyxLQUFLLENBQUMrVSxFQUFFekUsS0FBSyxJQUFJMkQsRUFBRTdjLE9BQU9DLGVBQWVpWixFQUFFLGFBQWEsQ0FBQy9ZLE9BQU0sSUFBSytZLEVBQUVnVixpQkFBWSxFQUFPLFNBQVN2USxHQUFHQSxFQUFFd1EsSUFBSSxNQUFNeFEsRUFBRXlRLElBQUksTUFBTXpRLEVBQUUwUSxJQUFJLEtBQUssQ0FBL0MsQ0FBaUR4UixJQUFJM0QsRUFBRWdWLFlBQVlyUixFQUFFLENBQUMsR0FBRSxFQUFHLEtBQUssQ0FBQ2MsRUFBRXpFLEtBQUssSUFBSTJELEVBQUU3YyxPQUFPQyxlQUFlaVosRUFBRSxhQUFhLENBQUMvWSxPQUFNLElBQUsrWSxFQUFFb1YsdUNBQWtDLEVBQU8sU0FBUzNRLEdBQUdBLEVBQUU0USxLQUFLLE9BQU81USxFQUFFNlEsT0FBTyxTQUFTN1EsRUFBRThRLFVBQVUsWUFBWTlRLEVBQUUrUSxTQUFTLFdBQVcvUSxFQUFFZ1IsS0FBSyxNQUFNLENBQXZHLENBQXlHOVIsSUFBSTNELEVBQUVvVixrQ0FBa0N6UixFQUFFLENBQUMsR0FBRSxFQUFHLEtBQUssQ0FBQ2MsRUFBRXpFLEtBQUssSUFBSTJELEVBQUU3YyxPQUFPQyxlQUFlaVosRUFBRSxhQUFhLENBQUMvWSxPQUFNLElBQUsrWSxFQUFFdlMsZ0JBQVcsRUFBTyxTQUFTZ1gsR0FBR0EsRUFBRWlSLEtBQUssT0FBT2pSLEVBQUUvVyxNQUFNLE9BQU8sQ0FBekMsQ0FBMkNpVyxJQUFJM0QsRUFBRXZTLFdBQVdrVyxFQUFFLENBQUMsR0FBRSxFQUFHLEtBQUssQ0FBQ2MsRUFBRXpFLEtBQUssSUFBSTJELEVBQUU3YyxPQUFPQyxlQUFlaVosRUFBRSxhQUFhLENBQUMvWSxPQUFNLElBQUsrWSxFQUFFMlYsMEJBQXFCLEVBQU8sU0FBU2xSLEdBQUdBLEVBQUVtUixNQUFNLFFBQVFuUixFQUFFb1IsSUFBSSxNQUFNcFIsRUFBRXFSLE9BQU8sU0FBU3JSLEVBQUVzUixLQUFLLE9BQU90UixFQUFFdVIsT0FBTyxTQUFTdlIsRUFBRXdSLE9BQU8sU0FBU3hSLEVBQUV5UixLQUFLLE9BQU96UixFQUFFMFIsS0FBSyxPQUFPMVIsRUFBRTJSLEtBQUssT0FBTzNSLEVBQUU0UixVQUFVLFlBQVk1UixFQUFFNlIsS0FBSyxPQUFPN1IsRUFBRThSLFFBQVEsU0FBUyxDQUEvTSxDQUFpTjVTLElBQUkzRCxFQUFFMlYscUJBQXFCaFMsRUFBRSxDQUFDLEdBQUUsRUFBRyxLQUFLLENBQUNjLEVBQUV6RSxLQUFLLElBQUkyRCxFQUFFN2MsT0FBT0MsZUFBZWlaLEVBQUUsYUFBYSxDQUFDL1ksT0FBTSxJQUFLK1ksRUFBRXdXLDZCQUF3QixFQUFPLFNBQVMvUixHQUFHQSxFQUFFamQsTUFBTSxRQUFRaWQsRUFBRThDLFdBQVcsYUFBYTlDLEVBQUVrRixNQUFNLFFBQVFsRixFQUFFZ1MsV0FBVyxhQUFhaFMsRUFBRXVLLFVBQVUsWUFBWXZLLEVBQUVpUyxlQUFlLGdCQUFnQixDQUF6SixDQUEySi9TLElBQUkzRCxFQUFFd1csd0JBQXdCN1MsRUFBRSxDQUFDLEdBQUUsRUFBRyxLQUFLLENBQUNjLEVBQUV6RSxFQUFFMkQsS0FBSzdjLE9BQU9DLGVBQWVpWixFQUFFLGFBQWEsQ0FBQy9ZLE9BQU0sSUFBSytZLEVBQUUyVyx3QkFBd0IzVyxFQUFFNFcsY0FBUyxFQUFPLE1BQU1ya0IsRUFBRW9SLEVBQUUsTUFBTSxJQUFJNEYsR0FBRyxTQUFTOUUsR0FBR0EsRUFBRW9TLE1BQU0sUUFBUXBTLEVBQUVxUyxNQUFNLFFBQVFyUyxFQUFFc1MsUUFBUSxVQUFVdFMsRUFBRXVTLFlBQVksY0FBY3ZTLEVBQUV3UyxRQUFRLFVBQVV4UyxFQUFFeVMsT0FBTyxRQUFRLENBQWpJLENBQW1JM04sSUFBSXZKLEVBQUU0VyxTQUFTck4sRUFBRSxDQUFDLElBQUl2SixFQUFFMlcsd0JBQXdCbFMsSUFBSSxPQUFPQSxHQUFHLElBQUksUUFBUSxPQUFPOEUsRUFBRXNOLE1BQU0sSUFBSSxRQUFRLE9BQU90TixFQUFFdU4sTUFBTSxJQUFJLFVBQVUsT0FBT3ZOLEVBQUV3TixRQUFRLElBQUksY0FBYyxPQUFPeE4sRUFBRXlOLFlBQVksSUFBSSxVQUFVLE9BQU96TixFQUFFME4sUUFBUSxJQUFJLFNBQVMsT0FBTzFOLEVBQUUyTixPQUFPLFFBQVEsTUFBTTNrQixFQUFFbWEsZUFBZWUsWUFBWSxpQkFBaUJoSixLQUFJLENBQUMsRUFBRyxLQUFLLENBQUNBLEVBQUV6RSxLQUFLLElBQUkyRCxFQUFFN2MsT0FBT0MsZUFBZWlaLEVBQUUsYUFBYSxDQUFDL1ksT0FBTSxJQUFLK1ksRUFBRW1YLG9DQUErQixFQUFPLFNBQVMxUyxHQUFHQSxFQUFFQSxFQUFFMlMsR0FBRyxHQUFHLEtBQUszUyxFQUFFQSxFQUFFNFMsR0FBRyxHQUFHLEtBQUs1UyxFQUFFQSxFQUFFNlMsR0FBRyxHQUFHLElBQUksQ0FBeEQsQ0FBMEQzVCxJQUFJM0QsRUFBRW1YLCtCQUErQnhULEVBQUUsQ0FBQyxHQUFFLEVBQUcsS0FBSyxDQUFDYyxFQUFFekUsS0FBSyxJQUFJMkQsRUFBRTdjLE9BQU9DLGVBQWVpWixFQUFFLGFBQWEsQ0FBQy9ZLE9BQU0sSUFBSytZLEVBQUV1WCxrQkFBa0J2WCxFQUFFd1gsc0JBQWlCLEVBQU8sU0FBUy9TLEdBQUdBLEVBQUVnVCxTQUFTLFdBQVdoVCxFQUFFd0ssVUFBVSxXQUFXLENBQXpELENBQTJEdEwsSUFBSTNELEVBQUV3WCxpQkFBaUI3VCxFQUFFLENBQUMsSUFBSTNELEVBQUV1WCxrQkFBa0IsU0FBUzlTLEVBQUV6RSxFQUFFek4sR0FBRyxJQUFJZ1gsRUFBRSxHQUFHOUUsRUFBRSxPQUFPQSxFQUFFcFksTUFBTSxLQUFLc1gsRUFBRThULFNBQVMsT0FBTyxRQUFRbE8sRUFBRTlFLEVBQUVnVCxnQkFBVyxJQUFTbE8sT0FBRSxFQUFPQSxFQUFFbFUsSUFBSSxLQUFLc08sRUFBRXNMLFVBQVUsSUFBSXhLLEVBQUV3SyxZQUFZeEssRUFBRXdLLFVBQVV5SSxXQUFXalQsRUFBRXdLLFVBQVUwSSxpQkFBaUIsT0FBTyxPQUFPM1gsRUFBRTRYLFVBQVVDLHVCQUF1QixDQUFDQyxlQUFldmxCLEVBQUV3bEIsS0FBS0MsVUFBVXpsQixFQUFFeWxCLFdBQVd2VCxFQUFFd0ssVUFBVTBJLGtCQUFrQixRQUFRLE9BQU8sSUFBSTNYLEVBQUUsQ0FBQyxFQUFFLFNBQVMyRCxFQUFFcFIsR0FBRyxJQUFJZ1gsRUFBRXZKLEVBQUV6TixHQUFHLFFBQUcsSUFBU2dYLEVBQUUsT0FBT0EsRUFBRXZpQixRQUFRLElBQUl3aUIsRUFBRXhKLEVBQUV6TixHQUFHLENBQUN2TCxRQUFRLENBQUMsR0FBRyxPQUFPeWQsRUFBRWxTLEdBQUdpWCxFQUFFQSxFQUFFeGlCLFFBQVEyYyxHQUFHNkYsRUFBRXhpQixPQUFPLENBQUMsSUFBSXVMLEVBQUUsQ0FBQyxFQUFFLE1BQU0sSUFBSWtTLEVBQUVsUyxFQUFFekwsT0FBT0MsZUFBZTBkLEVBQUUsYUFBYSxDQUFDeGQsT0FBTSxJQUFLd2QsRUFBRTVjLFVBQVU0YyxFQUFFblcsZUFBZW1XLEVBQUVqVyxTQUFTaVcsRUFBRWhYLFdBQVdnWCxFQUFFb0YsMEJBQTBCcEYsRUFBRW5ZLGFBQWFtWSxFQUFFK0YsWUFBWS9GLEVBQUU2QixlQUFlN0IsRUFBRXNCLFFBQVF0QixFQUFFeUosV0FBV3pKLEVBQUUrUyxpQkFBaUIvUyxFQUFFZ0wsZ0JBQWdCaEwsRUFBRTZPLGdCQUFnQjdPLEVBQUUyQixlQUFlM0IsRUFBRTBILHdCQUF3QjFILEVBQUVDLDJCQUEyQkQsRUFBRW1NLCtCQUErQm5NLEVBQUVrUixxQkFBcUJsUixFQUFFNEwsOEJBQThCNUwsRUFBRW1OLGdDQUFnQ25OLEVBQUVnUSwrQkFBK0JoUSxFQUFFb00sMEJBQTBCcE0sRUFBRThOLCtCQUErQjlOLEVBQUU2UCxtQ0FBbUM3UCxFQUFFdUwsMENBQTBDdkwsRUFBRStSLHdCQUF3Qi9SLEVBQUUyUSxrQ0FBa0MzUSxFQUFFeUcsK0JBQStCekcsRUFBRXFLLDBCQUEwQnJLLEVBQUVpRSx5Q0FBeUNqRSxFQUFFa0Msc0NBQXNDbEMsRUFBRXFDLGlDQUFpQ3JDLEVBQUUrQixpQ0FBaUMvQixFQUFFd04sNEJBQTRCeE4sRUFBRTBTLCtCQUErQjFTLEVBQUUrRCxpQ0FBaUMvRCxFQUFFNkosK0JBQStCN0osRUFBRTVWLFlBQVk0VixFQUFFdFYsZUFBZXNWLEVBQUU4TCxTQUFTOUwsRUFBRWMsZUFBZWQsRUFBRWlCLFdBQVdqQixFQUFFdVEsWUFBWXZRLEVBQUUwTixVQUFVMU4sRUFBRW1ILGdCQUFnQm5ILEVBQUV3SixrQkFBa0J4SixFQUFFMEIscUJBQXFCMUIsRUFBRXVILG1CQUFtQnZILEVBQUV3SCxtQkFBbUJ4SCxFQUFFc0gsMkJBQXNCLEVBQU90SCxFQUFFdUYsZUFBZXZGLEVBQUVqUCxlQUFlaVAsRUFBRWdPLGtCQUFrQmhPLEVBQUVtTCxzQkFBc0JuTCxFQUFFK08sa0JBQWtCL08sRUFBRXdPLHlCQUF5QnhPLEVBQUVnTSw2QkFBNkJoTSxFQUFFMEYsNEJBQTRCMUYsRUFBRTJILGlDQUFpQzNILEVBQUVrSyxrQ0FBa0NsSyxFQUFFMUksZUFBZTBJLEVBQUVtUyxTQUFTblMsRUFBRTNYLFVBQUssRUFBTyxJQUFJa1QsRUFBRTJELEVBQUUsTUFBTTdjLE9BQU9DLGVBQWUwZCxFQUFFLHdCQUF3QixDQUFDTCxZQUFXLEVBQUczRCxJQUFJLFdBQVcsT0FBT1QsRUFBRStMLHFCQUFxQixJQUFJamxCLE9BQU9DLGVBQWUwZCxFQUFFLHFCQUFxQixDQUFDTCxZQUFXLEVBQUczRCxJQUFJLFdBQVcsT0FBT1QsRUFBRWlNLGtCQUFrQixJQUFJbmxCLE9BQU9DLGVBQWUwZCxFQUFFLHFCQUFxQixDQUFDTCxZQUFXLEVBQUczRCxJQUFJLFdBQVcsT0FBT1QsRUFBRWdNLGtCQUFrQixJQUFJLElBQUl6QyxFQUFFNUYsRUFBRSxNQUFNN2MsT0FBT0MsZUFBZTBkLEVBQUUsdUJBQXVCLENBQUNMLFlBQVcsRUFBRzNELElBQUksV0FBVyxPQUFPOEksRUFBRXBELG9CQUFvQixJQUFJLElBQUlxRCxFQUFFN0YsRUFBRSxNQUFNN2MsT0FBT0MsZUFBZTBkLEVBQUUsb0JBQW9CLENBQUNMLFlBQVcsRUFBRzNELElBQUksV0FBVyxPQUFPK0ksRUFBRXlFLGlCQUFpQixJQUFJLElBQUk3USxFQUFFdUcsRUFBRSxNQUFNN2MsT0FBT0MsZUFBZTBkLEVBQUUsa0JBQWtCLENBQUNMLFlBQVcsRUFBRzNELElBQUksV0FBVyxPQUFPckQsRUFBRXdPLGVBQWUsSUFBSSxJQUFJOVgsRUFBRTZQLEVBQUUsTUFBTTdjLE9BQU9DLGVBQWUwZCxFQUFFLFlBQVksQ0FBQ0wsWUFBVyxFQUFHM0QsSUFBSSxXQUFXLE9BQU8zTSxFQUFFcWUsU0FBUyxJQUFJLElBQUlqZixFQUFFeVEsRUFBRSxNQUFNN2MsT0FBT0MsZUFBZTBkLEVBQUUsY0FBYyxDQUFDTCxZQUFXLEVBQUczRCxJQUFJLFdBQVcsT0FBT3ZOLEVBQUU4aEIsV0FBVyxJQUFJLElBQUlpRCxFQUFFdFUsRUFBRSxLQUFLN2MsT0FBT0MsZUFBZTBkLEVBQUUsYUFBYSxDQUFDTCxZQUFXLEVBQUczRCxJQUFJLFdBQVcsT0FBT3dYLEVBQUV2UyxVQUFVLElBQUksSUFBSXpTLEVBQUUwUSxFQUFFLEtBQUs3YyxPQUFPQyxlQUFlMGQsRUFBRSxpQkFBaUIsQ0FBQ0wsWUFBVyxFQUFHM0QsSUFBSSxXQUFXLE9BQU94TixFQUFFc1MsY0FBYyxJQUFJLElBQUkyUyxFQUFFdlUsRUFBRSxNQUFNN2MsT0FBT0MsZUFBZTBkLEVBQUUsV0FBVyxDQUFDTCxZQUFXLEVBQUczRCxJQUFJLFdBQVcsT0FBT3lYLEVBQUUzSCxRQUFRLElBQUksSUFBSXpULEVBQUU2RyxFQUFFLE1BQU03YyxPQUFPQyxlQUFlMGQsRUFBRSxpQkFBaUIsQ0FBQ0wsWUFBVyxFQUFHM0QsSUFBSSxXQUFXLE9BQU8zRCxFQUFFM04sY0FBYyxJQUFJLElBQUlyRCxFQUFFNlgsRUFBRSxNQUFNN2MsT0FBT0MsZUFBZTBkLEVBQUUsY0FBYyxDQUFDTCxZQUFXLEVBQUczRCxJQUFJLFdBQVcsT0FBTzNVLEVBQUUrQyxXQUFXLElBQUksSUFBSStVLEVBQUVELEVBQUUsTUFBTTdjLE9BQU9DLGVBQWUwZCxFQUFFLGlDQUFpQyxDQUFDTCxZQUFXLEVBQUczRCxJQUFJLFdBQVcsT0FBT21ELEVBQUUwSyw4QkFBOEIsSUFBSSxJQUFJNkosRUFBRXhVLEVBQUUsTUFBTTdjLE9BQU9DLGVBQWUwZCxFQUFFLG1DQUFtQyxDQUFDTCxZQUFXLEVBQUczRCxJQUFJLFdBQVcsT0FBTzBYLEVBQUUzUCxnQ0FBZ0MsSUFBSSxJQUFJNFAsRUFBRXpVLEVBQUUsTUFBTTdjLE9BQU9DLGVBQWUwZCxFQUFFLGlDQUFpQyxDQUFDTCxZQUFXLEVBQUczRCxJQUFJLFdBQVcsT0FBTzJYLEVBQUVqQiw4QkFBOEIsSUFBSSxJQUFJaFosRUFBRXdGLEVBQUUsTUFBTTdjLE9BQU9DLGVBQWUwZCxFQUFFLDhCQUE4QixDQUFDTCxZQUFXLEVBQUczRCxJQUFJLFdBQVcsT0FBT3RDLEVBQUU4VCwyQkFBMkIsSUFBSSxJQUFJemYsRUFBRW1SLEVBQUUsTUFBTTdjLE9BQU9DLGVBQWUwZCxFQUFFLG1DQUFtQyxDQUFDTCxZQUFXLEVBQUczRCxJQUFJLFdBQVcsT0FBT2pPLEVBQUVnVSxnQ0FBZ0MsSUFBSSxJQUFJNlIsRUFBRTFVLEVBQUUsTUFBTTdjLE9BQU9DLGVBQWUwZCxFQUFFLG1DQUFtQyxDQUFDTCxZQUFXLEVBQUczRCxJQUFJLFdBQVcsT0FBTzRYLEVBQUV2UixnQ0FBZ0MsSUFBSSxJQUFJclUsRUFBRWtSLEVBQUUsTUFBTTdjLE9BQU9DLGVBQWUwZCxFQUFFLHdDQUF3QyxDQUFDTCxZQUFXLEVBQUczRCxJQUFJLFdBQVcsT0FBT2hPLEVBQUVrVSxxQ0FBcUMsSUFBSSxJQUFJMlIsRUFBRTNVLEVBQUUsTUFBTTdjLE9BQU9DLGVBQWUwZCxFQUFFLDJDQUEyQyxDQUFDTCxZQUFXLEVBQUczRCxJQUFJLFdBQVcsT0FBTzZYLEVBQUU1UCx3Q0FBd0MsSUFBSSxJQUFJNlAsRUFBRTVVLEVBQUUsTUFBTTdjLE9BQU9DLGVBQWUwZCxFQUFFLDRCQUE0QixDQUFDTCxZQUFXLEVBQUczRCxJQUFJLFdBQVcsT0FBTzhYLEVBQUV6Six5QkFBeUIsSUFBSSxJQUFJMEosRUFBRTdVLEVBQUUsTUFBTTdjLE9BQU9DLGVBQWUwZCxFQUFFLGlDQUFpQyxDQUFDTCxZQUFXLEVBQUczRCxJQUFJLFdBQVcsT0FBTytYLEVBQUV0Tiw4QkFBOEIsSUFBSSxJQUFJdU4sRUFBRTlVLEVBQUUsTUFBTTdjLE9BQU9DLGVBQWUwZCxFQUFFLG9DQUFvQyxDQUFDTCxZQUFXLEVBQUczRCxJQUFJLFdBQVcsT0FBT2dZLEVBQUVyRCxpQ0FBaUMsSUFBSSxJQUFJc0QsRUFBRS9VLEVBQUUsTUFBTTdjLE9BQU9DLGVBQWUwZCxFQUFFLDBCQUEwQixDQUFDTCxZQUFXLEVBQUczRCxJQUFJLFdBQVcsT0FBT2lZLEVBQUVsQyx1QkFBdUIsSUFBSSxJQUFJbUMsRUFBRWhWLEVBQUUsTUFBTTdjLE9BQU9DLGVBQWUwZCxFQUFFLDRDQUE0QyxDQUFDTCxZQUFXLEVBQUczRCxJQUFJLFdBQVcsT0FBT2tZLEVBQUUzSSx5Q0FBeUMsSUFBSSxJQUFJaGQsRUFBRTJRLEVBQUUsTUFBTTdjLE9BQU9DLGVBQWUwZCxFQUFFLHFDQUFxQyxDQUFDTCxZQUFXLEVBQUczRCxJQUFJLFdBQVcsT0FBT3pOLEVBQUVzaEIsa0NBQWtDLElBQUksSUFBSXpRLEVBQUVGLEVBQUUsTUFBTTdjLE9BQU9DLGVBQWUwZCxFQUFFLGlDQUFpQyxDQUFDTCxZQUFXLEVBQUczRCxJQUFJLFdBQVcsT0FBT29ELEVBQUUwTyw4QkFBOEIsSUFBSSxJQUFJcUcsRUFBRWpWLEVBQUUsTUFBTTdjLE9BQU9DLGVBQWUwZCxFQUFFLDRCQUE0QixDQUFDTCxZQUFXLEVBQUczRCxJQUFJLFdBQVcsT0FBT21ZLEVBQUUvSCx5QkFBeUIsSUFBSSxJQUFJZ0ksRUFBRWxWLEVBQUUsTUFBTTdjLE9BQU9DLGVBQWUwZCxFQUFFLGlDQUFpQyxDQUFDTCxZQUFXLEVBQUczRCxJQUFJLFdBQVcsT0FBT29ZLEVBQUVwRSw4QkFBOEIsSUFBSSxJQUFJN2YsRUFBRStPLEVBQUUsTUFBTTdjLE9BQU9DLGVBQWUwZCxFQUFFLGtDQUFrQyxDQUFDTCxZQUFXLEVBQUczRCxJQUFJLFdBQVcsT0FBTzdMLEVBQUVnZCwrQkFBK0IsSUFBSSxJQUFJa0gsRUFBRW5WLEVBQUUsTUFBTTdjLE9BQU9DLGVBQWUwZCxFQUFFLGdDQUFnQyxDQUFDTCxZQUFXLEVBQUczRCxJQUFJLFdBQVcsT0FBT3FZLEVBQUV6SSw2QkFBNkIsSUFBSSxJQUFJMEksRUFBRXBWLEVBQUUsTUFBTTdjLE9BQU9DLGVBQWUwZCxFQUFFLHVCQUF1QixDQUFDTCxZQUFXLEVBQUczRCxJQUFJLFdBQVcsT0FBT3NZLEVBQUVwRCxvQkFBb0IsSUFBSSxJQUFJNWdCLEVBQUU0TyxFQUFFLE1BQU03YyxPQUFPQyxlQUFlMGQsRUFBRSxpQ0FBaUMsQ0FBQ0wsWUFBVyxFQUFHM0QsSUFBSSxXQUFXLE9BQU8xTCxFQUFFNmIsOEJBQThCLElBQUksSUFBSW9JLEVBQUVyVixFQUFFLEtBQUs3YyxPQUFPQyxlQUFlMGQsRUFBRSw2QkFBNkIsQ0FBQ0wsWUFBVyxFQUFHM0QsSUFBSSxXQUFXLE9BQU91WSxFQUFFdFUsMEJBQTBCLElBQUksSUFBSWhaLEVBQUVpWSxFQUFFLE1BQU03YyxPQUFPQyxlQUFlMGQsRUFBRSwwQkFBMEIsQ0FBQ0wsWUFBVyxFQUFHM0QsSUFBSSxXQUFXLE9BQU8vVSxFQUFFeWdCLHVCQUF1QixJQUFJLElBQUk4TSxFQUFFdFYsRUFBRSxNQUFNN2MsT0FBT0MsZUFBZTBkLEVBQUUsaUJBQWlCLENBQUNMLFlBQVcsRUFBRzNELElBQUksV0FBVyxPQUFPd1ksRUFBRTdTLGNBQWMsSUFBSSxJQUFJOFMsRUFBRXZWLEVBQUUsTUFBTTdjLE9BQU9DLGVBQWUwZCxFQUFFLGtCQUFrQixDQUFDTCxZQUFXLEVBQUczRCxJQUFJLFdBQVcsT0FBT3lZLEVBQUU1RixlQUFlLElBQUksSUFBSTZGLEVBQUV4VixFQUFFLE1BQU03YyxPQUFPQyxlQUFlMGQsRUFBRSxrQkFBa0IsQ0FBQ0wsWUFBVyxFQUFHM0QsSUFBSSxXQUFXLE9BQU8wWSxFQUFFMUosZUFBZSxJQUFJLElBQUkySixFQUFFelYsRUFBRSxNQUFNN2MsT0FBT0MsZUFBZTBkLEVBQUUsbUJBQW1CLENBQUNMLFlBQVcsRUFBRzNELElBQUksV0FBVyxPQUFPMlksRUFBRTVCLGdCQUFnQixJQUFJLElBQUk2QixFQUFFMVYsRUFBRSxNQUFNN2MsT0FBT0MsZUFBZTBkLEVBQUUsYUFBYSxDQUFDTCxZQUFXLEVBQUczRCxJQUFJLFdBQVcsT0FBTzRZLEVBQUVuTCxVQUFVLElBQUksSUFBSW9MLEVBQUUzVixFQUFFLEtBQUs3YyxPQUFPQyxlQUFlMGQsRUFBRSxVQUFVLENBQUNMLFlBQVcsRUFBRzNELElBQUksV0FBVyxPQUFPNlksRUFBRXZULE9BQU8sSUFBSSxJQUFJd1QsRUFBRTVWLEVBQUUsTUFBTTdjLE9BQU9DLGVBQWUwZCxFQUFFLGlCQUFpQixDQUFDTCxZQUFXLEVBQUczRCxJQUFJLFdBQVcsT0FBTzhZLEVBQUVqVCxjQUFjLElBQUksSUFBSWtULEVBQUU3VixFQUFFLE1BQU03YyxPQUFPQyxlQUFlMGQsRUFBRSxjQUFjLENBQUNMLFlBQVcsRUFBRzNELElBQUksV0FBVyxPQUFPK1ksRUFBRWhQLFdBQVcsSUFBSSxJQUFJaVAsRUFBRTlWLEVBQUUsR0FBRzdjLE9BQU9DLGVBQWUwZCxFQUFFLGVBQWUsQ0FBQ0wsWUFBVyxFQUFHM0QsSUFBSSxXQUFXLE9BQU9nWixFQUFFbnRCLFlBQVksSUFBSSxJQUFJb3RCLEVBQUUvVixFQUFFLE1BQU03YyxPQUFPQyxlQUFlMGQsRUFBRSw0QkFBNEIsQ0FBQ0wsWUFBVyxFQUFHM0QsSUFBSSxXQUFXLE9BQU9pWixFQUFFN1AseUJBQXlCLElBQUksSUFBSThQLEVBQUVoVyxFQUFFLE1BQU03YyxPQUFPQyxlQUFlMGQsRUFBRSxhQUFhLENBQUNMLFlBQVcsRUFBRzNELElBQUksV0FBVyxPQUFPa1osRUFBRWxzQixVQUFVLElBQUksSUFBSW1zQixFQUFFalcsRUFBRSxLQUFLN2MsT0FBT0MsZUFBZTBkLEVBQUUsV0FBVyxDQUFDTCxZQUFXLEVBQUczRCxJQUFJLFdBQVcsT0FBT21aLEVBQUVwckIsUUFBUSxJQUFJLElBQUk0RixFQUFFdVAsRUFBRSxNQUFNN2MsT0FBT0MsZUFBZTBkLEVBQUUsaUJBQWlCLENBQUNMLFlBQVcsRUFBRzNELElBQUksV0FBVyxPQUFPck0sRUFBRTlGLGNBQWMsSUFBSSxJQUFJdXJCLEVBQUVsVyxFQUFFLE1BQU03YyxPQUFPQyxlQUFlMGQsRUFBRSxZQUFZLENBQUNMLFlBQVcsRUFBRzNELElBQUksV0FBVyxPQUFPb1osRUFBRWh5QixTQUFTLElBQUksSUFBSWl5QixFQUFFblcsRUFBRSxNQUFNN2MsT0FBT0MsZUFBZTBkLEVBQUUsT0FBTyxDQUFDTCxZQUFXLEVBQUczRCxJQUFJLFdBQVcsT0FBT3FaLEVBQUVodEIsSUFBSSxJQUFJLElBQUlpdEIsRUFBRXBXLEVBQUUsTUFBTTdjLE9BQU9DLGVBQWUwZCxFQUFFLFdBQVcsQ0FBQ0wsWUFBVyxFQUFHM0QsSUFBSSxXQUFXLE9BQU9zWixFQUFFbkQsUUFBUSxJQUFJLElBQUlvRCxFQUFFclcsRUFBRSxNQUFNN2MsT0FBT0MsZUFBZTBkLEVBQUUsaUJBQWlCLENBQUNMLFlBQVcsRUFBRzNELElBQUksV0FBVyxPQUFPdVosRUFBRWplLGNBQWMsSUFBSSxJQUFJa2UsR0FBR3RXLEVBQUUsTUFBTTdjLE9BQU9DLGVBQWUwZCxFQUFFLG9DQUFvQyxDQUFDTCxZQUFXLEVBQUczRCxJQUFJLFdBQVcsT0FBT3daLEdBQUd0TCxpQ0FBaUMsSUFBSSxJQUFJdUwsR0FBR3ZXLEVBQUUsTUFBTTdjLE9BQU9DLGVBQWUwZCxFQUFFLG1DQUFtQyxDQUFDTCxZQUFXLEVBQUczRCxJQUFJLFdBQVcsT0FBT3laLEdBQUc5TixnQ0FBZ0MsSUFBSSxJQUFJK04sR0FBR3hXLEVBQUUsTUFBTTdjLE9BQU9DLGVBQWUwZCxFQUFFLDhCQUE4QixDQUFDTCxZQUFXLEVBQUczRCxJQUFJLFdBQVcsT0FBTzBaLEdBQUdoUSwyQkFBMkIsSUFBSSxJQUFJaVEsR0FBR3pXLEVBQUUsTUFBTTdjLE9BQU9DLGVBQWUwZCxFQUFFLCtCQUErQixDQUFDTCxZQUFXLEVBQUczRCxJQUFJLFdBQVcsT0FBTzJaLEdBQUczSiw0QkFBNEIsSUFBSSxJQUFJNEosR0FBRzFXLEVBQUUsTUFBTTdjLE9BQU9DLGVBQWUwZCxFQUFFLDJCQUEyQixDQUFDTCxZQUFXLEVBQUczRCxJQUFJLFdBQVcsT0FBTzRaLEdBQUdwSCx3QkFBd0IsSUFBSSxJQUFJcUgsR0FBRzNXLEVBQUUsTUFBTTdjLE9BQU9DLGVBQWUwZCxFQUFFLG9CQUFvQixDQUFDTCxZQUFXLEVBQUczRCxJQUFJLFdBQVcsT0FBTzZaLEdBQUc5RyxpQkFBaUIsSUFBSSxJQUFJK0csR0FBRzVXLEVBQUUsTUFBTTdjLE9BQU9DLGVBQWUwZCxFQUFFLHdCQUF3QixDQUFDTCxZQUFXLEVBQUczRCxJQUFJLFdBQVcsT0FBTzhaLEdBQUczSyxxQkFBcUIsSUFBSSxJQUFJNEssR0FBRzdXLEVBQUUsTUFBTTdjLE9BQU9DLGVBQWUwZCxFQUFFLG9CQUFvQixDQUFDTCxZQUFXLEVBQUczRCxJQUFJLFdBQVcsT0FBTytaLEdBQUcvSCxpQkFBaUIsSUFBSSxJQUFJZ0ksR0FBRzlXLEVBQUUsTUFBTTdjLE9BQU9DLGVBQWUwZCxFQUFFLGlCQUFpQixDQUFDTCxZQUFXLEVBQUczRCxJQUFJLFdBQVcsT0FBT2dhLEdBQUdqbEIsY0FBYyxJQUFJMU8sT0FBT0MsZUFBZTBkLEVBQUUsaUJBQWlCLENBQUNMLFlBQVcsRUFBRzNELElBQUksV0FBVyxPQUFPZ2EsR0FBR3pRLGNBQWMsR0FBSSxFQUE5dVMsR0FBa3ZTLElBQUlULEVBQUV2aUIsRUFBUSxJQUFJLElBQUl3aUIsS0FBS2pYLEVBQUVnWCxFQUFFQyxHQUFHalgsRUFBRWlYLEdBQUdqWCxFQUFFMFIsWUFBWW5kLE9BQU9DLGVBQWV3aUIsRUFBRSxhQUFhLENBQUN0aUIsT0FBTSxHQUFLLEVBQXgzOEIsRTs7O3FWQ0NBLE1BQU15ekIsRUFBdUIseUJBQ3ZCQyxFQUF1QiwrQkFFdkJDLEVBQTJCLHdCQUUzQkMsRUFBdUIsaUJBRXZCQyxFQUFzQixTQUV0QkMsRUFBbUMsR0FJbEMsU0FBU2hkLEVBQU05VyxHQUNsQixJQUFJc0osRUFBU3RKLEVBQU1tWCxPQUNuQjdOLEVBQVNBLEVBQ0pvRyxRQUFRK2pCLEVBQXNCSSxHQUM5Qm5rQixRQUFRZ2tCLEVBQXNCRyxHQUNuQ3ZxQixFQUFTQSxFQUFPb0csUUFBUWtrQixFQUFzQixNQUM5QyxJQUFJRyxFQUFRLEVBQ1JDLEVBQU0xcUIsRUFBTytLLE9BRWpCLEtBQWdDLE9BQXpCL0ssRUFBTzJxQixPQUFPRixJQUNqQkEsSUFDSixHQUFJQSxJQUFVQyxFQUNWLE1BQU8sR0FDWCxLQUFrQyxPQUEzQjFxQixFQUFPMnFCLE9BQU9ELEVBQU0sSUFDdkJBLElBQ0osT0FBTzFxQixFQUFPeU4sTUFBTWdkLEVBQU9DLEdBQUtsZCxNQUFNLE1BQzFDLENBSU8sU0FBU29kLEVBQXFCbDBCLEdBQ2pDLE1BQU1tMEIsRUFBUXJkLEVBQU05VyxHQUNwQixJQUFLLElBQUl1aUIsRUFBSSxFQUFHQSxFQUFJNFIsRUFBTTlmLE9BQVFrTyxJQUFLLENBQ25DLE1BQU02UixFQUFPRCxFQUFNNVIsR0FDYmxLLEVBQVFzYixFQUF5QlUsS0FBS0QsR0FDNUMsR0FBSS9iLEVBQU8sQ0FDUCxNQUFNaWMsRUFBU2pjLEVBQU1aLE9BQVNZLEVBQU0sSUFBTUEsRUFBTSxJQUFJaEUsT0FDcEQ4ZixFQUFNSSxPQUFPaFMsRUFBRyxFQUFHNlIsRUFBS3JkLE1BQU0sRUFBR3VkLEdBQVNGLEVBQUtyZCxNQUFNdWQsR0FDekQsQ0FDSixDQUNBLE9BQU9ILENBQ1gsQ0FJTyxTQUFTcGMsRUFBT3ljLEVBQU8vekIsR0FDMUIsTUFBT2dXLEVBQVEwZCxFQUFPTSxHQUFVQyxFQUFrQkYsRUFBTy96QixHQUN6RCxPQUFRZ1csRUFDSjBkLEVBQU1od0IsSUFBSXd3QixFQUFhbDBCLEdBQVNtMEIsU0FBU3Z3QixLQUFLNUQsR0FBU28wQixXQUFhLEtBQ3BFSixDQUNSLENBSU8sU0FBUy9jLEVBQVU4YyxFQUFPL3pCLEdBQzdCLE1BQU9nVyxFQUFRMGQsRUFBT00sR0FBVUMsRUFBa0JGLEVBQU8vekIsR0FDbkRrSSxFQUFRZ3NCLEVBQWFsMEIsR0FBU20wQixRQUM5QmxzQixFQUFRb3NCLEVBQWFyMEIsR0FBU20wQixRQUM5QkcsRUFBWXQwQixHQUFTdTBCLHlCQUNyQkMsRUFBNEJ0c0IsRUFBT0QsR0FDbkN3c0IsRUFBMkJ2c0IsRUFBT0QsR0FDeEMsT0FBUStOLEVBQ0owZCxFQUNLaHdCLEtBQUksQ0FBQ2l3QixFQUFNM2MsSUFDRSxJQUFWQSxFQUNPOU8sRUFBTXlyQixHQUNWVyxFQUFVWCxFQUFNM2MsS0FFdEJwVCxLQUFLNUQsR0FBU28wQixXQUFhLElBQ2hDSixDQUNSLENBSU8sU0FBU3pjLEVBQVd3YyxFQUFPL3pCLEdBQzlCLE1BQU9nVyxFQUFRMGQsRUFBT00sR0FBVUMsRUFBa0JGLEVBQU8vekIsR0FDbkRrSSxFQUFRZ3NCLEVBQWFsMEIsR0FBU20wQixRQUM5QmxzQixFQUFRb3NCLEVBQWFyMEIsR0FBU20wQixRQUM5QkcsRUFBWXQwQixHQUFTdTBCLHlCQUNyQkMsRUFBNEJ0c0IsRUFBT0QsR0FDbkN3c0IsRUFBMkJ2c0IsRUFBT0QsR0FDeEMsT0FBTytOLEVBQVMwZCxFQUFNaHdCLElBQUk0d0IsR0FBVzF3QixLQUFLNUQsR0FBU28wQixXQUFhLElBQU1KLENBQzFFLENBSU8sU0FBU1UsRUFBZ0JYLEVBQU8vekIsR0FDbkMsT0FBT2tYLEVBQVk2YyxFQUFPLENBQUVLLFVBQVcsT0FBUXAwQixHQUNuRCxDQUlPLFNBQVNrWCxFQUFZNmMsRUFBTy96QixHQUMvQixNQUFPZ1csRUFBUTBkLEVBQU9NLEdBQVVDLEVBQWtCRixFQUFPL3pCLEdBQ25Ea0ksRUFBUWdzQixFQUFhbDBCLEdBQVNtMEIsUUFDOUJsc0IsRUFBUW9zQixFQUFhcjBCLEdBQVNtMEIsUUFDcEMsT0FBUW5lLEVBQ0owZCxFQUNLaHdCLElBQUk4d0IsRUFBNEJ0c0IsRUFBT0QsSUFDdkNyRSxLQUFLNUQsR0FBU28wQixXQUFhLEtBQ2hDSixDQUNSLENBSU8sU0FBUzdjLEVBQWE0YyxFQUFPL3pCLEdBQ2hDLE1BQU9nVyxFQUFRMGQsRUFBT00sR0FBVUMsRUFBa0JGLEVBQU8vekIsR0FDekQsT0FBUWdXLEVBQ0owZCxFQUFNaHdCLElBQUkyd0IsRUFBYXIwQixHQUFTbTBCLFNBQVN2d0IsS0FBSzVELEdBQVNvMEIsV0FBYSxLQUNwRUosQ0FDUixDQUlPLFNBQVM1YyxFQUFRMmMsRUFBTy96QixHQUMzQixPQUFPc1gsRUFBT3ljLEVBQU8sQ0FBRUssVUFBVyxPQUFRcDBCLEdBQzlDLENBSU8sU0FBU3FQLEVBQVUwa0IsRUFBTy96QixHQUM3QixPQUFPc1gsRUFBT3ljLEVBQU8sQ0FBRUssVUFBVyxPQUFRcDBCLEdBQzlDLENBSU8sU0FBU3dYLEVBQVN1YyxFQUFPL3pCLEdBQzVCLE9BQU9zWCxFQUFPeWMsRUFBTyxDQUFFSyxVQUFXLE9BQVFwMEIsR0FDOUMsQ0FJTyxTQUFTeVgsRUFBYXNjLEVBQU8vekIsR0FDaEMsTUFBT2dXLEVBQVEwZCxFQUFPTSxHQUFVQyxFQUFrQkYsRUFBTy96QixHQUNuRGtJLEVBQVFnc0IsRUFBYWwwQixHQUFTbTBCLFFBQzlCbHNCLEVBQVFvc0IsRUFBYXIwQixHQUFTbTBCLFFBQzlCRyxFQUFZRSxFQUE0QnRzQixFQUFPRCxHQUNyRCxPQUFRK04sRUFDSjBkLEVBQ0tod0IsS0FBSSxDQUFDaXdCLEVBQU0zYyxJQUNFLElBQVZBLEVBQ09zZCxFQUFVWCxHQUNkenJCLEVBQU15ckIsS0FFWi92QixLQUFLNUQsR0FBU28wQixXQUFhLEtBQ2hDSixDQUNSLENBSU8sU0FBU3RjLEVBQVVxYyxFQUFPL3pCLEdBQzdCLE9BQU9zWCxFQUFPeWMsRUFBTyxDQUFFSyxVQUFXLE9BQVFwMEIsR0FDOUMsQ0FJTyxTQUFTcVgsRUFBVTBjLEVBQU8vekIsR0FDN0IsT0FBT2tYLEVBQVk2YyxFQUFPLENBQUVLLFVBQVcsT0FBUXAwQixHQUNuRCxDQUNBLFNBQVNrMEIsRUFBYUMsR0FDbEIsT0FBa0IsSUFBWEEsRUFDQUosR0FBVUEsRUFBTXh0QixjQUNoQnd0QixHQUFVQSxFQUFNWSxrQkFBa0JSLEVBQzdDLENBQ0EsU0FBU0UsRUFBYUYsR0FDbEIsT0FBa0IsSUFBWEEsRUFDQUosR0FBVUEsRUFBTWEsY0FDaEJiLEdBQVVBLEVBQU1jLGtCQUFrQlYsRUFDN0MsQ0FDQSxTQUFTSyxFQUE0QnRzQixFQUFPRCxHQUN4QyxPQUFRMHJCLEdBQVMsR0FBRzFyQixFQUFNMHJCLEVBQUssTUFBTXpyQixFQUFNeXJCLEVBQUtyZCxNQUFNLEtBQzFELENBQ0EsU0FBU21lLEVBQTJCdnNCLEVBQU9ELEdBQ3ZDLE1BQU8sQ0FBQzByQixFQUFNM2MsS0FDVixNQUFNOGQsRUFBUW5CLEVBQUssR0FFbkIsT0FEZ0IzYyxFQUFRLEdBQUs4ZCxHQUFTLEtBQU9BLEdBQVMsSUFBTSxJQUFNQSxFQUFRN3NCLEVBQU02c0IsSUFDL0Q1c0IsRUFBTXlyQixFQUFLcmQsTUFBTSxHQUFHLENBRTdDLENBQ0EsU0FBUzJkLEVBQWtCRixFQUFPL3pCLEVBQVUsQ0FBQyxHQUN6QyxNQUFNKzBCLEVBQVUvMEIsRUFBUXFXLFFBQVVyVyxFQUFRZzFCLGdCQUFrQnZCLEVBQXVCcGQsR0FDN0U0ZSxFQUFtQmoxQixFQUFRaTFCLGtCQUFvQjVCLEVBQy9DNkIsRUFBbUJsMUIsRUFBUWsxQixrQkFBb0I3QixFQUNyRCxJQUFJOEIsRUFBYyxFQUNkQyxFQUFjckIsRUFBTW5nQixPQUN4QixLQUFPdWhCLEVBQWNwQixFQUFNbmdCLFFBQVEsQ0FDL0IsTUFBTXloQixFQUFPdEIsRUFBTVAsT0FBTzJCLEdBQzFCLElBQUtGLEVBQWlCelEsU0FBUzZRLEdBQzNCLE1BQ0pGLEdBQ0osQ0FDQSxLQUFPQyxFQUFjRCxHQUFhLENBQzlCLE1BQU1uZSxFQUFRb2UsRUFBYyxFQUN0QkMsRUFBT3RCLEVBQU1QLE9BQU94YyxHQUMxQixJQUFLa2UsRUFBaUIxUSxTQUFTNlEsR0FDM0IsTUFDSkQsRUFBY3BlLENBQ2xCLENBQ0EsTUFBTyxDQUNIK2MsRUFBTXpkLE1BQU0sRUFBRzZlLEdBQ2ZKLEVBQVFoQixFQUFNemQsTUFBTTZlLEVBQWFDLElBQ2pDckIsRUFBTXpkLE1BQU04ZSxHQUVwQixDOzs7NENDeE1BLElBQUlFLEVBTUFDLEVBS0FDLEVBakJKcDJCLE9BQU9DLGVBQWVDLEVBQVMsYUFBYyxDQUFFQyxPQUFPLElBQ3RERCxFQUFRazJCLG1CQUFxQmwyQixFQUFRaTJCLGNBQWdCajJCLEVBQVFnMkIsc0JBQW1CLEVBTWhGLFNBQVdBLEdBQ1BBLEVBQWdDLGNBQUksZ0JBQ3BDQSxFQUFnQyxjQUFJLGdCQUNwQ0EsRUFBOEIsWUFBSSxhQUNyQyxDQUpELENBSUdBLElBQXFCaDJCLEVBQVFnMkIsaUJBQW1CQSxFQUFtQixDQUFDLElBRXZFLFNBQVdDLEdBQ1BBLEVBQThCLGVBQUksaUJBQ2xDQSxFQUEwQixXQUFJLFlBQ2pDLENBSEQsQ0FHR0EsSUFBa0JqMkIsRUFBUWkyQixjQUFnQkEsRUFBZ0IsQ0FBQyxJQUU5RCxTQUFXQyxHQUNQQSxFQUFnQyxZQUFJLGNBQ3BDQSxFQUE2QixTQUFJLFdBQ2pDQSxFQUEwQyxzQkFBSSx1QkFDakQsQ0FKRCxDQUlHQSxJQUF1QmwyQixFQUFRazJCLG1CQUFxQkEsRUFBcUIsQ0FBQyxHOzs7NERDdEI3RXAyQixPQUFPQyxlQUFlQyxFQUFTLGFBQWMsQ0FBRUMsT0FBTyxJQUN0REQsRUFBUW0yQix1QkFBeUJuMkIsRUFBUW8yQixtQ0FBZ0MsRUFDekVwMkIsRUFBUW8yQiw4QkFBZ0MsQ0FDcENsbUIsTUFBTyxpQkFDUEMsV0FBWSxzQkFDWkMsVUFBVyxxQkFDWEMsS0FBTSxnQkFDTkMsTUFBTyxpQkFDUEMsUUFBUyxtQkFDVEMsU0FBVSxvQkFDVkMsV0FBWSxzQkFDWkMsY0FBZSx5QkFDZkMsaUJBQWtCLDRCQUNsQkMsWUFBYSx1QkFDYkMsYUFBYyx3QkFDZEMsU0FBVSxvQkFDVkMsT0FBUSxrQkFDUkMsT0FBUSxrQkFDUkMsT0FBUSxrQkFDUkMsU0FBVSxvQkFDVkMsT0FBUSxrQkFDUkMsWUFBYSx1QkFDYkMsV0FBWSxzQkFDWkMsV0FBWSxzQkFDWjlKLFNBQVUsb0JBQ1ZGLGVBQWdCLDBCQUNoQmlLLFdBQVksc0JBQ1pDLEtBQU0saUJBRVZ4UixFQUFRbTJCLHVCQUF5QixDQUM3QmptQixNQUFPLFFBQ1BDLFdBQVksYUFDWkMsVUFBVyxZQUNYQyxLQUFNLE9BQ05DLE1BQU8sUUFDUEMsUUFBUyxVQUNUQyxTQUFVLFdBQ1ZDLFdBQVksYUFDWkMsY0FBZSxnQkFDZkMsaUJBQWtCLG1CQUNsQkMsWUFBYSxjQUNiQyxhQUFjLGVBQ2RDLFNBQVUsV0FDVkMsT0FBUSxTQUNSQyxPQUFRLFNBQ1JDLE9BQVEsU0FDUkMsU0FBVSxXQUNWQyxPQUFRLFNBQ1JDLFlBQWEsY0FDYkMsV0FBWSxhQUNaQyxXQUFZLGFBQ1o5SixTQUFVLFdBQ1ZGLGVBQWdCLGlCQUNoQmlLLFdBQVksYUFDWkMsS0FBTSxPOzs7eURDdERWMVIsT0FBT0MsZUFBZUMsRUFBUyxhQUFjLENBQUVDLE9BQU8sSUFDdERELEVBQVFxMkIsZUFZUixTQUF3QnoxQixHQUNwQixPQUFPMDFCLEVBQUlDLG9CQUFvQkMsdUJBQ3pCRixFQUFJQyxvQkFBb0JFLGNBQWM3MUIsR0FDdEM4MUIsRUFBV1AsdUJBQXVCdjFCLEVBQzVDLEVBZkFaLEVBQVEyMkIsZUEyQlIsU0FBd0JuMkIsRUFBT28yQixFQUFjaGMsRUFBYWljLEVBQWMsR0FBSXRqQixHQUV4RSxNQUFNaEYsR0FBTyxFQUFJdW9CLEVBQW1CQyxXQUFXdjJCLEVBQU9vYSxFQUFhaWMsR0FDN0RuMkIsRUFBVSxDQUNaK0ksWUFBYXV0QixFQUFlbjNCLFlBQVlxSyxLQUN4Q3ZHLGdCQUFpQjJ5QixFQUFJQyxvQkFBb0JVLGNBQ3pDdHlCLFNBQVUsRUFDVitNLE9BQVE0a0IsRUFBSUMsb0JBQW9CN2tCLE9BQ2hDOU4sbUJBQXFCcEQsSUFFVixFQUFJczJCLEVBQW1CQyxXQUFXdjJCLEVBQU9vYSxFQUFhaWMsSUFJL0Q1MkIsRUFBUSsyQixFQUFlamxCLGFBQWF1QixXQUFXOVMsRUFBT28yQixFQUFjbDJCLEVBQVM2UyxHQUM3RWtCLEVBQWV1aUIsRUFBZXZsQixjQUFjQyxPQUFPNGtCLEVBQUlDLG9CQUFvQjdrQixRQUUzRXdsQixFQUFVWixFQUFJQyxvQkFBb0JZLGtCQUFvQjMyQixFQUFNc2IsYUFBYTFFLE9BQ3pFLE1BQU01VyxFQUFNc2IsWUFBWTFFLGNBQWMzQyxJQUN0QyxHQUNOLE1BQU8sR0FBR0EsSUFBZXlpQixRQUFjM29CLE9BQVV0TyxHQUNyRCxFQS9DQSxNQUFNKzJCLEVBQWlCLGtDQUFRLDZCQUN6QlYsRUFBTSxXQUFRLGtCQUNkSSxFQUFhLDhCQUFRLCtCQUNyQkksRUFBcUIsa0NBQVEsa0M7Ozs2RENObkNoM0IsT0FBT0MsZUFBZUMsRUFBUyxhQUFjLENBQUVDLE9BQU8sSUFDdERELEVBQVFvM0Isb0JBY1IsU0FBNkJ6ZSxFQUFRaUMsRUFBYWhDLEVBQU95ZSxHQUVyRCxJQUFLZixFQUFJQyxvQkFBb0JlLG1CQUFxQjFlLEVBQzlDLE1BQU8sR0FHWCxHQUFJMGQsRUFBSUMsb0JBQW9CZ0IsZ0JBQWtCQyxFQUFTdkIsY0FBY3dCLFdBQVksQ0FDN0UsTUFBTWx1QixFQXFEZCxTQUE4Qm9QLEVBQVFpQyxFQUFhaEMsRUFBT3llLEVBQW1CLElBQ3pFLElBQUlLLEVBQWlCL2UsRUFFckIsR0FBSUMsR0FBUzBkLEVBQUlDLG9CQUFvQm9CLHlCQUNqQ0QsRUFBaUJWLEVBQWV2ZSxZQUFZVSxtQkFBbUJ1ZSxFQUFnQjllLEdBRWpELElBQTFCOGUsRUFBZXBqQixRQUNmLE9BQU8sS0FJZixJQUFLZ2lCLEVBQUlDLG9CQUFvQnFCLG9CQUFnRCxJQUExQkYsRUFBZXBqQixPQUM5RCxPQUFPLEtBR1gsTUFBTWxHLEVBQVc0b0IsRUFBZWxvQixlQUFlRyxvQkFBb0JxbkIsRUFBSUMsb0JBQW9Cc0IsZUFBZ0IsTUFDckcxcEIsRUFBZXlLLEVBQ2YsS0FBS29lLEVBQWV2ZSxZQUFZVyxtQkFBbUJSLEVBQU9vZSxFQUFlOTJCLFdBQVdrWSxhQUNwRmtlLEVBQUlDLG9CQUFvQnVCLGtCQUN4Qm5wQixFQUFVb3BCLEVBQW9CTCxFQUFnQnRwQixFQUFVd0ssRUFBT0QsRUFBUWlDLEVBQWF5YyxHQUUxRixPQUFPTCxFQUFlL29CLFdBQVdTLGVBQWUsQ0FDNUNQLGFBQWNBLEVBQ2RDLFNBQVVBLEVBQ1ZPLFFBQVNBLEdBRWpCLENBL0V1QnFwQixDQUFxQnJmLEVBQVFpQyxFQUFhaEMsRUFBT3llLEdBQ2hFLE9BQU85dEIsRUFBUyxDQUFDQSxHQUFVLEVBQy9CLENBRUEsTUFBTyxJQUFJLElBQUk4SSxJQUFJc0csRUFBT3ZVLEtBQUs1RCxHQUFVQSxFQUFNSSxjQUMxQ3dELEtBQUtpQixHQVlkLFNBQStCQSxFQUFNc1QsRUFBUWlDLEVBQWFoQyxFQUFPeWUsR0FFN0QsSUFBS2YsRUFBSUMsb0JBQW9CZSxtQkFBcUIxZSxFQUM5QyxPQUFPLEtBR1gsSUFBSUMsRUFBZUYsRUFBT3pCLFFBQVExVyxHQUFVQSxFQUFNSSxZQUFjeUUsSUFFaEUsR0FBSXVULEdBQVMwZCxFQUFJQyxvQkFBb0JvQix5QkFDakM5ZSxFQUFlbWUsRUFBZXZlLFlBQVlVLG1CQUFtQk4sRUFBY0QsR0FFL0MsSUFBeEJDLEVBQWF2RSxRQUNiLE9BQU8sS0FJZixJQUFLZ2lCLEVBQUlDLG9CQUFvQnFCLG9CQUE4QyxJQUF4Qi9lLEVBQWF2RSxPQUM1RCxPQUFPLEtBR1gsSUFBSWxHLEdBQVcsRUFBSTZwQixFQUFhQyxzQkFBc0I3eUIsR0FFdEQsTUFBTThJLEVBQWV5SyxFQUNmLEtBQUtvZSxFQUFldmUsWUFBWVcsbUJBQW1CUixFQUFPb2UsRUFBZTkyQixXQUFXa1ksYUFDcEZrZSxFQUFJQyxvQkFBb0J1QixrQkFDeEJucEIsRUFBVW9wQixFQUFvQmxmLEVBQWN6SyxFQUFVd0ssRUFBT0QsRUFBUWlDLEVBQWF5YyxHQUV4RixPQUFPTCxFQUFlL29CLFdBQVdTLGVBQWUsQ0FDNUNQLGFBQWNBLEVBQ2RDLFNBQVVBLEVBQ1ZPLFFBQVNBLEdBRWpCLENBNUN1QndwQixDQUFzQjl5QixFQUFNc1QsRUFBUWlDLEVBQWFoQyxFQUFPeWUsS0FDdEVuZ0IsUUFBUWtoQixHQUFrQixPQUFUQSxHQUMxQixFQTNCQSxNQUFNcEIsRUFBaUIsa0NBQVEsNkJBQ3pCVixFQUFNLFdBQVEsa0JBQ2QrQixFQUFVLHlCQUFRLDBCQUNsQmIsRUFBVyxxQkFBUSxlQUNuQlMsRUFBZSw0QkFBUSw2QkFnRzdCLFNBQVNGLEVBQW9CTyxFQUFnQmxxQixFQUFVd0ssRUFBT25ZLEVBQVdtYSxFQUFheWMsR0FHbEYsTUFBTWtCLEVBQW9CM2YsRUFDcEJvZSxFQUFldmUsWUFBWVcsbUJBQW1CUixFQUFPb2UsRUFBZTkyQixXQUFXa1ksV0FDL0U0ZSxFQUFlaG5CLGFBQWFDLHFCQUFxQnFtQixFQUFJQyxvQkFBb0J1QixrQkFBbUJkLEVBQWU5MkIsV0FBVzRYLFNBRXRIMGdCLEVBQWlCLFdBREMsQ0FBQ2xDLEVBQUlDLG9CQUFvQmtDLGtCQUFtQkYsR0FBbUJyaEIsT0FBT3doQixTQUFTcDBCLEtBQUssT0FFdEdpUCxFQUFrQixJQUFJeWpCLEVBQWVobEIsZ0JBR3JDMm1CLEVBQWlDLHNCQURYdnFCLEVBQVNpQixTQUFTLE9BQVNqQixFQUFTNEksTUFBTSxHQUFJLEdBQUs1SSxJQUd6RXdvQixFQUFlLElBQUkzYyxJQUFJeFosRUFBVTJELEtBQUs1RCxHQUFVLENBQUNBLEVBQU15WSxHQUFJelksTUFFM0RvNEIsRUFBd0JOLEVBQ3pCbDBCLEtBQUs1RCxJQUFVLEVBQUk2M0IsRUFBUTFCLGdCQUFnQm4yQixFQUFPbzJCLEVBQWNoYyxFQUFheWMsRUFBa0I5akIsS0FDL0ZqUCxLQUFLLE1BSVYsSUFBSXFLLEVBQVUsR0FBRzZwQixRQUhBLENBQUMsK0NBQWdEamxCLEVBQWdCZCxjQUFjWSxPQUM5RC9PLEtBQUssWUFFb0JxMEIsUUFBb0JDLE9BSy9FLE9BSEl0QyxFQUFJQyxvQkFBb0JzQyw4QkFDeEJscUIsRUFBVXFvQixFQUFldmxCLGNBQWNJLGNBQWN5a0IsRUFBSUMsb0JBQW9CemtCLFdBQVluRCxJQUV0RkEsQ0FDWCxDOzs7aURDaklBN08sT0FBT0MsZUFBZUMsRUFBUyxhQUFjLENBQUVDLE9BQU8sSUFDdERELEVBQVF1MkIseUJBQXNCLEVBQzlCLE1BQU11QyxFQUFnQiw0QkFBUSw4QkFDeEI5QixFQUFpQixrQ0FBUSw2QkFDekJGLEVBQXFCLGlDQUFRLG1DQVFuQyxTQUFTaUMsRUFBb0JDLEdBQ3pCLE9BQU9BLEVBQU05aEIsUUFBUWtoQixHQUFrQixPQUFUQSxHQUNsQyxDQVJBcDRCLEVBQVF1MkIsb0JBQXNCMEMsT0FBT0MsZUF1QnJDRCxPQUFPRSxRQUFPQyxNQUFPbmUsRUFBS29lLEtBRXRCLE1BQU1DLEVBQTBCLENBQzVCeEksZUFBZ0J1SSxFQUFRdEksS0FDeEJDLFVBQVdxSSxFQUFRckksV0FHdkIsSUFBSXVJLEVBQWMsR0FDZDVnQixRQUFlc0MsRUFBSXRDLE9BQU82Z0IsVUFBVUYsR0FDcEMxZSxRQUFvQkssRUFBSXRDLE9BQU84Z0IsZUFBZUgsR0FDOUNqQyxRQUF5QnBjLEVBQUl0QyxPQUFPK2dCLG9CQUFvQkosR0FFNUQsR0FBSUQsRUFBUU0sUUFBUyxDQUNqQixNQUNNQyxTQURlM2UsRUFBSTRlLE9BQU9DLFVBQVVSLElBQ3JCampCLE1BQU11akIsR0FBVUEsRUFBTTNnQixLQUFPb2dCLEVBQVFNLFNBQVdDLEVBQU1HLGNBQWdCVixFQUFRTSxVQUNuRyxJQUFLQyxFQUNELE1BQU0sSUFBSWxnQixNQUFNLHdCQUF3QjJmLEVBQVFNLFlBRXBEaGhCLEVBQVNBLEVBQU96QixRQUFRMVcsR0FBVUEsRUFBTW01QixVQUFZQyxFQUFNM2dCLEtBQzFEMkIsRUFBY0EsRUFBWTFELFFBQVFxSixHQUFlQSxFQUFXb1osVUFBWUMsRUFBTTNnQixJQUNsRixDQUVBLEdBQUlvZ0IsRUFBUVcsVUFBWVgsRUFBUVcsU0FBUzFsQixPQUFTLEVBQUcsQ0FDakQsTUFBTTJsQixRQUFlaGYsRUFBSXRDLE9BQU91aEIsZUFBZVosR0FXekNhLEVBVGdCZCxFQUFRVyxTQUFTNTFCLEtBQUtnMkIsSUFDeEMsTUFBTXhoQixFQUFRcWhCLEVBQU81akIsTUFBTXVDLEdBQVVBLEVBQU1LLEtBQU9taEIsR0FBV3hoQixFQUFNbWhCLGNBQWdCSyxJQUNuRixJQUFLeGhCLEVBQ0QsTUFBTSxJQUFJYyxNQUFNLHdCQUF3QjBnQixNQUU1QyxPQUFPeGhCLENBQUssSUFJaUJ5aEIsU0FBU3poQixJQUN0QyxNQUFNMGhCLEVBQWVyZixFQUFJdEMsT0FBTzRoQiw4QkFBOEI1aEIsRUFBUUEsRUFBUSxDQUFDQyxJQUMvRSxPQUFPLEVBQUlrZ0IsRUFBYzFCLHFCQUFxQmtELEVBQWMxZixFQUFhaEMsRUFBT3llLEVBQWlCLElBWXJHa0MsRUFBY1IsRUFMUSxJQUpKLzRCLEVBQVF1MkIsb0JBQW9CZSxrQkFDeEMsRUFBSXdCLEVBQWMxQixxQkFBcUJ6ZSxFQUFRaUMsT0FBYXZYLEVBQVdnMEIsR0FDdkUsTUFJQzhDLEdBSVgsS0FDSyxDQVFEWixFQUFjUixFQU5PLElBQ2IvNEIsRUFBUXUyQixvQkFBb0JlLGtCQUMxQixFQUFJd0IsRUFBYzFCLHFCQUFxQnplLEVBQVFpQyxPQUFhdlgsRUFBV2cwQixHQUN2RSxJQUlkLENBRUEsSUFBS2dDLEVBQVFtQixXQUFheDZCLEVBQVF1MkIsb0JBQW9Ca0Usb0JBQXFCLENBQ3ZFLE1BQU1DLEVBQWEsSUFBSTFELEVBQWVoYyxvQkFBb0JDLEVBQUtxZSxTQUN6RG9CLEVBQVdwZSxxQkFBcUJ0YyxFQUFRdTJCLG9CQUFvQm9FLHNCQUF1QmhpQixHQUFTblksSUFDdkYsRUFBSXMyQixFQUFtQkMsV0FBV3YyQixFQUFPb2EsRUFBYXljLElBRXJFLENBRUEsT0FBT2tDLENBQVcsRzs7OzREQ2pHdEJ6NUIsT0FBT0MsZUFBZUMsRUFBUyxhQUFjLENBQUVDLE9BQU8sSUFDdERELEVBQVFrNEIscUJBSVIsU0FBOEI3eUIsR0FDMUIsTUFBTStJLEVBQVdrb0IsRUFBSUMsb0JBQW9CcUUsa0NBQ25DdEUsRUFBSUMsb0JBQW9Cc0UseUJBQXlCeDFCLEdBQ2pEcXhCLEVBQVdOLDhCQUE4Qi93QixHQUMvQyxPQUFPMnhCLEVBQWVsb0IsZUFBZUcsb0JBQW9CYixFQUFVLEtBQ3ZFLEVBUkEsTUFBTTRvQixFQUFpQixrQ0FBUSw2QkFDekJWLEVBQU0sV0FBUSxrQkFDZEksRUFBYSw4QkFBUSw4Qjs7O2tFQ0ozQjUyQixPQUFPQyxlQUFlQyxFQUFTLGFBQWMsQ0FBRUMsT0FBTyxJQUN0REQsRUFBUSsyQixVQWNSLFNBQW1CdjJCLEVBQU9vYSxFQUFhaWMsRUFBYyxJQUNqRCxNQUFNbmdCLEdBQVMsRUFBSTJoQixFQUFRaEMsZ0JBQWdCNzFCLEVBQU1JLFdBQzNDNlYsRUFBU21FLEVBQVl2RSxNQUFNd0UsR0FBVUEsRUFBTTVCLEtBQU96WSxFQUFNc2EsZ0JBRTlELElBQUlnZ0IsRUFBYSxLQUNiQyxFQUFReEUsb0JBQW9CeUUscUJBQXVCeEQsRUFBU3RCLG1CQUFtQitFLHVCQUF5Qno2QixFQUFNMDZCLGVBQzlHSixFQUFhakUsRUFBWXhnQixNQUFNdkosR0FBTUEsRUFBRXF1QixlQUFpQjM2QixFQUFNMDZCLGdCQUFpQixDQUFFM3NCLEtBQU0vTixFQUFNMDZCLGVBRWpHLE9BQU9sRSxFQUFlaG5CLGFBQWF3Ryw2QkFBNkJoVyxFQUFPdzJCLEVBQWU5MkIsV0FBV3lYLFVBQVdvakIsRUFBUXhFLG9CQUFvQnlFLHFCQUF1QnhELEVBQVN0QixtQkFBbUJrRixTQUFXM2tCLEVBQVMsS0FBTSxDQUFDc2tCLEVBQVF4RSxvQkFBb0I4RSxpQkFBa0Iza0IsRUFBUW9rQixHQUFZdnNCLE1BQU0ySSxPQUFPd2hCLFNBQVNwMEIsS0FBSyxJQUN2VCxFQXRCQSxNQUFNeTJCLEVBQVUsaUJBQVEsa0JBQ2xCdkQsRUFBVyxxQkFBUSxlQUNuQlIsRUFBaUIsa0NBQVEsNkJBQ3pCcUIsRUFBVSx5QkFBUSx5QixHQ0xwQmlELEVBQTJCLENBQUMsRUFHaEMsU0FBU0MsRUFBb0JDLEdBRTVCLElBQUlDLEVBQWVILEVBQXlCRSxHQUM1QyxRQUFxQm40QixJQUFqQm80QixFQUNILE9BQU9BLEVBQWF6N0IsUUFHckIsSUFBSTA3QixFQUFTSixFQUF5QkUsR0FBWSxDQUdqRHg3QixRQUFTLENBQUMsR0FPWCxPQUhBMjdCLEVBQW9CSCxHQUFVaGUsS0FBS2tlLEVBQU8xN0IsUUFBUzA3QixFQUFRQSxFQUFPMTdCLFFBQVN1N0IsR0FHcEVHLEVBQU8xN0IsT0FDZixDQ3JCQXU3QixFQUFvQnJLLEVBQUksQ0FBQ2x4QixFQUFTNDdCLEtBQ2pDLElBQUksSUFBSWpWLEtBQU9pVixFQUNYTCxFQUFvQjVlLEVBQUVpZixFQUFZalYsS0FBUzRVLEVBQW9CNWUsRUFBRTNjLEVBQVMybUIsSUFDNUU3bUIsT0FBT0MsZUFBZUMsRUFBUzJtQixFQUFLLENBQUV2SixZQUFZLEVBQU0zRCxJQUFLbWlCLEVBQVdqVixJQUUxRSxFQ05ENFUsRUFBb0I1ZSxFQUFJLENBQUNrZixFQUFLbGdCLElBQVU3YixPQUFPd2QsVUFBVUMsZUFBZUMsS0FBS3FlLEVBQUtsZ0IsR0NDbEY0ZixFQUFvQmh3QixFQUFLdkwsSUFDSCxvQkFBWDg3QixRQUEwQkEsT0FBT0MsYUFDMUNqOEIsT0FBT0MsZUFBZUMsRUFBUzg3QixPQUFPQyxZQUFhLENBQUU5N0IsTUFBTyxXQUU3REgsT0FBT0MsZUFBZUMsRUFBUyxhQUFjLENBQUVDLE9BQU8sR0FBTyxFQ0ZwQ3M3QixFQUFvQixpQiIsInNvdXJjZXMiOlsid2VicGFjazovL0BzdXBlcm5vdmFpby9leHBvcnRlci1qZXRwYWNrLWNvbXBvc2UvLi4vLi4vdXRpbHMvZGlzdC9lbnVtcy9Db2xvckZvcm1hdC5qcyIsIndlYnBhY2s6Ly9Ac3VwZXJub3ZhaW8vZXhwb3J0ZXItamV0cGFjay1jb21wb3NlLy4uLy4uL3V0aWxzL2Rpc3QvZW51bXMvU3RyaW5nQ2FzZS5qcyIsIndlYnBhY2s6Ly9Ac3VwZXJub3ZhaW8vZXhwb3J0ZXItamV0cGFjay1jb21wb3NlLy4uLy4uL3V0aWxzL2Rpc3QvaGVscGVycy9DU1NIZWxwZXIuanMiLCJ3ZWJwYWNrOi8vQHN1cGVybm92YWlvL2V4cG9ydGVyLWpldHBhY2stY29tcG9zZS8uLi8uLi91dGlscy9kaXN0L2hlbHBlcnMvQ29sb3JIZWxwZXIuanMiLCJ3ZWJwYWNrOi8vQHN1cGVybm92YWlvL2V4cG9ydGVyLWpldHBhY2stY29tcG9zZS8uLi8uLi91dGlscy9kaXN0L2hlbHBlcnMvRmlsZUhlbHBlci5qcyIsIndlYnBhY2s6Ly9Ac3VwZXJub3ZhaW8vZXhwb3J0ZXItamV0cGFjay1jb21wb3NlLy4uLy4uL3V0aWxzL2Rpc3QvaGVscGVycy9GaWxlTmFtZUhlbHBlci5qcyIsIndlYnBhY2s6Ly9Ac3VwZXJub3ZhaW8vZXhwb3J0ZXItamV0cGFjay1jb21wb3NlLy4uLy4uL3V0aWxzL2Rpc3QvaGVscGVycy9HZW5lcmFsSGVscGVyLmpzIiwid2VicGFjazovL0BzdXBlcm5vdmFpby9leHBvcnRlci1qZXRwYWNrLWNvbXBvc2UvLi4vLi4vdXRpbHMvZGlzdC9oZWxwZXJzL0tvdGxpbkhlbHBlci5qcyIsIndlYnBhY2s6Ly9Ac3VwZXJub3ZhaW8vZXhwb3J0ZXItamV0cGFjay1jb21wb3NlLy4uLy4uL3V0aWxzL2Rpc3QvaGVscGVycy9OYW1pbmdIZWxwZXIuanMiLCJ3ZWJwYWNrOi8vQHN1cGVybm92YWlvL2V4cG9ydGVyLWpldHBhY2stY29tcG9zZS8uLi8uLi91dGlscy9kaXN0L2hlbHBlcnMvVGhlbWVIZWxwZXIuanMiLCJ3ZWJwYWNrOi8vQHN1cGVybm92YWlvL2V4cG9ydGVyLWpldHBhY2stY29tcG9zZS8uLi8uLi91dGlscy9kaXN0L2hlbHBlcnMvVG9rZW5IZWxwZXIuanMiLCJ3ZWJwYWNrOi8vQHN1cGVybm92YWlvL2V4cG9ydGVyLWpldHBhY2stY29tcG9zZS8uLi8uLi91dGlscy9kaXN0L2hlbHBlcnMvVG9rZW5OYW1lVHJhY2tlci5qcyIsIndlYnBhY2s6Ly9Ac3VwZXJub3ZhaW8vZXhwb3J0ZXItamV0cGFjay1jb21wb3NlLy4uLy4uL3V0aWxzL2Rpc3QvaGVscGVycy9Xcml0ZVRva2VuUHJvcFN0b3JlLmpzIiwid2VicGFjazovL0BzdXBlcm5vdmFpby9leHBvcnRlci1qZXRwYWNrLWNvbXBvc2UvLi4vLi4vdXRpbHMvZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9Ac3VwZXJub3ZhaW8vZXhwb3J0ZXItamV0cGFjay1jb21wb3NlLy4uLy4uL3V0aWxzL25vZGVfbW9kdWxlcy9Ac3VwZXJub3ZhaW8vc2RrLWV4cG9ydGVycy9idWlsZC9zdXBlcm5vdmEtc2RrLXR5cGVzY3JpcHQuanMiLCJ3ZWJwYWNrOi8vQHN1cGVybm92YWlvL2V4cG9ydGVyLWpldHBhY2stY29tcG9zZS8uLi8uLi91dGlscy9ub2RlX21vZHVsZXMvY2hhbmdlLWNhc2UvZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9Ac3VwZXJub3ZhaW8vZXhwb3J0ZXItamV0cGFjay1jb21wb3NlLy4vY29uZmlnLnRzIiwid2VicGFjazovL0BzdXBlcm5vdmFpby9leHBvcnRlci1qZXRwYWNrLWNvbXBvc2UvLi9zcmMvY29uc3RhbnRzL2RlZmF1bHRzLnRzIiwid2VicGFjazovL0BzdXBlcm5vdmFpby9leHBvcnRlci1qZXRwYWNrLWNvbXBvc2UvLi9zcmMvY29udGVudC90b2tlbi50cyIsIndlYnBhY2s6Ly9Ac3VwZXJub3ZhaW8vZXhwb3J0ZXItamV0cGFjay1jb21wb3NlLy4vc3JjL2ZpbGVzL29iamVjdC1maWxlLnRzIiwid2VicGFjazovL0BzdXBlcm5vdmFpby9leHBvcnRlci1qZXRwYWNrLWNvbXBvc2UvLi9zcmMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vQHN1cGVybm92YWlvL2V4cG9ydGVyLWpldHBhY2stY29tcG9zZS8uL3NyYy91dGlscy9maWxlLXV0aWxzLnRzIiwid2VicGFjazovL0BzdXBlcm5vdmFpby9leHBvcnRlci1qZXRwYWNrLWNvbXBvc2UvLi9zcmMvdXRpbHMvdG9rZW4tbmFtZS11dGlscy50cyIsIndlYnBhY2s6Ly9Ac3VwZXJub3ZhaW8vZXhwb3J0ZXItamV0cGFjay1jb21wb3NlL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL0BzdXBlcm5vdmFpby9leHBvcnRlci1qZXRwYWNrLWNvbXBvc2Uvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL0BzdXBlcm5vdmFpby9leHBvcnRlci1qZXRwYWNrLWNvbXBvc2Uvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9Ac3VwZXJub3ZhaW8vZXhwb3J0ZXItamV0cGFjay1jb21wb3NlL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vQHN1cGVybm92YWlvL2V4cG9ydGVyLWpldHBhY2stY29tcG9zZS93ZWJwYWNrL3N0YXJ0dXAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNvbG9yRm9ybWF0ID0gdm9pZCAwO1xudmFyIENvbG9yRm9ybWF0O1xuKGZ1bmN0aW9uIChDb2xvckZvcm1hdCkge1xuICAgIC8qKiBFeGFtcGxlOiByZ2IoMjU1LCAwLCAwKSAqL1xuICAgIENvbG9yRm9ybWF0W1wicmdiXCJdID0gXCJyZ2JcIjtcbiAgICAvKiogRXhhbXBsZTogcmdiYSgyNTUsIDAsIDAsIDEpICovXG4gICAgQ29sb3JGb3JtYXRbXCJyZ2JhXCJdID0gXCJyZ2JhXCI7XG4gICAgLyoqIEF1dG9tYXRpY2FsbHkgY2hvb3NlIGJldHdlZW4gcmdiKCkgYW5kIHJnYmEoKSAqL1xuICAgIENvbG9yRm9ybWF0W1wic21hcnRSZ2JhXCJdID0gXCJzbWFydFJnYmFcIjtcbiAgICAvKiogSEVYIC0gZmZmZmZmICovXG4gICAgQ29sb3JGb3JtYXRbXCJoZXg2XCJdID0gXCJoZXg2XCI7XG4gICAgLyoqIEhFWEEgLSBmZmZmZmYwMCAqL1xuICAgIENvbG9yRm9ybWF0W1wiaGV4OFwiXSA9IFwiaGV4OFwiO1xuICAgIC8qKiBFeGFtcGxlOiAjZmYwMDAwICovXG4gICAgQ29sb3JGb3JtYXRbXCJoYXNoSGV4NlwiXSA9IFwiaGFzaEhleDZcIjtcbiAgICAvKiogRXhhbXBsZTogI2ZmMDAwMGZmICovXG4gICAgQ29sb3JGb3JtYXRbXCJoYXNoSGV4OFwiXSA9IFwiaGFzaEhleDhcIjtcbiAgICAvKiogQXV0b21hdGljYWxseSBjaG9vc2UgYmV0d2VlbiAjUlJHR0JCIGFuZCAjUlJHR0JCQUEgKi9cbiAgICBDb2xvckZvcm1hdFtcInNtYXJ0SGFzaEhleFwiXSA9IFwic21hcnRIYXNoSGV4XCI7XG4gICAgLyoqIFNlbGVjdHMgYmV0d2VlbiBoZXggYW5kIGhleGEgbW9kZXMgYmFzZWQgb24gbm9uLW9wYXF1ZSBhbHBoYSAqL1xuICAgIENvbG9yRm9ybWF0W1wic21hcnRIZXhcIl0gPSBcInNtYXJ0SGV4XCI7XG4gICAgLyoqIEV4YW1wbGU6IGhzbCgwLCAxMDAlLCA1MCUpICovXG4gICAgQ29sb3JGb3JtYXRbXCJoc2xcIl0gPSBcImhzbFwiO1xuICAgIC8qKiBFeGFtcGxlOiBoc2xhKDAsIDEwMCUsIDUwJSwgMSkgKi9cbiAgICBDb2xvckZvcm1hdFtcImhzbGFcIl0gPSBcImhzbGFcIjtcbiAgICAvKiogQXV0b21hdGljYWxseSBjaG9vc2UgYmV0d2VlbiBoc2woKSBhbmQgaHNsYSgpICovXG4gICAgQ29sb3JGb3JtYXRbXCJzbWFydEhzbGFcIl0gPSBcInNtYXJ0SHNsYVwiO1xuICAgIC8qKiBpT1MgVUlDb2xvciBjcmVhdGVkIGFzIFVJQ29sb3IocmdiOiAweDAwMDAwMCkud2l0aEFscGhhQ29tcG9uZW50KDAuNSkuIEFscGhhIGNvbXBvbmVudCB3aWxsIGJlIG9tbWl0ZWQgaWYgZnVsbHkgb3BhcXVlICovXG4gICAgQ29sb3JGb3JtYXRbXCJzbWFydFVJQ29sb3JcIl0gPSBcInNtYXJ0VUlDb2xvclwiO1xuICAgIC8qKiBFeGFtcGxlOiBva2xjaCgwLjYgMC4xNSAzMCkgKi9cbiAgICBDb2xvckZvcm1hdFtcIm9rbGNoXCJdID0gXCJva2xjaFwiO1xuICAgIC8qKiBFeGFtcGxlOiBva2xjaCgwLjYgMC4xNSAzMCAvIDEpICovXG4gICAgQ29sb3JGb3JtYXRbXCJva2xjaGFcIl0gPSBcIm9rbGNoYVwiO1xuICAgIC8qKiBBdXRvbWF0aWNhbGx5IGNob29zZSBiZXR3ZWVuIG9rbGNoKCkgYW5kIG9rbGNoKCkgd2l0aCBhbHBoYSAqL1xuICAgIENvbG9yRm9ybWF0W1wic21hcnRPa2xjaFwiXSA9IFwic21hcnRPa2xjaFwiO1xufSkoQ29sb3JGb3JtYXQgfHwgKGV4cG9ydHMuQ29sb3JGb3JtYXQgPSBDb2xvckZvcm1hdCA9IHt9KSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU3RyaW5nQ2FzZSA9IHZvaWQgMDtcbi8qKlxuICogRW51bSByZXByZXNlbnRpbmcgZGlmZmVyZW50IHN0cmluZyBjYXNlIGZvcm1hdHMgdXNlZCBmb3IgbmFtaW5nIHRva2VucyBhbmQgdmFyaWFibGVzXG4gKiBFeGFtcGxlcyBhcmUgc2hvd24gZm9yIHRoZSBpbnB1dDogXCJoZWxsbyB3b3JsZCBleGFtcGxlIDEyM1wiXG4gKi9cbnZhciBTdHJpbmdDYXNlO1xuKGZ1bmN0aW9uIChTdHJpbmdDYXNlKSB7XG4gICAgLyoqIEV4YW1wbGU6IFwiaGVsbG9Xb3JsZEV4YW1wbGUxMjNcIiAqL1xuICAgIFN0cmluZ0Nhc2VbXCJjYW1lbENhc2VcIl0gPSBcImNhbWVsQ2FzZVwiO1xuICAgIC8qKiBFeGFtcGxlOiBcIkhlbGxvIFdvcmxkIEV4YW1wbGUgMTIzXCIgKi9cbiAgICBTdHJpbmdDYXNlW1wiY2FwaXRhbENhc2VcIl0gPSBcImNhcGl0YWxDYXNlXCI7XG4gICAgLyoqIEV4YW1wbGU6IFwiSEVMTE9fV09STERfRVhBTVBMRV8xMjNcIiAqL1xuICAgIFN0cmluZ0Nhc2VbXCJjb25zdGFudENhc2VcIl0gPSBcImNvbnN0YW50Q2FzZVwiO1xuICAgIC8qKiBFeGFtcGxlOiBcImhlbGxvLndvcmxkLmV4YW1wbGUuMTIzXCIgKi9cbiAgICBTdHJpbmdDYXNlW1wiZG90Q2FzZVwiXSA9IFwiZG90Q2FzZVwiO1xuICAgIC8qKiBFeGFtcGxlOiBcIkhlbGxvLVdvcmxkLUV4YW1wbGUtMTIzXCIgKi9cbiAgICBTdHJpbmdDYXNlW1widHJhaW5DYXNlXCJdID0gXCJ0cmFpbkNhc2VcIjtcbiAgICAvKiogRXhhbXBsZTogXCJoZWxsbyB3b3JsZCBleGFtcGxlIDEyM1wiICovXG4gICAgU3RyaW5nQ2FzZVtcIm5vQ2FzZVwiXSA9IFwibm9DYXNlXCI7XG4gICAgLyoqIEV4YW1wbGU6IFwiaGVsbG8td29ybGQtZXhhbXBsZS0xMjNcIiAqL1xuICAgIFN0cmluZ0Nhc2VbXCJrZWJhYkNhc2VcIl0gPSBcImtlYmFiQ2FzZVwiO1xuICAgIC8qKiBFeGFtcGxlOiBcIkhlbGxvV29ybGRFeGFtcGxlMTIzXCIgKi9cbiAgICBTdHJpbmdDYXNlW1wicGFzY2FsQ2FzZVwiXSA9IFwicGFzY2FsQ2FzZVwiO1xuICAgIC8qKiBFeGFtcGxlOiBcImhlbGxvL3dvcmxkL2V4YW1wbGUvMTIzXCIgKi9cbiAgICBTdHJpbmdDYXNlW1wicGF0aENhc2VcIl0gPSBcInBhdGhDYXNlXCI7XG4gICAgLyoqIEV4YW1wbGU6IFwiSGVsbG8gd29ybGQgZXhhbXBsZSAxMjNcIiAqL1xuICAgIFN0cmluZ0Nhc2VbXCJzZW50ZW5jZUNhc2VcIl0gPSBcInNlbnRlbmNlQ2FzZVwiO1xuICAgIC8qKiBFeGFtcGxlOiBcImhlbGxvX3dvcmxkX2V4YW1wbGVfMTIzXCIgKi9cbiAgICBTdHJpbmdDYXNlW1wic25ha2VDYXNlXCJdID0gXCJzbmFrZUNhc2VcIjtcbiAgICAvKiogRXhhbXBsZTogXCJoZWxsb3dvcmxkZXhhbXBsZTEyM1wiICovXG4gICAgU3RyaW5nQ2FzZVtcImZsYXRDYXNlXCJdID0gXCJmbGF0Q2FzZVwiO1xufSkoU3RyaW5nQ2FzZSB8fCAoZXhwb3J0cy5TdHJpbmdDYXNlID0gU3RyaW5nQ2FzZSA9IHt9KSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ1NTSGVscGVyID0gdm9pZCAwO1xuY29uc3Qgc2RrX2V4cG9ydGVyc18xID0gcmVxdWlyZShcIkBzdXBlcm5vdmFpby9zZGstZXhwb3J0ZXJzXCIpO1xuY29uc3QgVG9rZW5IZWxwZXJfMSA9IHJlcXVpcmUoXCIuL1Rva2VuSGVscGVyXCIpO1xuY29uc3QgQ29sb3JIZWxwZXJfMSA9IHJlcXVpcmUoXCIuL0NvbG9ySGVscGVyXCIpO1xuLyoqIEEgdXRpbGl0eSBjbGFzcyB0byBoZWxwIHdpdGggdHJhbnNmb3JtYXRpb24gb2YgdG9rZW5zIGFuZCBTdXBlcm5vdmEgdG9rZW4tbGlrZSB2YWx1ZXMgdG8gdmFyaW91cyBmb3JtYXRzICovXG5jbGFzcyBDU1NIZWxwZXIge1xuICAgIHN0YXRpYyB0b2tlblRvQ1NTKHRva2VuLCBhbGxUb2tlbnMsIG9wdGlvbnMpIHtcbiAgICAgICAgLyoqIFVzZSBzdWJyb3V0aW5lcyB0byBjb252ZXJ0IHNwZWNpZmljIHRva2VuIHR5cGVzIHRvIGRpZmZlcmVudCBjc3MgcmVwcmVzZW50YXRpb25zLiBNYW55IHRva2VucyBhcmUgb2YgdGhlIHNhbWUgdHlwZSAqL1xuICAgICAgICBsZXQgY3NzVmFsdWU7XG4gICAgICAgIHN3aXRjaCAodG9rZW4udG9rZW5UeXBlKSB7XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5Ub2tlblR5cGUuY29sb3I6XG4gICAgICAgICAgICAgICAgY3NzVmFsdWUgPSB0aGlzLmNvbG9yVG9rZW5WYWx1ZVRvQ1NTKHRva2VuLnZhbHVlLCBhbGxUb2tlbnMsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuVG9rZW5UeXBlLmJvcmRlcjpcbiAgICAgICAgICAgICAgICBjc3NWYWx1ZSA9IHRoaXMuYm9yZGVyVG9rZW5WYWx1ZVRvQ1NTKHRva2VuLnZhbHVlLCBhbGxUb2tlbnMsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuVG9rZW5UeXBlLmdyYWRpZW50OlxuICAgICAgICAgICAgICAgIGNzc1ZhbHVlID0gdGhpcy5ncmFkaWVudFRva2VuVmFsdWVUb0NTUyh0b2tlbi52YWx1ZSwgYWxsVG9rZW5zLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2Ugc2RrX2V4cG9ydGVyc18xLlRva2VuVHlwZS5kaW1lbnNpb246XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5Ub2tlblR5cGUuc2l6ZTpcbiAgICAgICAgICAgIGNhc2Ugc2RrX2V4cG9ydGVyc18xLlRva2VuVHlwZS5zcGFjZTpcbiAgICAgICAgICAgIGNhc2Ugc2RrX2V4cG9ydGVyc18xLlRva2VuVHlwZS5vcGFjaXR5OlxuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuVG9rZW5UeXBlLmZvbnRTaXplOlxuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuVG9rZW5UeXBlLmxpbmVIZWlnaHQ6XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5Ub2tlblR5cGUubGV0dGVyU3BhY2luZzpcbiAgICAgICAgICAgIGNhc2Ugc2RrX2V4cG9ydGVyc18xLlRva2VuVHlwZS5wYXJhZ3JhcGhTcGFjaW5nOlxuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuVG9rZW5UeXBlLmJvcmRlcldpZHRoOlxuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuVG9rZW5UeXBlLnJhZGl1czpcbiAgICAgICAgICAgIGNhc2Ugc2RrX2V4cG9ydGVyc18xLlRva2VuVHlwZS5kdXJhdGlvbjpcbiAgICAgICAgICAgIGNhc2Ugc2RrX2V4cG9ydGVyc18xLlRva2VuVHlwZS56SW5kZXg6XG4gICAgICAgICAgICAgICAgY3NzVmFsdWUgPSB0aGlzLmRpbWVuc2lvblRva2VuVmFsdWVUb0NTUyh0b2tlbi52YWx1ZSwgYWxsVG9rZW5zLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2Ugc2RrX2V4cG9ydGVyc18xLlRva2VuVHlwZS5zaGFkb3c6XG4gICAgICAgICAgICAgICAgY3NzVmFsdWUgPSB0aGlzLnNoYWRvd1Rva2VuVmFsdWVUb0NTUyh0b2tlbi52YWx1ZSwgYWxsVG9rZW5zLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2Ugc2RrX2V4cG9ydGVyc18xLlRva2VuVHlwZS5mb250V2VpZ2h0OlxuICAgICAgICAgICAgICAgIGNzc1ZhbHVlID0gdGhpcy5mb250V2VpZ2h0VG9rZW5WYWx1ZVRvQ1NTKHRva2VuLnZhbHVlLCBhbGxUb2tlbnMsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuVG9rZW5UeXBlLmZvbnRGYW1pbHk6XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5Ub2tlblR5cGUucHJvZHVjdENvcHk6XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5Ub2tlblR5cGUuc3RyaW5nOlxuICAgICAgICAgICAgICAgIGNzc1ZhbHVlID0gdGhpcy5zdHJpbmdUb2tlblZhbHVlVG9DU1ModG9rZW4udmFsdWUsIGFsbFRva2Vucywgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5Ub2tlblR5cGUudGV4dENhc2U6XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5Ub2tlblR5cGUudGV4dERlY29yYXRpb246XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5Ub2tlblR5cGUudmlzaWJpbGl0eTpcbiAgICAgICAgICAgICAgICBjc3NWYWx1ZSA9IHRoaXMub3B0aW9uVG9rZW5WYWx1ZVRvQ1NTKHRva2VuLnZhbHVlLCBhbGxUb2tlbnMsIG9wdGlvbnMsIHRva2VuLnRva2VuVHlwZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5Ub2tlblR5cGUuYmx1cjpcbiAgICAgICAgICAgICAgICBjc3NWYWx1ZSA9IHRoaXMuYmx1clRva2VuVmFsdWVUb0NTUyh0b2tlbi52YWx1ZSwgYWxsVG9rZW5zLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2Ugc2RrX2V4cG9ydGVyc18xLlRva2VuVHlwZS50eXBvZ3JhcGh5OlxuICAgICAgICAgICAgICAgIGNzc1ZhbHVlID0gdGhpcy50eXBvZ3JhcGh5VG9rZW5WYWx1ZVRvQ1NTKHRva2VuLnZhbHVlLCBhbGxUb2tlbnMsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc2RrX2V4cG9ydGVyc18xLlVucmVhY2hhYmxlQ2FzZUVycm9yKHRva2VuLnRva2VuVHlwZSwgJ1Vuc3VwcG9ydGVkIHRva2VuIHR5cGUgZm9yIHRyYW5zZm9ybWF0aW9uIHRvIENTUzonKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBBbGxvdyB2YWx1ZSB0cmFuc2Zvcm1hdGlvbiBpZiB0cmFuc2Zvcm1lciBleGlzdHNcbiAgICAgICAgaWYgKG9wdGlvbnMudmFsdWVUcmFuc2Zvcm1lcikge1xuICAgICAgICAgICAgY29uc3QgdHJhbnNmb3JtZWRWYWx1ZSA9IG9wdGlvbnMudmFsdWVUcmFuc2Zvcm1lcihjc3NWYWx1ZSwgdG9rZW4pO1xuICAgICAgICAgICAgaWYgKHRyYW5zZm9ybWVkVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cmFuc2Zvcm1lZFZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjc3NWYWx1ZTtcbiAgICB9XG4gICAgc3RhdGljIGNvbG9yVG9rZW5WYWx1ZVRvQ1NTKGNvbG9yLCBhbGxUb2tlbnMsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIENvbG9ySGVscGVyXzEuQ29sb3JIZWxwZXIuZm9ybWF0dGVkQ29sb3JPclZhcmlhYmxlTmFtZShjb2xvciwgYWxsVG9rZW5zLCBvcHRpb25zKTtcbiAgICB9XG4gICAgc3RhdGljIGJvcmRlclRva2VuVmFsdWVUb0NTUyhib3JkZXIsIGFsbFRva2Vucywgb3B0aW9ucykge1xuICAgICAgICBjb25zdCByZWZlcmVuY2UgPSAoMCwgVG9rZW5IZWxwZXJfMS5zdXJlT3B0aW9uYWxSZWZlcmVuY2UpKGJvcmRlci5yZWZlcmVuY2VkVG9rZW5JZCwgYWxsVG9rZW5zLCBvcHRpb25zLmFsbG93UmVmZXJlbmNlcyk7XG4gICAgICAgIGlmIChyZWZlcmVuY2UpIHtcbiAgICAgICAgICAgIHJldHVybiBvcHRpb25zLnRva2VuVG9WYXJpYWJsZVJlZihyZWZlcmVuY2UpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICAgICAgICB3aWR0aDogdGhpcy5kaW1lbnNpb25Ub2tlblZhbHVlVG9DU1MoYm9yZGVyLndpZHRoLCBhbGxUb2tlbnMsIG9wdGlvbnMpLFxuICAgICAgICAgICAgc3R5bGU6IHRoaXMuYm9yZGVyU3R5bGVUb0NTUyhib3JkZXIuc3R5bGUpLFxuICAgICAgICAgICAgY29sb3I6IHRoaXMuY29sb3JUb2tlblZhbHVlVG9DU1MoYm9yZGVyLmNvbG9yLCBhbGxUb2tlbnMsIG9wdGlvbnMpLFxuICAgICAgICAgICAgcG9zaXRpb246IHRoaXMuYm9yZGVyUG9zaXRpb25Ub0NTUyhib3JkZXIucG9zaXRpb24pIC8vIE5vdCB1c2VkIGZvciBub3dcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGAke2RhdGEud2lkdGh9ICR7ZGF0YS5zdHlsZX0gJHtkYXRhLmNvbG9yfWA7XG4gICAgfVxuICAgIHN0YXRpYyBncmFkaWVudFRva2VuVmFsdWVUb0NTUyhncmFkaWVudHMsIGFsbFRva2Vucywgb3B0aW9ucykge1xuICAgICAgICAvLyBFeHBvcnQgZWFjaCBsYXllciBvZiB0aGUgZ3JhZGllbnQgc2VwYXJhdGVseSwgdGhlbiBqb2luIHRoZSBDU1MgYmFja2dyb3VuZFxuICAgICAgICByZXR1cm4gZ3JhZGllbnRzLm1hcCgoZ3JhZGllbnQpID0+IHRoaXMuZ3JhZGllbnRMYXllclRvQ1NTKGdyYWRpZW50LCBhbGxUb2tlbnMsIG9wdGlvbnMpKS5qb2luKCcsICcpO1xuICAgIH1cbiAgICAvKiogQ29udmVydHMgZ3JhZGllbnQgdG9rZW4gdmFsdWUgdG8gY3NzIGRlZmluaXRpb24gKi9cbiAgICBzdGF0aWMgZ3JhZGllbnRMYXllclRvQ1NTKHZhbHVlLCBhbGxUb2tlbnMsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgcmVmZXJlbmNlID0gKDAsIFRva2VuSGVscGVyXzEuc3VyZU9wdGlvbmFsUmVmZXJlbmNlKSh2YWx1ZS5yZWZlcmVuY2VkVG9rZW5JZCwgYWxsVG9rZW5zLCBvcHRpb25zLmFsbG93UmVmZXJlbmNlcyk7XG4gICAgICAgIGlmIChyZWZlcmVuY2UpIHtcbiAgICAgICAgICAgIHJldHVybiBvcHRpb25zLnRva2VuVG9WYXJpYWJsZVJlZihyZWZlcmVuY2UpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRlbHRhWCA9IENvbG9ySGVscGVyXzEuQ29sb3JIZWxwZXIucm91bmRUb0RlY2ltYWxzKHZhbHVlLnRvLngsIG9wdGlvbnMuZGVjaW1hbHMpIC1cbiAgICAgICAgICAgIENvbG9ySGVscGVyXzEuQ29sb3JIZWxwZXIucm91bmRUb0RlY2ltYWxzKHZhbHVlLmZyb20ueCwgb3B0aW9ucy5kZWNpbWFscyk7XG4gICAgICAgIGNvbnN0IGRlbHRhWSA9IENvbG9ySGVscGVyXzEuQ29sb3JIZWxwZXIucm91bmRUb0RlY2ltYWxzKHZhbHVlLnRvLnksIG9wdGlvbnMuZGVjaW1hbHMpIC1cbiAgICAgICAgICAgIENvbG9ySGVscGVyXzEuQ29sb3JIZWxwZXIucm91bmRUb0RlY2ltYWxzKHZhbHVlLmZyb20ueSwgb3B0aW9ucy5kZWNpbWFscyk7XG4gICAgICAgIGNvbnN0IHJhZCA9IE1hdGguYXRhbjIoZGVsdGFZLCBkZWx0YVgpO1xuICAgICAgICBjb25zdCBkZWcgPSByYWQgKiAoMTgwIC8gTWF0aC5QSSk7XG4gICAgICAgIGNvbnN0IGdldEFuZ2xlID0gKCkgPT4ge1xuICAgICAgICAgICAgaWYgKGRlbHRhWCA+PSAwICYmIGRlbHRhWSA+IDApIHtcbiAgICAgICAgICAgICAgICAvLyB0b3AgdG8gYm90dG9tIGlzIDkwZGVnIGJ1dCBzaG91bGQgYmUgMTgwZGVnXG4gICAgICAgICAgICAgICAgcmV0dXJuIDkwICsgZGVnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRlbHRhWCA+IDAgJiYgZGVsdGFZIDw9IDApIHtcbiAgICAgICAgICAgICAgICAvLyBsZWZ0IHRvIHJpZ2h0IGlzIDBkZWcgYnV0IHNob3VsZCBiZSA5MGRlZ1xuICAgICAgICAgICAgICAgIHJldHVybiA5MCArIGRlZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkZWx0YVggPD0gMCAmJiBkZWx0YVkgPCAwKSB7XG4gICAgICAgICAgICAgICAgLy8gYm90dG9tIHRvIHRvcCBpcyAtOTBkZWcgYnV0IHNob3VsZCBiZSAwZGVnXG4gICAgICAgICAgICAgICAgcmV0dXJuIDkwICsgZGVnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gcmlnaHQgdG8gbGVmdCBpcyAxODBkZWcgYnV0IHNob3VsZCBiZSAtOTBkZWdcbiAgICAgICAgICAgIHJldHVybiBkZWcgLSAyNzA7XG4gICAgICAgIH07XG4gICAgICAgIGxldCBncmFkaWVudFR5cGUgPSAnJztcbiAgICAgICAgc3dpdGNoICh2YWx1ZS50eXBlKSB7XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5HcmFkaWVudFR5cGUubGluZWFyOlxuICAgICAgICAgICAgICAgIGdyYWRpZW50VHlwZSA9IGBsaW5lYXItZ3JhZGllbnQoJHtnZXRBbmdsZSgpfWRlZywgYDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2Ugc2RrX2V4cG9ydGVyc18xLkdyYWRpZW50VHlwZS5yYWRpYWw6XG4gICAgICAgICAgICAgICAgZ3JhZGllbnRUeXBlID0gJ3JhZGlhbC1ncmFkaWVudChjaXJjbGUsICc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5HcmFkaWVudFR5cGUuYW5ndWxhcjpcbiAgICAgICAgICAgICAgICBncmFkaWVudFR5cGUgPSAnY29uaWMtZ3JhZGllbnQoJztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgZ3JhZGllbnRUeXBlID0gYGxpbmVhci1ncmFkaWVudCgke2dldEFuZ2xlKCl9ZGVnLCBgO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIC8vIEV4YW1wbGU6IHJhZGlhbC1ncmFkaWVudChjaXJjbGUsIHJnYmEoNjMsOTQsMjUxLDEpIDAlLCByZ2JhKDI1Miw3MCwxMDcsMSkgMTAwJSk7XG4gICAgICAgIGNvbnN0IHN0b3BzID0gdmFsdWUuc3RvcHNcbiAgICAgICAgICAgIC5tYXAoKHN0b3ApID0+IHtcbiAgICAgICAgICAgIHJldHVybiBgJHt0aGlzLmNvbG9yVG9rZW5WYWx1ZVRvQ1NTKHN0b3AuY29sb3IsIGFsbFRva2Vucywgb3B0aW9ucyl9ICR7Q29sb3JIZWxwZXJfMS5Db2xvckhlbHBlci5yb3VuZFRvRGVjaW1hbHMoc3RvcC5wb3NpdGlvbiAqIDEwMCwgb3B0aW9ucy5kZWNpbWFscyl9JWA7XG4gICAgICAgIH0pXG4gICAgICAgICAgICAuam9pbignLCAnKTtcbiAgICAgICAgcmV0dXJuIGAke2dyYWRpZW50VHlwZX0ke3N0b3BzfSlgO1xuICAgIH1cbiAgICBzdGF0aWMgZGltZW5zaW9uVG9rZW5WYWx1ZVRvQ1NTKGRpbWVuc2lvbiwgYWxsVG9rZW5zLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHJlZmVyZW5jZSA9ICgwLCBUb2tlbkhlbHBlcl8xLnN1cmVPcHRpb25hbFJlZmVyZW5jZSkoZGltZW5zaW9uLnJlZmVyZW5jZWRUb2tlbklkLCBhbGxUb2tlbnMsIG9wdGlvbnMuYWxsb3dSZWZlcmVuY2VzKTtcbiAgICAgICAgaWYgKHJlZmVyZW5jZSkge1xuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMudG9rZW5Ub1ZhcmlhYmxlUmVmKHJlZmVyZW5jZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSGFuZGxlIHVuaXQgY29udmVyc2lvbiBpZiBuZWVkZWRcbiAgICAgICAgaWYgKG9wdGlvbnMuZm9yY2VSZW1Vbml0ICYmIGRpbWVuc2lvbi51bml0ID09PSBzZGtfZXhwb3J0ZXJzXzEuVW5pdC5waXhlbHMpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlbUJhc2UgPSBvcHRpb25zLnJlbUJhc2UgfHwgMTY7XG4gICAgICAgICAgICBjb25zdCByZW1WYWx1ZSA9IGRpbWVuc2lvbi5tZWFzdXJlIC8gcmVtQmFzZTtcbiAgICAgICAgICAgIHJldHVybiBgJHtDb2xvckhlbHBlcl8xLkNvbG9ySGVscGVyLnJvdW5kVG9EZWNpbWFscyhyZW1WYWx1ZSwgb3B0aW9ucy5kZWNpbWFscyl9cmVtYDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYCR7Q29sb3JIZWxwZXJfMS5Db2xvckhlbHBlci5yb3VuZFRvRGVjaW1hbHMoZGltZW5zaW9uLm1lYXN1cmUsIG9wdGlvbnMuZGVjaW1hbHMpfSR7dGhpcy51bml0VG9DU1MoZGltZW5zaW9uLnVuaXQpfWA7XG4gICAgfVxuICAgIHN0YXRpYyBzaGFkb3dUb2tlblZhbHVlVG9DU1Moc2hhZG93cywgYWxsVG9rZW5zLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBzaGFkb3dzLm1hcCgobGF5ZXIpID0+IHRoaXMuc2hhZG93TGF5ZXJUb0NTUyhsYXllciwgYWxsVG9rZW5zLCBvcHRpb25zKSkuam9pbignLCAnKTtcbiAgICB9XG4gICAgc3RhdGljIHNoYWRvd0xheWVyVG9DU1ModmFsdWUsIGFsbFRva2Vucywgb3B0aW9ucykge1xuICAgICAgICBjb25zdCByZWZlcmVuY2UgPSAoMCwgVG9rZW5IZWxwZXJfMS5zdXJlT3B0aW9uYWxSZWZlcmVuY2UpKHZhbHVlLnJlZmVyZW5jZWRUb2tlbklkLCBhbGxUb2tlbnMsIG9wdGlvbnMuYWxsb3dSZWZlcmVuY2VzKTtcbiAgICAgICAgaWYgKHJlZmVyZW5jZSkge1xuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMudG9rZW5Ub1ZhcmlhYmxlUmVmKHJlZmVyZW5jZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ29udmVydCBwaXhlbCB2YWx1ZXMgdG8gcmVtIGlmIG5lZWRlZFxuICAgICAgICBjb25zdCBjb252ZXJ0VG9SZW0gPSAocHgpID0+IHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmZvcmNlUmVtVW5pdCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlbUJhc2UgPSBvcHRpb25zLnJlbUJhc2UgfHwgMTY7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVtVmFsdWUgPSBweCAvIHJlbUJhc2U7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGAke0NvbG9ySGVscGVyXzEuQ29sb3JIZWxwZXIucm91bmRUb0RlY2ltYWxzKHJlbVZhbHVlLCBvcHRpb25zLmRlY2ltYWxzKX1yZW1gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGAke3B4fXB4YDtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGAke3ZhbHVlLnR5cGUgPT09IHNka19leHBvcnRlcnNfMS5TaGFkb3dUeXBlLmlubmVyID8gJ2luc2V0ICcgOiAnJ30ke2NvbnZlcnRUb1JlbSh2YWx1ZS54KX0gJHtjb252ZXJ0VG9SZW0odmFsdWUueSl9ICR7Y29udmVydFRvUmVtKHZhbHVlLnJhZGl1cyl9ICR7Y29udmVydFRvUmVtKHZhbHVlLnNwcmVhZCl9ICR7dGhpcy5jb2xvclRva2VuVmFsdWVUb0NTUyh7XG4gICAgICAgICAgICAuLi52YWx1ZS5jb2xvcixcbiAgICAgICAgICAgIC4uLih2YWx1ZS5vcGFjaXR5ICYmIHsgb3BhY2l0eTogdmFsdWUub3BhY2l0eSB9KVxuICAgICAgICB9LCBhbGxUb2tlbnMsIG9wdGlvbnMpfWA7XG4gICAgfVxuICAgIHN0YXRpYyBmb250V2VpZ2h0VG9rZW5WYWx1ZVRvQ1NTKHZhbHVlLCBhbGxUb2tlbnMsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgcmVmZXJlbmNlID0gKDAsIFRva2VuSGVscGVyXzEuc3VyZU9wdGlvbmFsUmVmZXJlbmNlKSh2YWx1ZS5yZWZlcmVuY2VkVG9rZW5JZCwgYWxsVG9rZW5zLCBvcHRpb25zLmFsbG93UmVmZXJlbmNlcyk7XG4gICAgICAgIGlmIChyZWZlcmVuY2UpIHtcbiAgICAgICAgICAgIHJldHVybiBvcHRpb25zLnRva2VuVG9WYXJpYWJsZVJlZihyZWZlcmVuY2UpO1xuICAgICAgICB9XG4gICAgICAgIC8vIENvbnZlcnQgdGV4dCB3ZWlnaHRzIHRvIG51bWVyaWNhbCB2YWx1ZXNcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZFdlaWdodCA9ICgwLCBUb2tlbkhlbHBlcl8xLm5vcm1hbGl6ZVRleHRXZWlnaHQpKHZhbHVlLnRleHQpO1xuICAgICAgICByZXR1cm4gYCR7bm9ybWFsaXplZFdlaWdodH1gO1xuICAgIH1cbiAgICBzdGF0aWMgc3RyaW5nVG9rZW5WYWx1ZVRvQ1NTKHZhbHVlLCBhbGxUb2tlbnMsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgcmVmZXJlbmNlID0gKDAsIFRva2VuSGVscGVyXzEuc3VyZU9wdGlvbmFsUmVmZXJlbmNlKSh2YWx1ZS5yZWZlcmVuY2VkVG9rZW5JZCwgYWxsVG9rZW5zLCBvcHRpb25zLmFsbG93UmVmZXJlbmNlcyk7XG4gICAgICAgIGlmIChyZWZlcmVuY2UpIHtcbiAgICAgICAgICAgIHJldHVybiBvcHRpb25zLnRva2VuVG9WYXJpYWJsZVJlZihyZWZlcmVuY2UpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBgXCIke3ZhbHVlLnRleHR9XCJgO1xuICAgIH1cbiAgICBzdGF0aWMgb3B0aW9uVG9rZW5WYWx1ZVRvQ1NTKG9wdGlvbiwgYWxsVG9rZW5zLCBvcHRpb25zLCB0b2tlblR5cGUpIHtcbiAgICAgICAgY29uc3QgcmVmZXJlbmNlID0gKDAsIFRva2VuSGVscGVyXzEuc3VyZU9wdGlvbmFsUmVmZXJlbmNlKShvcHRpb24ucmVmZXJlbmNlZFRva2VuSWQsIGFsbFRva2Vucywgb3B0aW9ucy5hbGxvd1JlZmVyZW5jZXMpO1xuICAgICAgICBpZiAocmVmZXJlbmNlKSB7XG4gICAgICAgICAgICByZXR1cm4gb3B0aW9ucy50b2tlblRvVmFyaWFibGVSZWYocmVmZXJlbmNlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodG9rZW5UeXBlID09PSBzZGtfZXhwb3J0ZXJzXzEuVG9rZW5UeXBlLnRleHRDYXNlKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy50ZXh0Q2FzZVRvQ1NTKG9wdGlvbi52YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRva2VuVHlwZSA9PT0gc2RrX2V4cG9ydGVyc18xLlRva2VuVHlwZS50ZXh0RGVjb3JhdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudGV4dERlY29yYXRpb25Ub0NTUyhvcHRpb24udmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFZpc2liaWxpdHkgdmFsdWVzIGFyZSBzdXBwb3J0ZWQgaW4gQ1NTIGFzIGlzIG91ciBkYXRhIG1vZGVsXG4gICAgICAgIHJldHVybiBvcHRpb24udmFsdWUudG9Mb3dlckNhc2UoKTtcbiAgICB9XG4gICAgc3RhdGljIGJsdXJUb2tlblZhbHVlVG9DU1MoYmx1ciwgYWxsVG9rZW5zLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHJlZmVyZW5jZSA9ICgwLCBUb2tlbkhlbHBlcl8xLnN1cmVPcHRpb25hbFJlZmVyZW5jZSkoYmx1ci5yZWZlcmVuY2VkVG9rZW5JZCwgYWxsVG9rZW5zLCBvcHRpb25zLmFsbG93UmVmZXJlbmNlcyk7XG4gICAgICAgIGlmIChyZWZlcmVuY2UpIHtcbiAgICAgICAgICAgIHJldHVybiBvcHRpb25zLnRva2VuVG9WYXJpYWJsZVJlZihyZWZlcmVuY2UpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBgYmx1cigke3RoaXMuZGltZW5zaW9uVG9rZW5WYWx1ZVRvQ1NTKGJsdXIucmFkaXVzLCBhbGxUb2tlbnMsIG9wdGlvbnMpfSlgO1xuICAgIH1cbiAgICBzdGF0aWMgdHlwb2dyYXBoeVRva2VuVmFsdWVUb0NTUyh0eXBvZ3JhcGh5LCBhbGxUb2tlbnMsIG9wdGlvbnMpIHtcbiAgICAgICAgLy8gUmVmZXJlbmNlIGZ1bGwgdHlwb2dyYXBoeSB0b2tlbiBpZiBzZXRcbiAgICAgICAgY29uc3QgcmVmZXJlbmNlID0gKDAsIFRva2VuSGVscGVyXzEuc3VyZU9wdGlvbmFsUmVmZXJlbmNlKSh0eXBvZ3JhcGh5LnJlZmVyZW5jZWRUb2tlbklkLCBhbGxUb2tlbnMsIG9wdGlvbnMuYWxsb3dSZWZlcmVuY2VzKTtcbiAgICAgICAgaWYgKHJlZmVyZW5jZSkge1xuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMudG9rZW5Ub1ZhcmlhYmxlUmVmKHJlZmVyZW5jZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVzb2x2ZSBwYXJ0aWFsIHJlZmVyZW5jZXNcbiAgICAgICAgY29uc3QgZm9udEZhbWlseVJlZmVyZW5jZSA9ICgwLCBUb2tlbkhlbHBlcl8xLnN1cmVPcHRpb25hbFJlZmVyZW5jZSkodHlwb2dyYXBoeS5mb250RmFtaWx5LnJlZmVyZW5jZWRUb2tlbklkLCBhbGxUb2tlbnMsIG9wdGlvbnMuYWxsb3dSZWZlcmVuY2VzKTtcbiAgICAgICAgY29uc3QgZm9udFdlaWdodFJlZmVyZW5jZSA9ICgwLCBUb2tlbkhlbHBlcl8xLnN1cmVPcHRpb25hbFJlZmVyZW5jZSkodHlwb2dyYXBoeS5mb250V2VpZ2h0LnJlZmVyZW5jZWRUb2tlbklkLCBhbGxUb2tlbnMsIG9wdGlvbnMuYWxsb3dSZWZlcmVuY2VzKTtcbiAgICAgICAgY29uc3QgZGVjb3JhdGlvblJlZmVyZW5jZSA9ICgwLCBUb2tlbkhlbHBlcl8xLnN1cmVPcHRpb25hbFJlZmVyZW5jZSkodHlwb2dyYXBoeS50ZXh0RGVjb3JhdGlvbi5yZWZlcmVuY2VkVG9rZW5JZCwgYWxsVG9rZW5zLCBvcHRpb25zLmFsbG93UmVmZXJlbmNlcyk7XG4gICAgICAgIGNvbnN0IGNhc2VSZWZlcmVuY2UgPSAoMCwgVG9rZW5IZWxwZXJfMS5zdXJlT3B0aW9uYWxSZWZlcmVuY2UpKHR5cG9ncmFwaHkudGV4dENhc2UucmVmZXJlbmNlZFRva2VuSWQsIGFsbFRva2Vucywgb3B0aW9ucy5hbGxvd1JlZmVyZW5jZXMpO1xuICAgICAgICBjb25zdCBkYXRhID0ge1xuICAgICAgICAgICAgZm9udEZhbWlseTogZm9udEZhbWlseVJlZmVyZW5jZSA/IG9wdGlvbnMudG9rZW5Ub1ZhcmlhYmxlUmVmKGZvbnRGYW1pbHlSZWZlcmVuY2UpIDogdHlwb2dyYXBoeS5mb250RmFtaWx5LnRleHQsXG4gICAgICAgICAgICBmb250V2VpZ2h0OiBmb250V2VpZ2h0UmVmZXJlbmNlXG4gICAgICAgICAgICAgICAgPyBvcHRpb25zLnRva2VuVG9WYXJpYWJsZVJlZihmb250V2VpZ2h0UmVmZXJlbmNlKVxuICAgICAgICAgICAgICAgIDogKDAsIFRva2VuSGVscGVyXzEubm9ybWFsaXplVGV4dFdlaWdodCkodHlwb2dyYXBoeS5mb250V2VpZ2h0LnRleHQpLFxuICAgICAgICAgICAgdGV4dERlY29yYXRpb246IGRlY29yYXRpb25SZWZlcmVuY2VcbiAgICAgICAgICAgICAgICA/IG9wdGlvbnMudG9rZW5Ub1ZhcmlhYmxlUmVmKGRlY29yYXRpb25SZWZlcmVuY2UpXG4gICAgICAgICAgICAgICAgOiB0eXBvZ3JhcGh5LnRleHREZWNvcmF0aW9uLnZhbHVlID09PSBzZGtfZXhwb3J0ZXJzXzEuVGV4dERlY29yYXRpb24ub3JpZ2luYWxcbiAgICAgICAgICAgICAgICAgICAgPyB0aGlzLnRleHREZWNvcmF0aW9uVG9DU1ModHlwb2dyYXBoeS50ZXh0RGVjb3JhdGlvbi52YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICB0ZXh0Q2FzZTogY2FzZVJlZmVyZW5jZVxuICAgICAgICAgICAgICAgID8gb3B0aW9ucy50b2tlblRvVmFyaWFibGVSZWYoY2FzZVJlZmVyZW5jZSlcbiAgICAgICAgICAgICAgICA6IHR5cG9ncmFwaHkudGV4dENhc2UudmFsdWUgPT09IHNka19leHBvcnRlcnNfMS5UZXh0Q2FzZS5vcmlnaW5hbFxuICAgICAgICAgICAgICAgICAgICA/IHRoaXMudGV4dENhc2VUb0NTUyh0eXBvZ3JhcGh5LnRleHRDYXNlLnZhbHVlKVxuICAgICAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGNhcHM6IHR5cG9ncmFwaHkudGV4dENhc2UudmFsdWUgPT09IHNka19leHBvcnRlcnNfMS5UZXh0Q2FzZS5zbWFsbENhcHMsXG4gICAgICAgICAgICBmb250U2l6ZTogdGhpcy5kaW1lbnNpb25Ub2tlblZhbHVlVG9DU1ModHlwb2dyYXBoeS5mb250U2l6ZSwgYWxsVG9rZW5zLCBvcHRpb25zKSxcbiAgICAgICAgICAgIGxpbmVIZWlnaHQ6IHR5cG9ncmFwaHkubGluZUhlaWdodFxuICAgICAgICAgICAgICAgID8gdGhpcy5kaW1lbnNpb25Ub2tlblZhbHVlVG9DU1ModHlwb2dyYXBoeS5saW5lSGVpZ2h0LCBhbGxUb2tlbnMsIG9wdGlvbnMpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWRcbiAgICAgICAgfTtcbiAgICAgICAgLy8gRm9ybWFsIENTUyBkZWZpbml0aW9uOiBmb250LXN0eWxlLCBmb250LXZhcmlhbnQsIGZvbnQtd2VpZ2h0LCBmb250LXN0cmV0Y2gsIGZvbnQtc2l6ZSwgbGluZS1oZWlnaHQsIGFuZCBmb250LWZhbWlseS5cbiAgICAgICAgLy8gRXhhbXBsZTogc21hbGwtY2FwcyBib2xkIDI0cHgvMXJlbSBcIldpbmdkaW5nc1wiXG4gICAgICAgIGNvbnN0IGZyYWdtZW50Q2FwcyA9IGRhdGEuY2FwcyA/ICdzbWFsbC1jYXBzICcgOiAnJztcbiAgICAgICAgY29uc3QgZnJhZ21lbnRXZWlnaHQgPSBkYXRhLmZvbnRXZWlnaHQ7XG4gICAgICAgIGNvbnN0IGZyYWdtZW50U2l6ZSA9IGRhdGEuZm9udFNpemU7XG4gICAgICAgIGNvbnN0IGZyYWdtZW50TGluZUhlaWdodCA9IGRhdGEubGluZUhlaWdodDtcbiAgICAgICAgY29uc3QgZnJhZ21lbnRTaXplQW5kTGluZUhlaWdodCA9IGRhdGEubGluZUhlaWdodCA/IGAke2ZyYWdtZW50U2l6ZX0vJHtmcmFnbWVudExpbmVIZWlnaHR9YCA6IGZyYWdtZW50U2l6ZTtcbiAgICAgICAgY29uc3QgZnJhZ21lbnRGYW1pbHkgPSBmb250RmFtaWx5UmVmZXJlbmNlID8gZGF0YS5mb250RmFtaWx5IDogYFxcXCIke2RhdGEuZm9udEZhbWlseX1cXFwiYDtcbiAgICAgICAgcmV0dXJuIGAke2ZyYWdtZW50Q2Fwc30ke2ZyYWdtZW50V2VpZ2h0fSAke2ZyYWdtZW50U2l6ZUFuZExpbmVIZWlnaHR9ICR7ZnJhZ21lbnRGYW1pbHl9YDtcbiAgICB9XG4gICAgc3RhdGljIGJvcmRlclN0eWxlVG9DU1MoYm9yZGVyU3R5bGUpIHtcbiAgICAgICAgc3dpdGNoIChib3JkZXJTdHlsZSkge1xuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuQm9yZGVyU3R5bGUuZGFzaGVkOlxuICAgICAgICAgICAgICAgIHJldHVybiAnZGFzaGVkJztcbiAgICAgICAgICAgIGNhc2Ugc2RrX2V4cG9ydGVyc18xLkJvcmRlclN0eWxlLmRvdHRlZDpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2RvdHRlZCc7XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5Cb3JkZXJTdHlsZS5zb2xpZDpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3NvbGlkJztcbiAgICAgICAgICAgIGNhc2Ugc2RrX2V4cG9ydGVyc18xLkJvcmRlclN0eWxlLmdyb292ZTpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2dyb292ZSc7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiAnc29saWQnO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN0YXRpYyBib3JkZXJQb3NpdGlvblRvQ1NTKGJvcmRlclBvc2l0aW9uKSB7XG4gICAgICAgIHN3aXRjaCAoYm9yZGVyUG9zaXRpb24pIHtcbiAgICAgICAgICAgIGNhc2Ugc2RrX2V4cG9ydGVyc18xLkJvcmRlclBvc2l0aW9uLmNlbnRlcjpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2NlbnRlcic7XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5Cb3JkZXJQb3NpdGlvbi5pbnNpZGU6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdpbnNpZGUnO1xuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuQm9yZGVyUG9zaXRpb24ub3V0c2lkZTpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ291dHNpZGUnO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ291dHNpZGUnO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN0YXRpYyB1bml0VG9DU1ModW5pdCkge1xuICAgICAgICBzd2l0Y2ggKHVuaXQpIHtcbiAgICAgICAgICAgIGNhc2Ugc2RrX2V4cG9ydGVyc18xLlVuaXQucGVyY2VudDpcbiAgICAgICAgICAgICAgICByZXR1cm4gJyUnO1xuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuVW5pdC5waXhlbHM6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdweCc7XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5Vbml0LnJlbTpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3JlbSc7XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5Vbml0LnJhdzpcbiAgICAgICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5Vbml0Lm1zOlxuICAgICAgICAgICAgICAgIHJldHVybiAnbXMnO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3B4JztcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGF0aWMgdGV4dENhc2VUb0NTUyh0ZXh0Q2FzZSkge1xuICAgICAgICBzd2l0Y2ggKHRleHRDYXNlKSB7XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5UZXh0Q2FzZS5vcmlnaW5hbDpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ25vbmUnO1xuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuVGV4dENhc2UudXBwZXI6XG4gICAgICAgICAgICAgICAgcmV0dXJuICd1cHBlcmNhc2UnO1xuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuVGV4dENhc2UubG93ZXI6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdsb3dlcmNhc2UnO1xuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuVGV4dENhc2UuY2FtZWw6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdjYXBpdGFsaXplJztcbiAgICAgICAgICAgIGNhc2Ugc2RrX2V4cG9ydGVyc18xLlRleHRDYXNlLnNtYWxsQ2FwczpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3NtYWxsLWNhcHMnO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN0YXRpYyB0ZXh0RGVjb3JhdGlvblRvQ1NTKHRleHREZWNvcmF0aW9uKSB7XG4gICAgICAgIHN3aXRjaCAodGV4dERlY29yYXRpb24pIHtcbiAgICAgICAgICAgIGNhc2Ugc2RrX2V4cG9ydGVyc18xLlRleHREZWNvcmF0aW9uLm9yaWdpbmFsOlxuICAgICAgICAgICAgICAgIHJldHVybiAnbm9uZSc7XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5UZXh0RGVjb3JhdGlvbi51bmRlcmxpbmU6XG4gICAgICAgICAgICAgICAgcmV0dXJuICd1bmRlcmxpbmUnO1xuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuVGV4dERlY29yYXRpb24uc3RyaWtldGhyb3VnaDpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2xpbmUtdGhyb3VnaCc7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkNTU0hlbHBlciA9IENTU0hlbHBlcjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Db2xvckhlbHBlciA9IHZvaWQgMDtcbmNvbnN0IENvbG9yRm9ybWF0XzEgPSByZXF1aXJlKFwiLi4vZW51bXMvQ29sb3JGb3JtYXRcIik7XG5jb25zdCBUb2tlbkhlbHBlcl8xID0gcmVxdWlyZShcIi4vVG9rZW5IZWxwZXJcIik7XG4vKiogQSB1dGlsaXR5IGNsYXNzIHRvIGhlbHAgd2l0aCB0cmFuc2Zvcm1hdGlvbiBvZiBjb2xvcnMgdG8gdmFyaW91cyBmb3JtYXRzICovXG5jbGFzcyBDb2xvckhlbHBlciB7XG4gICAgLyoqXG4gICAgICogQmVoYXZlcyBsaWtlIGEgbm9ybWFsIGNvbG9yIGZvcm1hdHRlci4gSG93ZXZlciwgaWYgdGhlIGNvbG9yIGlzIHJlZmVyZW5jZSwgaXQgcmV0dXJucyB0aGUgdmFyaWFibGUgbmFtZSBpbnN0ZWFkIG9mIHRoZSBmb3JtYXR0ZWQgY29sb3IuXG4gICAgICogUHJlY2lzZSBiZWhhdmlvciBpcyBhcyBmb2xsb3dzOlxuICAgICAqIC0gSWYgdGhlIGNvbG9yIGlzIGZ1bGwgcmVmZXJlbmNlLCByZXR1cm5zIHRoZSB2YXJpYWJsZSBuYW1lXG4gICAgICogLSBJZiB0aGUgY29sb3IgaXMgcGFydGlhbCByZWZlcmVuY2UsIHJldHVybnMgdGhlIGZvcm1hdHRlZCBjb2xvciB3aXRoIHJlZmVyZW5jZXMgd2hlcmUgcG9zc2libGUgYW5kIHJhdyB2YWx1ZXMgd2hlcmUgbm90XG4gICAgICogLSBPbmx5IHN1cHBvcnRlZCBwYXJ0aWFsIHJlZmVyZW5jZSBmb3JtYXRzIGFyZSByZ2IsIHJnYmEsIHNtYXJ0UmdiXG4gICAgICogLSBWYXJpYWJsZSBuYW1lcyBhcmUgZ2VuZXJhdGVkIGJ5IHRoZSBwcm92aWRlZCBmdW5jdGlvbnNcbiAgICAgKi9cbiAgICBzdGF0aWMgZm9ybWF0dGVkQ29sb3JPclZhcmlhYmxlTmFtZShjb2xvciwgYWxsVG9rZW5zLCBvcHRpb25zKSB7XG4gICAgICAgIGxldCBmdWxsUmVmZXJlbmNlTmFtZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgbGV0IGNvbG9yUmVmZXJlbmNlTmFtZSA9IG51bGw7XG4gICAgICAgIGxldCBvcGFjaXR5UmVmZXJlbmNlTmFtZSA9IG51bGw7XG4gICAgICAgIC8vIENoZWNrIHJlZmVyZW5jZXMgZmlyc3RcbiAgICAgICAgY29uc3QgZnVsbFRva2VuID0gKDAsIFRva2VuSGVscGVyXzEuc3VyZU9wdGlvbmFsUmVmZXJlbmNlKShjb2xvci5yZWZlcmVuY2VkVG9rZW5JZCwgYWxsVG9rZW5zLCBvcHRpb25zLmFsbG93UmVmZXJlbmNlcyk7XG4gICAgICAgIGlmIChmdWxsVG9rZW4pIHtcbiAgICAgICAgICAgIGZ1bGxSZWZlcmVuY2VOYW1lID0gb3B0aW9ucy50b2tlblRvVmFyaWFibGVSZWYoZnVsbFRva2VuKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbG9yVG9rZW4gPSAoMCwgVG9rZW5IZWxwZXJfMS5zdXJlT3B0aW9uYWxSZWZlcmVuY2UpKGNvbG9yLmNvbG9yLnJlZmVyZW5jZWRUb2tlbklkLCBhbGxUb2tlbnMsIG9wdGlvbnMuYWxsb3dSZWZlcmVuY2VzKTtcbiAgICAgICAgICAgIGlmIChjb2xvclRva2VuKSB7XG4gICAgICAgICAgICAgICAgY29sb3JSZWZlcmVuY2VOYW1lID0gb3B0aW9ucy50b2tlblRvVmFyaWFibGVSZWYoY29sb3JUb2tlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBvcGFjaXR5VG9rZW4gPSAoMCwgVG9rZW5IZWxwZXJfMS5zdXJlT3B0aW9uYWxSZWZlcmVuY2UpKGNvbG9yLm9wYWNpdHkucmVmZXJlbmNlZFRva2VuSWQsIGFsbFRva2Vucywgb3B0aW9ucy5hbGxvd1JlZmVyZW5jZXMpO1xuICAgICAgICAgICAgaWYgKG9wYWNpdHlUb2tlbikge1xuICAgICAgICAgICAgICAgIG9wYWNpdHlSZWZlcmVuY2VOYW1lID0gb3B0aW9ucy50b2tlblRvVmFyaWFibGVSZWYob3BhY2l0eVRva2VuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBJZiB0aGUgZnVsbCB2YWx1ZSBpcyByZWZlcmVuY2UsIHJldHVybiB0aGUgdmFyaWFibGUgbmFtZVxuICAgICAgICBpZiAoZnVsbFJlZmVyZW5jZU5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiBmdWxsUmVmZXJlbmNlTmFtZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiB0aGVyZSBhcmUgbm8gcmVmZXJlbmNlcywgZm9ybWF0IHRoZSBjb2xvciByYXdcbiAgICAgICAgaWYgKCFmdWxsUmVmZXJlbmNlTmFtZSAmJiAhY29sb3JSZWZlcmVuY2VOYW1lICYmICFvcGFjaXR5UmVmZXJlbmNlTmFtZSkge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5mb3JtYXR0ZWRDb2xvcihjb2xvciwgb3B0aW9ucy5jb2xvckZvcm1hdCwgb3B0aW9ucy5kZWNpbWFscyk7XG4gICAgICAgICAgICByZXR1cm4gb3B0aW9ucy5yYXdDb2xvclRva2VuRm9ybWF0dGVyID8gb3B0aW9ucy5yYXdDb2xvclRva2VuRm9ybWF0dGVyKHJlc3VsdCkgOiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgdGhlcmUgYXJlIHBhcnRpYWwgcmVmZXJlbmNlcywgd2UnbGwgdXNlIHRoZSByZWZlcmVuY2VzIHdoZXJlIHBvc3NpYmxlIGFuZCByZXR1cm4gdGhlIHJhdyBmb3JtYXQgZm9yIHRoZSByZXN0XG4gICAgICAgIGxldCByZXN1bHQ7XG4gICAgICAgIHN3aXRjaCAob3B0aW9ucy5jb2xvckZvcm1hdCkge1xuICAgICAgICAgICAgY2FzZSBDb2xvckZvcm1hdF8xLkNvbG9yRm9ybWF0LnJnYjpcbiAgICAgICAgICAgIGNhc2UgQ29sb3JGb3JtYXRfMS5Db2xvckZvcm1hdC5yZ2JhOlxuICAgICAgICAgICAgY2FzZSBDb2xvckZvcm1hdF8xLkNvbG9yRm9ybWF0LnNtYXJ0UmdiYTpcbiAgICAgICAgICAgICAgICByZXN1bHQgPSB0aGlzLmNvbG9yVG9SZ2Iob3B0aW9ucy5jb2xvckZvcm1hdCwgdGhpcy5ub3JtYWxpemVkSW50Q29sb3IoY29sb3IpLCBjb2xvci5vcGFjaXR5Lm1lYXN1cmUsIG9wdGlvbnMuZGVjaW1hbHMsIGNvbG9yUmVmZXJlbmNlTmFtZSwgb3BhY2l0eVJlZmVyZW5jZU5hbWUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXN1bHQgPSB0aGlzLmZvcm1hdHRlZENvbG9yKGNvbG9yLCBvcHRpb25zLmNvbG9yRm9ybWF0LCBvcHRpb25zLmRlY2ltYWxzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3B0aW9ucy5yYXdDb2xvclRva2VuRm9ybWF0dGVyID8gb3B0aW9ucy5yYXdDb2xvclRva2VuRm9ybWF0dGVyKHJlc3VsdCkgOiByZXN1bHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZvcm1hdHMgU3VwZXJub3ZhIGNvbG9yIHRva2VuIHZhbHVlIHRvIGEgc3RyaW5nIGJhc2VkIG9uIHRoZSBzZWxlY3RlZCBmb3JtYXQuIEZvciBmcmFjdGlvbmFsIGZvcm1hdHMsIHRoZSBudW1iZXIgb2YgZGVjaW1hbHMgY2FuIGJlIHNwZWNpZmllZC5cbiAgICAgKi9cbiAgICBzdGF0aWMgZm9ybWF0dGVkQ29sb3IoY29sb3IsIGZvcm1hdCwgZGVjaW1hbHMgPSAzKSB7XG4gICAgICAgIHN3aXRjaCAoZm9ybWF0KSB7XG4gICAgICAgICAgICBjYXNlIENvbG9yRm9ybWF0XzEuQ29sb3JGb3JtYXQuaGV4NjpcbiAgICAgICAgICAgIGNhc2UgQ29sb3JGb3JtYXRfMS5Db2xvckZvcm1hdC5oZXg4OlxuICAgICAgICAgICAgY2FzZSBDb2xvckZvcm1hdF8xLkNvbG9yRm9ybWF0Lmhhc2hIZXg2OlxuICAgICAgICAgICAgY2FzZSBDb2xvckZvcm1hdF8xLkNvbG9yRm9ybWF0Lmhhc2hIZXg4OlxuICAgICAgICAgICAgY2FzZSBDb2xvckZvcm1hdF8xLkNvbG9yRm9ybWF0LnNtYXJ0SGV4OlxuICAgICAgICAgICAgY2FzZSBDb2xvckZvcm1hdF8xLkNvbG9yRm9ybWF0LnNtYXJ0SGFzaEhleDpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb2xvclRvSGV4KGZvcm1hdCwgdGhpcy5ub3JtYWxpemVkSW50Q29sb3IoY29sb3IpLCBjb2xvci5vcGFjaXR5Lm1lYXN1cmUpO1xuICAgICAgICAgICAgY2FzZSBDb2xvckZvcm1hdF8xLkNvbG9yRm9ybWF0LnJnYjpcbiAgICAgICAgICAgIGNhc2UgQ29sb3JGb3JtYXRfMS5Db2xvckZvcm1hdC5yZ2JhOlxuICAgICAgICAgICAgY2FzZSBDb2xvckZvcm1hdF8xLkNvbG9yRm9ybWF0LnNtYXJ0UmdiYTpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb2xvclRvUmdiKGZvcm1hdCwgdGhpcy5ub3JtYWxpemVkSW50Q29sb3IoY29sb3IpLCBjb2xvci5vcGFjaXR5Lm1lYXN1cmUsIGRlY2ltYWxzLCBudWxsLCBudWxsKTtcbiAgICAgICAgICAgIGNhc2UgQ29sb3JGb3JtYXRfMS5Db2xvckZvcm1hdC5oc2w6XG4gICAgICAgICAgICBjYXNlIENvbG9yRm9ybWF0XzEuQ29sb3JGb3JtYXQuaHNsYTpcbiAgICAgICAgICAgIGNhc2UgQ29sb3JGb3JtYXRfMS5Db2xvckZvcm1hdC5zbWFydEhzbGE6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29sb3JUb0hzbChmb3JtYXQsIHRoaXMubm9ybWFsaXplZEZyYWN0aW9uYWxDb2xvcihjb2xvciksIGNvbG9yLm9wYWNpdHkubWVhc3VyZSwgZGVjaW1hbHMpO1xuICAgICAgICAgICAgY2FzZSBDb2xvckZvcm1hdF8xLkNvbG9yRm9ybWF0LnNtYXJ0VUlDb2xvcjpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb2xvclRvVUlDb2xvcih0aGlzLm5vcm1hbGl6ZWRJbnRDb2xvcihjb2xvciksIGNvbG9yLm9wYWNpdHkubWVhc3VyZSwgZGVjaW1hbHMpO1xuICAgICAgICAgICAgY2FzZSBDb2xvckZvcm1hdF8xLkNvbG9yRm9ybWF0Lm9rbGNoOlxuICAgICAgICAgICAgY2FzZSBDb2xvckZvcm1hdF8xLkNvbG9yRm9ybWF0Lm9rbGNoYTpcbiAgICAgICAgICAgIGNhc2UgQ29sb3JGb3JtYXRfMS5Db2xvckZvcm1hdC5zbWFydE9rbGNoOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbG9yVG9Pa2xjaChmb3JtYXQsIHRoaXMubm9ybWFsaXplZEludENvbG9yKGNvbG9yKSwgY29sb3Iub3BhY2l0eS5tZWFzdXJlLCBkZWNpbWFscyk7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbG9yVG9IZXgoQ29sb3JGb3JtYXRfMS5Db2xvckZvcm1hdC5zbWFydEhhc2hIZXgsIHRoaXMubm9ybWFsaXplZEludENvbG9yKGNvbG9yKSwgY29sb3Iub3BhY2l0eS5tZWFzdXJlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBDb252ZXJ0IGNvbG9yIHRvIHJnYlxuICAgIHN0YXRpYyBjb2xvclRvUmdiKGZvcm1hdCwgY29sb3IsIGFscGhhLCBkZWNpbWFscywgY29sb3JSZWZSZXBsYWNlLCBvcGFjaXR5UmVmUmVwbGFjZSkge1xuICAgICAgICBsZXQgcmVzdWx0aW5nUmdiO1xuICAgICAgICBpZiAoZm9ybWF0ID09PSBDb2xvckZvcm1hdF8xLkNvbG9yRm9ybWF0LnJnYmEgfHwgKGZvcm1hdCA9PT0gQ29sb3JGb3JtYXRfMS5Db2xvckZvcm1hdC5zbWFydFJnYmEgJiYgYWxwaGEgPCAxKSkge1xuICAgICAgICAgICAgcmVzdWx0aW5nUmdiID0gYHJnYmEoJHtjb2xvclJlZlJlcGxhY2UgPyBjb2xvclJlZlJlcGxhY2UgOiBgJHtjb2xvci5yfSwgJHtjb2xvci5nfSwgJHtjb2xvci5ifWB9LCAke29wYWNpdHlSZWZSZXBsYWNlID8gb3BhY2l0eVJlZlJlcGxhY2UgOiB0aGlzLnJvdW5kVG9EZWNpbWFscyhhbHBoYSwgZGVjaW1hbHMpfSlgO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0aW5nUmdiID0gYHJnYigke2NvbG9yUmVmUmVwbGFjZSA/IGNvbG9yUmVmUmVwbGFjZSA6IGAke2NvbG9yLnJ9LCAke2NvbG9yLmd9LCAke2NvbG9yLmJ9YH0pYDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0aW5nUmdiO1xuICAgIH1cbiAgICAvLyBDb252ZXJ0IGNvbG9yIHRvIGhleFxuICAgIHN0YXRpYyBjb2xvclRvSGV4KGZvcm1hdCwgY29sb3IsIGFscGhhKSB7XG4gICAgICAgIC8vIEFsd2F5cyBuZWVkIGhleDZcbiAgICAgICAgbGV0IHJlc3VsdGluZ0hleCA9IGAke3RoaXMucEhleChjb2xvci5yKX0ke3RoaXMucEhleChjb2xvci5nKX0ke3RoaXMucEhleChjb2xvci5iKX1gO1xuICAgICAgICBpZiAoZm9ybWF0ID09PSBDb2xvckZvcm1hdF8xLkNvbG9yRm9ybWF0LmhleDggfHxcbiAgICAgICAgICAgIGZvcm1hdCA9PT0gQ29sb3JGb3JtYXRfMS5Db2xvckZvcm1hdC5oYXNoSGV4OCB8fFxuICAgICAgICAgICAgKGZvcm1hdCA9PT0gQ29sb3JGb3JtYXRfMS5Db2xvckZvcm1hdC5zbWFydEhleCAmJiBhbHBoYSA8IDEpIHx8XG4gICAgICAgICAgICAoZm9ybWF0ID09PSBDb2xvckZvcm1hdF8xLkNvbG9yRm9ybWF0LnNtYXJ0SGFzaEhleCAmJiBhbHBoYSA8IDEpKSB7XG4gICAgICAgICAgICAvLyBBZGQgYWxwaGEgZm9yIDgtZm9ybWF0XG4gICAgICAgICAgICByZXN1bHRpbmdIZXggKz0gYCR7dGhpcy5wSGV4KE1hdGgucm91bmQoYWxwaGEgKiAyNTUpKX1gO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmb3JtYXQgPT09IENvbG9yRm9ybWF0XzEuQ29sb3JGb3JtYXQuaGFzaEhleDYgfHwgZm9ybWF0ID09PSBDb2xvckZvcm1hdF8xLkNvbG9yRm9ybWF0Lmhhc2hIZXg4IHx8IGZvcm1hdCA9PT0gQ29sb3JGb3JtYXRfMS5Db2xvckZvcm1hdC5zbWFydEhhc2hIZXgpIHtcbiAgICAgICAgICAgIC8vIEFkZCBoYXNoIGZvciBoYXNoLWZvcm1hdFxuICAgICAgICAgICAgcmVzdWx0aW5nSGV4ID0gYCMke3Jlc3VsdGluZ0hleH1gO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHRpbmdIZXg7XG4gICAgfVxuICAgIC8vIENvbnZlcnQgY29sb3IgdG8gSFNMXG4gICAgc3RhdGljIGNvbG9yVG9Ic2woZm9ybWF0LCBjb2xvciwgYWxwaGEsIGRlY2ltYWxzKSB7XG4gICAgICAgIC8vIENhbGN1bGF0ZSBIU0wgdmFsdWVzXG4gICAgICAgIGNvbnN0IG1heCA9IE1hdGgubWF4KGNvbG9yLnIsIGNvbG9yLmcsIGNvbG9yLmIpO1xuICAgICAgICBjb25zdCBtaW4gPSBNYXRoLm1pbihjb2xvci5yLCBjb2xvci5nLCBjb2xvci5iKTtcbiAgICAgICAgbGV0IGggPSAwO1xuICAgICAgICBsZXQgcyA9IDA7XG4gICAgICAgIGxldCBsID0gKG1heCArIG1pbikgLyAyO1xuICAgICAgICBpZiAobWF4ID09PSBtaW4pIHtcbiAgICAgICAgICAgIGggPSBzID0gMDsgLy8gYWNocm9tYXRpY1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgZGVsdGEgPSBtYXggLSBtaW47XG4gICAgICAgICAgICBzID0gbCA+IDAuNSA/IGRlbHRhIC8gKDIgLSBtYXggLSBtaW4pIDogZGVsdGEgLyAobWF4ICsgbWluKTtcbiAgICAgICAgICAgIHN3aXRjaCAobWF4KSB7XG4gICAgICAgICAgICAgICAgY2FzZSBjb2xvci5yOlxuICAgICAgICAgICAgICAgICAgICBoID0gKGNvbG9yLmcgLSBjb2xvci5iKSAvIGRlbHRhICsgKGNvbG9yLmcgPCBjb2xvci5iID8gNiA6IDApO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIGNvbG9yLmc6XG4gICAgICAgICAgICAgICAgICAgIGggPSAoY29sb3IuYiAtIGNvbG9yLnIpIC8gZGVsdGEgKyAyO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIGNvbG9yLmI6XG4gICAgICAgICAgICAgICAgICAgIGggPSAoY29sb3IuciAtIGNvbG9yLmcpIC8gZGVsdGEgKyA0O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGggLz0gNjtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcmVzdWx0aW5nSHNsO1xuICAgICAgICBpZiAoZm9ybWF0ID09PSBDb2xvckZvcm1hdF8xLkNvbG9yRm9ybWF0LmhzbGEgfHwgKGZvcm1hdCA9PT0gQ29sb3JGb3JtYXRfMS5Db2xvckZvcm1hdC5zbWFydEhzbGEgJiYgYWxwaGEgPCAxKSkge1xuICAgICAgICAgICAgcmVzdWx0aW5nSHNsID0gYGhzbGEoJHtNYXRoLnJvdW5kKGggKiAzNjApfSUsICR7TWF0aC5yb3VuZChzICogMTAwKX0lLCAke01hdGgucm91bmQobCAqIDEwMCl9JSwgJHt0aGlzLnJvdW5kVG9EZWNpbWFscyhhbHBoYSwgZGVjaW1hbHMpfSlgO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0aW5nSHNsID0gYGhzbCgke01hdGgucm91bmQoaCAqIDM2MCl9JSwgJHtNYXRoLnJvdW5kKHMgKiAxMDApfSUsICR7TWF0aC5yb3VuZChsICogMTAwKX0lKWA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdGluZ0hzbDtcbiAgICB9XG4gICAgLy8gQ29udmVydCBjb2xvciB0byBVSUNvbG9yIHVzaW5nIGJhc2UgY29uc3RydWN0b3JcbiAgICBzdGF0aWMgY29sb3JUb1VJQ29sb3IoY29sb3IsIGFscGhhLCBkZWNpbWFscyA9IDMpIHtcbiAgICAgICAgbGV0IHJlc3VsdGluZ1VJQ29sb3IgPSBgVUlDb2xvcihyZ2I6IDB4JHt0aGlzLnBIZXgoY29sb3Iucil9JHt0aGlzLnBIZXgoY29sb3IuZyl9JHt0aGlzLnBIZXgoY29sb3IuYil9KWA7XG4gICAgICAgIGlmIChhbHBoYSA8IDEpIHtcbiAgICAgICAgICAgIHJlc3VsdGluZ1VJQ29sb3IgKz0gYC53aXRoQWxwaGFDb21wb25lbnQoJHthbHBoYX0pYDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0aW5nVUlDb2xvcjtcbiAgICB9XG4gICAgLy8gQ29udmVydCBjb2xvciB0byBub3JtYWxpemVkIDAtMjU1IGZvcm1hdFxuICAgIHN0YXRpYyBub3JtYWxpemVkSW50Q29sb3IoY29sb3IpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHI6IE1hdGgucm91bmQoY29sb3IuY29sb3IuciksXG4gICAgICAgICAgICBnOiBNYXRoLnJvdW5kKGNvbG9yLmNvbG9yLmcpLFxuICAgICAgICAgICAgYjogTWF0aC5yb3VuZChjb2xvci5jb2xvci5iKVxuICAgICAgICB9O1xuICAgIH1cbiAgICAvLyBDb252ZXJ0IGNvbG9yIHRvIG5vcm1hbGl6ZWQgMC0xIGZvcm1hdFxuICAgIHN0YXRpYyBub3JtYWxpemVkRnJhY3Rpb25hbENvbG9yKGNvbG9yLCBkZWNpbWFscyA9IDMpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHI6IHRoaXMucm91bmRUb0RlY2ltYWxzKGNvbG9yLmNvbG9yLnIgLyAyNTUsIGRlY2ltYWxzKSxcbiAgICAgICAgICAgIGc6IENvbG9ySGVscGVyLnJvdW5kVG9EZWNpbWFscyhjb2xvci5jb2xvci5nIC8gMjU1LCBkZWNpbWFscyksXG4gICAgICAgICAgICBiOiBDb2xvckhlbHBlci5yb3VuZFRvRGVjaW1hbHMoY29sb3IuY29sb3IuYiAvIDI1NSwgZGVjaW1hbHMpXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8vIFJvdW5kIGhhbGYgYXdheSBmcm9tIHplcm8gdG8gYSBzcGVjaWZpYyBudW1iZXIgb2YgZGVjaW1hbHNcbiAgICBzdGF0aWMgcm91bmRUb0RlY2ltYWxzKHZhbHVlLCBkZWNpbWFscywgZm9yY2VUcmFpbGluZ1plcm8gPSBmYWxzZSkge1xuICAgICAgICBjb25zdCBtdWx0aXBsaWVyID0gTWF0aC5wb3coMTAsIGRlY2ltYWxzKTtcbiAgICAgICAgY29uc3Qgcm91bmRlZCA9IE1hdGgucm91bmQodmFsdWUgKiBtdWx0aXBsaWVyKSAvIG11bHRpcGxpZXI7XG4gICAgICAgIGlmIChmb3JjZVRyYWlsaW5nWmVybykge1xuICAgICAgICAgICAgLy8gQ29udmVydCB0byBzdHJpbmcgd2l0aCBmaXhlZCBkZWNpbWFscyBhbmQgcGFyc2UgYmFjayB0byBudW1iZXJcbiAgICAgICAgICAgIHJldHVybiBOdW1iZXIocm91bmRlZC50b0ZpeGVkKGRlY2ltYWxzKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ29udmVydCB0byBzdHJpbmcgYW5kIHBhcnNlIGJhY2sgdG8gbnVtYmVyIHRvIHJlbW92ZSB1bm5lY2Vzc2FyeSB0cmFpbGluZyB6ZXJvZXNcbiAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQocm91bmRlZC50b0ZpeGVkKGRlY2ltYWxzKSk7XG4gICAgfVxuICAgIC8vIFJldHVybiBoZXggdmFsdWUgd2l0aCBsZWFkaW5nIHplcm8gaWYgaGV4IGlzIHNpbmdsZSBkaWdpdFxuICAgIHN0YXRpYyBwSGV4KHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZS50b1N0cmluZygxNikucGFkU3RhcnQoMiwgXCIwXCIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0IGNvbG9yIHRvIE9LTENIIGZvcm1hdFxuICAgICAqIEhhbmRsZXMgdGhyZWUgZm9ybWF0czpcbiAgICAgKiAtIG9rbGNoOiBBbHdheXMgd2l0aG91dCBhbHBoYVxuICAgICAqIC0gb2tsY2hhOiBBbHdheXMgd2l0aCBhbHBoYVxuICAgICAqIC0gc21hcnRPa2xjaDogV2l0aCBhbHBoYSBvbmx5IHdoZW4gYWxwaGEgPCAxXG4gICAgICovXG4gICAgc3RhdGljIGNvbG9yVG9Pa2xjaChmb3JtYXQsIGNvbG9yLCBhbHBoYSwgZGVjaW1hbHMpIHtcbiAgICAgICAgLy8gQ29udmVydCBSR0IgdG8gT0tMQ0hcbiAgICAgICAgY29uc3QgeyBsLCBjLCBoIH0gPSB0aGlzLnJnYlRvT2tsY2goY29sb3IuciwgY29sb3IuZywgY29sb3IuYik7XG4gICAgICAgIC8vIEZvcm1hdCB0aGUgb3V0cHV0IHN0cmluZyBiYXNlZCBvbiBmb3JtYXQgYW5kIGFscGhhXG4gICAgICAgIHN3aXRjaCAoZm9ybWF0KSB7XG4gICAgICAgICAgICBjYXNlIENvbG9yRm9ybWF0XzEuQ29sb3JGb3JtYXQub2tsY2hhOlxuICAgICAgICAgICAgICAgIHJldHVybiBgb2tsY2goJHtsfSUgJHtjfSAke2h9IC8gJHt0aGlzLnJvdW5kVG9EZWNpbWFscyhhbHBoYSAqIDEwMCwgZGVjaW1hbHMpfSUpYDtcbiAgICAgICAgICAgIGNhc2UgQ29sb3JGb3JtYXRfMS5Db2xvckZvcm1hdC5zbWFydE9rbGNoOlxuICAgICAgICAgICAgICAgIHJldHVybiBhbHBoYSA8IDFcbiAgICAgICAgICAgICAgICAgICAgPyBgb2tsY2goJHtsfSUgJHtjfSAke2h9IC8gJHt0aGlzLnJvdW5kVG9EZWNpbWFscyhhbHBoYSAqIDEwMCwgZGVjaW1hbHMpfSUpYFxuICAgICAgICAgICAgICAgICAgICA6IGBva2xjaCgke2x9JSAke2N9ICR7aH0pYDtcbiAgICAgICAgICAgIGNhc2UgQ29sb3JGb3JtYXRfMS5Db2xvckZvcm1hdC5va2xjaDpcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGBva2xjaCgke2x9JSAke2N9ICR7aH0pYDtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0IFJHQiAoMC0yNTUpIHRvIE9LTENIXG4gICAgICogUmV0dXJucyBsaWdodG5lc3MgKDAtMTAwKSwgY2hyb21hICgwLTAuNCksIGFuZCBodWUgKDAtMzYwKVxuICAgICAqL1xuICAgIHN0YXRpYyByZ2JUb09rbGNoKHIsIGcsIGIpIHtcbiAgICAgICAgLy8gRmlyc3QgY29udmVydCBSR0IgKDAtMjU1KSB0byBsaW5lYXIgUkdCICgwLTEpXG4gICAgICAgIGNvbnN0IGxyID0gdGhpcy5zUkdCdG9MaW5lYXIociAvIDI1NSk7XG4gICAgICAgIGNvbnN0IGxnID0gdGhpcy5zUkdCdG9MaW5lYXIoZyAvIDI1NSk7XG4gICAgICAgIGNvbnN0IGxiID0gdGhpcy5zUkdCdG9MaW5lYXIoYiAvIDI1NSk7XG4gICAgICAgIC8vIENvbnZlcnQgdG8gWFlaIHVzaW5nIEQ2NSBpbGx1bWluYW50XG4gICAgICAgIGNvbnN0IHggPSAwLjQxMjQ1NjQgKiBsciArIDAuMzU3NTc2MSAqIGxnICsgMC4xODA0Mzc1ICogbGI7XG4gICAgICAgIGNvbnN0IHkgPSAwLjIxMjY3MjkgKiBsciArIDAuNzE1MTUyMiAqIGxnICsgMC4wNzIxNzUwICogbGI7XG4gICAgICAgIGNvbnN0IHogPSAwLjAxOTMzMzkgKiBsciArIDAuMTE5MTkyMCAqIGxnICsgMC45NTAzMDQxICogbGI7XG4gICAgICAgIC8vIENvbnZlcnQgdG8gTE1TXG4gICAgICAgIGNvbnN0IGxtc19sID0gMC44MTg5MzMwMTAxICogeCArIDAuMzYxODY2NzQyNCAqIHkgLSAwLjEyODg1OTcxMzcgKiB6O1xuICAgICAgICBjb25zdCBsbXNfbSA9IDAuMDMyOTg0NTQzNiAqIHggKyAwLjkyOTMxMTg3MTUgKiB5ICsgMC4wMzYxNDU2Mzg3ICogejtcbiAgICAgICAgY29uc3QgbG1zX3MgPSAwLjA0ODIwMDMwMTggKiB4ICsgMC4yNjQzNjYyNjkxICogeSArIDAuNjMzODUxNzA3MCAqIHo7XG4gICAgICAgIC8vIE5vbi1saW5lYXIgY29tcHJlc3Npb25cbiAgICAgICAgY29uc3QgbHAgPSBNYXRoLmNicnQobG1zX2wpO1xuICAgICAgICBjb25zdCBtcCA9IE1hdGguY2JydChsbXNfbSk7XG4gICAgICAgIGNvbnN0IHNwID0gTWF0aC5jYnJ0KGxtc19zKTtcbiAgICAgICAgLy8gQ29udmVydCB0byBMYWInXG4gICAgICAgIGNvbnN0IEwgPSAwLjIxMDQ1NDI1NTMgKiBscCArIDAuNzkzNjE3Nzg1MCAqIG1wIC0gMC4wMDQwNzIwNDY4ICogc3A7XG4gICAgICAgIGNvbnN0IGxhYl9hID0gMS45Nzc5OTg0OTUxICogbHAgLSAyLjQyODU5MjIwNTAgKiBtcCArIDAuNDUwNTkzNzA5OSAqIHNwO1xuICAgICAgICBjb25zdCBsYWJfYiA9IDAuMDI1OTA0MDM3MSAqIGxwICsgMC43ODI3NzE3NjYyICogbXAgLSAwLjgwODY3NTc2NjAgKiBzcDtcbiAgICAgICAgLy8gQ29udmVydCB0byBMQ0hcbiAgICAgICAgY29uc3QgQyA9IE1hdGguc3FydChsYWJfYSAqIGxhYl9hICsgbGFiX2IgKiBsYWJfYik7XG4gICAgICAgIGxldCBoID0gTWF0aC5hdGFuMihsYWJfYiwgbGFiX2EpICogMTgwIC8gTWF0aC5QSTtcbiAgICAgICAgLy8gTm9ybWFsaXplIGh1ZSB0byAwLTM2MFxuICAgICAgICBpZiAoaCA8IDApIHtcbiAgICAgICAgICAgIGggKz0gMzYwO1xuICAgICAgICB9XG4gICAgICAgIC8vIENvbnZlcnQgTCB0byBwZXJjZW50YWdlIGFuZCByb3VuZCB2YWx1ZXNcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGw6IHRoaXMucm91bmRUb0RlY2ltYWxzKEwgKiAxMDAsIDIpLFxuICAgICAgICAgICAgYzogdGhpcy5yb3VuZFRvRGVjaW1hbHMoQywgMywgdHJ1ZSksXG4gICAgICAgICAgICBoOiB0aGlzLnJvdW5kVG9EZWNpbWFscyhoLCAyKVxuICAgICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0IHNSR0IgdG8gbGluZWFyIFJHQlxuICAgICAqL1xuICAgIHN0YXRpYyBzUkdCdG9MaW5lYXIoeCkge1xuICAgICAgICByZXR1cm4geCA8PSAwLjA0MDQ1XG4gICAgICAgICAgICA/IHggLyAxMi45MlxuICAgICAgICAgICAgOiBNYXRoLnBvdygoeCArIDAuMDU1KSAvIDEuMDU1LCAyLjQpO1xuICAgIH1cbn1cbmV4cG9ydHMuQ29sb3JIZWxwZXIgPSBDb2xvckhlbHBlcjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5GaWxlSGVscGVyID0gdm9pZCAwO1xuY29uc3Qgc2RrX2V4cG9ydGVyc18xID0gcmVxdWlyZShcIkBzdXBlcm5vdmFpby9zZGstZXhwb3J0ZXJzXCIpO1xuLyoqIEEgdXRpbGl0eSBjbGFzcyB0byBoZWxwIHdpdGggY3JlYXRpb24gb2YgZmlsZXMgZm9yIFN1cGVybm92YSBleHBvcnQgcm91dGluZXMgKi9cbmNsYXNzIEZpbGVIZWxwZXIge1xuICAgIC8qKiBDcmVhdGVzIGEgbmV3IGZpbGUgdGhhdCB3aWxsIGNvcHkgaXRzIGNvbnRlbnQgZnJvbSBhIHJlbW90ZSBVUkwgdG8gYSBzcGVjaWZpZWQgZGVzdGluYXRpb24gKHBhdGggKyBuYW1lKSAqL1xuICAgIHN0YXRpYyBjcmVhdGVDb3B5UmVtb3RlRmlsZSh7IHJlbGF0aXZlUGF0aCwgZmlsZU5hbWUsIHVybCB9KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBwYXRoOiByZWxhdGl2ZVBhdGgsXG4gICAgICAgICAgICBuYW1lOiBmaWxlTmFtZSxcbiAgICAgICAgICAgIHR5cGU6IHNka19leHBvcnRlcnNfMS5PdXRwdXRGaWxlVHlwZS5jb3B5UmVtb3RlVXJsLFxuICAgICAgICAgICAgdXJsOiB1cmxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLyoqIENyZWF0ZXMgYSBuZXcgZmlsZSB0aGF0IHdyaXRlIGl0cyBjb250ZW50IHRvIGEgc3BlY2lmaWVkIGRlc3RpbmF0aW9uIChwYXRoICsgbmFtZSkgKi9cbiAgICBzdGF0aWMgY3JlYXRlVGV4dEZpbGUoeyByZWxhdGl2ZVBhdGgsIGZpbGVOYW1lLCBjb250ZW50IH0pIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHBhdGg6IHJlbGF0aXZlUGF0aCxcbiAgICAgICAgICAgIG5hbWU6IGZpbGVOYW1lLFxuICAgICAgICAgICAgdHlwZTogc2RrX2V4cG9ydGVyc18xLk91dHB1dEZpbGVUeXBlLnRleHQsXG4gICAgICAgICAgICBjb250ZW50OiBjb250ZW50XG4gICAgICAgIH07XG4gICAgfVxuICAgIC8qKiBDcmVhdGVzIGEgbmV3IGZpbGUgdGhhdCB3cml0ZSBpdHMgY29udGVudCB0byBhIHNwZWNpZmllZCBkZXN0aW5hdGlvbiAocGF0aCArIG5hbWUpICovXG4gICAgc3RhdGljIGNyZWF0ZUJpbmFyeUZpbGUoeyByZWxhdGl2ZVBhdGgsIGZpbGVOYW1lLCBkYXRhIH0pIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHBhdGg6IHJlbGF0aXZlUGF0aCxcbiAgICAgICAgICAgIG5hbWU6IGZpbGVOYW1lLFxuICAgICAgICAgICAgdHlwZTogc2RrX2V4cG9ydGVyc18xLk91dHB1dEZpbGVUeXBlLmJpbmFyeSxcbiAgICAgICAgICAgIGRhdGE6IGRhdGFcbiAgICAgICAgfTtcbiAgICB9XG59XG5leHBvcnRzLkZpbGVIZWxwZXIgPSBGaWxlSGVscGVyO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkZpbGVOYW1lSGVscGVyID0gdm9pZCAwO1xuY29uc3QgU3RyaW5nQ2FzZV8xID0gcmVxdWlyZShcIi4uL2VudW1zL1N0cmluZ0Nhc2VcIik7XG5jb25zdCBOYW1pbmdIZWxwZXJfMSA9IHJlcXVpcmUoXCIuL05hbWluZ0hlbHBlclwiKTtcbmNsYXNzIEZpbGVOYW1lSGVscGVyIHtcbiAgICAvKipcbiAgICAgKiBFbnN1cmVzIGEgZmlsZW5hbWUgaGFzIHRoZSBjb3JyZWN0IGV4dGVuc2lvblxuICAgICAqL1xuICAgIHN0YXRpYyBlbnN1cmVGaWxlRXh0ZW5zaW9uKGZpbGVOYW1lLCBleHRlbnNpb24pIHtcbiAgICAgICAgLy8gRW5zdXJlIGV4dGVuc2lvbiBzdGFydHMgd2l0aCBhIGRvdFxuICAgICAgICBjb25zdCBub3JtYWxpemVkRXh0ZW5zaW9uID0gZXh0ZW5zaW9uLnN0YXJ0c1dpdGgoXCIuXCIpID8gZXh0ZW5zaW9uIDogYC4ke2V4dGVuc2lvbn1gO1xuICAgICAgICBpZiAoIWZpbGVOYW1lLnRvTG93ZXJDYXNlKCkuZW5kc1dpdGgobm9ybWFsaXplZEV4dGVuc2lvbi50b0xvd2VyQ2FzZSgpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZpbGVOYW1lICsgbm9ybWFsaXplZEV4dGVuc2lvbjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmlsZU5hbWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlcGxhY2VzIGZpbGUgZXh0ZW5zaW9uXG4gICAgICovXG4gICAgc3RhdGljIHJlcGxhY2VGaWxlRXh0ZW5zaW9uKGZpbGVOYW1lLCBvbGRFeHQsIG5ld0V4dCkge1xuICAgICAgICAvLyBFbnN1cmUgZXh0ZW5zaW9ucyBzdGFydCB3aXRoIGEgZG90XG4gICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRPbGRFeHQgPSBvbGRFeHQuc3RhcnRzV2l0aChcIi5cIikgPyBvbGRFeHQgOiBgLiR7b2xkRXh0fWA7XG4gICAgICAgIGNvbnN0IG5vcm1hbGl6ZWROZXdFeHQgPSBuZXdFeHQuc3RhcnRzV2l0aChcIi5cIikgPyBuZXdFeHQgOiBgLiR7bmV3RXh0fWA7XG4gICAgICAgIHJldHVybiBmaWxlTmFtZS5yZXBsYWNlKG5ldyBSZWdFeHAoYCR7bm9ybWFsaXplZE9sZEV4dH0kYCksIG5vcm1hbGl6ZWROZXdFeHQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBkZWZhdWx0IHN0eWxlIGZpbGUgbmFtZSBmb3IgYSB0b2tlbiB0eXBlXG4gICAgICovXG4gICAgc3RhdGljIGdldERlZmF1bHRTdHlsZUZpbGVOYW1lKHR5cGUsIGV4dGVuc2lvbiA9IFwiLmNzc1wiLCBzdHJpbmdDYXNlID0gU3RyaW5nQ2FzZV8xLlN0cmluZ0Nhc2Uua2ViYWJDYXNlKSB7XG4gICAgICAgIGNvbnN0IGJhc2VOYW1lcyA9IHtcbiAgICAgICAgICAgIENvbG9yOiBcImNvbG9yXCIsXG4gICAgICAgICAgICBUeXBvZ3JhcGh5OiBcInR5cG9ncmFwaHlcIixcbiAgICAgICAgICAgIERpbWVuc2lvbjogXCJkaW1lbnNpb25cIixcbiAgICAgICAgICAgIFNpemU6IFwic2l6ZVwiLFxuICAgICAgICAgICAgU3BhY2U6IFwic3BhY2VcIixcbiAgICAgICAgICAgIE9wYWNpdHk6IFwib3BhY2l0eVwiLFxuICAgICAgICAgICAgRm9udFNpemU6IFwiZm9udC1zaXplXCIsXG4gICAgICAgICAgICBMaW5lSGVpZ2h0OiBcImxpbmUtaGVpZ2h0XCIsXG4gICAgICAgICAgICBMZXR0ZXJTcGFjaW5nOiBcImxldHRlci1zcGFjaW5nXCIsXG4gICAgICAgICAgICBQYXJhZ3JhcGhTcGFjaW5nOiBcInBhcmFncmFwaC1zcGFjaW5nXCIsXG4gICAgICAgICAgICBCb3JkZXJXaWR0aDogXCJib3JkZXItd2lkdGhcIixcbiAgICAgICAgICAgIEJvcmRlclJhZGl1czogXCJib3JkZXItcmFkaXVzXCIsXG4gICAgICAgICAgICBEdXJhdGlvbjogXCJkdXJhdGlvblwiLFxuICAgICAgICAgICAgWkluZGV4OiBcInotaW5kZXhcIixcbiAgICAgICAgICAgIFNoYWRvdzogXCJzaGFkb3dcIixcbiAgICAgICAgICAgIEJvcmRlcjogXCJib3JkZXJcIixcbiAgICAgICAgICAgIEdyYWRpZW50OiBcImdyYWRpZW50XCIsXG4gICAgICAgICAgICBTdHJpbmc6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICBQcm9kdWN0Q29weTogXCJwcm9kdWN0LWNvcHlcIixcbiAgICAgICAgICAgIEZvbnRGYW1pbHk6IFwiZm9udC1mYW1pbHlcIixcbiAgICAgICAgICAgIEZvbnRXZWlnaHQ6IFwiZm9udC13ZWlnaHRcIixcbiAgICAgICAgICAgIFRleHRDYXNlOiBcInRleHQtY2FzZVwiLFxuICAgICAgICAgICAgVGV4dERlY29yYXRpb246IFwidGV4dC1kZWNvcmF0aW9uXCIsXG4gICAgICAgICAgICBWaXNpYmlsaXR5OiBcInZpc2liaWxpdHlcIixcbiAgICAgICAgICAgIEJsdXI6IFwiYmx1clwiXG4gICAgICAgIH07XG4gICAgICAgIC8vIEVuc3VyZSB0aGUgZXh0ZW5zaW9uIHN0YXJ0cyB3aXRoIGEgZG90XG4gICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRFeHRlbnNpb24gPSBleHRlbnNpb24uc3RhcnRzV2l0aChcIi5cIikgPyBleHRlbnNpb24gOiBgLiR7ZXh0ZW5zaW9ufWA7XG4gICAgICAgIHJldHVybiBOYW1pbmdIZWxwZXJfMS5OYW1pbmdIZWxwZXIuY29kZVNhZmVWYXJpYWJsZU5hbWUoYmFzZU5hbWVzW3R5cGVdLCBzdHJpbmdDYXNlKSArIG5vcm1hbGl6ZWRFeHRlbnNpb247XG4gICAgfVxufVxuZXhwb3J0cy5GaWxlTmFtZUhlbHBlciA9IEZpbGVOYW1lSGVscGVyO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkdlbmVyYWxIZWxwZXIgPSB2b2lkIDA7XG5jbGFzcyBHZW5lcmFsSGVscGVyIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGluZGVudGF0aW9uIHN0cmluZyBiYXNlZCBvbiB0aGUgbnVtYmVyIG9mIGxldmVscyBhbmQgdHlwZVxuICAgICAqIEBwYXJhbSBzcGFjZXMgLSBOdW1iZXIgb2Ygc3BhY2VzIHBlciBsZXZlbCAoZGVmYXVsdDogMilcbiAgICAgKiBAcmV0dXJucyBJbmRlbnRhdGlvbiBzdHJpbmdcbiAgICAgKi9cbiAgICBzdGF0aWMgaW5kZW50KHNwYWNlcyA9IDIpIHtcbiAgICAgICAgcmV0dXJuICcgJy5yZXBlYXQoTWF0aC5tYXgoMCwgc3BhY2VzKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZvcm1hdHMgYSBkaXNjbGFpbWVyIHRleHQgaW50byBhIEpTRG9jIGNvbW1lbnQgYmxvY2tcbiAgICAgKiBAcGFyYW0gZGlzY2xhaW1lciAtIFRoZSBkaXNjbGFpbWVyIHRleHQgdG8gZm9ybWF0XG4gICAgICogQHBhcmFtIGNvbnRlbnQgLSBUaGUgY29udGVudCB0byBhcHBlbmQgYWZ0ZXIgdGhlIGRpc2NsYWltZXJcbiAgICAgKiBAcmV0dXJucyBGb3JtYXR0ZWQgc3RyaW5nIHdpdGggZGlzY2xhaW1lciBjb21tZW50IGFuZCBjb250ZW50XG4gICAgICovXG4gICAgc3RhdGljIGFkZERpc2NsYWltZXIoZGlzY2xhaW1lciwgY29udGVudCkge1xuICAgICAgICBpZiAoIWRpc2NsYWltZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBjb250ZW50O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGZvcm1hdHRlZERpc2NsYWltZXIgPSBkaXNjbGFpbWVyLnJlcGxhY2UoL1xcbi9nLCAnXFxuICogJyk7XG4gICAgICAgIHJldHVybiBgLyoqXFxuICogJHtmb3JtYXR0ZWREaXNjbGFpbWVyfSBcXG4gKi9cXG5cXG4ke2NvbnRlbnR9YDtcbiAgICB9XG59XG5leHBvcnRzLkdlbmVyYWxIZWxwZXIgPSBHZW5lcmFsSGVscGVyO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLktvdGxpbkhlbHBlciA9IGV4cG9ydHMuSW1wb3J0Q29sbGVjdG9yID0gZXhwb3J0cy5JbXBvcnRGbGFnID0gdm9pZCAwO1xuY29uc3Qgc2RrX2V4cG9ydGVyc18xID0gcmVxdWlyZShcIkBzdXBlcm5vdmFpby9zZGstZXhwb3J0ZXJzXCIpO1xuY29uc3QgQ29sb3JIZWxwZXJfMSA9IHJlcXVpcmUoXCIuL0NvbG9ySGVscGVyXCIpO1xuY29uc3QgVG9rZW5IZWxwZXJfMSA9IHJlcXVpcmUoXCIuL1Rva2VuSGVscGVyXCIpO1xuY29uc3QgR2VuZXJhbEhlbHBlcl8xID0gcmVxdWlyZShcIi4vR2VuZXJhbEhlbHBlclwiKTtcbi8vIC0tLSAtLS0gLS0tIC0tLSAtLS0gLS0tIC0tLSAtLS0gLS0tIC0tLSAtLS0gLS0tIC0tLSAtLS0gLS0tIC0tLSAtLS0gLS0tIC0tLSAtLS0gLS0tIC0tLSAtLS0gLS0tIC0tLSAtLS0gLS0tXG4vLyBNQVJLOiAtIEltcG9ydHMgJiBmbGFnIGVudW1cbnZhciBJbXBvcnRGbGFnO1xuKGZ1bmN0aW9uIChJbXBvcnRGbGFnKSB7XG4gICAgSW1wb3J0RmxhZ1tJbXBvcnRGbGFnW1wiQ29sb3JcIl0gPSAwXSA9IFwiQ29sb3JcIjtcbiAgICBJbXBvcnRGbGFnW0ltcG9ydEZsYWdbXCJEcFwiXSA9IDFdID0gXCJEcFwiO1xuICAgIEltcG9ydEZsYWdbSW1wb3J0RmxhZ1tcIlNwXCJdID0gMl0gPSBcIlNwXCI7XG4gICAgSW1wb3J0RmxhZ1tJbXBvcnRGbGFnW1wiT2Zmc2V0XCJdID0gM10gPSBcIk9mZnNldFwiO1xuICAgIEltcG9ydEZsYWdbSW1wb3J0RmxhZ1tcIkJydXNoXCJdID0gNF0gPSBcIkJydXNoXCI7XG4gICAgSW1wb3J0RmxhZ1tJbXBvcnRGbGFnW1wiVGlsZU1vZGVcIl0gPSA1XSA9IFwiVGlsZU1vZGVcIjtcbiAgICBJbXBvcnRGbGFnW0ltcG9ydEZsYWdbXCJTaGFkb3dcIl0gPSA2XSA9IFwiU2hhZG93XCI7XG4gICAgSW1wb3J0RmxhZ1tJbXBvcnRGbGFnW1wiQm9yZGVyU3Ryb2tlXCJdID0gN10gPSBcIkJvcmRlclN0cm9rZVwiO1xuICAgIEltcG9ydEZsYWdbSW1wb3J0RmxhZ1tcIk1vZGlmaWVyXCJdID0gOF0gPSBcIk1vZGlmaWVyXCI7XG4gICAgSW1wb3J0RmxhZ1tJbXBvcnRGbGFnW1wiQmx1clwiXSA9IDldID0gXCJCbHVyXCI7XG4gICAgSW1wb3J0RmxhZ1tJbXBvcnRGbGFnW1wiRm9udFdlaWdodFwiXSA9IDEwXSA9IFwiRm9udFdlaWdodFwiO1xuICAgIEltcG9ydEZsYWdbSW1wb3J0RmxhZ1tcIlRleHREZWNvcmF0aW9uXCJdID0gMTFdID0gXCJUZXh0RGVjb3JhdGlvblwiO1xuICAgIEltcG9ydEZsYWdbSW1wb3J0RmxhZ1tcIlRleHRTdHlsZVwiXSA9IDEyXSA9IFwiVGV4dFN0eWxlXCI7XG59KShJbXBvcnRGbGFnIHx8IChleHBvcnRzLkltcG9ydEZsYWcgPSBJbXBvcnRGbGFnID0ge30pKTtcbi8qKiBDb2xsZWN0IGZsYWdzIHdoaWxlIGdlbmVyYXRpbmcgbGl0ZXJhbHMsIHR1cm4gaW50byBpbXBvcnRzIGF0IHRoZSBlbmQgKi9cbmNsYXNzIEltcG9ydENvbGxlY3RvciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuZmxhZ3MgPSBuZXcgU2V0KCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1hcmtzIGEgc3BlY2lmaWMgaW1wb3J0IHRvIGJlIHVzZWQgaW4gYSB0b2tlblxuICAgICAqIEBwYXJhbSBmbGFnc1xuICAgICAqL1xuICAgIHVzZSguLi5mbGFncykge1xuICAgICAgICBmbGFncy5mb3JFYWNoKCh4KSA9PiB0aGlzLmZsYWdzLmFkZCh4KSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE91dHB1dCBhIGxpc3Qgb2YgYWxsIHNvcnRlZCBpbXBvcnQgbGl0ZXJhbHMgbmVlZGVkIGZvciB0aGUgc3BlY2lmaWVkIHRva2Vucy5cbiAgICAgKi9cbiAgICBhbGxJbXBvcnRzKCkge1xuICAgICAgICBjb25zdCBpbXBvcnRMaXN0ID0gW107XG4gICAgICAgIGlmICh0aGlzLmZsYWdzLmhhcyhJbXBvcnRGbGFnLkNvbG9yKSlcbiAgICAgICAgICAgIGltcG9ydExpc3QucHVzaChcImltcG9ydCBhbmRyb2lkeC5jb21wb3NlLnVpLmdyYXBoaWNzLkNvbG9yXCIpO1xuICAgICAgICBpZiAodGhpcy5mbGFncy5oYXMoSW1wb3J0RmxhZy5EcCkpXG4gICAgICAgICAgICBpbXBvcnRMaXN0LnB1c2goXCJpbXBvcnQgYW5kcm9pZHguY29tcG9zZS51aS51bml0LmRwXCIpO1xuICAgICAgICBpZiAodGhpcy5mbGFncy5oYXMoSW1wb3J0RmxhZy5TcCkpXG4gICAgICAgICAgICBpbXBvcnRMaXN0LnB1c2goXCJpbXBvcnQgYW5kcm9pZHguY29tcG9zZS51aS51bml0LnNwXCIpO1xuICAgICAgICBpZiAodGhpcy5mbGFncy5oYXMoSW1wb3J0RmxhZy5PZmZzZXQpKVxuICAgICAgICAgICAgaW1wb3J0TGlzdC5wdXNoKFwiaW1wb3J0IGFuZHJvaWR4LmNvbXBvc2UudWkuZ2VvbWV0cnkuT2Zmc2V0XCIpO1xuICAgICAgICBpZiAodGhpcy5mbGFncy5oYXMoSW1wb3J0RmxhZy5CcnVzaCkpXG4gICAgICAgICAgICBpbXBvcnRMaXN0LnB1c2goXCJpbXBvcnQgYW5kcm9pZHguY29tcG9zZS51aS5ncmFwaGljcy5CcnVzaFwiKTtcbiAgICAgICAgaWYgKHRoaXMuZmxhZ3MuaGFzKEltcG9ydEZsYWcuVGlsZU1vZGUpKVxuICAgICAgICAgICAgaW1wb3J0TGlzdC5wdXNoKFwiaW1wb3J0IGFuZHJvaWR4LmNvbXBvc2UudWkuZ3JhcGhpY3MuVGlsZU1vZGVcIik7XG4gICAgICAgIGlmICh0aGlzLmZsYWdzLmhhcyhJbXBvcnRGbGFnLlNoYWRvdykpXG4gICAgICAgICAgICBpbXBvcnRMaXN0LnB1c2goXCJpbXBvcnQgYW5kcm9pZHguY29tcG9zZS51aS5ncmFwaGljcy5TaGFkb3dcIik7XG4gICAgICAgIGlmICh0aGlzLmZsYWdzLmhhcyhJbXBvcnRGbGFnLkJvcmRlclN0cm9rZSkpXG4gICAgICAgICAgICBpbXBvcnRMaXN0LnB1c2goXCJpbXBvcnQgYW5kcm9pZHguY29tcG9zZS5mb3VuZGF0aW9uLkJvcmRlclN0cm9rZVwiKTtcbiAgICAgICAgaWYgKHRoaXMuZmxhZ3MuaGFzKEltcG9ydEZsYWcuTW9kaWZpZXIpKSB7XG4gICAgICAgICAgICBpbXBvcnRMaXN0LnB1c2goXCJpbXBvcnQgYW5kcm9pZHguY29tcG9zZS51aS5Nb2RpZmllclwiKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmZsYWdzLmhhcyhJbXBvcnRGbGFnLkJsdXIpKVxuICAgICAgICAgICAgICAgIGltcG9ydExpc3QucHVzaChcImltcG9ydCBhbmRyb2lkeC5jb21wb3NlLnVpLmRyYXcuYmx1clwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5mbGFncy5oYXMoSW1wb3J0RmxhZy5Gb250V2VpZ2h0KSlcbiAgICAgICAgICAgIGltcG9ydExpc3QucHVzaChcImltcG9ydCBhbmRyb2lkeC5jb21wb3NlLnVpLnRleHQuZm9udC5Gb250V2VpZ2h0XCIpO1xuICAgICAgICBpZiAodGhpcy5mbGFncy5oYXMoSW1wb3J0RmxhZy5UZXh0RGVjb3JhdGlvbikpXG4gICAgICAgICAgICBpbXBvcnRMaXN0LnB1c2goXCJpbXBvcnQgYW5kcm9pZHguY29tcG9zZS51aS50ZXh0LlRleHREZWNvcmF0aW9uXCIpO1xuICAgICAgICBpZiAodGhpcy5mbGFncy5oYXMoSW1wb3J0RmxhZy5UZXh0U3R5bGUpKVxuICAgICAgICAgICAgaW1wb3J0TGlzdC5wdXNoKFwiaW1wb3J0IGFuZHJvaWR4LmNvbXBvc2UudWkudGV4dC5UZXh0U3R5bGVcIik7XG4gICAgICAgIHJldHVybiBpbXBvcnRMaXN0LnNvcnQoKTtcbiAgICB9XG59XG5leHBvcnRzLkltcG9ydENvbGxlY3RvciA9IEltcG9ydENvbGxlY3RvcjtcbmNsYXNzIEtvdGxpbkhlbHBlciB7XG4gICAgc3RhdGljIHRva2VuVmFsdWUodG9rZW4sIGFsbFRva2Vucywgb3B0aW9ucywgaW1wb3J0Q29sbGVjdG9yKSB7XG4gICAgICAgIGNvbnN0IGFjdHVhbE9wdGlvbnMgPSB7XG4gICAgICAgICAgICByYXdDb2xvclRva2VuRm9ybWF0dGVyOiAocmF3VmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYENvbG9yKDB4JHtyYXdWYWx1ZX0pYDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAuLi5vcHRpb25zXG4gICAgICAgIH07XG4gICAgICAgIC8qKiBVc2Ugc3Vicm91dGluZXMgdG8gY29udmVydCBzcGVjaWZpYyB0b2tlbiB0eXBlcyB0byBkaWZmZXJlbnQgcmVwcmVzZW50YXRpb25zLiBNYW55IHRva2VucyBhcmUgb2YgdGhlIHNhbWUgdHlwZSAqL1xuICAgICAgICBsZXQgdmFsdWU7XG4gICAgICAgIHN3aXRjaCAodG9rZW4udG9rZW5UeXBlKSB7XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5Ub2tlblR5cGUuY29sb3I6XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB0aGlzLmNvbG9yVG9rZW5WYWx1ZVRvS290bGluKHRva2VuLnZhbHVlLCBhbGxUb2tlbnMsIGFjdHVhbE9wdGlvbnMsIGltcG9ydENvbGxlY3Rvcik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5Ub2tlblR5cGUuYm9yZGVyOlxuICAgICAgICAgICAgICAgIHZhbHVlID0gdGhpcy5ib3JkZXJUb2tlblZhbHVlVG9Lb3RsaW4odG9rZW4udmFsdWUsIGFsbFRva2VucywgYWN0dWFsT3B0aW9ucywgaW1wb3J0Q29sbGVjdG9yKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2Ugc2RrX2V4cG9ydGVyc18xLlRva2VuVHlwZS5ncmFkaWVudDpcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHRoaXMuZ3JhZGllbnRUb2tlblZhbHVlVG9Lb3RsaW4odG9rZW4udmFsdWUsIGFsbFRva2VucywgYWN0dWFsT3B0aW9ucywgaW1wb3J0Q29sbGVjdG9yKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2Ugc2RrX2V4cG9ydGVyc18xLlRva2VuVHlwZS5kaW1lbnNpb246XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5Ub2tlblR5cGUuc2l6ZTpcbiAgICAgICAgICAgIGNhc2Ugc2RrX2V4cG9ydGVyc18xLlRva2VuVHlwZS5zcGFjZTpcbiAgICAgICAgICAgIGNhc2Ugc2RrX2V4cG9ydGVyc18xLlRva2VuVHlwZS5vcGFjaXR5OlxuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuVG9rZW5UeXBlLmZvbnRTaXplOlxuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuVG9rZW5UeXBlLmxpbmVIZWlnaHQ6XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5Ub2tlblR5cGUubGV0dGVyU3BhY2luZzpcbiAgICAgICAgICAgIGNhc2Ugc2RrX2V4cG9ydGVyc18xLlRva2VuVHlwZS5wYXJhZ3JhcGhTcGFjaW5nOlxuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuVG9rZW5UeXBlLmJvcmRlcldpZHRoOlxuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuVG9rZW5UeXBlLnJhZGl1czpcbiAgICAgICAgICAgIGNhc2Ugc2RrX2V4cG9ydGVyc18xLlRva2VuVHlwZS5kdXJhdGlvbjpcbiAgICAgICAgICAgIGNhc2Ugc2RrX2V4cG9ydGVyc18xLlRva2VuVHlwZS56SW5kZXg6XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB0aGlzLmRpbWVuc2lvblRva2VuVmFsdWVUb0tvdGxpbih0b2tlbi52YWx1ZSwgYWxsVG9rZW5zLCBhY3R1YWxPcHRpb25zLCBpbXBvcnRDb2xsZWN0b3IpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuVG9rZW5UeXBlLnNoYWRvdzpcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHRoaXMuc2hhZG93VG9rZW5WYWx1ZVRvS290bGluKHRva2VuLnZhbHVlLCBhbGxUb2tlbnMsIGFjdHVhbE9wdGlvbnMsIGltcG9ydENvbGxlY3Rvcik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5Ub2tlblR5cGUuZm9udFdlaWdodDpcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHRoaXMuZm9udFdlaWdodFRva2VuVmFsdWVUb0tvdGxpbih0b2tlbi52YWx1ZSwgYWxsVG9rZW5zLCBhY3R1YWxPcHRpb25zLCBpbXBvcnRDb2xsZWN0b3IpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuVG9rZW5UeXBlLmZvbnRGYW1pbHk6XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5Ub2tlblR5cGUucHJvZHVjdENvcHk6XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5Ub2tlblR5cGUuc3RyaW5nOlxuICAgICAgICAgICAgICAgIHZhbHVlID0gdGhpcy5zdHJpbmdUb2tlblZhbHVlVG9Lb3RsaW4odG9rZW4udmFsdWUsIGFsbFRva2VucywgYWN0dWFsT3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5Ub2tlblR5cGUudGV4dENhc2U6XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5Ub2tlblR5cGUudGV4dERlY29yYXRpb246XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5Ub2tlblR5cGUudmlzaWJpbGl0eTpcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHRoaXMub3B0aW9uVG9rZW5WYWx1ZVRvS290bGluKHRva2VuLnZhbHVlLCBhbGxUb2tlbnMsIGFjdHVhbE9wdGlvbnMsIHRva2VuLnRva2VuVHlwZSwgaW1wb3J0Q29sbGVjdG9yKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2Ugc2RrX2V4cG9ydGVyc18xLlRva2VuVHlwZS5ibHVyOlxuICAgICAgICAgICAgICAgIHZhbHVlID0gdGhpcy5ibHVyVG9rZW5WYWx1ZVRvS290bGluKHRva2VuLnZhbHVlLCBhbGxUb2tlbnMsIGFjdHVhbE9wdGlvbnMsIGltcG9ydENvbGxlY3Rvcik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5Ub2tlblR5cGUudHlwb2dyYXBoeTpcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHRoaXMudHlwb2dyYXBoeVRva2VuVmFsdWVUb0tvdGxpbih0b2tlbi52YWx1ZSwgYWxsVG9rZW5zLCBhY3R1YWxPcHRpb25zLCBpbXBvcnRDb2xsZWN0b3IpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc2RrX2V4cG9ydGVyc18xLlVucmVhY2hhYmxlQ2FzZUVycm9yKHRva2VuLnRva2VuVHlwZSwgXCJVbnN1cHBvcnRlZCB0b2tlbiB0eXBlIGZvciB0cmFuc2Zvcm1hdGlvbjpcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBzdGF0aWMgY29sb3JUb2tlblZhbHVlVG9Lb3RsaW4oY29sb3IsIGFsbFRva2Vucywgb3B0aW9ucywgaW1wb3J0Q29sbGVjdG9yKSB7XG4gICAgICAgIGltcG9ydENvbGxlY3Rvci51c2UoSW1wb3J0RmxhZy5Db2xvcik7XG4gICAgICAgIHJldHVybiBDb2xvckhlbHBlcl8xLkNvbG9ySGVscGVyLmZvcm1hdHRlZENvbG9yT3JWYXJpYWJsZU5hbWUoY29sb3IsIGFsbFRva2Vucywgb3B0aW9ucyk7XG4gICAgfVxuICAgIHN0YXRpYyBib3JkZXJUb2tlblZhbHVlVG9Lb3RsaW4oYm9yZGVyLCBhbGxUb2tlbnMsIG9wdGlvbnMsIGltcG9ydENvbGxlY3Rvcikge1xuICAgICAgICBjb25zdCByZWZlcmVuY2UgPSAoMCwgVG9rZW5IZWxwZXJfMS5zdXJlT3B0aW9uYWxSZWZlcmVuY2UpKGJvcmRlci5yZWZlcmVuY2VkVG9rZW5JZCwgYWxsVG9rZW5zLCBvcHRpb25zLmFsbG93UmVmZXJlbmNlcyk7XG4gICAgICAgIGlmIChyZWZlcmVuY2UpIHtcbiAgICAgICAgICAgIHJldHVybiBvcHRpb25zLnRva2VuVG9WYXJpYWJsZVJlZihyZWZlcmVuY2UpO1xuICAgICAgICB9XG4gICAgICAgIGltcG9ydENvbGxlY3Rvci51c2UoSW1wb3J0RmxhZy5Cb3JkZXJTdHJva2UpO1xuICAgICAgICBjb25zdCB3aWR0aExpdCA9IHRoaXMuZGltZW5zaW9uVG9rZW5WYWx1ZVRvS290bGluKGJvcmRlci53aWR0aCwgYWxsVG9rZW5zLCBvcHRpb25zLCBpbXBvcnRDb2xsZWN0b3IpO1xuICAgICAgICBjb25zdCBjb2xvckxpdCA9IHRoaXMuY29sb3JUb2tlblZhbHVlVG9Lb3RsaW4oYm9yZGVyLmNvbG9yLCBhbGxUb2tlbnMsIG9wdGlvbnMsIGltcG9ydENvbGxlY3Rvcik7XG4gICAgICAgIHJldHVybiBgQm9yZGVyU3Ryb2tlKCR7d2lkdGhMaXR9LCAke2NvbG9yTGl0fSlgO1xuICAgIH1cbiAgICBzdGF0aWMgZ3JhZGllbnRUb2tlblZhbHVlVG9Lb3RsaW4oZ3JhZGllbnRzLCBhbGxUb2tlbnMsIG9wdGlvbnMsIGltcG9ydENvbGxlY3Rvcikge1xuICAgICAgICAvLyBDb21wb3NlIGNhbiBkcmF3IG9ubHkgb25lIEJydXNoIHBlciBzaGFwZTsgZXhwb3J0IGFsbCBsYXllcnMgYW55d2F5LFxuICAgICAgICAvLyBzbyBjYWxsZXJzIG1heSBvdmVybGF5IHRoZW0gbWFudWFsbHlcbiAgICAgICAgY29uc3QgbGF5ZXJzID0gZ3JhZGllbnRzLm1hcCgoZykgPT4gdGhpcy5ncmFkaWVudExheWVyVG9Lb3RsaW4oZywgYWxsVG9rZW5zLCBvcHRpb25zLCBpbXBvcnRDb2xsZWN0b3IpKTtcbiAgICAgICAgcmV0dXJuIGxheWVycy5sZW5ndGggPT09IDEgPyBsYXllcnNbMF0gOiBgbGlzdE9mKCR7bGF5ZXJzLmpvaW4oXCIsIFwiKX0pYDtcbiAgICB9XG4gICAgLyoqIENvbnZlcnRzIG9uZSBncmFkaWVudCBsYXllciB0byBhIEJydXNoIGxpdGVyYWwgKi9cbiAgICBzdGF0aWMgZ3JhZGllbnRMYXllclRvS290bGluKHZhbHVlLCBhbGxUb2tlbnMsIG9wdGlvbnMsIGltcG9ydENvbGxlY3Rvcikge1xuICAgICAgICBjb25zdCByZWZlcmVuY2UgPSAoMCwgVG9rZW5IZWxwZXJfMS5zdXJlT3B0aW9uYWxSZWZlcmVuY2UpKHZhbHVlLnJlZmVyZW5jZWRUb2tlbklkLCBhbGxUb2tlbnMsIG9wdGlvbnMuYWxsb3dSZWZlcmVuY2VzKTtcbiAgICAgICAgaWYgKHJlZmVyZW5jZSkge1xuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMudG9rZW5Ub1ZhcmlhYmxlUmVmKHJlZmVyZW5jZSk7XG4gICAgICAgIH1cbiAgICAgICAgaW1wb3J0Q29sbGVjdG9yLnVzZShJbXBvcnRGbGFnLkJydXNoLCBJbXBvcnRGbGFnLk9mZnNldCk7XG4gICAgICAgIC8vIENvbnZlcnQgY29sb3Igc3RvcHNcbiAgICAgICAgY29uc3QgY29sb3JzTGl0ID0gdmFsdWUuc3RvcHNcbiAgICAgICAgICAgIC5tYXAoKHN0b3ApID0+IHRoaXMuY29sb3JUb2tlblZhbHVlVG9Lb3RsaW4oc3RvcC5jb2xvciwgYWxsVG9rZW5zLCBvcHRpb25zLCBpbXBvcnRDb2xsZWN0b3IpKVxuICAgICAgICAgICAgLmpvaW4oXCIsIFwiKTtcbiAgICAgICAgY29uc3Qgc3RvcHNMaXQgPSB2YWx1ZS5zdG9wc1xuICAgICAgICAgICAgLm1hcCgoc3RvcCkgPT4gQ29sb3JIZWxwZXJfMS5Db2xvckhlbHBlci5yb3VuZFRvRGVjaW1hbHMoc3RvcC5wb3NpdGlvbiwgb3B0aW9ucy5kZWNpbWFscykgKyBcImZcIilcbiAgICAgICAgICAgIC5qb2luKFwiLCBcIik7XG4gICAgICAgIGNvbnN0IGluZGVudFN0cmluZyA9IEdlbmVyYWxIZWxwZXJfMS5HZW5lcmFsSGVscGVyLmluZGVudChvcHRpb25zLmluZGVudCk7XG4gICAgICAgIC8vIENob29zZSBCcnVzaCBidWlsZGVyXG4gICAgICAgIHN3aXRjaCAodmFsdWUudHlwZSkge1xuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuR3JhZGllbnRUeXBlLnJhZGlhbDpcbiAgICAgICAgICAgICAgICBpbXBvcnRDb2xsZWN0b3IudXNlKEltcG9ydEZsYWcuVGlsZU1vZGUpO1xuICAgICAgICAgICAgICAgIC8vIGNlbnRlciA9IG1pZHBvaW50IG9mIGZyb20vdG8sIHJhZGl1cyA9IGRpc3RhbmNlIGJldHdlZW4gdGhlbSAocm91Z2gpXG4gICAgICAgICAgICAgICAgY29uc3QgY2VudGVyWCA9ICgodmFsdWUuZnJvbS54ICsgdmFsdWUudG8ueCkgLyAyKS50b0ZpeGVkKDIpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNlbnRlclkgPSAoKHZhbHVlLmZyb20ueSArIHZhbHVlLnRvLnkpIC8gMikudG9GaXhlZCgyKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKGBCcnVzaC5yYWRpYWxHcmFkaWVudChcXG5gICtcbiAgICAgICAgICAgICAgICAgICAgYCR7aW5kZW50U3RyaW5nfSR7aW5kZW50U3RyaW5nfWNvbG9ycyA9IGxpc3RPZigke2NvbG9yc0xpdH0pLFxcbmAgK1xuICAgICAgICAgICAgICAgICAgICBgJHtpbmRlbnRTdHJpbmd9JHtpbmRlbnRTdHJpbmd9Y2VudGVyID0gT2Zmc2V0KCR7Y2VudGVyWH1mLCAke2NlbnRlcll9ZiksXFxuYCArXG4gICAgICAgICAgICAgICAgICAgIGAke2luZGVudFN0cmluZ30ke2luZGVudFN0cmluZ31yYWRpdXMgPSAwLjVmLFxcbmAgK1xuICAgICAgICAgICAgICAgICAgICBgJHtpbmRlbnRTdHJpbmd9JHtpbmRlbnRTdHJpbmd9dGlsZU1vZGUgPSBUaWxlTW9kZS5DbGFtcCxcXG5gICtcbiAgICAgICAgICAgICAgICAgICAgYCR7aW5kZW50U3RyaW5nfSR7aW5kZW50U3RyaW5nfXN0b3BzID0gZmxvYXRBcnJheU9mKCR7c3RvcHNMaXR9KVxcbmAgK1xuICAgICAgICAgICAgICAgICAgICBgJHtpbmRlbnRTdHJpbmd9KWApO1xuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuR3JhZGllbnRUeXBlLmFuZ3VsYXI6XG4gICAgICAgICAgICAgICAgLy8gc3dlZXAgaW4gQ29tcG9zZVxuICAgICAgICAgICAgICAgIHJldHVybiAoYEJydXNoLnN3ZWVwR3JhZGllbnQoXFxuYCArXG4gICAgICAgICAgICAgICAgICAgIGAke2luZGVudFN0cmluZ30ke2luZGVudFN0cmluZ31jb2xvcnMgPSBsaXN0T2YoJHtjb2xvcnNMaXR9KSxcXG5gICtcbiAgICAgICAgICAgICAgICAgICAgYCR7aW5kZW50U3RyaW5nfSR7aW5kZW50U3RyaW5nfWNlbnRlciA9IE9mZnNldCgwLjVmLCAwLjVmKSxcXG5gICtcbiAgICAgICAgICAgICAgICAgICAgYCR7aW5kZW50U3RyaW5nfSR7aW5kZW50U3RyaW5nfXN0b3BzID0gZmxvYXRBcnJheU9mKCR7c3RvcHNMaXR9KVxcbmAgK1xuICAgICAgICAgICAgICAgICAgICBgJHtpbmRlbnRTdHJpbmd9KWApO1xuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuR3JhZGllbnRUeXBlLmxpbmVhcjpcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIChgQnJ1c2gubGluZWFyR3JhZGllbnQoXFxuYCArXG4gICAgICAgICAgICAgICAgICAgIGAke2luZGVudFN0cmluZ30ke2luZGVudFN0cmluZ31jb2xvcnMgPSBsaXN0T2YoJHtjb2xvcnNMaXR9KSxcXG5gICtcbiAgICAgICAgICAgICAgICAgICAgYCR7aW5kZW50U3RyaW5nfSR7aW5kZW50U3RyaW5nfXN0b3BzID0gZmxvYXRBcnJheU9mKCR7c3RvcHNMaXR9KSxcXG5gICtcbiAgICAgICAgICAgICAgICAgICAgYCR7aW5kZW50U3RyaW5nfSR7aW5kZW50U3RyaW5nfXN0YXJ0ID0gT2Zmc2V0KCR7dmFsdWUuZnJvbS54fWYsICR7dmFsdWUuZnJvbS55fWYpLFxcbmAgK1xuICAgICAgICAgICAgICAgICAgICBgJHtpbmRlbnRTdHJpbmd9JHtpbmRlbnRTdHJpbmd9ZW5kID0gT2Zmc2V0KCR7dmFsdWUudG8ueH1mLCAke3ZhbHVlLnRvLnl9ZilcXG5gICtcbiAgICAgICAgICAgICAgICAgICAgYCR7aW5kZW50U3RyaW5nfSlgKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGF0aWMgc2hhZG93VG9rZW5WYWx1ZVRvS290bGluKHNoYWRvd3MsIGFsbFRva2Vucywgb3B0aW9ucywgaW1wb3J0Q29sbGVjdG9yKSB7XG4gICAgICAgIGNvbnN0IGxheWVycyA9IHNoYWRvd3MubWFwKChzKSA9PiB0aGlzLnNoYWRvd0xheWVyVG9Lb3RsaW4ocywgYWxsVG9rZW5zLCBvcHRpb25zLCBpbXBvcnRDb2xsZWN0b3IpKTtcbiAgICAgICAgY29uc3QgaW5kZW50U3RyaW5nID0gR2VuZXJhbEhlbHBlcl8xLkdlbmVyYWxIZWxwZXIuaW5kZW50KG9wdGlvbnMuaW5kZW50KTtcbiAgICAgICAgLy8gQ29tcG9zZSBjYW4gZHJhdyBvbmx5IG9uZSBzaGFkb3cgcGVyIHNoYXBlOyBleHBvcnQgYWxsIGxheWVycyBhbnl3YXksXG4gICAgICAgIC8vIHNvIGNhbGxlcnMgbWF5IG92ZXJsYXkgdGhlbSBtYW51YWxseVxuICAgICAgICByZXR1cm4gbGF5ZXJzLmxlbmd0aCA9PT0gMVxuICAgICAgICAgICAgPyBsYXllcnNbMF1cbiAgICAgICAgICAgIDogYGxpc3RPZihcXG5gICsgYCR7bGF5ZXJzLm1hcCgobCkgPT4gYCR7aW5kZW50U3RyaW5nfSR7aW5kZW50U3RyaW5nfSR7bH1gKS5qb2luKFwiLFxcblwiKX1gICsgYFxcbiR7aW5kZW50U3RyaW5nfSlgO1xuICAgIH1cbiAgICBzdGF0aWMgc2hhZG93TGF5ZXJUb0tvdGxpbih2YWx1ZSwgYWxsVG9rZW5zLCBvcHRpb25zLCBpbXBvcnRDb2xsZWN0b3IpIHtcbiAgICAgICAgY29uc3QgcmVmZXJlbmNlID0gKDAsIFRva2VuSGVscGVyXzEuc3VyZU9wdGlvbmFsUmVmZXJlbmNlKSh2YWx1ZS5yZWZlcmVuY2VkVG9rZW5JZCwgYWxsVG9rZW5zLCBvcHRpb25zLmFsbG93UmVmZXJlbmNlcyk7XG4gICAgICAgIGlmIChyZWZlcmVuY2UpIHtcbiAgICAgICAgICAgIHJldHVybiBvcHRpb25zLnRva2VuVG9WYXJpYWJsZVJlZihyZWZlcmVuY2UpO1xuICAgICAgICB9XG4gICAgICAgIGltcG9ydENvbGxlY3Rvci51c2UoSW1wb3J0RmxhZy5TaGFkb3csIEltcG9ydEZsYWcuT2Zmc2V0KTtcbiAgICAgICAgY29uc3QgY29sb3JMaXQgPSB0aGlzLmNvbG9yVG9rZW5WYWx1ZVRvS290bGluKHsgLi4udmFsdWUuY29sb3IsIC4uLih2YWx1ZS5vcGFjaXR5ICYmIHsgb3BhY2l0eTogdmFsdWUub3BhY2l0eSB9KSB9LCBhbGxUb2tlbnMsIG9wdGlvbnMsIGltcG9ydENvbGxlY3Rvcik7XG4gICAgICAgIC8vIFVuc3VwcG9ydGVkIGluIENvbXBvc2UgYW5kIHRoZXJlZm9yZSBpZ25vcmVkOiBzcHJlYWQsIGlubmVyLXNoYWRvd1xuICAgICAgICBjb25zdCBvZmZzZXRYID0gQ29sb3JIZWxwZXJfMS5Db2xvckhlbHBlci5yb3VuZFRvRGVjaW1hbHModmFsdWUueCwgb3B0aW9ucy5kZWNpbWFscyk7XG4gICAgICAgIGNvbnN0IG9mZnNldFkgPSBDb2xvckhlbHBlcl8xLkNvbG9ySGVscGVyLnJvdW5kVG9EZWNpbWFscyh2YWx1ZS55LCBvcHRpb25zLmRlY2ltYWxzKTtcbiAgICAgICAgY29uc3QgYmx1ciA9IENvbG9ySGVscGVyXzEuQ29sb3JIZWxwZXIucm91bmRUb0RlY2ltYWxzKHZhbHVlLnJhZGl1cywgb3B0aW9ucy5kZWNpbWFscyk7XG4gICAgICAgIHJldHVybiBgU2hhZG93KGNvbG9yID0gJHtjb2xvckxpdH0sIG9mZnNldCA9IE9mZnNldCgke29mZnNldFh9ZiwgJHtvZmZzZXRZfWYpLCBibHVyUmFkaXVzID0gJHtibHVyfWYpYDtcbiAgICB9XG4gICAgc3RhdGljIGRpbWVuc2lvblRva2VuVmFsdWVUb0tvdGxpbihkaW1lbnNpb24sIGFsbFRva2Vucywgb3B0aW9ucywgaW1wb3J0Q29sbGVjdG9yKSB7XG4gICAgICAgIGNvbnN0IHJlZmVyZW5jZSA9ICgwLCBUb2tlbkhlbHBlcl8xLnN1cmVPcHRpb25hbFJlZmVyZW5jZSkoZGltZW5zaW9uLnJlZmVyZW5jZWRUb2tlbklkLCBhbGxUb2tlbnMsIG9wdGlvbnMuYWxsb3dSZWZlcmVuY2VzKTtcbiAgICAgICAgaWYgKHJlZmVyZW5jZSkge1xuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMudG9rZW5Ub1ZhcmlhYmxlUmVmKHJlZmVyZW5jZSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgcm91bmRlZCA9IENvbG9ySGVscGVyXzEuQ29sb3JIZWxwZXIucm91bmRUb0RlY2ltYWxzKGRpbWVuc2lvbi5tZWFzdXJlLCBvcHRpb25zLmRlY2ltYWxzKTtcbiAgICAgICAgLy8gUGVyY2VudCByZXF1aXJlcyBzY2FsaW5nIHRvIDAtMSBmb3IgS290bGluIGZsb2F0XG4gICAgICAgIGlmIChkaW1lbnNpb24udW5pdCA9PT0gc2RrX2V4cG9ydGVyc18xLlVuaXQucGVyY2VudCkge1xuICAgICAgICAgICAgY29uc3QgZnJhY3Rpb24gPSArcm91bmRlZCAvIDEwMDtcbiAgICAgICAgICAgIHJldHVybiBgJHtmcmFjdGlvbn1mYDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYCR7cm91bmRlZH0ke3RoaXMudW5pdFRvS290bGluKGRpbWVuc2lvbi51bml0LCBpbXBvcnRDb2xsZWN0b3IpfWA7XG4gICAgfVxuICAgIC8qKiBNYXBzIFN1cGVybm92YSB1bml0cyB0byBLb3RsaW4gLyBDb21wb3NlIGV4dGVuc2lvbiBzdWZmaXhlcyAqL1xuICAgIHN0YXRpYyB1bml0VG9Lb3RsaW4odW5pdCwgaW1wb3J0Q29sbGVjdG9yKSB7XG4gICAgICAgIHN3aXRjaCAodW5pdCkge1xuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuVW5pdC5wZXJjZW50OlxuICAgICAgICAgICAgICAgIC8vIEZsb2F0IGxpdGVyYWwgKDAuNWYpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiZlwiO1xuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuVW5pdC5waXhlbHM6XG4gICAgICAgICAgICAgICAgLy8gZGVuc2l0eeKAkWluZGVwZW5kZW50IHBpeGVsc1xuICAgICAgICAgICAgICAgIGltcG9ydENvbGxlY3Rvci51c2UoSW1wb3J0RmxhZy5EcCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiLmRwXCI7XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5Vbml0LnJlbTpcbiAgICAgICAgICAgICAgICAvLyBzY2FsZeKAkWluZGVwZW5kZW50IHBpeGVscyBmb3IgdHlwb2dyYXBoeVxuICAgICAgICAgICAgICAgIGltcG9ydENvbGxlY3Rvci51c2UoSW1wb3J0RmxhZy5TcCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiLnNwXCI7XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5Vbml0Lm1zOlxuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuVW5pdC5yYXc6XG4gICAgICAgICAgICAgICAgLy8gcGxhaW4gbnVtYmVyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGltcG9ydENvbGxlY3Rvci51c2UoSW1wb3J0RmxhZy5EcCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiLmRwXCI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3RhdGljIHN0cmluZ1Rva2VuVmFsdWVUb0tvdGxpbih2YWx1ZSwgYWxsVG9rZW5zLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHJlZmVyZW5jZSA9ICgwLCBUb2tlbkhlbHBlcl8xLnN1cmVPcHRpb25hbFJlZmVyZW5jZSkodmFsdWUucmVmZXJlbmNlZFRva2VuSWQsIGFsbFRva2Vucywgb3B0aW9ucy5hbGxvd1JlZmVyZW5jZXMpO1xuICAgICAgICBpZiAocmVmZXJlbmNlKSB7XG4gICAgICAgICAgICByZXR1cm4gb3B0aW9ucy50b2tlblRvVmFyaWFibGVSZWYocmVmZXJlbmNlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYFwiJHt2YWx1ZS50ZXh0fVwiYDtcbiAgICB9XG4gICAgc3RhdGljIG9wdGlvblRva2VuVmFsdWVUb0tvdGxpbihvcHRpb24sIGFsbFRva2Vucywgb3B0aW9ucywgdG9rZW5UeXBlLCBpbXBvcnRDb2xsZWN0b3IpIHtcbiAgICAgICAgY29uc3QgcmVmZXJlbmNlID0gKDAsIFRva2VuSGVscGVyXzEuc3VyZU9wdGlvbmFsUmVmZXJlbmNlKShvcHRpb24ucmVmZXJlbmNlZFRva2VuSWQsIGFsbFRva2Vucywgb3B0aW9ucy5hbGxvd1JlZmVyZW5jZXMpO1xuICAgICAgICBpZiAocmVmZXJlbmNlKSB7XG4gICAgICAgICAgICByZXR1cm4gb3B0aW9ucy50b2tlblRvVmFyaWFibGVSZWYocmVmZXJlbmNlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodG9rZW5UeXBlID09PSBzZGtfZXhwb3J0ZXJzXzEuVG9rZW5UeXBlLnRleHRDYXNlKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy50ZXh0Q2FzZVRvS290bGluKG9wdGlvbi52YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRva2VuVHlwZSA9PT0gc2RrX2V4cG9ydGVyc18xLlRva2VuVHlwZS50ZXh0RGVjb3JhdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudGV4dERlY29yYXRpb25Ub0tvdGxpbihvcHRpb24udmFsdWUsIGltcG9ydENvbGxlY3Rvcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMudmlzaWJpbGl0eVRvS290bGluKG9wdGlvbi52YWx1ZSk7XG4gICAgfVxuICAgIHN0YXRpYyB0ZXh0Q2FzZVRvS290bGluKHRleHRDYXNlKSB7XG4gICAgICAgIC8vIENvbXBvc2UgaGFzIG5vIGJ1aWx0LWluIGVudW0geWV0LCBzbyBleHBvcnQgYXMgYSBzdHJpbmcgY29uc3RhbnRcbiAgICAgICAgc3dpdGNoICh0ZXh0Q2FzZSkge1xuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuVGV4dENhc2Uub3JpZ2luYWw6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGBcIm5vbmVcImA7XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5UZXh0Q2FzZS51cHBlcjpcbiAgICAgICAgICAgICAgICByZXR1cm4gYFwidXBwZXJjYXNlXCJgO1xuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuVGV4dENhc2UubG93ZXI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGBcImxvd2VyY2FzZVwiYDtcbiAgICAgICAgICAgIGNhc2Ugc2RrX2V4cG9ydGVyc18xLlRleHRDYXNlLmNhbWVsOlxuICAgICAgICAgICAgICAgIHJldHVybiBgXCJjYXBpdGFsaXplXCJgO1xuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuVGV4dENhc2Uuc21hbGxDYXBzOlxuICAgICAgICAgICAgICAgIHJldHVybiBgXCJzbWFsbENhcHNcImA7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3RhdGljIHRleHREZWNvcmF0aW9uVG9Lb3RsaW4odGV4dERlY29yYXRpb24sIGltcG9ydENvbGxlY3Rvcikge1xuICAgICAgICBpbXBvcnRDb2xsZWN0b3IudXNlKEltcG9ydEZsYWcuVGV4dERlY29yYXRpb24pO1xuICAgICAgICAvLyBNYXAgZGlyZWN0bHkgb250byBhbmRyb2lkeC5jb21wb3NlLnVpLnRleHQuVGV4dERlY29yYXRpb25cbiAgICAgICAgc3dpdGNoICh0ZXh0RGVjb3JhdGlvbikge1xuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuVGV4dERlY29yYXRpb24ub3JpZ2luYWw6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiVGV4dERlY29yYXRpb24uTm9uZVwiO1xuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuVGV4dERlY29yYXRpb24udW5kZXJsaW5lOlxuICAgICAgICAgICAgICAgIHJldHVybiBcIlRleHREZWNvcmF0aW9uLlVuZGVybGluZVwiO1xuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuVGV4dERlY29yYXRpb24uc3RyaWtldGhyb3VnaDpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJUZXh0RGVjb3JhdGlvbi5MaW5lVGhyb3VnaFwiO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN0YXRpYyB2aXNpYmlsaXR5VG9Lb3RsaW4odmlzaWJpbGl0eSkge1xuICAgICAgICByZXR1cm4gdmlzaWJpbGl0eSA9PT0gc2RrX2V4cG9ydGVyc18xLlZpc2liaWxpdHlUeXBlLnZpc2libGUgPyBcInRydWVcIiA6IFwiZmFsc2VcIjtcbiAgICB9XG4gICAgc3RhdGljIGJsdXJUb2tlblZhbHVlVG9Lb3RsaW4oYmx1ciwgYWxsVG9rZW5zLCBvcHRpb25zLCBpbXBvcnRDb2xsZWN0b3IpIHtcbiAgICAgICAgY29uc3QgcmVmZXJlbmNlID0gKDAsIFRva2VuSGVscGVyXzEuc3VyZU9wdGlvbmFsUmVmZXJlbmNlKShibHVyLnJlZmVyZW5jZWRUb2tlbklkLCBhbGxUb2tlbnMsIG9wdGlvbnMuYWxsb3dSZWZlcmVuY2VzKTtcbiAgICAgICAgaWYgKHJlZmVyZW5jZSkge1xuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMudG9rZW5Ub1ZhcmlhYmxlUmVmKHJlZmVyZW5jZSk7XG4gICAgICAgIH1cbiAgICAgICAgaW1wb3J0Q29sbGVjdG9yLnVzZShJbXBvcnRGbGFnLk1vZGlmaWVyLCBJbXBvcnRGbGFnLkJsdXIpO1xuICAgICAgICByZXR1cm4gYE1vZGlmaWVyLmJsdXIoJHt0aGlzLmRpbWVuc2lvblRva2VuVmFsdWVUb0tvdGxpbihibHVyLnJhZGl1cywgYWxsVG9rZW5zLCBvcHRpb25zLCBpbXBvcnRDb2xsZWN0b3IpfSlgO1xuICAgIH1cbiAgICBzdGF0aWMgZm9udFdlaWdodFRva2VuVmFsdWVUb0tvdGxpbih2YWx1ZSwgYWxsVG9rZW5zLCBvcHRpb25zLCBpbXBvcnRDb2xsZWN0b3IpIHtcbiAgICAgICAgY29uc3QgcmVmZXJlbmNlID0gKDAsIFRva2VuSGVscGVyXzEuc3VyZU9wdGlvbmFsUmVmZXJlbmNlKSh2YWx1ZS5yZWZlcmVuY2VkVG9rZW5JZCwgYWxsVG9rZW5zLCBvcHRpb25zLmFsbG93UmVmZXJlbmNlcyk7XG4gICAgICAgIGlmIChyZWZlcmVuY2UpIHtcbiAgICAgICAgICAgIHJldHVybiBvcHRpb25zLnRva2VuVG9WYXJpYWJsZVJlZihyZWZlcmVuY2UpO1xuICAgICAgICB9XG4gICAgICAgIC8vIENvbnZlcnQgdGV4dCB3ZWlnaHRzIHRvIG51bWVyaWNhbCB2YWx1ZXNcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZFdlaWdodCA9ICgwLCBUb2tlbkhlbHBlcl8xLm5vcm1hbGl6ZVRleHRXZWlnaHQpKHZhbHVlLnRleHQpO1xuICAgICAgICByZXR1cm4gdGhpcy5mb250V2VpZ2h0SW50VG9Lb3RsaW4obm9ybWFsaXplZFdlaWdodCwgaW1wb3J0Q29sbGVjdG9yKTtcbiAgICB9XG4gICAgc3RhdGljIGZvbnRXZWlnaHRJbnRUb0tvdGxpbih3ZWlnaHQsIGltcG9ydENvbGxlY3Rvcikge1xuICAgICAgICBpbXBvcnRDb2xsZWN0b3IudXNlKEltcG9ydEZsYWcuRm9udFdlaWdodCk7XG4gICAgICAgIHN3aXRjaCAod2VpZ2h0KSB7XG4gICAgICAgICAgICBjYXNlIDEwMDpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJGb250V2VpZ2h0LlRoaW5cIjtcbiAgICAgICAgICAgIGNhc2UgMjAwOlxuICAgICAgICAgICAgICAgIHJldHVybiBcIkZvbnRXZWlnaHQuRXh0cmFMaWdodFwiO1xuICAgICAgICAgICAgY2FzZSAzMDA6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiRm9udFdlaWdodC5MaWdodFwiO1xuICAgICAgICAgICAgY2FzZSA0MDA6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiRm9udFdlaWdodC5Ob3JtYWxcIjtcbiAgICAgICAgICAgIGNhc2UgNTAwOlxuICAgICAgICAgICAgICAgIHJldHVybiBcIkZvbnRXZWlnaHQuTWVkaXVtXCI7XG4gICAgICAgICAgICBjYXNlIDYwMDpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJGb250V2VpZ2h0LlNlbWlCb2xkXCI7XG4gICAgICAgICAgICBjYXNlIDcwMDpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJGb250V2VpZ2h0LkJvbGRcIjtcbiAgICAgICAgICAgIGNhc2UgODAwOlxuICAgICAgICAgICAgICAgIHJldHVybiBcIkZvbnRXZWlnaHQuRXh0cmFCb2xkXCI7XG4gICAgICAgICAgICBjYXNlIDkwMDpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJGb250V2VpZ2h0LkJsYWNrXCI7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIC8vIFVuY29tbW9uIGN1c3RvbSB3ZWlnaHRcbiAgICAgICAgICAgICAgICByZXR1cm4gYEZvbnRXZWlnaHQoJHt3ZWlnaHR9KWA7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3RhdGljIHR5cG9ncmFwaHlUb2tlblZhbHVlVG9Lb3RsaW4odHlwb2dyYXBoeSwgYWxsVG9rZW5zLCBvcHRpb25zLCBpbXBvcnRDb2xsZWN0b3IpIHtcbiAgICAgICAgLy8gUmVmZXJlbmNlIGZ1bGwgdHlwb2dyYXBoeSB0b2tlbiBpZiBzZXRcbiAgICAgICAgY29uc3QgcmVmZXJlbmNlID0gKDAsIFRva2VuSGVscGVyXzEuc3VyZU9wdGlvbmFsUmVmZXJlbmNlKSh0eXBvZ3JhcGh5LnJlZmVyZW5jZWRUb2tlbklkLCBhbGxUb2tlbnMsIG9wdGlvbnMuYWxsb3dSZWZlcmVuY2VzKTtcbiAgICAgICAgaWYgKHJlZmVyZW5jZSkge1xuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMudG9rZW5Ub1ZhcmlhYmxlUmVmKHJlZmVyZW5jZSk7XG4gICAgICAgIH1cbiAgICAgICAgaW1wb3J0Q29sbGVjdG9yLnVzZShJbXBvcnRGbGFnLlRleHRTdHlsZSwgSW1wb3J0RmxhZy5UZXh0RGVjb3JhdGlvbik7XG4gICAgICAgIC8vIFJlc29sdmUgcGFydGlhbCByZWZlcmVuY2VzXG4gICAgICAgIGNvbnN0IGZvbnRGYW1pbHlSZWYgPSAoMCwgVG9rZW5IZWxwZXJfMS5zdXJlT3B0aW9uYWxSZWZlcmVuY2UpKHR5cG9ncmFwaHkuZm9udEZhbWlseS5yZWZlcmVuY2VkVG9rZW5JZCwgYWxsVG9rZW5zLCBvcHRpb25zLmFsbG93UmVmZXJlbmNlcyk7XG4gICAgICAgIGNvbnN0IGZvbnRXZWlnaHRSZWYgPSAoMCwgVG9rZW5IZWxwZXJfMS5zdXJlT3B0aW9uYWxSZWZlcmVuY2UpKHR5cG9ncmFwaHkuZm9udFdlaWdodC5yZWZlcmVuY2VkVG9rZW5JZCwgYWxsVG9rZW5zLCBvcHRpb25zLmFsbG93UmVmZXJlbmNlcyk7XG4gICAgICAgIGNvbnN0IGRlY29yYXRpb25SZWYgPSAoMCwgVG9rZW5IZWxwZXJfMS5zdXJlT3B0aW9uYWxSZWZlcmVuY2UpKHR5cG9ncmFwaHkudGV4dERlY29yYXRpb24ucmVmZXJlbmNlZFRva2VuSWQsIGFsbFRva2Vucywgb3B0aW9ucy5hbGxvd1JlZmVyZW5jZXMpO1xuICAgICAgICAvLyBDYWxjdWxhdGUgbGl0ZXJhbHNcbiAgICAgICAgY29uc3QgZm9udEZhbWlseUxpdCA9IGZvbnRGYW1pbHlSZWYgPyBvcHRpb25zLnRva2VuVG9WYXJpYWJsZVJlZihmb250RmFtaWx5UmVmKSA6IGBcIiR7dHlwb2dyYXBoeS5mb250RmFtaWx5LnRleHR9XCJgO1xuICAgICAgICBjb25zdCBmb250V2VpZ2h0TGl0ID0gZm9udFdlaWdodFJlZlxuICAgICAgICAgICAgPyBvcHRpb25zLnRva2VuVG9WYXJpYWJsZVJlZihmb250V2VpZ2h0UmVmKVxuICAgICAgICAgICAgOiB0aGlzLmZvbnRXZWlnaHRJbnRUb0tvdGxpbigoMCwgVG9rZW5IZWxwZXJfMS5ub3JtYWxpemVUZXh0V2VpZ2h0KSh0eXBvZ3JhcGh5LmZvbnRXZWlnaHQudGV4dCksIGltcG9ydENvbGxlY3Rvcik7XG4gICAgICAgIGNvbnN0IHRleHREZWNvcmF0aW9uTGl0ID0gZGVjb3JhdGlvblJlZlxuICAgICAgICAgICAgPyBvcHRpb25zLnRva2VuVG9WYXJpYWJsZVJlZihkZWNvcmF0aW9uUmVmKVxuICAgICAgICAgICAgOiB0eXBvZ3JhcGh5LnRleHREZWNvcmF0aW9uLnZhbHVlID09PSBzZGtfZXhwb3J0ZXJzXzEuVGV4dERlY29yYXRpb24ub3JpZ2luYWxcbiAgICAgICAgICAgICAgICA/IFwiVGV4dERlY29yYXRpb24uTm9uZVwiXG4gICAgICAgICAgICAgICAgOiB0aGlzLnRleHREZWNvcmF0aW9uVG9Lb3RsaW4odHlwb2dyYXBoeS50ZXh0RGVjb3JhdGlvbi52YWx1ZSwgaW1wb3J0Q29sbGVjdG9yKTtcbiAgICAgICAgY29uc3QgZm9udFNpemVMaXQgPSB0aGlzLmRpbWVuc2lvblRva2VuVmFsdWVUb0tvdGxpbih0eXBvZ3JhcGh5LmZvbnRTaXplLCBhbGxUb2tlbnMsIG9wdGlvbnMsIGltcG9ydENvbGxlY3Rvcik7XG4gICAgICAgIGNvbnN0IGxpbmVIZWlnaHRMaXQgPSB0eXBvZ3JhcGh5LmxpbmVIZWlnaHRcbiAgICAgICAgICAgID8gdGhpcy5kaW1lbnNpb25Ub2tlblZhbHVlVG9Lb3RsaW4odHlwb2dyYXBoeS5saW5lSGVpZ2h0LCBhbGxUb2tlbnMsIG9wdGlvbnMsIGltcG9ydENvbGxlY3RvcilcbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICBjb25zdCBsZXR0ZXJTcGFjaW5nTGl0ID0gdHlwb2dyYXBoeS5sZXR0ZXJTcGFjaW5nXG4gICAgICAgICAgICA/IHRoaXMuZGltZW5zaW9uVG9rZW5WYWx1ZVRvS290bGluKHR5cG9ncmFwaHkubGV0dGVyU3BhY2luZywgYWxsVG9rZW5zLCBvcHRpb25zLCBpbXBvcnRDb2xsZWN0b3IpXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgLy8gQXNzZW1ibGUgVGV4dFN0eWxlIGxpdGVyYWxcbiAgICAgICAgY29uc3QgcGFydHMgPSBbXG4gICAgICAgICAgICBgZm9udEZhbWlseSA9ICR7Zm9udEZhbWlseUxpdH1gLFxuICAgICAgICAgICAgYGZvbnRXZWlnaHQgPSAke2ZvbnRXZWlnaHRMaXR9YCxcbiAgICAgICAgICAgIGBmb250U2l6ZSA9ICR7Zm9udFNpemVMaXR9YFxuICAgICAgICBdO1xuICAgICAgICBpZiAobGluZUhlaWdodExpdClcbiAgICAgICAgICAgIHBhcnRzLnB1c2goYGxpbmVIZWlnaHQgPSAke2xpbmVIZWlnaHRMaXR9YCk7XG4gICAgICAgIGlmIChsZXR0ZXJTcGFjaW5nTGl0KVxuICAgICAgICAgICAgcGFydHMucHVzaChgbGV0dGVyU3BhY2luZyA9ICR7bGV0dGVyU3BhY2luZ0xpdH1gKTtcbiAgICAgICAgaWYgKHRleHREZWNvcmF0aW9uTGl0KVxuICAgICAgICAgICAgcGFydHMucHVzaChgdGV4dERlY29yYXRpb24gPSAke3RleHREZWNvcmF0aW9uTGl0fWApO1xuICAgICAgICBjb25zdCBpbmRlbnRTdHJpbmcgPSBHZW5lcmFsSGVscGVyXzEuR2VuZXJhbEhlbHBlci5pbmRlbnQob3B0aW9ucy5pbmRlbnQpO1xuICAgICAgICAvLyBKb2luIHdpdGggY29tbWFzIGFuZCBpbmRlbnRzXG4gICAgICAgIGNvbnN0IGJvZHkgPSBwYXJ0cy5tYXAoKHApID0+IGAke2luZGVudFN0cmluZ30ke2luZGVudFN0cmluZ30ke3B9YCkuam9pbihcIixcXG5cIik7XG4gICAgICAgIHJldHVybiBgVGV4dFN0eWxlKFxcbiR7Ym9keX1cXG4ke2luZGVudFN0cmluZ30pYDtcbiAgICB9XG59XG5leHBvcnRzLktvdGxpbkhlbHBlciA9IEtvdGxpbkhlbHBlcjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5OYW1pbmdIZWxwZXIgPSB2b2lkIDA7XG5jb25zdCBTdHJpbmdDYXNlXzEgPSByZXF1aXJlKFwiLi4vZW51bXMvU3RyaW5nQ2FzZVwiKTtcbmNvbnN0IGNoYW5nZV9jYXNlXzEgPSByZXF1aXJlKFwiY2hhbmdlLWNhc2VcIik7XG5jbGFzcyBOYW1pbmdIZWxwZXIge1xuICAgIC8qKlxuICAgICAqIEhlbHBlciBtZXRob2QgdG8gYXBwbHkgZmluZC9yZXBsYWNlIHBhdHRlcm5zIHRvIGEgc3RyaW5nXG4gICAgICogQHBhcmFtIHRleHQgVGhlIHRleHQgdG8gYXBwbHkgcmVwbGFjZW1lbnRzIHRvXG4gICAgICogQHBhcmFtIGZpbmRSZXBsYWNlIFJlY29yZCBvZiBmaW5kL3JlcGxhY2UgcGF0dGVybnNcbiAgICAgKiBAcmV0dXJucyBUaGUgdGV4dCB3aXRoIGFsbCByZXBsYWNlbWVudHMgYXBwbGllZFxuICAgICAqL1xuICAgIHN0YXRpYyBhcHBseUZpbmRSZXBsYWNlKHRleHQsIGZpbmRSZXBsYWNlKSB7XG4gICAgICAgIGlmICghZmluZFJlcGxhY2UpXG4gICAgICAgICAgICByZXR1cm4gdGV4dDtcbiAgICAgICAgLy8gU29ydCBmaW5kIHBhdHRlcm5zIGJ5IGxlbmd0aCAobG9uZ2VzdCBmaXJzdCkgdG8gaGFuZGxlIG92ZXJsYXBwaW5nIHBhdHRlcm5zXG4gICAgICAgIGNvbnN0IHNvcnRlZFBhdHRlcm5zID0gT2JqZWN0LmVudHJpZXMoZmluZFJlcGxhY2UpXG4gICAgICAgICAgICAuc29ydCgoW2FdLCBbYl0pID0+IGIubGVuZ3RoIC0gYS5sZW5ndGgpO1xuICAgICAgICBsZXQgcmVzdWx0ID0gdGV4dDtcbiAgICAgICAgZm9yIChjb25zdCBbZmluZCwgcmVwbGFjZV0gb2Ygc29ydGVkUGF0dGVybnMpIHtcbiAgICAgICAgICAgIC8vIEVzY2FwZSBzcGVjaWFsIHJlZ2V4IGNoYXJhY3RlcnMgdG8gZW5zdXJlIHRoZXkncmUgdHJlYXRlZCBhcyBsaXRlcmFsIGNoYXJhY3RlcnNcbiAgICAgICAgICAgIGNvbnN0IGVzY2FwZWRGaW5kID0gZmluZC5yZXBsYWNlKC9bLiorP14ke30oKXxbXFxdXFxcXF0vZywgJ1xcXFwkJicpO1xuICAgICAgICAgICAgLy8gQ3JlYXRlIGEgcmVnZXggcGF0dGVybiB0aGF0IG1hdGNoZXMgdGhlIHdvcmQgaW4gdHdvIHdheXM6XG4gICAgICAgICAgICAvLyAxLiBVc2luZyBzdGFuZGFyZCB3b3JkIGJvdW5kYXJpZXMgKFxcYikgLSBtYXRjaGVzIHRyYW5zaXRpb25zIGJldHdlZW4gd29yZC9ub24td29yZCBjaGFyc1xuICAgICAgICAgICAgLy8gMi4gVXNpbmcgbG9va2FoZWFkL2xvb2tiZWhpbmQgdG8gbWF0Y2ggYXQgc3RyaW5nIGJvdW5kYXJpZXMgb3IgYmV0d2VlbiBzcGFjZXNcbiAgICAgICAgICAgIC8vICAgIFRoaXMgaGFuZGxlcyBjYXNlcyB3aGVyZSBcXGIgYWxvbmUgbWlnaHQgbm90IHdvcmsgY29ycmVjdGx5XG4gICAgICAgICAgICBjb25zdCBwYXR0ZXJuID0gbmV3IFJlZ0V4cChcbiAgICAgICAgICAgIC8vIFBhcnQgMTogTWF0Y2ggd2l0aCBzdGFuZGFyZCB3b3JkIGJvdW5kYXJpZXNcbiAgICAgICAgICAgIGBcXFxcYiR7ZXNjYXBlZEZpbmR9XFxcXGJ8YCArXG4gICAgICAgICAgICAgICAgLy8gUGFydCAyOiBNYXRjaCBhdCBzdGFydCBvZiBzdHJpbmcgb3IgYWZ0ZXIgc3BhY2UgQU5EIGJlZm9yZSBlbmQgb2Ygc3RyaW5nIG9yIHNwYWNlXG4gICAgICAgICAgICAgICAgYCg/PD1efFxcXFxzKSR7ZXNjYXBlZEZpbmR9KD89XFxcXHN8JClgLCAnZ2knIC8vIGc6IGdsb2JhbCAobWF0Y2ggYWxsIG9jY3VycmVuY2VzKSwgaTogY2FzZS1pbnNlbnNpdGl2ZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIC8vIFJlcGxhY2UgYWxsIG9jY3VycmVuY2VzIHdpdGggdGhlIHJlcGxhY2VtZW50IHN0cmluZ1xuICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnJlcGxhY2UocGF0dGVybiwgcmVwbGFjZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgc3RhdGljIGNvZGVTYWZlVmFyaWFibGVOYW1lRm9yVG9rZW4odG9rZW4sIGZvcm1hdCwgcGFyZW50LCBwcmVmaXgsIGZpbmRSZXBsYWNlLCByZW1vdmVEdXBsaWNhdGVGcmFnbWVudHMgPSB0cnVlKSB7XG4gICAgICAgIC8vIENyZWF0ZSBhcnJheSB3aXRoIGFsbCBwYXRoIHNlZ21lbnRzIGFuZCB0b2tlbiBuYW1lIGF0IHRoZSBlbmRcbiAgICAgICAgbGV0IGZyYWdtZW50cyA9IFtdO1xuICAgICAgICAvLyBBZGQgcGFyZW50IHBhdGggYW5kIG5hbWVcbiAgICAgICAgaWYgKHBhcmVudCkge1xuICAgICAgICAgICAgZnJhZ21lbnRzLnB1c2goLi4ucGFyZW50LnBhdGgpO1xuICAgICAgICAgICAgaWYgKCFwYXJlbnQuaXNSb290KSB7XG4gICAgICAgICAgICAgICAgZnJhZ21lbnRzLnB1c2gocGFyZW50Lm5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIFN0ZXAgMjogSGFuZGxlIHRva2VuIG5hbWUgaW50ZWxsaWdlbnRseSB0byBhdm9pZCB3b3JkLWxldmVsIGR1cGxpY2F0aW9uXG4gICAgICAgIC8vIEZvciBleGFtcGxlLCBpZiB0aGUgcGF0aCBlbmRzIHdpdGggXCJSZWRcIiBhbmQgdG9rZW4gbmFtZSBpcyBcIlJlZCA1MDBcIixcbiAgICAgICAgLy8gd2Ugb25seSB3YW50IHRvIGFkZCBcIjUwMFwiIHRvIGF2b2lkIFwiUmVkIFJlZCA1MDBcIlxuICAgICAgICBjb25zdCB0b2tlbk5hbWVQYXJ0cyA9IHRva2VuLm5hbWUuc3BsaXQoL1tcXHMtX10rLyk7XG4gICAgICAgIC8vIFRoaXMgY2hlY2tzIGlmIHRoZSBmaXJzdCB3b3JkIG9mIHRva2VuIG5hbWUgbWF0Y2hlcyB0aGUgbGFzdCBmcmFnbWVudCAoY2FzZSBpbnNlbnNpdGl2ZSlcbiAgICAgICAgLy8gYW5kIGlmIHNvLCBvbmx5IGFkZHMgdGhlIHJlbWFpbmluZyBwYXJ0cyBvZiB0aGUgdG9rZW4gbmFtZVxuICAgICAgICBpZiAoZnJhZ21lbnRzLmxlbmd0aCA+IDAgJiYgdG9rZW5OYW1lUGFydHMubGVuZ3RoID4gMSAmJlxuICAgICAgICAgICAgdG9rZW5OYW1lUGFydHNbMF0udG9Mb3dlckNhc2UoKSA9PT0gZnJhZ21lbnRzW2ZyYWdtZW50cy5sZW5ndGggLSAxXS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgICAgICBmcmFnbWVudHMucHVzaCh0b2tlbk5hbWVQYXJ0cy5zbGljZSgxKS5qb2luKCcgJykpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZnJhZ21lbnRzLnB1c2godG9rZW4ubmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU3RlcCAzOiBBcHBseSBmaW5kL3JlcGxhY2UgdG8gcGF0aCBhbmQgbmFtZSBmcmFnbWVudHMgb25seSAobm90IHByZWZpeClcbiAgICAgICAgLy8gVGhpcyBhbGxvd3MgZm9yIGN1c3RvbSB0ZXh0IHJlcGxhY2VtZW50cyBpbiB0aGUgdmFyaWFibGUgbmFtZVxuICAgICAgICBpZiAoZmluZFJlcGxhY2UpIHtcbiAgICAgICAgICAgIC8vIEpvaW4gcGF0aCBhbmQgbmFtZSBmb3IgZmluZC9yZXBsYWNlIHByb2Nlc3NpbmdcbiAgICAgICAgICAgIGxldCBwYXRoQW5kTmFtZSA9IGZyYWdtZW50cy5qb2luKCcgJyk7XG4gICAgICAgICAgICAvLyBBcHBseSBmaW5kL3JlcGxhY2UgdXNpbmcgdGhlIGhlbHBlciBtZXRob2RcbiAgICAgICAgICAgIHBhdGhBbmROYW1lID0gTmFtaW5nSGVscGVyLmFwcGx5RmluZFJlcGxhY2UocGF0aEFuZE5hbWUsIGZpbmRSZXBsYWNlKTtcbiAgICAgICAgICAgIC8vIFNwbGl0IGJhY2sgaW50byBmcmFnbWVudHMgYW5kIGNsZWFuIHVwXG4gICAgICAgICAgICBmcmFnbWVudHMgPSBwYXRoQW5kTmFtZVxuICAgICAgICAgICAgICAgIC5zcGxpdCgvXFxzKy8pXG4gICAgICAgICAgICAgICAgLmZpbHRlcihmID0+IGYubGVuZ3RoID4gMClcbiAgICAgICAgICAgICAgICAubWFwKGYgPT4gZi50cmltKCkpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFN0ZXAgNDogQWRkIHByZWZpeCBhZnRlciBmaW5kL3JlcGxhY2UgKHByZWZpeCBzaG91bGQgbm90IGJlIGFmZmVjdGVkIGJ5IGZpbmQvcmVwbGFjZSlcbiAgICAgICAgaWYgKHByZWZpeCAmJiBwcmVmaXgubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZnJhZ21lbnRzLnVuc2hpZnQocHJlZml4KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTdGVwIDU6IEFwcGx5IGNhc2UgZm9ybWF0dGluZyB0byB0aGUgZmluYWwgZnJhZ21lbnRzXG4gICAgICAgIHJldHVybiBOYW1pbmdIZWxwZXIuY29kZVNhZmVWYXJpYWJsZU5hbWUoZnJhZ21lbnRzLCBmb3JtYXQsIHVuZGVmaW5lZCwgcmVtb3ZlRHVwbGljYXRlRnJhZ21lbnRzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVHJhbnNmb3JtcyBuYW1lIGludG8gc3BlY2lmaWMgY2FzZSBmcm9tIHByb3ZpZGVkIHBhdGggZnJhZ21lbnRzLiBXaWxsIGFsc28gc21hcnRseSBzcGxpdCBmcmFnbWVudHMgaW50byBzdWJmcmFnbWVudHMgLVxuICAgICAqIGlmIHRoZXkgY29udGFpbiBzcGFjZXMsIGNhc2UgY2hhbmdlcyBmcm9tIG9uZSBsZXR0ZXIgdG8gYW5vdGhlciBhbmQgc28gb24uXG4gICAgICpcbiAgICAgKiBBbHNvIGZpeGVzIGFkZGl0aW9uYWwgcHJvYmxlbXMsIGxpa2UgdGhlIGZhY3QgdGhhdCB2YXJpYWJsZSBuYW1lIGNhbid0IHN0YXJ0IHdpdGggbnVtYmVycyAtIHZhcmlhYmxlIHdpbGwgYmUgcHJlZml4ZWQgd2l0aCBcIl9cIiBpbiB0aGF0IGNhc2VcbiAgICAgKi9cbiAgICBzdGF0aWMgY29kZVNhZmVWYXJpYWJsZU5hbWUoZnJhZ21lbnRzLCBmb3JtYXQsIGZpbmRSZXBsYWNlLCByZW1vdmVEdXBsaWNhdGVGcmFnbWVudHMgPSBmYWxzZSkge1xuICAgICAgICAvLyBDb252ZXJ0IGZyYWdtZW50cyB0byBhIHNpbmdsZSBzZW50ZW5jZSBmb3IgcHJvY2Vzc2luZ1xuICAgICAgICBsZXQgc2VudGVuY2UgPSB0eXBlb2YgZnJhZ21lbnRzID09PSAnc3RyaW5nJyA/IGZyYWdtZW50cyA6IGZyYWdtZW50cy5qb2luKCcgJyk7XG4gICAgICAgIC8vIEFwcGx5IGZpbmQvcmVwbGFjZSBpZiBwcm92aWRlZCB1c2luZyB0aGUgaGVscGVyIG1ldGhvZFxuICAgICAgICBzZW50ZW5jZSA9IE5hbWluZ0hlbHBlci5hcHBseUZpbmRSZXBsYWNlKHNlbnRlbmNlLCBmaW5kUmVwbGFjZSk7XG4gICAgICAgIC8vIE9ubHkgYWxsb3cgbGV0dGVycywgZGlnaXRzLCB1bmRlcnNjb3JlIGFuZCBoeXBoZW5cbiAgICAgICAgc2VudGVuY2UgPSBzZW50ZW5jZS5yZXBsYWNlQWxsKC9bXmEtekEtWjAtOV8tXS9nLCAnXycpO1xuICAgICAgICAvLyBSZW1vdmUgZHVwbGljYXRlcyBpZiByZXF1ZXN0ZWRcbiAgICAgICAgaWYgKHJlbW92ZUR1cGxpY2F0ZUZyYWdtZW50cykge1xuICAgICAgICAgICAgLy8gRmlyc3QgY29udmVydCB0byBrZWJhYkNhc2UgZm9yIG5vcm1hbGl6YXRpb25cbiAgICAgICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRTdHJpbmcgPSAoMCwgY2hhbmdlX2Nhc2VfMS5rZWJhYkNhc2UpKHNlbnRlbmNlKTtcbiAgICAgICAgICAgIC8vIFNwbGl0IGJ5IFwiLVwiIHRvIGdldCBuZXcgZnJhZ21lbnRzXG4gICAgICAgICAgICBjb25zdCBub3JtYWxpemVkRnJhZ21lbnRzID0gbm9ybWFsaXplZFN0cmluZy5zcGxpdCgnLScpLmZpbHRlcihmID0+IGYubGVuZ3RoID4gMCk7XG4gICAgICAgICAgICAvLyBSZW1vdmUgZHVwbGljYXRlcyBmcm9tIG5vcm1hbGl6ZWQgZnJhZ21lbnRzXG4gICAgICAgICAgICBjb25zdCB1bmlxdWVGcmFnbWVudHMgPSBub3JtYWxpemVkRnJhZ21lbnRzLmZpbHRlcigoZnJhZ21lbnQsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gS2VlcCBpZiBpdCdzIGZpcnN0IGVsZW1lbnQgb3IgZGlmZmVyZW50IGZyb20gcHJldmlvdXNcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5kZXggPT09IDAgfHwgZnJhZ21lbnQgIT09IG5vcm1hbGl6ZWRGcmFnbWVudHNbaW5kZXggLSAxXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gSm9pbiBiYWNrIGludG8gYSBzZW50ZW5jZVxuICAgICAgICAgICAgc2VudGVuY2UgPSB1bmlxdWVGcmFnbWVudHMuam9pbignICcpO1xuICAgICAgICB9XG4gICAgICAgIHN3aXRjaCAoZm9ybWF0KSB7XG4gICAgICAgICAgICBjYXNlIFN0cmluZ0Nhc2VfMS5TdHJpbmdDYXNlLmNhbWVsQ2FzZTpcbiAgICAgICAgICAgICAgICBzZW50ZW5jZSA9ICgwLCBjaGFuZ2VfY2FzZV8xLmNhbWVsQ2FzZSkoc2VudGVuY2UpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBTdHJpbmdDYXNlXzEuU3RyaW5nQ2FzZS5jYXBpdGFsQ2FzZTpcbiAgICAgICAgICAgICAgICBzZW50ZW5jZSA9ICgwLCBjaGFuZ2VfY2FzZV8xLmNhcGl0YWxDYXNlKShzZW50ZW5jZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFN0cmluZ0Nhc2VfMS5TdHJpbmdDYXNlLmNvbnN0YW50Q2FzZTpcbiAgICAgICAgICAgICAgICBzZW50ZW5jZSA9ICgwLCBjaGFuZ2VfY2FzZV8xLmNvbnN0YW50Q2FzZSkoc2VudGVuY2UpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBTdHJpbmdDYXNlXzEuU3RyaW5nQ2FzZS5kb3RDYXNlOlxuICAgICAgICAgICAgICAgIHNlbnRlbmNlID0gKDAsIGNoYW5nZV9jYXNlXzEuZG90Q2FzZSkoc2VudGVuY2UpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBTdHJpbmdDYXNlXzEuU3RyaW5nQ2FzZS50cmFpbkNhc2U6XG4gICAgICAgICAgICAgICAgc2VudGVuY2UgPSAoMCwgY2hhbmdlX2Nhc2VfMS50cmFpbkNhc2UpKHNlbnRlbmNlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgU3RyaW5nQ2FzZV8xLlN0cmluZ0Nhc2Uubm9DYXNlOlxuICAgICAgICAgICAgICAgIHNlbnRlbmNlID0gKDAsIGNoYW5nZV9jYXNlXzEubm9DYXNlKShzZW50ZW5jZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFN0cmluZ0Nhc2VfMS5TdHJpbmdDYXNlLmtlYmFiQ2FzZTpcbiAgICAgICAgICAgICAgICBzZW50ZW5jZSA9ICgwLCBjaGFuZ2VfY2FzZV8xLmtlYmFiQ2FzZSkoc2VudGVuY2UpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBTdHJpbmdDYXNlXzEuU3RyaW5nQ2FzZS5wYXNjYWxDYXNlOlxuICAgICAgICAgICAgICAgIHNlbnRlbmNlID0gKDAsIGNoYW5nZV9jYXNlXzEucGFzY2FsQ2FzZSkoc2VudGVuY2UpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBTdHJpbmdDYXNlXzEuU3RyaW5nQ2FzZS5wYXRoQ2FzZTpcbiAgICAgICAgICAgICAgICBzZW50ZW5jZSA9ICgwLCBjaGFuZ2VfY2FzZV8xLnBhdGhDYXNlKShzZW50ZW5jZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFN0cmluZ0Nhc2VfMS5TdHJpbmdDYXNlLnNlbnRlbmNlQ2FzZTpcbiAgICAgICAgICAgICAgICBzZW50ZW5jZSA9ICgwLCBjaGFuZ2VfY2FzZV8xLnNlbnRlbmNlQ2FzZSkoc2VudGVuY2UpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBTdHJpbmdDYXNlXzEuU3RyaW5nQ2FzZS5zbmFrZUNhc2U6XG4gICAgICAgICAgICAgICAgc2VudGVuY2UgPSAoMCwgY2hhbmdlX2Nhc2VfMS5zbmFrZUNhc2UpKHNlbnRlbmNlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgU3RyaW5nQ2FzZV8xLlN0cmluZ0Nhc2UuZmxhdENhc2U6XG4gICAgICAgICAgICAgICAgc2VudGVuY2UgPSAoMCwgY2hhbmdlX2Nhc2VfMS5jYW1lbENhc2UpKHNlbnRlbmNlKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICAvLyBSZW1vdmUgYWxsIHVuZGVyc2NvcmVzIGlmIGZvcm1hdCBpcyBub3Qgc25ha2VfY2FzZSwgc2luY2UgdGhlIGxpYnJhcnkgaGFzIHVuaW50ZW5kZWQgYmVoYXZpb3Igd2l0aCBudW1iZXJpYyB2YWx1ZXMgaW4gdGhpcyBjYXNlXG4gICAgICAgIGlmIChmb3JtYXQgIT09IFN0cmluZ0Nhc2VfMS5TdHJpbmdDYXNlLnNuYWtlQ2FzZSAmJiBmb3JtYXQgIT09IFN0cmluZ0Nhc2VfMS5TdHJpbmdDYXNlLmNvbnN0YW50Q2FzZSkge1xuICAgICAgICAgICAgc2VudGVuY2UgPSBzZW50ZW5jZS5yZXBsYWNlQWxsKCdfJywgJycpO1xuICAgICAgICB9XG4gICAgICAgIC8vIElmIHZhcmlhYmxlIHN0YXJ0cyB3aXRoIGFueXRoaW5nIGJ1dCBsZXR0ZXIsIGFkZCBcIl9cIiBpbiBmcm9udCBvZiBpdFxuICAgICAgICBpZiAoc2VudGVuY2UubWF0Y2goL15bXmEtekEtWl0vKSkge1xuICAgICAgICAgICAgc2VudGVuY2UgPSAnXycgKyBzZW50ZW5jZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2VudGVuY2U7XG4gICAgfVxuICAgIC8qKiBDb252ZXJ0IGFueSBzdHJpbmcgdG8gQ1NTIHZhcmlhYmxlIHJlZmVyZW5jZSAqL1xuICAgIHN0YXRpYyBuYW1lQXNDU1NWYXJSZWZlcmVuY2UobmFtZSkge1xuICAgICAgICByZXR1cm4gYHZhcigtLSR7bmFtZX0pYDtcbiAgICB9XG4gICAgLyoqIENvbnZlcnQgYW55IHN0cmluZyB0byBDU1MgdmFyaWFibGUgZGVjbGFyYXRpb24gKi9cbiAgICBzdGF0aWMgbmFtZUFzQ1NTVmFyRGVjbGFyYXRpb24obmFtZSkge1xuICAgICAgICByZXR1cm4gYC0tJHtuYW1lfWA7XG4gICAgfVxufVxuZXhwb3J0cy5OYW1pbmdIZWxwZXIgPSBOYW1pbmdIZWxwZXI7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVGhlbWVIZWxwZXIgPSB2b2lkIDA7XG5jb25zdCBOYW1pbmdIZWxwZXJfMSA9IHJlcXVpcmUoXCIuL05hbWluZ0hlbHBlclwiKTtcbmNvbnN0IFN0cmluZ0Nhc2VfMSA9IHJlcXVpcmUoXCIuLi9lbnVtcy9TdHJpbmdDYXNlXCIpO1xuY2xhc3MgVGhlbWVIZWxwZXIge1xuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiB0b2tlbiB0eXBlIGhhcyBhbnkgdGhlbWVkIHRva2VucyBpbiBnaXZlbiB0aGVtZVxuICAgICAqIEBwYXJhbSB0b2tlbnMgLSBBbGwgdG9rZW5zXG4gICAgICogQHBhcmFtIHR5cGUgLSBUb2tlbiB0eXBlIHRvIGNoZWNrXG4gICAgICogQHBhcmFtIHRoZW1lIC0gVGhlbWUgdG8gY2hlY2sgYWdhaW5zdFxuICAgICAqIEByZXR1cm5zIFRydWUgaWYgdGhlIHR5cGUgaGFzIGFueSB0aGVtZWQgdG9rZW5zXG4gICAgICovXG4gICAgc3RhdGljIGhhc1RoZW1lZFRva2Vucyh0b2tlbnMsIHR5cGUsIHRoZW1lKSB7XG4gICAgICAgIGNvbnN0IHRva2Vuc09mVHlwZSA9IHRva2Vucy5maWx0ZXIoKHRva2VuKSA9PiB0b2tlbi50b2tlblR5cGUgPT09IHR5cGUpO1xuICAgICAgICBjb25zdCBvdmVycmlkZGVuVG9rZW5JZHMgPSBuZXcgU2V0KHRoZW1lLm92ZXJyaWRkZW5Ub2tlbnMubWFwKHQgPT4gdC5pZCkpO1xuICAgICAgICByZXR1cm4gdG9rZW5zT2ZUeXBlLnNvbWUodG9rZW4gPT4gb3ZlcnJpZGRlblRva2VuSWRzLmhhcyh0b2tlbi5pZCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGaWx0ZXJzIHRva2VucyB0byBvbmx5IGluY2x1ZGUgdGhvc2UgdGhhdCBhcmUgdGhlbWVkXG4gICAgICogQHBhcmFtIHRva2VucyAtIFRva2VucyB0byBmaWx0ZXJcbiAgICAgKiBAcGFyYW0gdGhlbWUgLSBUaGVtZSB0byBjaGVjayBhZ2FpbnN0XG4gICAgICogQHJldHVybnMgRmlsdGVyZWQgYXJyYXkgb2YgdG9rZW5zIHRoYXQgaGF2ZSB0aGVtZSBvdmVycmlkZXNcbiAgICAgKi9cbiAgICBzdGF0aWMgZmlsdGVyVGhlbWVkVG9rZW5zKHRva2VucywgdGhlbWUpIHtcbiAgICAgICAgY29uc3Qgb3ZlcnJpZGRlblRva2VuSWRzID0gbmV3IFNldCh0aGVtZS5vdmVycmlkZGVuVG9rZW5zLm1hcCh0ID0+IHQuaWQpKTtcbiAgICAgICAgcmV0dXJuIHRva2Vucy5maWx0ZXIodG9rZW4gPT4gb3ZlcnJpZGRlblRva2VuSWRzLmhhcyh0b2tlbi5pZCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZW1lIGlkZW50aWZpZXIgZm9yIGZpbGUgb3JnYW5pemF0aW9uXG4gICAgICogQHBhcmFtIHRoZW1lIC0gVGhlbWUgb2JqZWN0IG9yIHN0cmluZ1xuICAgICAqIEBwYXJhbSBzdHJpbmdDYXNlIC0gQ2FzZSBzdHlsZSB0byBhcHBseSB0byB0aGUgaWRlbnRpZmllciAoZGVmYXVsdHMgdG8ga2ViYWJDYXNlKVxuICAgICAqIEByZXR1cm5zIE5vcm1hbGl6ZWQgdGhlbWUgaWRlbnRpZmllciBpbiBzcGVjaWZpZWQgY2FzZVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXRUaGVtZUlkZW50aWZpZXIodGhlbWUsIHN0cmluZ0Nhc2UgPSBTdHJpbmdDYXNlXzEuU3RyaW5nQ2FzZS5rZWJhYkNhc2UpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGVtZSA9PT0gJ3N0cmluZycpXG4gICAgICAgICAgICByZXR1cm4gdGhlbWU7XG4gICAgICAgIGNvbnN0IGlkZW50aWZpZXIgPSB0aGVtZS5jb2RlTmFtZSB8fCB0aGVtZS5uYW1lO1xuICAgICAgICByZXR1cm4gTmFtaW5nSGVscGVyXzEuTmFtaW5nSGVscGVyLmNvZGVTYWZlVmFyaWFibGVOYW1lKGlkZW50aWZpZXIsIHN0cmluZ0Nhc2UpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIGRpc3BsYXkgbmFtZSBmb3IgdGhlbWVcbiAgICAgKiBAcGFyYW0gdGhlbWUgLSBUaGVtZSBvYmplY3Qgb3Igc3RyaW5nXG4gICAgICogQHJldHVybnMgVGhlbWUgZGlzcGxheSBuYW1lXG4gICAgICovXG4gICAgc3RhdGljIGdldFRoZW1lTmFtZSh0aGVtZSkge1xuICAgICAgICBpZiAodHlwZW9mIHRoZW1lID09PSAnc3RyaW5nJylcbiAgICAgICAgICAgIHJldHVybiB0aGVtZTtcbiAgICAgICAgY29uc3QgaWRlbnRpZmllciA9IHRoZW1lLmNvZGVOYW1lIHx8IHRoZW1lLm5hbWU7XG4gICAgICAgIHJldHVybiBOYW1pbmdIZWxwZXJfMS5OYW1pbmdIZWxwZXIuY29kZVNhZmVWYXJpYWJsZU5hbWUoaWRlbnRpZmllciwgU3RyaW5nQ2FzZV8xLlN0cmluZ0Nhc2UuY2FwaXRhbENhc2UpO1xuICAgIH1cbn1cbmV4cG9ydHMuVGhlbWVIZWxwZXIgPSBUaGVtZUhlbHBlcjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zdXJlT3B0aW9uYWxSZWZlcmVuY2UgPSBzdXJlT3B0aW9uYWxSZWZlcmVuY2U7XG5leHBvcnRzLm5vcm1hbGl6ZVRleHRXZWlnaHQgPSBub3JtYWxpemVUZXh0V2VpZ2h0O1xuLyoqIEZpbmRzIHJlZmVyZW5jZSBhbmQgbWFrZXMgc3VyZSBpdCBleGlzdHMgaWYgcmVmZXJlbmNlIHdhcyBwcm92aWRlZC4gSWYgbnVsbCB3YXMgcHJvdmlkZWQsIG51bGwgaXMgb24gdGhlIG91dHB1dCBhcyB3ZWxsIHRvIG1ha2Ugc2Vla2luZyBvdXRzaWRlIGZldyBsaW5lcyBzbWFsbGVyICovXG5mdW5jdGlvbiBzdXJlT3B0aW9uYWxSZWZlcmVuY2UocmVmZXJlbmNlSWQsIGFsbFRva2VucywgYWxsb3dSZWZlcmVuY2VzID0gdHJ1ZSkge1xuICAgIGlmICghcmVmZXJlbmNlSWQgfHwgIWFsbG93UmVmZXJlbmNlcykge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgdG9rZW4gPSBhbGxUb2tlbnMuZ2V0KHJlZmVyZW5jZUlkKTtcbiAgICBpZiAoIXRva2VuKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVHJ5aW5nIHRvIHJldHJpZXZlIHVua25vd24gcmVmZXJlbmNlZCB0b2tlbiAke3JlZmVyZW5jZUlkfWApO1xuICAgIH1cbiAgICByZXR1cm4gdG9rZW47XG59XG5mdW5jdGlvbiBub3JtYWxpemVUZXh0V2VpZ2h0KHdlaWdodCkge1xuICAgIC8vIENvbnZlcnQgdG8gbG93ZXJjYXNlIGZvciBjYXNlLWluc2Vuc2l0aXZlIGNvbXBhcmlzb25cbiAgICBjb25zdCBub3JtYWxpemVkVGV4dCA9IHdlaWdodC50b0xvd2VyQ2FzZSgpLnRyaW0oKTtcbiAgICAvLyBGaXJzdCwgY2hlY2sgaWYgaXQncyBhbHJlYWR5IGEgdmFsaWQgbnVtYmVyXG4gICAgY29uc3QgbnVtZXJpY1dlaWdodCA9IHBhcnNlSW50KG5vcm1hbGl6ZWRUZXh0KTtcbiAgICBpZiAoIWlzTmFOKG51bWVyaWNXZWlnaHQpKSB7XG4gICAgICAgIHJldHVybiBudW1lcmljV2VpZ2h0O1xuICAgIH1cbiAgICAvLyBNYXAgY29tbW9uIHdlaWdodCBuYW1lcyB0byB0aGVpciBudW1lcmljIHZhbHVlc1xuICAgIHN3aXRjaCAobm9ybWFsaXplZFRleHQpIHtcbiAgICAgICAgY2FzZSBcInRoaW5cIjpcbiAgICAgICAgICAgIHJldHVybiAxMDA7XG4gICAgICAgIGNhc2UgXCJoYWlybGluZVwiOlxuICAgICAgICAgICAgcmV0dXJuIDEwMDtcbiAgICAgICAgY2FzZSBcImV4dHJhIGxpZ2h0XCI6XG4gICAgICAgIGNhc2UgXCJleHRyYWxpZ2h0XCI6XG4gICAgICAgIGNhc2UgXCJ1bHRyYSBsaWdodFwiOlxuICAgICAgICBjYXNlIFwidWx0cmFsaWdodFwiOlxuICAgICAgICAgICAgcmV0dXJuIDIwMDtcbiAgICAgICAgY2FzZSBcImxpZ2h0XCI6XG4gICAgICAgICAgICByZXR1cm4gMzAwO1xuICAgICAgICBjYXNlIFwibm9ybWFsXCI6XG4gICAgICAgIGNhc2UgXCJyZWd1bGFyXCI6XG4gICAgICAgIGNhc2UgXCJib29rXCI6XG4gICAgICAgICAgICByZXR1cm4gNDAwO1xuICAgICAgICBjYXNlIFwibWVkaXVtXCI6XG4gICAgICAgICAgICByZXR1cm4gNTAwO1xuICAgICAgICBjYXNlIFwic2VtaSBib2xkXCI6XG4gICAgICAgIGNhc2UgXCJzZW1pYm9sZFwiOlxuICAgICAgICBjYXNlIFwiZGVtaSBib2xkXCI6XG4gICAgICAgIGNhc2UgXCJkZW1pYm9sZFwiOlxuICAgICAgICAgICAgcmV0dXJuIDYwMDtcbiAgICAgICAgY2FzZSBcImJvbGRcIjpcbiAgICAgICAgICAgIHJldHVybiA3MDA7XG4gICAgICAgIGNhc2UgXCJleHRyYSBib2xkXCI6XG4gICAgICAgIGNhc2UgXCJleHRyYWJvbGRcIjpcbiAgICAgICAgY2FzZSBcInVsdHJhIGJvbGRcIjpcbiAgICAgICAgY2FzZSBcInVsdHJhYm9sZFwiOlxuICAgICAgICAgICAgcmV0dXJuIDgwMDtcbiAgICAgICAgY2FzZSBcImJsYWNrXCI6XG4gICAgICAgIGNhc2UgXCJoZWF2eVwiOlxuICAgICAgICAgICAgcmV0dXJuIDkwMDtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIC8vIERlZmF1bHQgdG8gbm9ybWFsIHdlaWdodCAoNDAwKSBpZiB0aGUgdmFsdWUgaXMgbm90IHJlY29nbml6ZWRcbiAgICAgICAgICAgIHJldHVybiA0MDA7XG4gICAgfVxufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlRva2VuTmFtZVRyYWNrZXIgPSB2b2lkIDA7XG5jb25zdCBOYW1pbmdIZWxwZXJfMSA9IHJlcXVpcmUoXCIuL05hbWluZ0hlbHBlclwiKTtcbi8qKlxuICogVHJhY2tzIGFuZCBnZW5lcmF0ZXMgdW5pcXVlIG5hbWVzIGZvciBkZXNpZ24gdG9rZW5zIHdoaWxlIG1haW50YWluaW5nIGNvbnNpc3RlbmN5XG4gKiBhY3Jvc3MgbXVsdGlwbGUgcmVmZXJlbmNlcyB0byB0aGUgc2FtZSB0b2tlbi4gVGhpcyBlbnN1cmVzIHRoYXQgZWFjaCB0b2tlbiBnZXRzXG4gKiBhIHVuaXF1ZSwgY29kZS1zYWZlIG5hbWUgdGhhdCBjYW4gYmUgdXNlZCBpbiBnZW5lcmF0ZWQgY29kZS5cbiAqL1xuY2xhc3MgVG9rZW5OYW1lVHJhY2tlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIC8qKiBNYXBzIHRva2VuIElEcyB0byB0aGVpciBnZW5lcmF0ZWQgdW5pcXVlIG5hbWVzICovXG4gICAgICAgIHRoaXMudG9rZW5OYW1lTWFwID0gbmV3IE1hcCgpOyAvLyB0b2tlbi5pZCAtPiBnZW5lcmF0ZWQgbmFtZVxuICAgICAgICAvKiogTWFwcyBnZW5lcmF0ZWQgbmFtZXMgYmFjayB0byB0b2tlbiBJRHMgdG8gY2hlY2sgZm9yIG5hbWluZyBjb25mbGljdHMgKi9cbiAgICAgICAgdGhpcy5uYW1lVG9Ub2tlbk1hcCA9IG5ldyBNYXAoKTsgLy8gZ2VuZXJhdGVkIG5hbWUgLT4gdG9rZW4uaWRcbiAgICAgICAgLyoqIE1hcHMgaGllcmFyY2h5IGxldmVsICsgbmFtZSB0byB0b2tlbiBJRHMgKi9cbiAgICAgICAgdGhpcy5oaWVyYXJjaHlOYW1lTWFwID0gbmV3IE1hcCgpOyAvLyBcInBhdGgvbmFtZVwiIC0+IFNldCBvZiB0b2tlbiBJRHNcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2xlYXJzIGFsbCBzdG9yZWQgdG9rZW4gbmFtZSBtYXBwaW5ncywgZWZmZWN0aXZlbHkgcmVzZXR0aW5nIHRoZSB0cmFja2VyIHN0YXRlLlxuICAgICAqL1xuICAgIHJlc2V0KCkge1xuICAgICAgICB0aGlzLnRva2VuTmFtZU1hcC5jbGVhcigpO1xuICAgICAgICB0aGlzLm5hbWVUb1Rva2VuTWFwLmNsZWFyKCk7XG4gICAgICAgIHRoaXMuaGllcmFyY2h5TmFtZU1hcC5jbGVhcigpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIGEgY2xlYW4sIHVuaXF1ZSBuYW1lIGZvciBhIHRva2VuIHdpdGhvdXQgYW55IGdyb3VwIHByZWZpeGVzLlxuICAgICAqIFVzZWQgZm9yIGhpZXJhcmNoaWNhbCBzdHJ1Y3R1cmVzIHdoZXJlIHRoZSBwYXRoIGhhbmRsZXMgZ3JvdXBpbmcuXG4gICAgICovXG4gICAgZ2V0U2ltcGxlVG9rZW5OYW1lKHRva2VuLCBmb3JtYXQsIGZvckV4cG9ydCA9IGZhbHNlLCBwYXRoID0gW10gLy8gQWRkIHBhdGggcGFyYW1ldGVyIHRvIGNoZWNrIGhpZXJhcmNoeSBsZXZlbFxuICAgICkge1xuICAgICAgICAvLyBDcmVhdGUgYSB1bmlxdWUga2V5IGZvciB0aGlzIGhpZXJhcmNoeSBsZXZlbFxuICAgICAgICBjb25zdCBoaWVyYXJjaHlLZXkgPSBwYXRoLmpvaW4oJy8nKTtcbiAgICAgICAgY29uc3QgaGllcmFyY2h5RnVsbEtleSA9IGAke2hpZXJhcmNoeUtleX0vJHt0b2tlbi5uYW1lfWA7XG4gICAgICAgIC8vIElmIHdlJ3JlIGxvb2tpbmcgdXAgYSBuYW1lIGZvciByZWZlcmVuY2UgYW5kIGl0IHdhcyBhbHJlYWR5IGdlbmVyYXRlZCwgdXNlIHRoYXRcbiAgICAgICAgaWYgKCFmb3JFeHBvcnQgJiYgdGhpcy50b2tlbk5hbWVNYXAuaGFzKHRva2VuLmlkKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudG9rZW5OYW1lTWFwLmdldCh0b2tlbi5pZCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gR2V0IHRoZSBiYXNlIG5hbWUgd2l0aG91dCBhbnkgcHJlZml4ZXNcbiAgICAgICAgbGV0IG5hbWUgPSBOYW1pbmdIZWxwZXJfMS5OYW1pbmdIZWxwZXIuY29kZVNhZmVWYXJpYWJsZU5hbWUodG9rZW4ubmFtZSwgZm9ybWF0KTtcbiAgICAgICAgLy8gR2V0IG9yIGNyZWF0ZSB0aGUgc2V0IG9mIHRva2VuIElEcyBmb3IgdGhpcyBoaWVyYXJjaHkgbGV2ZWwgYW5kIG5hbWVcbiAgICAgICAgaWYgKCF0aGlzLmhpZXJhcmNoeU5hbWVNYXAuaGFzKGhpZXJhcmNoeUZ1bGxLZXkpKSB7XG4gICAgICAgICAgICB0aGlzLmhpZXJhcmNoeU5hbWVNYXAuc2V0KGhpZXJhcmNoeUZ1bGxLZXksIG5ldyBTZXQoKSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdG9rZW5zQXRMZXZlbCA9IHRoaXMuaGllcmFyY2h5TmFtZU1hcC5nZXQoaGllcmFyY2h5RnVsbEtleSk7XG4gICAgICAgIC8vIE9ubHkgYWRkIHN1ZmZpeCBpZiB0aGVyZSdzIGFub3RoZXIgdG9rZW4gd2l0aCB0aGUgc2FtZSBuYW1lIGF0IHRoZSBzYW1lIGxldmVsXG4gICAgICAgIGlmICh0b2tlbnNBdExldmVsLnNpemUgPiAwICYmICF0b2tlbnNBdExldmVsLmhhcyh0b2tlbi5pZCkpIHtcbiAgICAgICAgICAgIG5hbWUgPSBgJHtuYW1lfV8ke3Rva2Vuc0F0TGV2ZWwuc2l6ZX1gO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRyYWNrIHRoZSB0b2tlbiBhdCB0aGlzIGhpZXJhcmNoeSBsZXZlbFxuICAgICAgICB0b2tlbnNBdExldmVsLmFkZCh0b2tlbi5pZCk7XG4gICAgICAgIC8vIFRyYWNrIHRoZSBuYW1lIGlmIG5vdCBmb3IgZXhwb3J0XG4gICAgICAgIGlmICghZm9yRXhwb3J0KSB7XG4gICAgICAgICAgICB0aGlzLnRva2VuTmFtZU1hcC5zZXQodG9rZW4uaWQsIG5hbWUpO1xuICAgICAgICAgICAgdGhpcy5uYW1lVG9Ub2tlbk1hcC5zZXQobmFtZSwgdG9rZW4uaWQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuYW1lO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgb3IgcmV0cmlldmVzIGEgdW5pcXVlLCBjb2RlLXNhZmUgbmFtZSBmb3IgYSBnaXZlbiB0b2tlbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB0b2tlbiAtIFRoZSBkZXNpZ24gdG9rZW4gdGhhdCBuZWVkcyBhIG5hbWVcbiAgICAgKiBAcGFyYW0gdG9rZW5Hcm91cHMgLSBBcnJheSBvZiBhbGwgdG9rZW4gZ3JvdXBzLCB1c2VkIHRvIGZpbmQgdGhlIHRva2VuJ3MgcGFyZW50IGdyb3VwXG4gICAgICogQHBhcmFtIGZvcm1hdCAtIFRoZSBkZXNpcmVkIGNhc2UgZm9ybWF0IGZvciB0aGUgZ2VuZXJhdGVkIG5hbWUgKGUuZy4sIGNhbWVsQ2FzZSwgc25ha2VfY2FzZSlcbiAgICAgKiBAcGFyYW0gcHJlZml4IC0gT3B0aW9uYWwgcHJlZml4IHRvIGFkZCB0byB0aGUgZ2VuZXJhdGVkIG5hbWVcbiAgICAgKiBAcGFyYW0gZm9yRXhwb3J0IC0gSWYgdHJ1ZSwgZ2VuZXJhdGVzIGEgbmV3IG5hbWUgd2l0aG91dCBzdG9yaW5nIGl0LiBJZiBmYWxzZSwgc3RvcmVzIGFuZCByZXVzZXMgbmFtZXNcbiAgICAgKiBAcmV0dXJucyBBIHVuaXF1ZSwgY29kZS1zYWZlIG5hbWUgZm9yIHRoZSB0b2tlblxuICAgICAqL1xuICAgIGdldFRva2VuTmFtZSh0b2tlbiwgdG9rZW5Hcm91cHMsIGZvcm1hdCwgcHJlZml4LCBmb3JFeHBvcnQgPSBmYWxzZSkge1xuICAgICAgICAvLyBJZiB3ZSdyZSBsb29raW5nIHVwIGEgbmFtZSBmb3IgcmVmZXJlbmNlIGFuZCBpdCB3YXMgYWxyZWFkeSBnZW5lcmF0ZWQsIHVzZSB0aGF0XG4gICAgICAgIGlmICghZm9yRXhwb3J0ICYmIHRoaXMudG9rZW5OYW1lTWFwLmhhcyh0b2tlbi5pZCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRva2VuTmFtZU1hcC5nZXQodG9rZW4uaWQpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhcmVudCA9IHRva2VuR3JvdXBzLmZpbmQoKGdyb3VwKSA9PiBncm91cC5pZCA9PT0gdG9rZW4ucGFyZW50R3JvdXBJZCk7XG4gICAgICAgIC8vIEdldCB0aGUgYmFzZSBuYW1lXG4gICAgICAgIGxldCBuYW1lID0gTmFtaW5nSGVscGVyXzEuTmFtaW5nSGVscGVyLmNvZGVTYWZlVmFyaWFibGVOYW1lRm9yVG9rZW4odG9rZW4sIGZvcm1hdCwgcGFyZW50LCBwcmVmaXgpO1xuICAgICAgICBsZXQgY291bnRlciA9IDE7XG4gICAgICAgIC8vIElmIG5hbWUgaXMgdGFrZW4gYnkgYSBkaWZmZXJlbnQgdG9rZW4sIGFkZCBhIHN1ZmZpeFxuICAgICAgICB3aGlsZSAodGhpcy5uYW1lVG9Ub2tlbk1hcC5oYXMobmFtZSkgJiYgdGhpcy5uYW1lVG9Ub2tlbk1hcC5nZXQobmFtZSkgIT09IHRva2VuLmlkKSB7XG4gICAgICAgICAgICBuYW1lID0gYCR7bmFtZX1fY29weV8ke2NvdW50ZXIrK31gO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRyYWNrIHRoZSBuYW1lIGlmIG5vdCBmb3IgZXhwb3J0XG4gICAgICAgIGlmICghZm9yRXhwb3J0KSB7XG4gICAgICAgICAgICB0aGlzLnRva2VuTmFtZU1hcC5zZXQodG9rZW4uaWQsIG5hbWUpO1xuICAgICAgICAgICAgdGhpcy5uYW1lVG9Ub2tlbk1hcC5zZXQobmFtZSwgdG9rZW4uaWQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuYW1lO1xuICAgIH1cbn1cbmV4cG9ydHMuVG9rZW5OYW1lVHJhY2tlciA9IFRva2VuTmFtZVRyYWNrZXI7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuV3JpdGVUb2tlblByb3BTdG9yZSA9IHZvaWQgMDtcbmNvbnN0IE5hbWluZ0hlbHBlcl8xID0gcmVxdWlyZShcIi4vTmFtaW5nSGVscGVyXCIpO1xuY29uc3QgU3RyaW5nQ2FzZV8xID0gcmVxdWlyZShcIi4uL2VudW1zL1N0cmluZ0Nhc2VcIik7XG4vKipcbiAqIENsYXNzIHJlc3BvbnNpYmxlIGZvciBzdG9yaW5nIGFuZCB1cGRhdGluZyB0b2tlbiBwcm9wZXJ0aWVzIGluIFN1cGVybm92YS5cbiAqL1xuY2xhc3MgV3JpdGVUb2tlblByb3BTdG9yZSB7XG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgdGhlIHN0b3JlIHdpdGggbmVjZXNzYXJ5IGRlcGVuZGVuY2llcy5cbiAgICAgKiBAcGFyYW0gc2RrIC0gVGhlIFN1cGVybm92YSBTREsgaW5zdGFuY2UuXG4gICAgICogQHBhcmFtIHRhcmdldCAtIFRoZSByZW1vdGUgdmVyc2lvbiBpZGVudGlmaWVyIHRvIHdyaXRlIHRvLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNkaywgdGFyZ2V0KSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTdG9yZXMgdG9rZW4gcHJvcGVydHkgdmFsdWVzIHRvIGJlIHdyaXR0ZW4uXG4gICAgICAgICAqIE91dGVyIE1hcDogcHJvcGVydHkgbmFtZSAtPiBJbm5lciBNYXA6IHRva2VuIC0+IHZhbHVlLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy50b2tlblByb3BlcnR5V3JpdGVNYXAgPSBuZXcgTWFwKCk7XG4gICAgICAgIHRoaXMuc2RrID0gc2RrO1xuICAgICAgICB0aGlzLnRhcmdldCA9IHRhcmdldDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3RvcmVzIGEgdmFsdWUgZm9yIGEgc3BlY2lmaWMgdG9rZW4gYW5kIHByb3BlcnR5IG5hbWUgdG8gYmUgd3JpdHRlbiBsYXRlci5cbiAgICAgKiBAcGFyYW0gdG9rZW4gLSBUaGUgdG9rZW4gdG8gYXNzb2NpYXRlIHRoZSB2YWx1ZSB3aXRoLlxuICAgICAqIEBwYXJhbSBwcm9wZXJ0eU5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgcHJvcGVydHkuXG4gICAgICogQHBhcmFtIHZhbHVlIC0gVGhlIHZhbHVlIHRvIHN0b3JlLlxuICAgICAqL1xuICAgIHN0b3JlVmFsdWVGb3JUb2tlblByb3BlcnR5KHRva2VuLCBwcm9wZXJ0eU5hbWUsIHZhbHVlKSB7XG4gICAgICAgIC8vIEdldCBvciBpbml0aWFsaXplIHRoZSBtYXAgZm9yIHRoaXMgcHJvcGVydHkgbmFtZVxuICAgICAgICBsZXQgdG9rZW5NYXAgPSB0aGlzLnRva2VuUHJvcGVydHlXcml0ZU1hcC5nZXQocHJvcGVydHlOYW1lKTtcbiAgICAgICAgaWYgKCF0b2tlbk1hcCkge1xuICAgICAgICAgICAgdG9rZW5NYXAgPSBuZXcgTWFwKCk7XG4gICAgICAgICAgICB0aGlzLnRva2VuUHJvcGVydHlXcml0ZU1hcC5zZXQocHJvcGVydHlOYW1lLCB0b2tlbk1hcCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQXNzb2NpYXRlIHRoZSB2YWx1ZSB3aXRoIHRoZSB0b2tlblxuICAgICAgICB0b2tlbk1hcC5zZXQodG9rZW4sIHZhbHVlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVXBkYXRlcyBhbGwgc3RvcmVkIHRva2VuIHByb3BlcnRpZXMgaW4gdGhlIGV4dGVybmFsIHN5c3RlbS5cbiAgICAgKiBGZXRjaGVzIGV4aXN0aW5nIHByb3BlcnRpZXMgb25jZSBhbmQgY3JlYXRlcyBtaXNzaW5nIG9uZXMgZWZmaWNpZW50bHkuXG4gICAgICovXG4gICAgYXN5bmMgYmF0Y2hVcGRhdGVTdG9yZWRUb2tlblByb3BlcnRpZXMoKSB7XG4gICAgICAgIC8vIEV4aXQgZWFybHkgaWYgdGhlcmUgYXJlIG5vIHByb3BlcnRpZXMgdG8gdXBkYXRlXG4gICAgICAgIGlmICh0aGlzLnRva2VuUHJvcGVydHlXcml0ZU1hcC5zaXplID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gRmV0Y2ggYWxsIGV4aXN0aW5nIHByb3BlcnRpZXMgb25jZSBhbmQgbWFwIHRoZW0gYnkgbmFtZSBmb3IgcXVpY2sgbG9va3VwXG4gICAgICAgIGxldCBwcm9wZXJ0aWVzID0gYXdhaXQgdGhpcy5zZGsudG9rZW5zLmdldFRva2VuUHJvcGVydGllcyh0aGlzLnRhcmdldCk7XG4gICAgICAgIC8vIFByb2Nlc3MgZWFjaCBwcm9wZXJ0eSBhbmQgaXRzIGFzc29jaWF0ZWQgdG9rZW4tdmFsdWUgcGFpcnNcbiAgICAgICAgZm9yIChjb25zdCBbcHJvcGVydHlOYW1lLCB0b2tlbk1hcF0gb2YgdGhpcy50b2tlblByb3BlcnR5V3JpdGVNYXApIHtcbiAgICAgICAgICAgIGxldCBwcm9wZXJ0eSA9IHByb3BlcnRpZXMuZmluZCgocHJvcCkgPT4gcHJvcC5uYW1lID09PSBwcm9wZXJ0eU5hbWUpO1xuICAgICAgICAgICAgLy8gQ3JlYXRlIHRoZSBwcm9wZXJ0eSBpZiBpdCBkb2VzbuKAmXQgZXhpc3RcbiAgICAgICAgICAgIGlmICghcHJvcGVydHkpIHtcbiAgICAgICAgICAgICAgICB2b2lkIChhd2FpdCB0aGlzLnNkay50b2tlbnMuY3JlYXRlVG9rZW5Qcm9wZXJ0eSh0aGlzLnRhcmdldCwge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIkdlbmVyaWNcIiwgLy8gVXNpbmcgXCJHZW5lcmljXCIgKGEuay5hLiBmb3JtYXR0ZWQgXCJDb2RlXCIgaW4gU3VwZXJub3ZhIFVJKSBpbnN0ZWFkIG9mIGEgcHVyZSBcIlRleHRcIiBwcm9wZXJ0eVxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBwcm9wZXJ0eU5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGNvZGVOYW1lOiBOYW1pbmdIZWxwZXJfMS5OYW1pbmdIZWxwZXIuY29kZVNhZmVWYXJpYWJsZU5hbWUoW3Byb3BlcnR5TmFtZV0sIFN0cmluZ0Nhc2VfMS5TdHJpbmdDYXNlLmNhbWVsQ2FzZSksXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbldpZHRoOiAyMDAsXG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIlZhcmlhYmxlIG5hbWUgdG8gdXNlIGluIGNvZGVcIixcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgcHJvcGVydGllcyA9IGF3YWl0IHRoaXMuc2RrLnRva2Vucy5nZXRUb2tlblByb3BlcnRpZXModGhpcy50YXJnZXQpO1xuICAgICAgICAgICAgICAgIHByb3BlcnR5ID0gcHJvcGVydGllcy5maW5kKChwcm9wKSA9PiBwcm9wLm5hbWUgPT09IHByb3BlcnR5TmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXByb3BlcnR5KSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gcmV0cmlldmUgb3IgY3JlYXRlIHByb3BlcnR5ICR7cHJvcGVydHlOYW1lfS5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFVwZGF0ZSBlYWNoIHRva2Vu4oCZcyBwcm9wZXJ0eSB2YWx1ZVxuICAgICAgICAgICAgY29uc3QgcGF5bG9hZCA9IEFycmF5LmZyb20odG9rZW5NYXApLm1hcCgoW3Rva2VuLCB2YWx1ZVRvV3JpdGVdKSA9PiAoe1xuICAgICAgICAgICAgICAgIGRlZmluaXRpb25JZDogcHJvcGVydHkuaWQsXG4gICAgICAgICAgICAgICAgdGFyZ2V0RWxlbWVudElkOiB0b2tlbi5pZCxcbiAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWVUb1dyaXRlLFxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5zZGsuYnVsa09wZXJhdGlvbnMudXBkYXRlRWxlbWVudFByb3BlcnRpZXModGhpcy50YXJnZXQsIHBheWxvYWQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdyaXRlcyB0b2tlbiBwcm9wZXJ0aWVzIHRvIHRoZSBzcGVjaWZpZWQgcHJvcGVydHkgbmFtZSB1c2luZyB0aGUgcHJvdmlkZWQgdmFsdWUgZ2VuZXJhdG9yLlxuICAgICAqIEBwYXJhbSBwcm9wZXJ0eU5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgdG8gd3JpdGUgdG8uXG4gICAgICogQHBhcmFtIHRva2VucyAtIFRoZSBsaXN0IG9mIHRva2VucyB0byB1cGRhdGUuXG4gICAgICogQHBhcmFtIHZhbHVlR2VuZXJhdG9yIC0gQSBmdW5jdGlvbiB0aGF0IGdlbmVyYXRlcyB0aGUgcHJvcGVydHkgdmFsdWUgKHVzdWFsbHkgbmFtZSkgZm9yIGVhY2ggdG9rZW4uXG4gICAgICovXG4gICAgYXN5bmMgd3JpdGVUb2tlblByb3BlcnRpZXMocHJvcGVydHlOYW1lLCB0b2tlbnMsIHZhbHVlR2VuZXJhdG9yKSB7XG4gICAgICAgIGNvbnN0IHRyaW1tZWRQcm9wZXJ0eU5hbWUgPSBwcm9wZXJ0eU5hbWU/LnRyaW0oKTtcbiAgICAgICAgaWYgKCF0cmltbWVkUHJvcGVydHlOYW1lKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCB0b2tlbiBvZiB0b2tlbnMpIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gdmFsdWVHZW5lcmF0b3IodG9rZW4pO1xuICAgICAgICAgICAgdGhpcy5zdG9yZVZhbHVlRm9yVG9rZW5Qcm9wZXJ0eSh0b2tlbiwgdHJpbW1lZFByb3BlcnR5TmFtZSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGF3YWl0IHRoaXMuYmF0Y2hVcGRhdGVTdG9yZWRUb2tlblByb3BlcnRpZXMoKTtcbiAgICB9XG59XG5leHBvcnRzLldyaXRlVG9rZW5Qcm9wU3RvcmUgPSBXcml0ZVRva2VuUHJvcFN0b3JlO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9oZWxwZXJzL05hbWluZ0hlbHBlclwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vaGVscGVycy9Db2xvckhlbHBlclwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vaGVscGVycy9Ub2tlbkhlbHBlclwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vaGVscGVycy9DU1NIZWxwZXJcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2hlbHBlcnMvRmlsZUhlbHBlclwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vaGVscGVycy9UaGVtZUhlbHBlclwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vaGVscGVycy9GaWxlTmFtZUhlbHBlclwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vaGVscGVycy9HZW5lcmFsSGVscGVyXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9lbnVtcy9TdHJpbmdDYXNlXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9lbnVtcy9Db2xvckZvcm1hdFwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vaGVscGVycy9Ub2tlbk5hbWVUcmFja2VyXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9oZWxwZXJzL1dyaXRlVG9rZW5Qcm9wU3RvcmVcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2hlbHBlcnMvS290bGluSGVscGVyXCIpLCBleHBvcnRzKTtcbiIsIigoKT0+e1widXNlIHN0cmljdFwiO3ZhciBlPXsxOihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5HcmFkaWVudFR5cGU9dm9pZCAwLGZ1bmN0aW9uKGUpe2UubGluZWFyPVwiTGluZWFyXCIsZS5yYWRpYWw9XCJSYWRpYWxcIixlLmFuZ3VsYXI9XCJBbmd1bGFyXCJ9KG98fCh0LkdyYWRpZW50VHlwZT1vPXt9KSl9LDMwNjooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuRG9jc0Jsb2NrVGV4dFByb3BlcnR5U3R5bGU9dm9pZCAwLGZ1bmN0aW9uKGUpe2UudGl0bGUxPVwiVGl0bGUxXCIsZS50aXRsZTI9XCJUaXRsZTJcIixlLnRpdGxlMz1cIlRpdGxlM1wiLGUudGl0bGU0PVwiVGl0bGU0XCIsZS50aXRsZTU9XCJUaXRsZTVcIixlLmRlZmF1bHQ9XCJEZWZhdWx0XCIsZS5kZWZhdWx0Qm9sZD1cIkRlZmF1bHRCb2xkXCIsZS5kZWZhdWx0U2VtaWJvbGQ9XCJEZWZhdWx0U2VtaWJvbGRcIixlLnNtYWxsPVwiU21hbGxcIixlLnNtYWxsQm9sZD1cIlNtYWxsQm9sZFwiLGUuc21hbGxTZW1pYm9sZD1cIlNtYWxsU2VtaWJvbGRcIixlLmN1c3RvbT1cIkN1c3RvbVwifShvfHwodC5Eb2NzQmxvY2tUZXh0UHJvcGVydHlTdHlsZT1vPXt9KSl9LDg5OTooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuQXNzZXRTY2FsZVR5cGU9dm9pZCAwLGZ1bmN0aW9uKGUpe2UuYXNwZWN0RmlsbD1cIkFzcGVjdEZpbGxcIixlLmFzcGVjdEZpdD1cIkFzcGVjdEZpdFwifShvfHwodC5Bc3NldFNjYWxlVHlwZT1vPXt9KSl9LDkxNTooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuQXNzZXRTY2FsZT12b2lkIDAsZnVuY3Rpb24oZSl7ZS54MT1cIngxXCIsZS54Mj1cIngyXCIsZS54Mz1cIngzXCIsZS54ND1cIng0XCJ9KG98fCh0LkFzc2V0U2NhbGU9bz17fSkpfSw5MjI6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LlRleHRDYXNlPXZvaWQgMCxmdW5jdGlvbihlKXtlLm9yaWdpbmFsPVwiT3JpZ2luYWxcIixlLnVwcGVyPVwiVXBwZXJcIixlLmxvd2VyPVwiTG93ZXJcIixlLmNhbWVsPVwiQ2FtZWxcIixlLnNtYWxsQ2Fwcz1cIlNtYWxsQ2Fwc1wifShvfHwodC5UZXh0Q2FzZT1vPXt9KSl9LDkzNDooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuSWNvblNldD12b2lkIDAsZnVuY3Rpb24oZSl7ZS5jaGVja0NpcmNsZT1cIkNoZWNrQ2lyY2xlXCIsZS5jcm9zc0NpcmNsZT1cIkNyb3NzQ2lyY2xlXCIsZS5hbGVydD1cIkFsZXJ0XCJ9KG98fCh0Lkljb25TZXQ9bz17fSkpfSwxMTYwOihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5BTExfQk9SREVSX1BPU0lUSU9OUz10LkJvcmRlclBvc2l0aW9uPXZvaWQgMCxmdW5jdGlvbihlKXtlLmluc2lkZT1cIkluc2lkZVwiLGUuY2VudGVyPVwiQ2VudGVyXCIsZS5vdXRzaWRlPVwiT3V0c2lkZVwifShvfHwodC5Cb3JkZXJQb3NpdGlvbj1vPXt9KSksdC5BTExfQk9SREVSX1BPU0lUSU9OUz1bby5pbnNpZGUsby5jZW50ZXIsby5vdXRzaWRlXX0sMTIzMzooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuRG9jc0VudGl0eVR5cGU9dm9pZCAwLGZ1bmN0aW9uKGUpe2UuZ3JvdXA9XCJHcm91cFwiLGUucGFnZT1cIlBhZ2VcIn0ob3x8KHQuRG9jc0VudGl0eVR5cGU9bz17fSkpfSwxMjU1OihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5GcmFtZUFsaWdubWVudD12b2lkIDAsZnVuY3Rpb24oZSl7ZS5mcmFtZUhlaWdodD1cIkZyYW1lSGVpZ2h0XCIsZS5jZW50ZXI9XCJDZW50ZXJcIn0ob3x8KHQuRnJhbWVBbGlnbm1lbnQ9bz17fSkpfSwxNDIzOihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Eb2N1bWVudGF0aW9uTGVnYWN5UGFnZUFzc2V0VHlwZT12b2lkIDAsZnVuY3Rpb24oZSl7ZS5pbWFnZT1cImltYWdlXCIsZS5maWdtYUZyYW1lPVwiZmlnbWFGcmFtZVwifShvfHwodC5Eb2N1bWVudGF0aW9uTGVnYWN5UGFnZUFzc2V0VHlwZT1vPXt9KSl9LDE2MDE6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkRvY3VtZW50YXRpb25MZWdhY3lQYWdlQmxvY2tUaGVtZVR5cGU9dm9pZCAwLGZ1bmN0aW9uKGUpe2Uub3ZlcnJpZGU9XCJPdmVycmlkZVwiLGUuY29tcGFyaXNvbj1cIkNvbXBhcmlzb25cIn0ob3x8KHQuRG9jdW1lbnRhdGlvbkxlZ2FjeVBhZ2VCbG9ja1RoZW1lVHlwZT1vPXt9KSl9LDE4NDY6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkRvY3VtZW50YXRpb25MZWdhY3lQYWdlQmxvY2tUeXBlPXZvaWQgMCxmdW5jdGlvbihlKXtlLnRleHQ9XCJUZXh0XCIsZS5oZWFkaW5nPVwiSGVhZGluZ1wiLGUuY29kZT1cIkNvZGVcIixlLnVub3JkZXJlZExpc3Q9XCJVbm9yZGVyZWRMaXN0XCIsZS5vcmRlcmVkTGlzdD1cIk9yZGVyZWRMaXN0XCIsZS5xdW90ZT1cIlF1b3RlXCIsZS5jYWxsb3V0PVwiQ2FsbG91dFwiLGUuZGl2aWRlcj1cIkRpdmlkZXJcIixlLmltYWdlPVwiSW1hZ2VcIixlLnRva2VuPVwiVG9rZW5cIixlLnRva2VuTGlzdD1cIlRva2VuTGlzdFwiLGUudG9rZW5Hcm91cD1cIlRva2VuR3JvdXBcIixlLnNob3J0Y3V0cz1cIlNob3J0Y3V0c1wiLGUubGluaz1cIkxpbmtcIixlLmZpZ21hRW1iZWQ9XCJGaWdtYUVtYmVkXCIsZS55b3V0dWJlRW1iZWQ9XCJZb3V0dWJlRW1iZWRcIixlLnN0b3J5Ym9va0VtYmVkPVwiU3Rvcnlib29rRW1iZWRcIixlLmdlbmVyaWNFbWJlZD1cIkVtYmVkXCIsZS5maWdtYUZyYW1lcz1cIkZpZ21hRnJhbWVzXCIsZS5jdXN0b209XCJDdXN0b21cIixlLnJlbmRlckNvZGU9XCJSZW5kZXJDb2RlXCIsZS5jb21wb25lbnRBc3NldHM9XCJDb21wb25lbnRBc3NldHNcIixlLmNvbHVtbj1cIkNvbHVtblwiLGUuY29sdW1uSXRlbT1cIkNvbHVtbkl0ZW1cIixlLnRhYnM9XCJUYWJzXCIsZS50YWJJdGVtPVwiVGFiSXRlbVwiLGUudGFibGU9XCJUYWJsZVwiLGUudGFibGVDZWxsPVwiVGFibGVDZWxsXCIsZS50YWJsZVJvdz1cIlRhYmxlUm93XCJ9KG98fCh0LkRvY3VtZW50YXRpb25MZWdhY3lQYWdlQmxvY2tUeXBlPW89e30pKX0sMjEyMzooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuRG9jdW1lbnRhdGlvbkxlZ2FjeUdyb3VwQmVoYXZpb3I9dm9pZCAwLGZ1bmN0aW9uKGUpe2UuZ3JvdXA9XCJHcm91cFwiLGUudGFicz1cIlRhYnNcIn0ob3x8KHQuRG9jdW1lbnRhdGlvbkxlZ2FjeUdyb3VwQmVoYXZpb3I9bz17fSkpfSwyNjU3OihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Eb2N1bWVudGF0aW9uTGVnYWN5UGFnZUJsb2NrU2hvcnRjdXQ9dC5Eb2N1bWVudGF0aW9uTGVnYWN5UGFnZUJsb2NrU2hvcnRjdXRUeXBlPXZvaWQgMCxmdW5jdGlvbihlKXtlLmV4dGVybmFsPVwiRXh0ZXJuYWxcIixlLmludGVybmFsPVwiSW50ZXJuYWxcIn0ob3x8KHQuRG9jdW1lbnRhdGlvbkxlZ2FjeVBhZ2VCbG9ja1Nob3J0Y3V0VHlwZT1vPXt9KSksdC5Eb2N1bWVudGF0aW9uTGVnYWN5UGFnZUJsb2NrU2hvcnRjdXQ9Y2xhc3N7Y29uc3RydWN0b3IoZSl7dmFyIHQ7ZS51cmw/dGhpcy50eXBlPW8uZXh0ZXJuYWw6dGhpcy50eXBlPW8uaW50ZXJuYWwsdGhpcy50aXRsZT10aGlzLnNob3J0Y3V0VGl0bGVGcm9tTW9kZWwoZSx0aGlzLnR5cGUpLHRoaXMuZGVzY3JpcHRpb249dGhpcy5zaG9ydGN1dERlc2NyaXB0aW9uRnJvbU1vZGVsKGUsdGhpcy50eXBlKSx0aGlzLnByZXZpZXdVcmw9dGhpcy5zaG9ydGN1dFByZXZpZXdVcmxGcm9tTW9kZWwoZSksdGhpcy50eXBlPT09by5pbnRlcm5hbCYmKG51bGw9PT0odD1lLmRvY3VtZW50YXRpb25JdGVtUHJldmlldyl8fHZvaWQgMD09PXQ/dm9pZCAwOnQudmFsaWQpJiZlLmRvY3VtZW50YXRpb25JdGVtSWQ/dGhpcy5pbnRlcm5hbElkPWUuZG9jdW1lbnRhdGlvbkl0ZW1JZDoodGhpcy5pbnRlcm5hbElkPW51bGwsdGhpcy50eXBlPT09by5leHRlcm5hbCYmZS51cmw/dGhpcy5leHRlcm5hbFVybD1lLnVybDp0aGlzLmV4dGVybmFsVXJsPW51bGwpfXNob3J0Y3V0VGl0bGVGcm9tTW9kZWwoZSx0KXt2YXIgcixuLGksYSxjO2xldCBsPW51bGw7cmV0dXJuIGUudGl0bGUmJmUudGl0bGUudHJpbSgpLmxlbmd0aD4wP2w9ZS50aXRsZTp0PT09by5pbnRlcm5hbD9sPW51bGwhPT0obj1udWxsPT09KHI9ZS5kb2N1bWVudGF0aW9uSXRlbVByZXZpZXcpfHx2b2lkIDA9PT1yP3ZvaWQgMDpyLnRpdGxlKSYmdm9pZCAwIT09bj9uOm51bGw6dD09PW8uZXh0ZXJuYWwmJihsPW51bGwhPT0oYz1udWxsIT09KGE9bnVsbD09PShpPWUudXJsUHJldmlldyl8fHZvaWQgMD09PWk/dm9pZCAwOmkudGl0bGUpJiZ2b2lkIDAhPT1hP2E6ZS51cmwpJiZ2b2lkIDAhPT1jP2M6bnVsbCksbCYmMCE9PWwudHJpbSgpLmxlbmd0aD9sOm51bGx9c2hvcnRjdXREZXNjcmlwdGlvbkZyb21Nb2RlbChlLHQpe3ZhciByO2xldCBuPW51bGw7cmV0dXJuIGUuZGVzY3JpcHRpb24mJmUuZGVzY3JpcHRpb24udHJpbSgpLmxlbmd0aD4wP249ZS5kZXNjcmlwdGlvbjp0PT09by5leHRlcm5hbCYmKG49bnVsbD09PShyPWUudXJsUHJldmlldyl8fHZvaWQgMD09PXI/dm9pZCAwOnIuZGVzY3JpcHRpb24pLG4mJjAhPT1uLnRyaW0oKS5sZW5ndGg/bjpudWxsfXNob3J0Y3V0UHJldmlld1VybEZyb21Nb2RlbChlKXt2YXIgdCxvLHIsbixpO3JldHVybiBudWxsIT09KGk9bnVsbCE9PShyPW51bGwhPT0odD1lLmFzc2V0VXJsKSYmdm9pZCAwIT09dD90Om51bGw9PT0obz1lLmFzc2V0KXx8dm9pZCAwPT09bz92b2lkIDA6by51cmwpJiZ2b2lkIDAhPT1yP3I6bnVsbD09PShuPWUudXJsUHJldmlldyl8fHZvaWQgMD09PW4/dm9pZCAwOm4udGh1bWJuYWlsVXJsKSYmdm9pZCAwIT09aT9pOm51bGx9fX0sMjY3NDooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuUmljaFRleHRTcGFuQXR0cmlidXRlVHlwZT12b2lkIDAsZnVuY3Rpb24oZSl7ZS5ib2xkPVwiQm9sZFwiLGUuaXRhbGljPVwiSXRhbGljXCIsZS5saW5rPVwiTGlua1wiLGUuc3RyaWtldGhyb3VnaD1cIlN0cmlrZXRocm91Z2hcIixlLmNvZGU9XCJDb2RlXCJ9KG98fCh0LlJpY2hUZXh0U3BhbkF0dHJpYnV0ZVR5cGU9bz17fSkpfSwyODAyOihlLHQpPT57dmFyIG8scjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LlB1bHNhckV4ZWN1dG9yPXQuT3V0cHV0RmlsZVR5cGU9dm9pZCAwLGZ1bmN0aW9uKGUpe2UuY29weVJlbW90ZVVybD1cImNvcHlSZW1vdGVVcmxcIixlLnRleHQ9XCJ0ZXh0XCIsZS5iaW5hcnk9XCJiaW5hcnlcIn0ob3x8KHQuT3V0cHV0RmlsZVR5cGU9bz17fSkpLGZ1bmN0aW9uKGUpe2Uuc3VwZXJub3ZhPVwic3VwZXJub3ZhXCIsZS5sb2NhbD1cImxvY2FsXCJ9KHJ8fCh0LlB1bHNhckV4ZWN1dG9yPXI9e30pKX0sMzYwNzooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuV29ya3NwYWNlU3Vic2NyaXB0aW9uU3RhdHVzPXZvaWQgMCxmdW5jdGlvbihlKXtlLmFjdGl2ZT1cImFjdGl2ZVwiLGUuZ3JhY2VQZXJpb2Q9XCJncmFjZVBlcmlvZFwiLGUuY2FuY2VsbGVkPVwiY2FuY2VsbGVkXCIsZS5zdXNwZW5kZWQ9XCJzdXNwZW5kZWRcIn0ob3x8KHQuV29ya3NwYWNlU3Vic2NyaXB0aW9uU3RhdHVzPW89e30pKX0sMzcxODooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuRnJhbWVMYXlvdXQ9dm9pZCAwLGZ1bmN0aW9uKGUpe2UuYzg9XCJDOFwiLGUuYzc9XCJDN1wiLGUuYzY9XCJDNlwiLGUuYzU9XCJDNVwiLGUuYzQ9XCJDNFwiLGUuYzM9XCJDM1wiLGUuYzI9XCJDMlwiLGUuYzE9XCJDMVwiLGUuYzE3NT1cIkMxXzc1XCJ9KG98fCh0LkZyYW1lTGF5b3V0PW89e30pKX0sMzczMzooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuRG9jc0Jsb2NrQmVoYXZpb3JTZWxlY3Rpb25UeXBlPXZvaWQgMCxmdW5jdGlvbihlKXtlLmVudGl0eT1cIkVudGl0eVwiLGUuZ3JvdXA9XCJHcm91cFwiLGUuZW50aXR5QW5kR3JvdXA9XCJFbnRpdHlBbmRHcm91cFwifShvfHwodC5Eb2NzQmxvY2tCZWhhdmlvclNlbGVjdGlvblR5cGU9bz17fSkpfSwzNzg4OihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5EVF9UT0tFTl9UWVBFUz10LnRva2VuVHlwZUlzUmVmZXJlbmNhYmxlPXQuUkVGRVJFTkNBQkxFX1RPS0VOX1RZUEVTPXQuUkVQTEFDQUJMRV9UT0tFTl9UWVBFUz10LnRva2VuVHlwZUlzTm9uUHVyZT10LnRva2VuVHlwZUlzUHVyZT10LlBVUkVfVE9LRU5fVFlQRVM9dC5BTExfVE9LRU5fVFlQRVM9dC5NU19ESU1FTlNJT05fVE9LRU5fVFlQRVM9dC5SQVdfRElNRU5TSU9OX1RPS0VOX1RZUEVTPXQuRElNRU5TSU9OX1RPS0VOX1RZUEVTPXQuT1BUSU9OX1RPS0VOX1RZUEVTPXQuU1RSSU5HX1RPS0VOX1RZUEVTPXQuVG9rZW5UeXBlPXZvaWQgMCxmdW5jdGlvbihlKXtlLmNvbG9yPVwiQ29sb3JcIixlLnR5cG9ncmFwaHk9XCJUeXBvZ3JhcGh5XCIsZS5zaGFkb3c9XCJTaGFkb3dcIixlLmJvcmRlcj1cIkJvcmRlclwiLGUuZ3JhZGllbnQ9XCJHcmFkaWVudFwiLGUuYmx1cj1cIkJsdXJcIixlLnJhZGl1cz1cIkJvcmRlclJhZGl1c1wiLGUuYm9yZGVyV2lkdGg9XCJCb3JkZXJXaWR0aFwiLGUuZHVyYXRpb249XCJEdXJhdGlvblwiLGUuZm9udFNpemU9XCJGb250U2l6ZVwiLGUuZGltZW5zaW9uPVwiRGltZW5zaW9uXCIsZS5sZXR0ZXJTcGFjaW5nPVwiTGV0dGVyU3BhY2luZ1wiLGUubGluZUhlaWdodD1cIkxpbmVIZWlnaHRcIixlLm9wYWNpdHk9XCJPcGFjaXR5XCIsZS5wYXJhZ3JhcGhTcGFjaW5nPVwiUGFyYWdyYXBoU3BhY2luZ1wiLGUuc2l6ZT1cIlNpemVcIixlLnNwYWNlPVwiU3BhY2VcIixlLnpJbmRleD1cIlpJbmRleFwiLGUudGV4dERlY29yYXRpb249XCJUZXh0RGVjb3JhdGlvblwiLGUudGV4dENhc2U9XCJUZXh0Q2FzZVwiLGUudmlzaWJpbGl0eT1cIlZpc2liaWxpdHlcIixlLmZvbnRGYW1pbHk9XCJGb250RmFtaWx5XCIsZS5mb250V2VpZ2h0PVwiRm9udFdlaWdodFwiLGUuc3RyaW5nPVwiU3RyaW5nXCIsZS5wcm9kdWN0Q29weT1cIlByb2R1Y3RDb3B5XCJ9KG98fCh0LlRva2VuVHlwZT1vPXt9KSksdC5TVFJJTkdfVE9LRU5fVFlQRVM9W28uc3RyaW5nLG8ucHJvZHVjdENvcHksby5mb250RmFtaWx5LG8uZm9udFdlaWdodF0sdC5PUFRJT05fVE9LRU5fVFlQRVM9W28udGV4dENhc2Usby50ZXh0RGVjb3JhdGlvbixvLnZpc2liaWxpdHldLHQuRElNRU5TSU9OX1RPS0VOX1RZUEVTPVtvLmRpbWVuc2lvbixvLnNpemUsby5zcGFjZSxvLm9wYWNpdHksby5mb250U2l6ZSxvLmxpbmVIZWlnaHQsby5sZXR0ZXJTcGFjaW5nLG8ucGFyYWdyYXBoU3BhY2luZyxvLmJvcmRlcldpZHRoLG8ucmFkaXVzLG8uZHVyYXRpb24sby56SW5kZXhdLHQuUkFXX0RJTUVOU0lPTl9UT0tFTl9UWVBFUz1bby5vcGFjaXR5LG8uekluZGV4XSx0Lk1TX0RJTUVOU0lPTl9UT0tFTl9UWVBFUz1bby5kdXJhdGlvbl0sdC5BTExfVE9LRU5fVFlQRVM9Wy4uLnQuRElNRU5TSU9OX1RPS0VOX1RZUEVTLC4uLnQuU1RSSU5HX1RPS0VOX1RZUEVTLC4uLnQuT1BUSU9OX1RPS0VOX1RZUEVTLG8uY29sb3Isby5ncmFkaWVudCxvLmJvcmRlcixvLnJhZGl1cyxvLnNoYWRvdyxvLnR5cG9ncmFwaHksby5ibHVyXSx0LlBVUkVfVE9LRU5fVFlQRVM9Wy4uLnQuRElNRU5TSU9OX1RPS0VOX1RZUEVTLC4uLnQuU1RSSU5HX1RPS0VOX1RZUEVTLC4uLnQuT1BUSU9OX1RPS0VOX1RZUEVTXSx0LnRva2VuVHlwZUlzUHVyZT1lPT50LlBVUkVfVE9LRU5fVFlQRVMuaW5jbHVkZXMoZSksdC50b2tlblR5cGVJc05vblB1cmU9ZT0+ISgwLHQudG9rZW5UeXBlSXNQdXJlKShlKSx0LlJFUExBQ0FCTEVfVE9LRU5fVFlQRVM9W28uY29sb3IsLi4udC5ESU1FTlNJT05fVE9LRU5fVFlQRVMsLi4udC5TVFJJTkdfVE9LRU5fVFlQRVMsLi4udC5PUFRJT05fVE9LRU5fVFlQRVNdLHQuUkVGRVJFTkNBQkxFX1RPS0VOX1RZUEVTPVtvLmNvbG9yLC4uLnQuRElNRU5TSU9OX1RPS0VOX1RZUEVTLG8uZm9udEZhbWlseSxvLmZvbnRXZWlnaHQsby50ZXh0Q2FzZSxvLnRleHREZWNvcmF0aW9uXSx0LnRva2VuVHlwZUlzUmVmZXJlbmNhYmxlPWU9PnQuUkVGRVJFTkNBQkxFX1RPS0VOX1RZUEVTLmluY2x1ZGVzKGUpLHQuRFRfVE9LRU5fVFlQRVM9W28uY29sb3Isby5zaGFkb3csby5ncmFkaWVudCxvLnR5cG9ncmFwaHksby5ib3JkZXIsLi4udC5ESU1FTlNJT05fVE9LRU5fVFlQRVMsby5mb250RmFtaWx5LG8uZm9udFdlaWdodCxvLnN0cmluZywuLi50Lk9QVElPTl9UT0tFTl9UWVBFU119LDQwNjg6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkRvY3NFbnRpdHlHcm91cEJlaGF2aW9yPXZvaWQgMCxmdW5jdGlvbihlKXtlLmdyb3VwPVwiR3JvdXBcIixlLnRhYnM9XCJUYWJzXCJ9KG98fCh0LkRvY3NFbnRpdHlHcm91cEJlaGF2aW9yPW89e30pKX0sNDI5MDooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuV29ya3NwYWNlU3Vic2NyaXB0aW9uUHJvZHVjdENvZGU9dm9pZCAwLGZ1bmN0aW9uKGUpe2UuZnJlZT1cImZyZWVcIixlLnRlYW09XCJ0ZWFtXCIsZS50ZWFtVGVzdD1cInRlYW1fdGVzdFwiLGUuY29tcGFueT1cImNvbXBhbnlcIixlLmVudGVycHJpc2U9XCJlbnRlcnByaXNlXCJ9KG98fCh0LldvcmtzcGFjZVN1YnNjcmlwdGlvblByb2R1Y3RDb2RlPW89e30pKX0sNDM3OTooZSx0KT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuU3VwZXJub3ZhRXJyb3I9dm9pZCAwO2NsYXNzIG8gZXh0ZW5kcyBFcnJvcntjb25zdHJ1Y3RvcihlLHQsbyxyLG4saSxhKXtzdXBlcihlKSx0aGlzLmNvZGU9dCx0aGlzLnN0YXR1cz1vLHRoaXMuZm9ybUVycm9ycz1yLHRoaXMucmVxdWVzdElkPW4sdGhpcy5zZXJ2ZXJUaW1lPWksdGhpcy51cmw9YX1zdGF0aWMgZnJvbU5ldHdvcmtSZXNwb25zZShlLHQscil7dmFyIG4saSxhO3JldHVybiBuZXcgbyhlLm1lc3NhZ2UsZS5lcnJvckNvZGV8fGUucmVhc29ufHxlLmxhYmVsfHxudWxsLGUuY29kZXx8dCxudWxsIT09KG49ZS5mb3JtRXJyb3JzKSYmdm9pZCAwIT09bj9uOm51bGwsbnVsbCE9PShpPWUucmVxdWVzdElkKSYmdm9pZCAwIT09aT9pOm51bGwsbnVsbCE9PShhPWUuc2VydmVyVGltZSkmJnZvaWQgMCE9PWE/YTpudWxsLHIpfXN0YXRpYyBmcm9tTm9OZXR3b3JrUmVzcG9uc2UoZSl7cmV0dXJuIG5ldyBvKFwiTm8gbmV0d29yayBvciBpbnRlcm5ldCB1bnJlYWNoYWJsZVwiLFwiTk9fTkVUV09SS1wiLDEyMTYzLG51bGwsKG5ldyBEYXRlKS50b0lTT1N0cmluZygpLG51bGwsZSl9c3RhdGljIGZyb21Db2RlKGUpe3JldHVybiBuZXcgbyhlLGUsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsKX1zdGF0aWMgZnJvbU1lc3NhZ2UoZSl7cmV0dXJuIG5ldyBvKGUsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwpfWlzRmllbGRFcnJvcmVkKGUpe3JldHVybiB2b2lkIDAhPT10aGlzLmZvcm1FcnJvcnMuZmluZCgodD0+dC5rZXk9PT1lKSl9ZXJyb3JGb3JGaWVsZChlKXt2YXIgdDtyZXR1cm4gbnVsbCE9PSh0PXRoaXMuZm9ybUVycm9ycy5maW5kKCh0PT50LmtleT09PWUpKSkmJnZvaWQgMCE9PXQ/dDpudWxsfXRvU3RyaW5nKCl7dmFyIGUsdCxvLHIsbixpO3JldHVybmBcXG4gICAgRXJyb3IgdGhyb3duOiAke3RoaXMubWVzc2FnZX1cXG5cXG4gICAgQ29kZTogJHtudWxsIT09KGU9dGhpcy5jb2RlKSYmdm9pZCAwIT09ZT9lOlwiLVwifVxcblxcbiAgICBTdGF0dXM6ICR7bnVsbCE9PSh0PXRoaXMuc3RhdHVzKSYmdm9pZCAwIT09dD90OlwiLVwifVxcblxcbiAgICBGaWVsZHM6ICR7SlNPTi5zdHJpbmdpZnkodGhpcy5mb3JtRXJyb3JzLG51bGwsMil9XFxuXFxuICAgIFJlcXVlc3QgSUQ6ICR7bnVsbCE9PShvPXRoaXMucmVxdWVzdElkKSYmdm9pZCAwIT09bz9vOlwiLVwifVxcblxcbiAgICBTZXJ2ZXIgdGltZTogJHtudWxsIT09KHI9dGhpcy5zZXJ2ZXJUaW1lKSYmdm9pZCAwIT09cj9yOlwiLVwifVxcblxcbiAgICBOZXR3b3JrIFVSTDogJHtudWxsIT09KG49dGhpcy51cmwpJiZ2b2lkIDAhPT1uP246XCItXCJ9XFxuXFxuICAgIFN0YWNrOiAke251bGwhPT0oaT10aGlzLnN0YWNrKSYmdm9pZCAwIT09aT9pOlwiLVwifVxcbiAgICBgfXRvSHVtYW5SZWFkYWJsZSgpe3JldHVybmAke3RoaXMubWVzc2FnZX0ke3RoaXMucmVxdWVzdElkP2AgKHJlcXVlc3QgJHt0aGlzLnJlcXVlc3RJZH0pYDpcIlwifWB9fXQuU3VwZXJub3ZhRXJyb3I9b30sNDU0NjooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuQUxMX0JPUkRFUl9TVFlMRVM9dC5Cb3JkZXJTdHlsZT12b2lkIDAsZnVuY3Rpb24oZSl7ZS5kYXNoZWQ9XCJEYXNoZWRcIixlLmRvdHRlZD1cIkRvdHRlZFwiLGUuc29saWQ9XCJTb2xpZFwiLGUuZ3Jvb3ZlPVwiR3Jvb3ZlXCJ9KG98fCh0LkJvcmRlclN0eWxlPW89e30pKSx0LkFMTF9CT1JERVJfU1RZTEVTPVtvLmRhc2hlZCxvLmRvdHRlZCxvLnNvbGlkLG8uZ3Jvb3ZlXX0sNDY1MjooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuU291cmNlVHlwZT12b2lkIDAsZnVuY3Rpb24oZSl7ZS5maWdtYT1cIkZpZ21hXCIsZS50b2tlblN0dWRpbz1cIlRva2VuU3R1ZGlvXCIsZS5maWdtYVZhcmlhYmxlc1BsdWdpbj1cIkZpZ21hVmFyaWFibGVzUGx1Z2luXCJ9KG98fCh0LlNvdXJjZVR5cGU9bz17fSkpfSw1MTAyOihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Eb2N1bWVudGF0aW9uTGVnYWN5Q2FsbG91dFR5cGU9dm9pZCAwLGZ1bmN0aW9uKGUpe2UuaW5mbz1cIkluZm9cIixlLnN1Y2Nlc3M9XCJTdWNjZXNzXCIsZS53YXJuaW5nPVwiV2FybmluZ1wiLGUuZXJyb3I9XCJFcnJvclwifShvfHwodC5Eb2N1bWVudGF0aW9uTGVnYWN5Q2FsbG91dFR5cGU9bz17fSkpfSw1NTAzOihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Xb3Jrc3BhY2VTdWJzY3JpcHRpb25QbGFuSW50ZXJ2YWw9dm9pZCAwLGZ1bmN0aW9uKGUpe2UueWVhcmx5PVwieWVhcmx5XCIsZS5tb250aGx5PVwibW9udGhseVwifShvfHwodC5Xb3Jrc3BhY2VTdWJzY3JpcHRpb25QbGFuSW50ZXJ2YWw9bz17fSkpfSw1NjUxOihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Eb2NzQmxvY2tCZWhhdmlvckRhdGFUeXBlPXZvaWQgMCxmdW5jdGlvbihlKXtlLml0ZW09XCJJdGVtXCIsZS50b2tlbj1cIlRva2VuXCIsZS5hc3NldD1cIkFzc2V0XCIsZS5jb21wb25lbnQ9XCJDb21wb25lbnRcIixlLmZpZ21hTm9kZT1cIkZpZ21hTm9kZVwiLGUuZmlnbWFDb21wb25lbnQ9XCJGaWdtYUNvbXBvbmVudFwifShvfHwodC5Eb2NzQmxvY2tCZWhhdmlvckRhdGFUeXBlPW89e30pKX0sNTY3MzooZSx0KT0+e3ZhciBvO2Z1bmN0aW9uIHIoZSl7c3dpdGNoKGUudHlwZSl7Y2FzZSBvLmRvY3VtZW50YXRpb25JdGVtOnJldHVybmBAcGFnZToke2UuZG9jdW1lbnRhdGlvbkl0ZW1JZH1gO2Nhc2Ugby5wYWdlSGVhZGluZzpyZXR1cm5gQHBhZ2U6JHtlLmRvY3VtZW50YXRpb25JdGVtSWR9IyR7ZS5wYWdlSGVhZGluZ0lkfWA7Y2FzZSBvLnVybDpyZXR1cm4gZS51cmw7ZGVmYXVsdDpyZXR1cm59fU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQubGlua0F0dHJpYnV0ZVRvRG9jc0xpbms9dC5kb2NzTGlua1RvTGlua0F0dHJpYnV0ZXM9dC5kb2NzTGlua1RvVXJsPXQuRG9jc0xpbmtSZWZUeXBlPXZvaWQgMCxmdW5jdGlvbihlKXtlLmRvY3VtZW50YXRpb25JdGVtPVwiRG9jdW1lbnRhdGlvbkl0ZW1cIixlLnBhZ2VIZWFkaW5nPVwiUGFnZUhlYWRpbmdcIixlLnVybD1cIlVybFwifShvfHwodC5Eb2NzTGlua1JlZlR5cGU9bz17fSkpLHQuZG9jc0xpbmtUb1VybD1yLHQuZG9jc0xpbmtUb0xpbmtBdHRyaWJ1dGVzPWZ1bmN0aW9uKGUpe2NvbnN0IHQ9cihlKTtpZih0KXJldHVybntocmVmOnQsdGFyZ2V0OmUub3BlbkluTmV3VGFiP1wiX2JsYW5rXCI6XCJfc2VsZlwifX0sdC5saW5rQXR0cmlidXRlVG9Eb2NzTGluaz1mdW5jdGlvbihlLHQpe2lmKCFlKXJldHVybjtjb25zdCByPVwiX2JsYW5rXCI9PT10O2lmKGUuc3RhcnRzV2l0aChcIkBwYWdlOlwiKSl7aWYoZS5pbmNsdWRlcyhcIiNcIikpe2NvbnN0W3Qsbl09ZS5yZXBsYWNlKFwiQHBhZ2U6XCIsXCJcIikuc3BsaXQoXCIjXCIpO3JldHVybnt0eXBlOm8ucGFnZUhlYWRpbmcsZG9jdW1lbnRhdGlvbkl0ZW1JZDp0LHBhZ2VIZWFkaW5nSWQ6bixvcGVuSW5OZXdUYWI6cn19cmV0dXJue3R5cGU6by5kb2N1bWVudGF0aW9uSXRlbSxkb2N1bWVudGF0aW9uSXRlbUlkOmUucmVwbGFjZShcIkBwYWdlOlwiLFwiXCIpLG9wZW5Jbk5ld1RhYjpyfX1yZXR1cm57dHlwZTpvLnVybCx1cmw6ZSxvcGVuSW5OZXdUYWI6cn19fSw1Njk1OihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5DdXN0b21Eb21haW5FcnJvckNvZGU9dm9pZCAwLGZ1bmN0aW9uKGUpe2UuZ2VuZXJhbEVycm9yPVwiR2VuZXJhbEVycm9yXCIsZS5kbnNOb3RDb25maWd1cmVkPVwiRE5TTm90Q29uZmlndXJlZFwiLGUubWFpbnRlbmFuY2U9XCJNYWludGVuYW5jZVwifShvfHwodC5DdXN0b21Eb21haW5FcnJvckNvZGU9bz17fSkpfSw1ODgzOihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Eb2NzQmxvY2tJdGVtUHJvcGVydHlPcHRpb25SZW5kZXJpbmdTdHlsZT12b2lkIDAsZnVuY3Rpb24oZSl7ZS5zZWdtZW50ZWRDb250cm9sPVwiU2VnbWVudGVkQ29udHJvbFwiLGUudG9nZ2xlQnV0dG9uPVwiVG9nZ2xlQnV0dG9uXCIsZS5zZWxlY3Q9XCJTZWxlY3RcIixlLmNoZWNrYm94PVwiQ2hlY2tib3hcIn0ob3x8KHQuRG9jc0Jsb2NrSXRlbVByb3BlcnR5T3B0aW9uUmVuZGVyaW5nU3R5bGU9bz17fSkpfSw1OTYzOihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Eb2NzQmxvY2tPcHRpb25SZW5kZXJpbmdTdHlsZT12b2lkIDAsZnVuY3Rpb24oZSl7ZS5zZWdtZW50ZWRDb250cm9sPVwiU2VnbWVudGVkQ29udHJvbFwiLGUudG9nZ2xlQnV0dG9uPVwiVG9nZ2xlQnV0dG9uXCIsZS5zZWxlY3Q9XCJTZWxlY3RcIixlLmNoZWNrYm94PVwiQ2hlY2tib3hcIn0ob3x8KHQuRG9jc0Jsb2NrT3B0aW9uUmVuZGVyaW5nU3R5bGU9bz17fSkpfSw2MTQxOihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5WaXNpYmlsaXR5VHlwZT12b2lkIDAsZnVuY3Rpb24oZSl7ZS52aXNpYmxlPVwiVmlzaWJsZVwiLGUuaGlkZGVuPVwiSGlkZGVuXCJ9KG98fCh0LlZpc2liaWxpdHlUeXBlPW89e30pKX0sNjE5MjooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuQmx1clR5cGU9dm9pZCAwLGZ1bmN0aW9uKGUpe2UubGF5ZXI9XCJMYXllclwiLGUuYmFja2dyb3VuZD1cIkJhY2tncm91bmRcIn0ob3x8KHQuQmx1clR5cGU9bz17fSkpfSw2Mjk4OihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Xb3Jrc3BhY2VOUE1SZWdpc3RyeUF1dGhUeXBlPXZvaWQgMCxmdW5jdGlvbihlKXtlLmJhc2ljPVwiQmFzaWNcIixlLmJlYXJlcj1cIkJlYXJlclwifShvfHwodC5Xb3Jrc3BhY2VOUE1SZWdpc3RyeUF1dGhUeXBlPW89e30pKX0sNjY0NDooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuRG9jc0Jsb2NrUmljaFRleHRQcm9wZXJ0eVN0eWxlPXZvaWQgMCxmdW5jdGlvbihlKXtlLnRpdGxlMT1cIlRpdGxlMVwiLGUudGl0bGUyPVwiVGl0bGUyXCIsZS50aXRsZTM9XCJUaXRsZTNcIixlLnRpdGxlND1cIlRpdGxlNFwiLGUudGl0bGU1PVwiVGl0bGU1XCIsZS5xdW90ZT1cIlF1b3RlXCIsZS5jYWxsb3V0PVwiQ2FsbG91dFwiLGUuZGVmYXVsdD1cIkRlZmF1bHRcIn0ob3x8KHQuRG9jc0Jsb2NrUmljaFRleHRQcm9wZXJ0eVN0eWxlPW89e30pKX0sNjgzOTooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuRG9jc0Jsb2NrSXRlbVByb3BlcnR5VHlwZT12b2lkIDAsZnVuY3Rpb24oZSl7ZS5yaWNoVGV4dD1cIlJpY2hUZXh0XCIsZS5tdWx0aVJpY2hUZXh0PVwiTXVsdGlSaWNoVGV4dFwiLGUudGV4dD1cIlRleHRcIixlLnJpY2hUZXh0RWRpdG9yPVwiUmljaFRleHRFZGl0b3JcIixlLmJvb2xlYW49XCJCb29sZWFuXCIsZS5udW1iZXI9XCJOdW1iZXJcIixlLnNpbmdsZVNlbGVjdD1cIlNpbmdsZVNlbGVjdFwiLGUubXVsdGlTZWxlY3Q9XCJNdWx0aVNlbGVjdFwiLGUuaW1hZ2U9XCJJbWFnZVwiLGUudG9rZW49XCJUb2tlblwiLGUudG9rZW5UeXBlPVwiVG9rZW5UeXBlXCIsZS50b2tlblByb3BlcnR5PVwiVG9rZW5Qcm9wZXJ0eVwiLGUuY29tcG9uZW50PVwiQ29tcG9uZW50XCIsZS5jb21wb25lbnRQcm9wZXJ0eT1cIkNvbXBvbmVudFByb3BlcnR5XCIsZS5hc3NldD1cIkFzc2V0XCIsZS5hc3NldFByb3BlcnR5PVwiQXNzZXRQcm9wZXJ0eVwiLGUuZW1iZWRVUkw9XCJFbWJlZFVSTFwiLGUudXJsPVwiVVJMXCIsZS5tYXJrZG93bj1cIk1hcmtkb3duXCIsZS5jb2RlPVwiQ29kZVwiLGUuY29kZVNhbmRib3g9XCJDb2RlU2FuZGJveFwiLGUudGFibGU9XCJUYWJsZVwiLGUuZGl2aWRlcj1cIkRpdmlkZXJcIixlLnN0b3J5Ym9vaz1cIlN0b3J5Ym9va1wiLGUuY29sb3I9XCJDb2xvclwiLGUuZmlnbWFOb2RlPVwiRmlnbWFOb2RlXCIsZS5maWdtYUNvbXBvbmVudD1cIkZpZ21hQ29tcG9uZW50XCJ9KG98fCh0LkRvY3NCbG9ja0l0ZW1Qcm9wZXJ0eVR5cGU9bz17fSkpfSw3MDQwOihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5UZXh0RGVjb3JhdGlvbj12b2lkIDAsZnVuY3Rpb24oZSl7ZS5vcmlnaW5hbD1cIk5vbmVcIixlLnVuZGVybGluZT1cIlVuZGVybGluZVwiLGUuc3RyaWtldGhyb3VnaD1cIlN0cmlrZXRocm91Z2hcIn0ob3x8KHQuVGV4dERlY29yYXRpb249bz17fSkpfSw3MjkxOihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Eb2NzQmxvY2tJdGVtVmFyaWFudExheW91dFdpZHRoPXZvaWQgMCxmdW5jdGlvbihlKXtlLmMxPVwiMVwiLGUuYzI9XCIyXCIsZS5jMz1cIjNcIixlLmM0PVwiNFwiLGUuYzU9XCI1XCIsZS5jNj1cIjZcIixlLmM3PVwiN1wiLGUuYzg9XCI4XCIsZS5jOT1cIjlcIixlLmMxMD1cIjEwXCIsZS5jMTE9XCIxMVwiLGUuYzEyPVwiMTJcIn0ob3x8KHQuRG9jc0Jsb2NrSXRlbVZhcmlhbnRMYXlvdXRXaWR0aD1vPXt9KSl9LDczNzk6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkRvY3VtZW50YXRpb25MZWdhY3lJdGVtVHlwZT12b2lkIDAsZnVuY3Rpb24oZSl7ZS5ncm91cD1cIkdyb3VwXCIsZS5wYWdlPVwiUGFnZVwifShvfHwodC5Eb2N1bWVudGF0aW9uTGVnYWN5SXRlbVR5cGU9bz17fSkpfSw3NDc2OihlLHQpPT57dmFyIG8scjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LlRleHRBbGlnbm1lbnQ9dC5BbGlnbm1lbnQ9dm9pZCAwLGZ1bmN0aW9uKGUpe2UubGVmdD1cIkxlZnRcIixlLmNlbnRlcj1cIkNlbnRlclwiLGUuc3RyZXRjaD1cIlN0cmV0Y2hcIn0ob3x8KHQuQWxpZ25tZW50PW89e30pKSxmdW5jdGlvbihlKXtlLmxlZnQ9XCJMZWZ0XCIsZS5jZW50ZXI9XCJDZW50ZXJcIixlLnJpZ2h0PVwiUmlnaHRcIn0ocnx8KHQuVGV4dEFsaWdubWVudD1yPXt9KSl9LDc0Nzk6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkRvY3NCbG9ja0l0ZW1Qcm9wZXJ0eVRleHRTdHlsZT12b2lkIDAsZnVuY3Rpb24oZSl7ZS5zbWFsbD1cIlNtYWxsXCIsZS5yZWd1bGFyPVwiUmVndWxhclwiLGUuYm9sZD1cIkJvbGRcIn0ob3x8KHQuRG9jc0Jsb2NrSXRlbVByb3BlcnR5VGV4dFN0eWxlPW89e30pKX0sNzczNzooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuQ3VzdG9tRG9tYWluU3RhdGU9dm9pZCAwLGZ1bmN0aW9uKGUpe2UuaW5pdGlhbD1cIkluaXRpYWxcIixlLmRvbWFpblNldHVwSW5Qcm9ncmVzcz1cIkRvbWFpblNldHVwSW5Qcm9ncmVzc1wiLGUuZG9tYWluU2V0dXBGYWlsZWQ9XCJEb21haW5TZXR1cEZhaWxlZFwiLGUuZG9tYWluU2V0dXBzU3VjY2VzPVwiRG9tYWluU2V0dXBTdWNjZXNzXCIsZS5zc2xTZXR1cEluUHJvZ3Jlc3M9XCJTU0xTZXR1cEluUHJvZ3Jlc3NcIixlLnNzbFNldHVwRmFpbGVkPVwiU1NMU2V0dXBGYWlsZWRcIixlLnNzbFNldHVwU3VjY2Vzcz1cIlNTTFNldHVwU3VjY2Vzc1wifShvfHwodC5DdXN0b21Eb21haW5TdGF0ZT1vPXt9KSl9LDc5Njg6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LldvcmtzcGFjZU5QTVJlZ2lzdHJ5VHlwZT12b2lkIDAsZnVuY3Rpb24oZSl7ZS5ucG1KUz1cIk5QTUpTXCIsZS5naXRIdWI9XCJHaXRIdWJcIixlLmF6dXJlRGV2T3BzPVwiQXp1cmVEZXZPcHNcIixlLmFydGlmYWN0b3J5PVwiQXJ0aWZhY3RvcnlcIixlLmN1c3RvbT1cIkN1c3RvbVwifShvfHwodC5Xb3Jrc3BhY2VOUE1SZWdpc3RyeVR5cGU9bz17fSkpfSw3OTcxOihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Eb2NzU2VjdGlvblR5cGU9dm9pZCAwLGZ1bmN0aW9uKGUpe2UucGxhaW49XCJQbGFpblwiLGUudGFicz1cIlRhYnNcIn0ob3x8KHQuRG9jc1NlY3Rpb25UeXBlPW89e30pKX0sODA0MjooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuSW1wb3J0V2FybmluZ1R5cGU9dm9pZCAwLGZ1bmN0aW9uKGUpe2UuVW5zdXBwb3J0ZWRGaWxsPVwiVW5zdXBwb3J0ZWRGaWxsXCIsZS5VbnN1cHBvcnRlZFN0cm9rZT1cIlVuc3VwcG9ydGVkU3Ryb2tlXCIsZS5VbnN1cHBvcnRlZEVmZmVjdD1cIlVuc3VwcG9ydGVkRWZmZWN0XCIsZS5TdHlsZU5vdEFwcGxpZWQ9XCJTdHlsZU5vdEFwcGxpZWRcIixlLk5vUHVibGlzaGVkU3R5bGVzPVwiTm9QdWJsaXNoZWRTdHlsZXNcIixlLk5vUHVibGlzaGVkQ29tcG9uZW50cz1cIk5vUHVibGlzaGVkQ29tcG9uZW50c1wiLGUuTm9QdWJsaXNoZWRBc3NldHM9XCJOb1B1Ymxpc2hlZEFzc2V0c1wiLGUuTm9WZXJzaW9uRm91bmQ9XCJOb1ZlcnNpb25Gb3VuZFwiLGUuQ29tcG9uZW50SGFzTm9UaHVtYm5haWw9XCJDb21wb25lbnRIYXNOb1RodW1ibmFpbFwiLGUuRHVwbGljYXRlSW1wb3J0ZWRTdHlsZUlkPVwiRHVwbGljYXRlSW1wb3J0ZWRTdHlsZUlkXCIsZS5EdXBsaWNhdGVJbXBvcnRlZFN0eWxlUGF0aD1cIkR1cGxpY2F0ZUltcG9ydGVkU3R5bGVQYXRoXCIsZS5Ob1B1Ymxpc2hlZEVsZW1lbnRzPVwiTm9QdWJsaXNoZWRFbGVtZW50c1wiLGUuTm9VbnB1Ymxpc2hlZFN0eWxlcz1cIk5vVW5wdWJsaXNoZWRTdHlsZXNcIn0ob3x8KHQuSW1wb3J0V2FybmluZ1R5cGU9bz17fSkpfSw4MDYxOihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Eb2NzQmxvY2tJdGVtUHJvcGVydHlSaWNoVGV4dFN0eWxlPXZvaWQgMCxmdW5jdGlvbihlKXtlLnRpdGxlMT1cIlRpdGxlMVwiLGUudGl0bGUyPVwiVGl0bGUyXCIsZS50aXRsZTM9XCJUaXRsZTNcIixlLnRpdGxlND1cIlRpdGxlNFwiLGUudGl0bGU1PVwiVGl0bGU1XCIsZS5xdW90ZT1cIlF1b3RlXCIsZS5jYWxsb3V0PVwiQ2FsbG91dFwiLGUub2w9XCJPTFwiLGUudWw9XCJVTFwifShvfHwodC5Eb2NzQmxvY2tJdGVtUHJvcGVydHlSaWNoVGV4dFN0eWxlPW89e30pKX0sODA5NTooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuRG9jc0Jsb2NrSXRlbVZhcmlhbnRMYXlvdXRUeXBlPXZvaWQgMCxmdW5jdGlvbihlKXtlLmNvbHVtbj1cIkNvbHVtblwiLGUucm93PVwiUm93XCJ9KG98fCh0LkRvY3NCbG9ja0l0ZW1WYXJpYW50TGF5b3V0VHlwZT1vPXt9KSl9LDg2MDc6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0Lk1TX1VOSVRTPXQuUFhfVU5JVFM9dC5SQVdfVU5JVFM9dC5MSU5FX0hFSUdIVF9VTklUUz10LlNJWkVfVU5JVFM9dC5Vbml0PXZvaWQgMCxmdW5jdGlvbihlKXtlLnBpeGVscz1cIlBpeGVsc1wiLGUucGVyY2VudD1cIlBlcmNlbnRcIixlLnJlbT1cIlJlbVwiLGUubXM9XCJNc1wiLGUucmF3PVwiUmF3XCJ9KG98fCh0LlVuaXQ9bz17fSkpLHQuU0laRV9VTklUUz1bby5waXhlbHMsby5wZXJjZW50LG8ucmVtXSx0LkxJTkVfSEVJR0hUX1VOSVRTPVtvLnBpeGVscyxvLnBlcmNlbnQsby5yZW0sby5yYXddLHQuUkFXX1VOSVRTPVtvLnJhd10sdC5QWF9VTklUUz1bby5waXhlbHNdLHQuTVNfVU5JVFM9W28ubXNdfSw4NzM4OihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Bc3NldEZvcm1hdD12b2lkIDAsZnVuY3Rpb24oZSl7ZS5wbmc9XCJwbmdcIixlLnBkZj1cInBkZlwiLGUuc3ZnPVwic3ZnXCJ9KG98fCh0LkFzc2V0Rm9ybWF0PW89e30pKX0sODg5MDooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuRG9jc0Jsb2NrSW1hZ2VQcm9wZXJ0eUFzcGVjdFJhdGlvPXZvaWQgMCxmdW5jdGlvbihlKXtlLmF1dG89XCJBdXRvXCIsZS5zcXVhcmU9XCJTcXVhcmVcIixlLmxhbmRzY2FwZT1cIkxhbmRzY2FwZVwiLGUucG9ydHJhaXQ9XCJQb3J0cmFpdFwiLGUud2lkZT1cIldpZGVcIn0ob3x8KHQuRG9jc0Jsb2NrSW1hZ2VQcm9wZXJ0eUFzcGVjdFJhdGlvPW89e30pKX0sOTEyNTooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuU2hhZG93VHlwZT12b2lkIDAsZnVuY3Rpb24oZSl7ZS5kcm9wPVwiRHJvcFwiLGUuaW5uZXI9XCJJbm5lclwifShvfHwodC5TaGFkb3dUeXBlPW89e30pKX0sOTEzMzooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuRG9jc0Jsb2NrT3B0aW9uQ29sb3I9dm9pZCAwLGZ1bmN0aW9uKGUpe2UuZ3JlZW49XCJHcmVlblwiLGUucmVkPVwiUmVkXCIsZS55ZWxsb3c9XCJZZWxsb3dcIixlLmJsdWU9XCJCbHVlXCIsZS5wdXJwbGU9XCJQdXJwbGVcIixlLm9yYW5nZT1cIk9yYW5nZVwiLGUucGluaz1cIlBpbmtcIixlLnRlYWw9XCJUZWFsXCIsZS5ncmV5PVwiR3JleVwiLGUubGlnaHRHcmV5PVwiTGlnaHRHcmV5XCIsZS5jeWFuPVwiQ3lhblwiLGUuZnVjaHNpYT1cIkZ1Y2hzaWFcIn0ob3x8KHQuRG9jc0Jsb2NrT3B0aW9uQ29sb3I9bz17fSkpfSw5Mzc3OihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Eb2NzQmxvY2tJdGVtRW50aXR5VHlwZT12b2lkIDAsZnVuY3Rpb24oZSl7ZS50b2tlbj1cIlRva2VuXCIsZS50b2tlbkdyb3VwPVwiVG9rZW5Hcm91cFwiLGUuYXNzZXQ9XCJBc3NldFwiLGUuYXNzZXRHcm91cD1cIkFzc2V0R3JvdXBcIixlLmNvbXBvbmVudD1cIkNvbXBvbmVudFwiLGUuY29tcG9uZW50R3JvdXA9XCJDb21wb25lbnRHcm91cFwifShvfHwodC5Eb2NzQmxvY2tJdGVtRW50aXR5VHlwZT1vPXt9KSl9LDk0Nzg6KGUsdCxvKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuY29udmVydFJlbW90ZVRvVXNlclJvbGU9dC5Vc2VyUm9sZT12b2lkIDA7Y29uc3Qgcj1vKDQzNzkpO3ZhciBuOyFmdW5jdGlvbihlKXtlLm93bmVyPVwiT3duZXJcIixlLmFkbWluPVwiQWRtaW5cIixlLmNyZWF0b3I9XCJDcmVhdG9yXCIsZS5jb250cmlidXRvcj1cIkNvbnRyaWJ1dG9yXCIsZS5iaWxsaW5nPVwiQmlsbGluZ1wiLGUudmlld2VyPVwiVmlld2VyXCJ9KG58fCh0LlVzZXJSb2xlPW49e30pKSx0LmNvbnZlcnRSZW1vdGVUb1VzZXJSb2xlPWU9Pntzd2l0Y2goZSl7Y2FzZVwiT3duZXJcIjpyZXR1cm4gbi5vd25lcjtjYXNlXCJBZG1pblwiOnJldHVybiBuLmFkbWluO2Nhc2VcIkNyZWF0b3JcIjpyZXR1cm4gbi5jcmVhdG9yO2Nhc2VcIkNvbnRyaWJ1dG9yXCI6cmV0dXJuIG4uY29udHJpYnV0b3I7Y2FzZVwiQmlsbGluZ1wiOnJldHVybiBuLmJpbGxpbmc7Y2FzZVwiVmlld2VyXCI6cmV0dXJuIG4udmlld2VyO2RlZmF1bHQ6dGhyb3cgci5TdXBlcm5vdmFFcnJvci5mcm9tTWVzc2FnZShgVW5rbm93biByb2xlOiAke2V9YCl9fX0sOTg5NjooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuRG9jdW1lbnRhdGlvbkxlZ2FjeUhlYWRpbmdUeXBlPXZvaWQgMCxmdW5jdGlvbihlKXtlW2UuaDE9MV09XCJoMVwiLGVbZS5oMj0yXT1cImgyXCIsZVtlLmgzPTNdPVwiaDNcIn0ob3x8KHQuRG9jdW1lbnRhdGlvbkxlZ2FjeUhlYWRpbmdUeXBlPW89e30pKX0sOTkzMjooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuZG9jc0ltYWdlUmVmVG9Vcmw9dC5Eb2NzSW1hZ2VSZWZUeXBlPXZvaWQgMCxmdW5jdGlvbihlKXtlLnJlc291cmNlPVwiUmVzb3VyY2VcIixlLmZpZ21hTm9kZT1cIkZpZ21hTm9kZVwifShvfHwodC5Eb2NzSW1hZ2VSZWZUeXBlPW89e30pKSx0LmRvY3NJbWFnZVJlZlRvVXJsPWZ1bmN0aW9uKGUsdCxyKXt2YXIgbjtpZihlKXN3aXRjaChlLnR5cGUpe2Nhc2Ugby5yZXNvdXJjZTpyZXR1cm4gbnVsbD09PShuPWUucmVzb3VyY2UpfHx2b2lkIDA9PT1uP3ZvaWQgMDpuLnVybDtjYXNlIG8uZmlnbWFOb2RlOmlmKCFlLmZpZ21hTm9kZXx8IWUuZmlnbWFOb2RlLnNvdXJjZUlkfHwhZS5maWdtYU5vZGUuZnJhbWVSZWZlcmVuY2VJZClyZXR1cm47cmV0dXJuIHQucmVzb3VyY2VzLmdldEZpZ21hRnJhbWVIb3N0ZWRVcmwoe2Rlc2lnblN5c3RlbUlkOnIuZHNJZCx2ZXJzaW9uSWQ6ci52ZXJzaW9uSWR9LGUuZmlnbWFOb2RlLmZyYW1lUmVmZXJlbmNlSWQpO2RlZmF1bHQ6cmV0dXJufX19fSx0PXt9O2Z1bmN0aW9uIG8ocil7dmFyIG49dFtyXTtpZih2b2lkIDAhPT1uKXJldHVybiBuLmV4cG9ydHM7dmFyIGk9dFtyXT17ZXhwb3J0czp7fX07cmV0dXJuIGVbcl0oaSxpLmV4cG9ydHMsbyksaS5leHBvcnRzfXZhciByPXt9OygoKT0+e3ZhciBlPXI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksZS5Ub2tlblR5cGU9ZS5UZXh0RGVjb3JhdGlvbj1lLlRleHRDYXNlPWUuU2hhZG93VHlwZT1lLlJpY2hUZXh0U3BhbkF0dHJpYnV0ZVR5cGU9ZS5HcmFkaWVudFR5cGU9ZS5GcmFtZUxheW91dD1lLkZyYW1lQWxpZ25tZW50PWUuSWNvblNldD1lLlNvdXJjZVR5cGU9ZS5Eb2NzSW1hZ2VSZWZUeXBlPWUuRG9jc0xpbmtSZWZUeXBlPWUuRG9jc1NlY3Rpb25UeXBlPWUuRG9jc0VudGl0eVR5cGU9ZS5Eb2NzRW50aXR5R3JvdXBCZWhhdmlvcj1lLkRvY3NCbG9ja1RleHRQcm9wZXJ0eVN0eWxlPWUuRG9jc0Jsb2NrUmljaFRleHRQcm9wZXJ0eVN0eWxlPWUuRG9jc0Jsb2NrT3B0aW9uQ29sb3I9ZS5Eb2NzQmxvY2tPcHRpb25SZW5kZXJpbmdTdHlsZT1lLkRvY3NCbG9ja0l0ZW1WYXJpYW50TGF5b3V0V2lkdGg9ZS5Eb2NzQmxvY2tJdGVtVmFyaWFudExheW91dFR5cGU9ZS5Eb2NzQmxvY2tJdGVtUHJvcGVydHlUeXBlPWUuRG9jc0Jsb2NrSXRlbVByb3BlcnR5VGV4dFN0eWxlPWUuRG9jc0Jsb2NrSXRlbVByb3BlcnR5UmljaFRleHRTdHlsZT1lLkRvY3NCbG9ja0l0ZW1Qcm9wZXJ0eU9wdGlvblJlbmRlcmluZ1N0eWxlPWUuRG9jc0Jsb2NrSXRlbUVudGl0eVR5cGU9ZS5Eb2NzQmxvY2tJbWFnZVByb3BlcnR5QXNwZWN0UmF0aW89ZS5Eb2NzQmxvY2tCZWhhdmlvclNlbGVjdGlvblR5cGU9ZS5Eb2NzQmxvY2tCZWhhdmlvckRhdGFUeXBlPWUuRG9jdW1lbnRhdGlvbkxlZ2FjeVBhZ2VCbG9ja1Nob3J0Y3V0VHlwZT1lLkRvY3VtZW50YXRpb25MZWdhY3lQYWdlQmxvY2tUaGVtZVR5cGU9ZS5Eb2N1bWVudGF0aW9uTGVnYWN5UGFnZUJsb2NrVHlwZT1lLkRvY3VtZW50YXRpb25MZWdhY3lQYWdlQXNzZXRUeXBlPWUuRG9jdW1lbnRhdGlvbkxlZ2FjeUl0ZW1UeXBlPWUuRG9jdW1lbnRhdGlvbkxlZ2FjeUhlYWRpbmdUeXBlPWUuRG9jdW1lbnRhdGlvbkxlZ2FjeUdyb3VwQmVoYXZpb3I9ZS5Eb2N1bWVudGF0aW9uTGVnYWN5Q2FsbG91dFR5cGU9ZS5Cb3JkZXJTdHlsZT1lLkJvcmRlclBvc2l0aW9uPWUuQmx1clR5cGU9ZS5Bc3NldFNjYWxlVHlwZT1lLkFzc2V0U2NhbGU9ZS5Bc3NldEZvcm1hdD1lLkFsaWdubWVudD1lLkFMTF9UT0tFTl9UWVBFUz1lLkFMTF9CT1JERVJfU1RZTEVTPWUuQUxMX0JPUkRFUl9QT1NJVElPTlM9ZS5PUFRJT05fVE9LRU5fVFlQRVM9ZS5TVFJJTkdfVE9LRU5fVFlQRVM9ZS5ESU1FTlNJT05fVE9LRU5fVFlQRVM9dm9pZCAwLGUuUHVsc2FyRXhlY3V0b3I9ZS5PdXRwdXRGaWxlVHlwZT1lLkN1c3RvbURvbWFpblN0YXRlPWUuQ3VzdG9tRG9tYWluRXJyb3JDb2RlPWUuSW1wb3J0V2FybmluZ1R5cGU9ZS5Xb3Jrc3BhY2VOUE1SZWdpc3RyeVR5cGU9ZS5Xb3Jrc3BhY2VOUE1SZWdpc3RyeUF1dGhUeXBlPWUuV29ya3NwYWNlU3Vic2NyaXB0aW9uU3RhdHVzPWUuV29ya3NwYWNlU3Vic2NyaXB0aW9uUHJvZHVjdENvZGU9ZS5Xb3Jrc3BhY2VTdWJzY3JpcHRpb25QbGFuSW50ZXJ2YWw9ZS5WaXNpYmlsaXR5VHlwZT1lLlVzZXJSb2xlPWUuVW5pdD12b2lkIDA7dmFyIHQ9bygzNzg4KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIkRJTUVOU0lPTl9UT0tFTl9UWVBFU1wiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiB0LkRJTUVOU0lPTl9UT0tFTl9UWVBFU319KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIlNUUklOR19UT0tFTl9UWVBFU1wiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiB0LlNUUklOR19UT0tFTl9UWVBFU319KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIk9QVElPTl9UT0tFTl9UWVBFU1wiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiB0Lk9QVElPTl9UT0tFTl9UWVBFU319KTt2YXIgbj1vKDExNjApO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiQUxMX0JPUkRFUl9QT1NJVElPTlNcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbi5BTExfQk9SREVSX1BPU0lUSU9OU319KTt2YXIgaT1vKDQ1NDYpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiQUxMX0JPUkRFUl9TVFlMRVNcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gaS5BTExfQk9SREVSX1NUWUxFU319KTt2YXIgYT1vKDM3ODgpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiQUxMX1RPS0VOX1RZUEVTXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGEuQUxMX1RPS0VOX1RZUEVTfX0pO3ZhciBjPW8oNzQ3Nik7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJBbGlnbm1lbnRcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gYy5BbGlnbm1lbnR9fSk7dmFyIGw9byg4NzM4KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIkFzc2V0Rm9ybWF0XCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGwuQXNzZXRGb3JtYXR9fSk7dmFyIHU9byg5MTUpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiQXNzZXRTY2FsZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiB1LkFzc2V0U2NhbGV9fSk7dmFyIHM9byg4OTkpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiQXNzZXRTY2FsZVR5cGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcy5Bc3NldFNjYWxlVHlwZX19KTt2YXIgZD1vKDYxOTIpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiQmx1clR5cGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZC5CbHVyVHlwZX19KTt2YXIgcD1vKDExNjApO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiQm9yZGVyUG9zaXRpb25cIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcC5Cb3JkZXJQb3NpdGlvbn19KTt2YXIgeT1vKDQ1NDYpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiQm9yZGVyU3R5bGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4geS5Cb3JkZXJTdHlsZX19KTt2YXIgbT1vKDUxMDIpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiRG9jdW1lbnRhdGlvbkxlZ2FjeUNhbGxvdXRUeXBlXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG0uRG9jdW1lbnRhdGlvbkxlZ2FjeUNhbGxvdXRUeXBlfX0pO3ZhciBUPW8oMjEyMyk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJEb2N1bWVudGF0aW9uTGVnYWN5R3JvdXBCZWhhdmlvclwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBULkRvY3VtZW50YXRpb25MZWdhY3lHcm91cEJlaGF2aW9yfX0pO3ZhciB2PW8oOTg5Nik7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJEb2N1bWVudGF0aW9uTGVnYWN5SGVhZGluZ1R5cGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdi5Eb2N1bWVudGF0aW9uTGVnYWN5SGVhZGluZ1R5cGV9fSk7dmFyIGY9byg3Mzc5KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIkRvY3VtZW50YXRpb25MZWdhY3lJdGVtVHlwZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBmLkRvY3VtZW50YXRpb25MZWdhY3lJdGVtVHlwZX19KTt2YXIgZz1vKDE0MjMpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiRG9jdW1lbnRhdGlvbkxlZ2FjeVBhZ2VBc3NldFR5cGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZy5Eb2N1bWVudGF0aW9uTGVnYWN5UGFnZUFzc2V0VHlwZX19KTt2YXIgUD1vKDE4NDYpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiRG9jdW1lbnRhdGlvbkxlZ2FjeVBhZ2VCbG9ja1R5cGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gUC5Eb2N1bWVudGF0aW9uTGVnYWN5UGFnZUJsb2NrVHlwZX19KTt2YXIgYj1vKDE2MDEpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiRG9jdW1lbnRhdGlvbkxlZ2FjeVBhZ2VCbG9ja1RoZW1lVHlwZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBiLkRvY3VtZW50YXRpb25MZWdhY3lQYWdlQmxvY2tUaGVtZVR5cGV9fSk7dmFyIFM9bygyNjU3KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIkRvY3VtZW50YXRpb25MZWdhY3lQYWdlQmxvY2tTaG9ydGN1dFR5cGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gUy5Eb2N1bWVudGF0aW9uTGVnYWN5UGFnZUJsb2NrU2hvcnRjdXRUeXBlfX0pO3ZhciBPPW8oNTY1MSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJEb2NzQmxvY2tCZWhhdmlvckRhdGFUeXBlXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIE8uRG9jc0Jsb2NrQmVoYXZpb3JEYXRhVHlwZX19KTt2YXIgXz1vKDM3MzMpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiRG9jc0Jsb2NrQmVoYXZpb3JTZWxlY3Rpb25UeXBlXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIF8uRG9jc0Jsb2NrQmVoYXZpb3JTZWxlY3Rpb25UeXBlfX0pO3ZhciBEPW8oODg5MCk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJEb2NzQmxvY2tJbWFnZVByb3BlcnR5QXNwZWN0UmF0aW9cIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gRC5Eb2NzQmxvY2tJbWFnZVByb3BlcnR5QXNwZWN0UmF0aW99fSk7dmFyIEk9byg5Mzc3KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIkRvY3NCbG9ja0l0ZW1FbnRpdHlUeXBlXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEkuRG9jc0Jsb2NrSXRlbUVudGl0eVR5cGV9fSk7dmFyIEU9byg1ODgzKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIkRvY3NCbG9ja0l0ZW1Qcm9wZXJ0eU9wdGlvblJlbmRlcmluZ1N0eWxlXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEUuRG9jc0Jsb2NrSXRlbVByb3BlcnR5T3B0aW9uUmVuZGVyaW5nU3R5bGV9fSk7dmFyIGg9byg4MDYxKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIkRvY3NCbG9ja0l0ZW1Qcm9wZXJ0eVJpY2hUZXh0U3R5bGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gaC5Eb2NzQmxvY2tJdGVtUHJvcGVydHlSaWNoVGV4dFN0eWxlfX0pO3ZhciBrPW8oNzQ3OSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJEb2NzQmxvY2tJdGVtUHJvcGVydHlUZXh0U3R5bGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gay5Eb2NzQmxvY2tJdGVtUHJvcGVydHlUZXh0U3R5bGV9fSk7dmFyIE49byg2ODM5KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIkRvY3NCbG9ja0l0ZW1Qcm9wZXJ0eVR5cGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gTi5Eb2NzQmxvY2tJdGVtUHJvcGVydHlUeXBlfX0pO3ZhciBCPW8oODA5NSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJEb2NzQmxvY2tJdGVtVmFyaWFudExheW91dFR5cGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gQi5Eb2NzQmxvY2tJdGVtVmFyaWFudExheW91dFR5cGV9fSk7dmFyIEw9byg3MjkxKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIkRvY3NCbG9ja0l0ZW1WYXJpYW50TGF5b3V0V2lkdGhcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gTC5Eb2NzQmxvY2tJdGVtVmFyaWFudExheW91dFdpZHRofX0pO3ZhciBSPW8oNTk2Myk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJEb2NzQmxvY2tPcHRpb25SZW5kZXJpbmdTdHlsZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBSLkRvY3NCbG9ja09wdGlvblJlbmRlcmluZ1N0eWxlfX0pO3ZhciBqPW8oOTEzMyk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJEb2NzQmxvY2tPcHRpb25Db2xvclwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBqLkRvY3NCbG9ja09wdGlvbkNvbG9yfX0pO3ZhciBDPW8oNjY0NCk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJEb2NzQmxvY2tSaWNoVGV4dFByb3BlcnR5U3R5bGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gQy5Eb2NzQmxvY2tSaWNoVGV4dFByb3BlcnR5U3R5bGV9fSk7dmFyIE09bygzMDYpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiRG9jc0Jsb2NrVGV4dFByb3BlcnR5U3R5bGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gTS5Eb2NzQmxvY2tUZXh0UHJvcGVydHlTdHlsZX19KTt2YXIgeD1vKDQwNjgpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiRG9jc0VudGl0eUdyb3VwQmVoYXZpb3JcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4geC5Eb2NzRW50aXR5R3JvdXBCZWhhdmlvcn19KTt2YXIgQT1vKDEyMzMpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiRG9jc0VudGl0eVR5cGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gQS5Eb2NzRW50aXR5VHlwZX19KTt2YXIgRj1vKDc5NzEpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiRG9jc1NlY3Rpb25UeXBlXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEYuRG9jc1NlY3Rpb25UeXBlfX0pO3ZhciB3PW8oNTY3Myk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJEb2NzTGlua1JlZlR5cGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdy5Eb2NzTGlua1JlZlR5cGV9fSk7dmFyIFU9byg5OTMyKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIkRvY3NJbWFnZVJlZlR5cGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gVS5Eb2NzSW1hZ2VSZWZUeXBlfX0pO3ZhciBZPW8oNDY1Mik7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJTb3VyY2VUeXBlXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIFkuU291cmNlVHlwZX19KTt2YXIgVz1vKDkzNCk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJJY29uU2V0XCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIFcuSWNvblNldH19KTt2YXIgRz1vKDEyNTUpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiRnJhbWVBbGlnbm1lbnRcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gRy5GcmFtZUFsaWdubWVudH19KTt2YXIgSz1vKDM3MTgpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiRnJhbWVMYXlvdXRcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gSy5GcmFtZUxheW91dH19KTt2YXIgSD1vKDEpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiR3JhZGllbnRUeXBlXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEguR3JhZGllbnRUeXBlfX0pO3ZhciBWPW8oMjY3NCk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJSaWNoVGV4dFNwYW5BdHRyaWJ1dGVUeXBlXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIFYuUmljaFRleHRTcGFuQXR0cmlidXRlVHlwZX19KTt2YXIgJD1vKDkxMjUpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiU2hhZG93VHlwZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiAkLlNoYWRvd1R5cGV9fSk7dmFyIHE9byg5MjIpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiVGV4dENhc2VcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcS5UZXh0Q2FzZX19KTt2YXIgej1vKDcwNDApO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiVGV4dERlY29yYXRpb25cIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gei5UZXh0RGVjb3JhdGlvbn19KTt2YXIgSj1vKDM3ODgpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiVG9rZW5UeXBlXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEouVG9rZW5UeXBlfX0pO3ZhciBRPW8oODYwNyk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJVbml0XCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIFEuVW5pdH19KTt2YXIgWj1vKDk0NzgpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiVXNlclJvbGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gWi5Vc2VyUm9sZX19KTt2YXIgWD1vKDYxNDEpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiVmlzaWJpbGl0eVR5cGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gWC5WaXNpYmlsaXR5VHlwZX19KTt2YXIgZWU9byg1NTAzKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIldvcmtzcGFjZVN1YnNjcmlwdGlvblBsYW5JbnRlcnZhbFwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBlZS5Xb3Jrc3BhY2VTdWJzY3JpcHRpb25QbGFuSW50ZXJ2YWx9fSk7dmFyIHRlPW8oNDI5MCk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJXb3Jrc3BhY2VTdWJzY3JpcHRpb25Qcm9kdWN0Q29kZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiB0ZS5Xb3Jrc3BhY2VTdWJzY3JpcHRpb25Qcm9kdWN0Q29kZX19KTt2YXIgb2U9bygzNjA3KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIldvcmtzcGFjZVN1YnNjcmlwdGlvblN0YXR1c1wiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBvZS5Xb3Jrc3BhY2VTdWJzY3JpcHRpb25TdGF0dXN9fSk7dmFyIHJlPW8oNjI5OCk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJXb3Jrc3BhY2VOUE1SZWdpc3RyeUF1dGhUeXBlXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHJlLldvcmtzcGFjZU5QTVJlZ2lzdHJ5QXV0aFR5cGV9fSk7dmFyIG5lPW8oNzk2OCk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJXb3Jrc3BhY2VOUE1SZWdpc3RyeVR5cGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbmUuV29ya3NwYWNlTlBNUmVnaXN0cnlUeXBlfX0pO3ZhciBpZT1vKDgwNDIpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiSW1wb3J0V2FybmluZ1R5cGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gaWUuSW1wb3J0V2FybmluZ1R5cGV9fSk7dmFyIGFlPW8oNTY5NSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJDdXN0b21Eb21haW5FcnJvckNvZGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gYWUuQ3VzdG9tRG9tYWluRXJyb3JDb2RlfX0pO3ZhciBjZT1vKDc3MzcpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiQ3VzdG9tRG9tYWluU3RhdGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gY2UuQ3VzdG9tRG9tYWluU3RhdGV9fSk7dmFyIGxlPW8oMjgwMik7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJPdXRwdXRGaWxlVHlwZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBsZS5PdXRwdXRGaWxlVHlwZX19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIlB1bHNhckV4ZWN1dG9yXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGxlLlB1bHNhckV4ZWN1dG9yfX0pfSkoKTt2YXIgbj1leHBvcnRzO2Zvcih2YXIgaSBpbiByKW5baV09cltpXTtyLl9fZXNNb2R1bGUmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pfSkoKTsiLCIvLyBSZWdleHBzIGludm9sdmVkIHdpdGggc3BsaXR0aW5nIHdvcmRzIGluIHZhcmlvdXMgY2FzZSBmb3JtYXRzLlxuY29uc3QgU1BMSVRfTE9XRVJfVVBQRVJfUkUgPSAvKFtcXHB7TGx9XFxkXSkoXFxwe0x1fSkvZ3U7XG5jb25zdCBTUExJVF9VUFBFUl9VUFBFUl9SRSA9IC8oXFxwe0x1fSkoW1xccHtMdX1dW1xccHtMbH1dKS9ndTtcbi8vIFVzZWQgdG8gaXRlcmF0ZSBvdmVyIHRoZSBpbml0aWFsIHNwbGl0IHJlc3VsdCBhbmQgc2VwYXJhdGUgbnVtYmVycy5cbmNvbnN0IFNQTElUX1NFUEFSQVRFX05VTUJFUl9SRSA9IC8oXFxkKVxccHtMbH18KFxccHtMfSlcXGQvdTtcbi8vIFJlZ2V4cCBpbnZvbHZlZCB3aXRoIHN0cmlwcGluZyBub24td29yZCBjaGFyYWN0ZXJzIGZyb20gdGhlIHJlc3VsdC5cbmNvbnN0IERFRkFVTFRfU1RSSVBfUkVHRVhQID0gL1teXFxwe0x9XFxkXSsvZ2l1O1xuLy8gVGhlIHJlcGxhY2VtZW50IHZhbHVlIGZvciBzcGxpdHMuXG5jb25zdCBTUExJVF9SRVBMQUNFX1ZBTFVFID0gXCIkMVxcMCQyXCI7XG4vLyBUaGUgZGVmYXVsdCBjaGFyYWN0ZXJzIHRvIGtlZXAgYWZ0ZXIgdHJhbnNmb3JtaW5nIGNhc2UuXG5jb25zdCBERUZBVUxUX1BSRUZJWF9TVUZGSVhfQ0hBUkFDVEVSUyA9IFwiXCI7XG4vKipcbiAqIFNwbGl0IGFueSBjYXNlZCBpbnB1dCBzdHJpbmdzIGludG8gYW4gYXJyYXkgb2Ygd29yZHMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzcGxpdCh2YWx1ZSkge1xuICAgIGxldCByZXN1bHQgPSB2YWx1ZS50cmltKCk7XG4gICAgcmVzdWx0ID0gcmVzdWx0XG4gICAgICAgIC5yZXBsYWNlKFNQTElUX0xPV0VSX1VQUEVSX1JFLCBTUExJVF9SRVBMQUNFX1ZBTFVFKVxuICAgICAgICAucmVwbGFjZShTUExJVF9VUFBFUl9VUFBFUl9SRSwgU1BMSVRfUkVQTEFDRV9WQUxVRSk7XG4gICAgcmVzdWx0ID0gcmVzdWx0LnJlcGxhY2UoREVGQVVMVF9TVFJJUF9SRUdFWFAsIFwiXFwwXCIpO1xuICAgIGxldCBzdGFydCA9IDA7XG4gICAgbGV0IGVuZCA9IHJlc3VsdC5sZW5ndGg7XG4gICAgLy8gVHJpbSB0aGUgZGVsaW1pdGVyIGZyb20gYXJvdW5kIHRoZSBvdXRwdXQgc3RyaW5nLlxuICAgIHdoaWxlIChyZXN1bHQuY2hhckF0KHN0YXJ0KSA9PT0gXCJcXDBcIilcbiAgICAgICAgc3RhcnQrKztcbiAgICBpZiAoc3RhcnQgPT09IGVuZClcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIHdoaWxlIChyZXN1bHQuY2hhckF0KGVuZCAtIDEpID09PSBcIlxcMFwiKVxuICAgICAgICBlbmQtLTtcbiAgICByZXR1cm4gcmVzdWx0LnNsaWNlKHN0YXJ0LCBlbmQpLnNwbGl0KC9cXDAvZyk7XG59XG4vKipcbiAqIFNwbGl0IHRoZSBpbnB1dCBzdHJpbmcgaW50byBhbiBhcnJheSBvZiB3b3Jkcywgc2VwYXJhdGluZyBudW1iZXJzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc3BsaXRTZXBhcmF0ZU51bWJlcnModmFsdWUpIHtcbiAgICBjb25zdCB3b3JkcyA9IHNwbGl0KHZhbHVlKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHdvcmRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHdvcmQgPSB3b3Jkc1tpXTtcbiAgICAgICAgY29uc3QgbWF0Y2ggPSBTUExJVF9TRVBBUkFURV9OVU1CRVJfUkUuZXhlYyh3b3JkKTtcbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICBjb25zdCBvZmZzZXQgPSBtYXRjaC5pbmRleCArIChtYXRjaFsxXSA/PyBtYXRjaFsyXSkubGVuZ3RoO1xuICAgICAgICAgICAgd29yZHMuc3BsaWNlKGksIDEsIHdvcmQuc2xpY2UoMCwgb2Zmc2V0KSwgd29yZC5zbGljZShvZmZzZXQpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gd29yZHM7XG59XG4vKipcbiAqIENvbnZlcnQgYSBzdHJpbmcgdG8gc3BhY2Ugc2VwYXJhdGVkIGxvd2VyIGNhc2UgKGBmb28gYmFyYCkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBub0Nhc2UoaW5wdXQsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBbcHJlZml4LCB3b3Jkcywgc3VmZml4XSA9IHNwbGl0UHJlZml4U3VmZml4KGlucHV0LCBvcHRpb25zKTtcbiAgICByZXR1cm4gKHByZWZpeCArXG4gICAgICAgIHdvcmRzLm1hcChsb3dlckZhY3Rvcnkob3B0aW9ucz8ubG9jYWxlKSkuam9pbihvcHRpb25zPy5kZWxpbWl0ZXIgPz8gXCIgXCIpICtcbiAgICAgICAgc3VmZml4KTtcbn1cbi8qKlxuICogQ29udmVydCBhIHN0cmluZyB0byBjYW1lbCBjYXNlIChgZm9vQmFyYCkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjYW1lbENhc2UoaW5wdXQsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBbcHJlZml4LCB3b3Jkcywgc3VmZml4XSA9IHNwbGl0UHJlZml4U3VmZml4KGlucHV0LCBvcHRpb25zKTtcbiAgICBjb25zdCBsb3dlciA9IGxvd2VyRmFjdG9yeShvcHRpb25zPy5sb2NhbGUpO1xuICAgIGNvbnN0IHVwcGVyID0gdXBwZXJGYWN0b3J5KG9wdGlvbnM/LmxvY2FsZSk7XG4gICAgY29uc3QgdHJhbnNmb3JtID0gb3B0aW9ucz8ubWVyZ2VBbWJpZ3VvdXNDaGFyYWN0ZXJzXG4gICAgICAgID8gY2FwaXRhbENhc2VUcmFuc2Zvcm1GYWN0b3J5KGxvd2VyLCB1cHBlcilcbiAgICAgICAgOiBwYXNjYWxDYXNlVHJhbnNmb3JtRmFjdG9yeShsb3dlciwgdXBwZXIpO1xuICAgIHJldHVybiAocHJlZml4ICtcbiAgICAgICAgd29yZHNcbiAgICAgICAgICAgIC5tYXAoKHdvcmQsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IDApXG4gICAgICAgICAgICAgICAgcmV0dXJuIGxvd2VyKHdvcmQpO1xuICAgICAgICAgICAgcmV0dXJuIHRyYW5zZm9ybSh3b3JkLCBpbmRleCk7XG4gICAgICAgIH0pXG4gICAgICAgICAgICAuam9pbihvcHRpb25zPy5kZWxpbWl0ZXIgPz8gXCJcIikgK1xuICAgICAgICBzdWZmaXgpO1xufVxuLyoqXG4gKiBDb252ZXJ0IGEgc3RyaW5nIHRvIHBhc2NhbCBjYXNlIChgRm9vQmFyYCkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXNjYWxDYXNlKGlucHV0LCBvcHRpb25zKSB7XG4gICAgY29uc3QgW3ByZWZpeCwgd29yZHMsIHN1ZmZpeF0gPSBzcGxpdFByZWZpeFN1ZmZpeChpbnB1dCwgb3B0aW9ucyk7XG4gICAgY29uc3QgbG93ZXIgPSBsb3dlckZhY3Rvcnkob3B0aW9ucz8ubG9jYWxlKTtcbiAgICBjb25zdCB1cHBlciA9IHVwcGVyRmFjdG9yeShvcHRpb25zPy5sb2NhbGUpO1xuICAgIGNvbnN0IHRyYW5zZm9ybSA9IG9wdGlvbnM/Lm1lcmdlQW1iaWd1b3VzQ2hhcmFjdGVyc1xuICAgICAgICA/IGNhcGl0YWxDYXNlVHJhbnNmb3JtRmFjdG9yeShsb3dlciwgdXBwZXIpXG4gICAgICAgIDogcGFzY2FsQ2FzZVRyYW5zZm9ybUZhY3RvcnkobG93ZXIsIHVwcGVyKTtcbiAgICByZXR1cm4gcHJlZml4ICsgd29yZHMubWFwKHRyYW5zZm9ybSkuam9pbihvcHRpb25zPy5kZWxpbWl0ZXIgPz8gXCJcIikgKyBzdWZmaXg7XG59XG4vKipcbiAqIENvbnZlcnQgYSBzdHJpbmcgdG8gcGFzY2FsIHNuYWtlIGNhc2UgKGBGb29fQmFyYCkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXNjYWxTbmFrZUNhc2UoaW5wdXQsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gY2FwaXRhbENhc2UoaW5wdXQsIHsgZGVsaW1pdGVyOiBcIl9cIiwgLi4ub3B0aW9ucyB9KTtcbn1cbi8qKlxuICogQ29udmVydCBhIHN0cmluZyB0byBjYXBpdGFsIGNhc2UgKGBGb28gQmFyYCkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjYXBpdGFsQ2FzZShpbnB1dCwgb3B0aW9ucykge1xuICAgIGNvbnN0IFtwcmVmaXgsIHdvcmRzLCBzdWZmaXhdID0gc3BsaXRQcmVmaXhTdWZmaXgoaW5wdXQsIG9wdGlvbnMpO1xuICAgIGNvbnN0IGxvd2VyID0gbG93ZXJGYWN0b3J5KG9wdGlvbnM/LmxvY2FsZSk7XG4gICAgY29uc3QgdXBwZXIgPSB1cHBlckZhY3Rvcnkob3B0aW9ucz8ubG9jYWxlKTtcbiAgICByZXR1cm4gKHByZWZpeCArXG4gICAgICAgIHdvcmRzXG4gICAgICAgICAgICAubWFwKGNhcGl0YWxDYXNlVHJhbnNmb3JtRmFjdG9yeShsb3dlciwgdXBwZXIpKVxuICAgICAgICAgICAgLmpvaW4ob3B0aW9ucz8uZGVsaW1pdGVyID8/IFwiIFwiKSArXG4gICAgICAgIHN1ZmZpeCk7XG59XG4vKipcbiAqIENvbnZlcnQgYSBzdHJpbmcgdG8gY29uc3RhbnQgY2FzZSAoYEZPT19CQVJgKS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbnN0YW50Q2FzZShpbnB1dCwgb3B0aW9ucykge1xuICAgIGNvbnN0IFtwcmVmaXgsIHdvcmRzLCBzdWZmaXhdID0gc3BsaXRQcmVmaXhTdWZmaXgoaW5wdXQsIG9wdGlvbnMpO1xuICAgIHJldHVybiAocHJlZml4ICtcbiAgICAgICAgd29yZHMubWFwKHVwcGVyRmFjdG9yeShvcHRpb25zPy5sb2NhbGUpKS5qb2luKG9wdGlvbnM/LmRlbGltaXRlciA/PyBcIl9cIikgK1xuICAgICAgICBzdWZmaXgpO1xufVxuLyoqXG4gKiBDb252ZXJ0IGEgc3RyaW5nIHRvIGRvdCBjYXNlIChgZm9vLmJhcmApLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZG90Q2FzZShpbnB1dCwgb3B0aW9ucykge1xuICAgIHJldHVybiBub0Nhc2UoaW5wdXQsIHsgZGVsaW1pdGVyOiBcIi5cIiwgLi4ub3B0aW9ucyB9KTtcbn1cbi8qKlxuICogQ29udmVydCBhIHN0cmluZyB0byBrZWJhYiBjYXNlIChgZm9vLWJhcmApLlxuICovXG5leHBvcnQgZnVuY3Rpb24ga2ViYWJDYXNlKGlucHV0LCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIG5vQ2FzZShpbnB1dCwgeyBkZWxpbWl0ZXI6IFwiLVwiLCAuLi5vcHRpb25zIH0pO1xufVxuLyoqXG4gKiBDb252ZXJ0IGEgc3RyaW5nIHRvIHBhdGggY2FzZSAoYGZvby9iYXJgKS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhdGhDYXNlKGlucHV0LCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIG5vQ2FzZShpbnB1dCwgeyBkZWxpbWl0ZXI6IFwiL1wiLCAuLi5vcHRpb25zIH0pO1xufVxuLyoqXG4gKiBDb252ZXJ0IGEgc3RyaW5nIHRvIHBhdGggY2FzZSAoYEZvbyBiYXJgKS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNlbnRlbmNlQ2FzZShpbnB1dCwgb3B0aW9ucykge1xuICAgIGNvbnN0IFtwcmVmaXgsIHdvcmRzLCBzdWZmaXhdID0gc3BsaXRQcmVmaXhTdWZmaXgoaW5wdXQsIG9wdGlvbnMpO1xuICAgIGNvbnN0IGxvd2VyID0gbG93ZXJGYWN0b3J5KG9wdGlvbnM/LmxvY2FsZSk7XG4gICAgY29uc3QgdXBwZXIgPSB1cHBlckZhY3Rvcnkob3B0aW9ucz8ubG9jYWxlKTtcbiAgICBjb25zdCB0cmFuc2Zvcm0gPSBjYXBpdGFsQ2FzZVRyYW5zZm9ybUZhY3RvcnkobG93ZXIsIHVwcGVyKTtcbiAgICByZXR1cm4gKHByZWZpeCArXG4gICAgICAgIHdvcmRzXG4gICAgICAgICAgICAubWFwKCh3b3JkLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgaWYgKGluZGV4ID09PSAwKVxuICAgICAgICAgICAgICAgIHJldHVybiB0cmFuc2Zvcm0od29yZCk7XG4gICAgICAgICAgICByZXR1cm4gbG93ZXIod29yZCk7XG4gICAgICAgIH0pXG4gICAgICAgICAgICAuam9pbihvcHRpb25zPy5kZWxpbWl0ZXIgPz8gXCIgXCIpICtcbiAgICAgICAgc3VmZml4KTtcbn1cbi8qKlxuICogQ29udmVydCBhIHN0cmluZyB0byBzbmFrZSBjYXNlIChgZm9vX2JhcmApLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc25ha2VDYXNlKGlucHV0LCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIG5vQ2FzZShpbnB1dCwgeyBkZWxpbWl0ZXI6IFwiX1wiLCAuLi5vcHRpb25zIH0pO1xufVxuLyoqXG4gKiBDb252ZXJ0IGEgc3RyaW5nIHRvIGhlYWRlciBjYXNlIChgRm9vLUJhcmApLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdHJhaW5DYXNlKGlucHV0LCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGNhcGl0YWxDYXNlKGlucHV0LCB7IGRlbGltaXRlcjogXCItXCIsIC4uLm9wdGlvbnMgfSk7XG59XG5mdW5jdGlvbiBsb3dlckZhY3RvcnkobG9jYWxlKSB7XG4gICAgcmV0dXJuIGxvY2FsZSA9PT0gZmFsc2VcbiAgICAgICAgPyAoaW5wdXQpID0+IGlucHV0LnRvTG93ZXJDYXNlKClcbiAgICAgICAgOiAoaW5wdXQpID0+IGlucHV0LnRvTG9jYWxlTG93ZXJDYXNlKGxvY2FsZSk7XG59XG5mdW5jdGlvbiB1cHBlckZhY3RvcnkobG9jYWxlKSB7XG4gICAgcmV0dXJuIGxvY2FsZSA9PT0gZmFsc2VcbiAgICAgICAgPyAoaW5wdXQpID0+IGlucHV0LnRvVXBwZXJDYXNlKClcbiAgICAgICAgOiAoaW5wdXQpID0+IGlucHV0LnRvTG9jYWxlVXBwZXJDYXNlKGxvY2FsZSk7XG59XG5mdW5jdGlvbiBjYXBpdGFsQ2FzZVRyYW5zZm9ybUZhY3RvcnkobG93ZXIsIHVwcGVyKSB7XG4gICAgcmV0dXJuICh3b3JkKSA9PiBgJHt1cHBlcih3b3JkWzBdKX0ke2xvd2VyKHdvcmQuc2xpY2UoMSkpfWA7XG59XG5mdW5jdGlvbiBwYXNjYWxDYXNlVHJhbnNmb3JtRmFjdG9yeShsb3dlciwgdXBwZXIpIHtcbiAgICByZXR1cm4gKHdvcmQsIGluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IGNoYXIwID0gd29yZFswXTtcbiAgICAgICAgY29uc3QgaW5pdGlhbCA9IGluZGV4ID4gMCAmJiBjaGFyMCA+PSBcIjBcIiAmJiBjaGFyMCA8PSBcIjlcIiA/IFwiX1wiICsgY2hhcjAgOiB1cHBlcihjaGFyMCk7XG4gICAgICAgIHJldHVybiBpbml0aWFsICsgbG93ZXIod29yZC5zbGljZSgxKSk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHNwbGl0UHJlZml4U3VmZml4KGlucHV0LCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCBzcGxpdEZuID0gb3B0aW9ucy5zcGxpdCA/PyAob3B0aW9ucy5zZXBhcmF0ZU51bWJlcnMgPyBzcGxpdFNlcGFyYXRlTnVtYmVycyA6IHNwbGl0KTtcbiAgICBjb25zdCBwcmVmaXhDaGFyYWN0ZXJzID0gb3B0aW9ucy5wcmVmaXhDaGFyYWN0ZXJzID8/IERFRkFVTFRfUFJFRklYX1NVRkZJWF9DSEFSQUNURVJTO1xuICAgIGNvbnN0IHN1ZmZpeENoYXJhY3RlcnMgPSBvcHRpb25zLnN1ZmZpeENoYXJhY3RlcnMgPz8gREVGQVVMVF9QUkVGSVhfU1VGRklYX0NIQVJBQ1RFUlM7XG4gICAgbGV0IHByZWZpeEluZGV4ID0gMDtcbiAgICBsZXQgc3VmZml4SW5kZXggPSBpbnB1dC5sZW5ndGg7XG4gICAgd2hpbGUgKHByZWZpeEluZGV4IDwgaW5wdXQubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IGNoYXIgPSBpbnB1dC5jaGFyQXQocHJlZml4SW5kZXgpO1xuICAgICAgICBpZiAoIXByZWZpeENoYXJhY3RlcnMuaW5jbHVkZXMoY2hhcikpXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgcHJlZml4SW5kZXgrKztcbiAgICB9XG4gICAgd2hpbGUgKHN1ZmZpeEluZGV4ID4gcHJlZml4SW5kZXgpIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSBzdWZmaXhJbmRleCAtIDE7XG4gICAgICAgIGNvbnN0IGNoYXIgPSBpbnB1dC5jaGFyQXQoaW5kZXgpO1xuICAgICAgICBpZiAoIXN1ZmZpeENoYXJhY3RlcnMuaW5jbHVkZXMoY2hhcikpXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgc3VmZml4SW5kZXggPSBpbmRleDtcbiAgICB9XG4gICAgcmV0dXJuIFtcbiAgICAgICAgaW5wdXQuc2xpY2UoMCwgcHJlZml4SW5kZXgpLFxuICAgICAgICBzcGxpdEZuKGlucHV0LnNsaWNlKHByZWZpeEluZGV4LCBzdWZmaXhJbmRleCkpLFxuICAgICAgICBpbnB1dC5zbGljZShzdWZmaXhJbmRleCksXG4gICAgXTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Ub2tlbk5hbWVTdHJ1Y3R1cmUgPSBleHBvcnRzLkZpbGVTdHJ1Y3R1cmUgPSBleHBvcnRzLlRoZW1lRXhwb3J0U3R5bGUgPSB2b2lkIDA7XG4vL3RvZG8gbWFrZSBzdXJlIGNvbW1lbnRzIGFuZCBzdHJ1Y3R1cmUgdXAgdG8gZGF0ZVxuLyoqXG4gKiBNYWluIGNvbmZpZ3VyYXRpb24gb2YgdGhlIGV4cG9ydGVyIC0gdHlwZSBpbnRlcmZhY2UuIERlZmF1bHQgdmFsdWVzIGZvciBpdCBjYW4gYmUgc2V0IHRocm91Z2ggYGNvbmZpZy5qc29uYCBhbmQgdXNlcnMgY2FuIG92ZXJyaWRlIHRoZSBiZWhhdmlvciB3aGVuIGNyZWF0aW5nIHRoZSBwaXBlbGluZXMuXG4gKi9cbnZhciBUaGVtZUV4cG9ydFN0eWxlO1xuKGZ1bmN0aW9uIChUaGVtZUV4cG9ydFN0eWxlKSB7XG4gICAgVGhlbWVFeHBvcnRTdHlsZVtcIkFwcGx5RGlyZWN0bHlcIl0gPSBcImFwcGx5RGlyZWN0bHlcIjtcbiAgICBUaGVtZUV4cG9ydFN0eWxlW1wiU2VwYXJhdGVGaWxlc1wiXSA9IFwic2VwYXJhdGVGaWxlc1wiO1xuICAgIFRoZW1lRXhwb3J0U3R5bGVbXCJNZXJnZWRUaGVtZVwiXSA9IFwibWVyZ2VkVGhlbWVcIjtcbn0pKFRoZW1lRXhwb3J0U3R5bGUgfHwgKGV4cG9ydHMuVGhlbWVFeHBvcnRTdHlsZSA9IFRoZW1lRXhwb3J0U3R5bGUgPSB7fSkpO1xudmFyIEZpbGVTdHJ1Y3R1cmU7XG4oZnVuY3Rpb24gKEZpbGVTdHJ1Y3R1cmUpIHtcbiAgICBGaWxlU3RydWN0dXJlW1wiU2VwYXJhdGVCeVR5cGVcIl0gPSBcInNlcGFyYXRlQnlUeXBlXCI7XG4gICAgRmlsZVN0cnVjdHVyZVtcIlNpbmdsZUZpbGVcIl0gPSBcInNpbmdsZUZpbGVcIjtcbn0pKEZpbGVTdHJ1Y3R1cmUgfHwgKGV4cG9ydHMuRmlsZVN0cnVjdHVyZSA9IEZpbGVTdHJ1Y3R1cmUgPSB7fSkpO1xudmFyIFRva2VuTmFtZVN0cnVjdHVyZTtcbihmdW5jdGlvbiAoVG9rZW5OYW1lU3RydWN0dXJlKSB7XG4gICAgVG9rZW5OYW1lU3RydWN0dXJlW1wiUGF0aEFuZE5hbWVcIl0gPSBcInBhdGhBbmROYW1lXCI7XG4gICAgVG9rZW5OYW1lU3RydWN0dXJlW1wiTmFtZU9ubHlcIl0gPSBcIm5hbWVPbmx5XCI7XG4gICAgVG9rZW5OYW1lU3RydWN0dXJlW1wiQ29sbGVjdGlvblBhdGhBbmROYW1lXCJdID0gXCJjb2xsZWN0aW9uUGF0aEFuZE5hbWVcIjtcbn0pKFRva2VuTmFtZVN0cnVjdHVyZSB8fCAoZXhwb3J0cy5Ub2tlbk5hbWVTdHJ1Y3R1cmUgPSBUb2tlbk5hbWVTdHJ1Y3R1cmUgPSB7fSkpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkRFRkFVTFRfVE9LRU5fUFJFRklYRVMgPSBleHBvcnRzLkRFRkFVTFRfVE9LRU5fVFlQRV9GSUxFX05BTUVTID0gdm9pZCAwO1xuZXhwb3J0cy5ERUZBVUxUX1RPS0VOX1RZUEVfRklMRV9OQU1FUyA9IHtcbiAgICBDb2xvcjogXCJDb2xvclRva2Vucy5rdFwiLFxuICAgIFR5cG9ncmFwaHk6IFwiVHlwb2dyYXBoeVRva2Vucy5rdFwiLFxuICAgIERpbWVuc2lvbjogXCJEaW1lbnNpb25Ub2tlbnMua3RcIixcbiAgICBTaXplOiBcIlNpemVUb2tlbnMua3RcIixcbiAgICBTcGFjZTogXCJTcGFjZVRva2Vucy5rdFwiLFxuICAgIE9wYWNpdHk6IFwiT3BhY2l0eVRva2Vucy5rdFwiLFxuICAgIEZvbnRTaXplOiBcIkZvbnRTaXplVG9rZW5zLmt0XCIsXG4gICAgTGluZUhlaWdodDogXCJMaW5lSGVpZ2h0VG9rZW5zLmt0XCIsXG4gICAgTGV0dGVyU3BhY2luZzogXCJMZXR0ZXJTcGFjaW5nVG9rZW5zLmt0XCIsXG4gICAgUGFyYWdyYXBoU3BhY2luZzogXCJQYXJhZ3JhcGhTcGFjaW5nVG9rZW5zLmt0XCIsXG4gICAgQm9yZGVyV2lkdGg6IFwiQm9yZGVyV2lkdGhUb2tlbnMua3RcIixcbiAgICBCb3JkZXJSYWRpdXM6IFwiQm9yZGVyUmFkaXVzVG9rZW5zLmt0XCIsXG4gICAgRHVyYXRpb246IFwiRHVyYXRpb25Ub2tlbnMua3RcIixcbiAgICBaSW5kZXg6IFwiWkluZGV4VG9rZW5zLmt0XCIsXG4gICAgU2hhZG93OiBcIlNoYWRvd1Rva2Vucy5rdFwiLFxuICAgIEJvcmRlcjogXCJCb3JkZXJUb2tlbnMua3RcIixcbiAgICBHcmFkaWVudDogXCJHcmFkaWVudFRva2Vucy5rdFwiLFxuICAgIFN0cmluZzogXCJTdHJpbmdUb2tlbnMua3RcIixcbiAgICBQcm9kdWN0Q29weTogXCJQcm9kdWN0Q29weVRva2Vucy5rdFwiLFxuICAgIEZvbnRGYW1pbHk6IFwiRm9udEZhbWlseVRva2Vucy5rdFwiLFxuICAgIEZvbnRXZWlnaHQ6IFwiRm9udFdlaWdodFRva2Vucy5rdFwiLFxuICAgIFRleHRDYXNlOiBcIlRleHRDYXNlVG9rZW5zLmt0XCIsXG4gICAgVGV4dERlY29yYXRpb246IFwiVGV4dERlY29yYXRpb25Ub2tlbnMua3RcIixcbiAgICBWaXNpYmlsaXR5OiBcIlZpc2liaWxpdHlUb2tlbnMua3RcIixcbiAgICBCbHVyOiBcIkJsdXJUb2tlbnMua3RcIlxufTtcbmV4cG9ydHMuREVGQVVMVF9UT0tFTl9QUkVGSVhFUyA9IHtcbiAgICBDb2xvcjogXCJjb2xvclwiLFxuICAgIFR5cG9ncmFwaHk6IFwidHlwb2dyYXBoeVwiLFxuICAgIERpbWVuc2lvbjogXCJkaW1lbnNpb25cIixcbiAgICBTaXplOiBcInNpemVcIixcbiAgICBTcGFjZTogXCJzcGFjZVwiLFxuICAgIE9wYWNpdHk6IFwib3BhY2l0eVwiLFxuICAgIEZvbnRTaXplOiBcImZvbnRTaXplXCIsXG4gICAgTGluZUhlaWdodDogXCJsaW5lSGVpZ2h0XCIsXG4gICAgTGV0dGVyU3BhY2luZzogXCJsZXR0ZXJTcGFjaW5nXCIsXG4gICAgUGFyYWdyYXBoU3BhY2luZzogXCJwYXJhZ3JhcGhTcGFjaW5nXCIsXG4gICAgQm9yZGVyV2lkdGg6IFwiYm9yZGVyV2lkdGhcIixcbiAgICBCb3JkZXJSYWRpdXM6IFwiYm9yZGVyUmFkaXVzXCIsXG4gICAgRHVyYXRpb246IFwiZHVyYXRpb25cIixcbiAgICBaSW5kZXg6IFwiekluZGV4XCIsXG4gICAgU2hhZG93OiBcInNoYWRvd1wiLFxuICAgIEJvcmRlcjogXCJib3JkZXJcIixcbiAgICBHcmFkaWVudDogXCJncmFkaWVudFwiLFxuICAgIFN0cmluZzogXCJzdHJpbmdcIixcbiAgICBQcm9kdWN0Q29weTogXCJwcm9kdWN0Q29weVwiLFxuICAgIEZvbnRGYW1pbHk6IFwiZm9udEZhbWlseVwiLFxuICAgIEZvbnRXZWlnaHQ6IFwiZm9udFdlaWdodFwiLFxuICAgIFRleHRDYXNlOiBcInRleHRDYXNlXCIsXG4gICAgVGV4dERlY29yYXRpb246IFwidGV4dERlY29yYXRpb25cIixcbiAgICBWaXNpYmlsaXR5OiBcInZpc2liaWxpdHlcIixcbiAgICBCbHVyOiBcImJsdXJcIlxufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRUb2tlblByZWZpeCA9IGdldFRva2VuUHJlZml4O1xuZXhwb3J0cy5jb252ZXJ0ZWRUb2tlbiA9IGNvbnZlcnRlZFRva2VuO1xuY29uc3QgZXhwb3J0X3V0aWxzXzEgPSByZXF1aXJlKFwiQHN1cGVybm92YWlvL2V4cG9ydC11dGlsc1wiKTtcbmNvbnN0IF9fMSA9IHJlcXVpcmUoXCIuLlwiKTtcbmNvbnN0IGRlZmF1bHRzXzEgPSByZXF1aXJlKFwiLi4vY29uc3RhbnRzL2RlZmF1bHRzXCIpO1xuY29uc3QgdG9rZW5fbmFtZV91dGlsc18xID0gcmVxdWlyZShcIi4uL3V0aWxzL3Rva2VuLW5hbWUtdXRpbHNcIik7XG4vKipcbiAqIEdldHMgdGhlIHByZWZpeCBmb3IgYSBzcGVjaWZpYyB0b2tlbiB0eXBlIGJhc2VkIG9uIGNvbmZpZ3VyYXRpb24uXG4gKiBVc2VzIGVpdGhlciBjdXN0b20gcHJlZml4ZXMgZnJvbSBjb25maWd1cmF0aW9uIG9yIGRlZmF1bHQgcHJlZml4ZXMuXG4gKiBAcGFyYW0gdG9rZW5UeXBlIC0gVGhlIHR5cGUgb2YgdG9rZW4gKGUuZy4sIGNvbG9yLCB0eXBvZ3JhcGh5LCBldGMuKVxuICogQHJldHVybnMgVGhlIHByZWZpeCBzdHJpbmcgdG8gdXNlIGZvciB0aGlzIHRva2VuIHR5cGVcbiAqL1xuZnVuY3Rpb24gZ2V0VG9rZW5QcmVmaXgodG9rZW5UeXBlKSB7XG4gICAgcmV0dXJuIF9fMS5leHBvcnRDb25maWd1cmF0aW9uLmN1c3RvbWl6ZVRva2VuUHJlZml4ZXNcbiAgICAgICAgPyBfXzEuZXhwb3J0Q29uZmlndXJhdGlvbi50b2tlblByZWZpeGVzW3Rva2VuVHlwZV1cbiAgICAgICAgOiBkZWZhdWx0c18xLkRFRkFVTFRfVE9LRU5fUFJFRklYRVNbdG9rZW5UeXBlXTtcbn1cbi8qKlxuICogQ29udmVydHMgYSBkZXNpZ24gdG9rZW4gaW50byBpdHMgQ1NTIGN1c3RvbSBwcm9wZXJ0eSByZXByZXNlbnRhdGlvbi5cbiAqIEhhbmRsZXMgZm9ybWF0dGluZyBvZiB0aGUgdG9rZW4gdmFsdWUsIHJlZmVyZW5jZXMsIGFuZCBvcHRpb25hbCBkZXNjcmlwdGlvbiBjb21tZW50cy5cbiAqXG4gKiBAcGFyYW0gdG9rZW4gLSBUaGUgZGVzaWduIHRva2VuIHRvIGNvbnZlcnRcbiAqIEBwYXJhbSBtYXBwZWRUb2tlbnMgLSBNYXAgb2YgYWxsIHRva2VucyBmb3IgcmVzb2x2aW5nIHJlZmVyZW5jZXNcbiAqIEBwYXJhbSB0b2tlbkdyb3VwcyAtIEFycmF5IG9mIHRva2VuIGdyb3VwcyBmb3IgZGV0ZXJtaW5pbmcgdG9rZW4gaGllcmFyY2h5XG4gKiBAcGFyYW0gY29sbGVjdGlvbnMgLSBBcnJheSBvZiBjb2xsZWN0aW9ucyBmb3IgcmVzb2x2aW5nIGNvbGxlY3Rpb24gbmFtZXNcbiAqIEBwYXJhbSBpbXBvcnRDb2xsZWN0b3IgLSBDb2xsZWN0b3IgdGhhdCBnYXRoZXJzIGFsbCBpbXBvcnRzIGZvciB0aGlzIHRva2VuXG4gKiBAcmV0dXJucyBGb3JtYXR0ZWQgQ1NTIGN1c3RvbSBwcm9wZXJ0eSBzdHJpbmcgd2l0aCBvcHRpb25hbCBkZXNjcmlwdGlvbiBjb21tZW50XG4gKi9cbmZ1bmN0aW9uIGNvbnZlcnRlZFRva2VuKHRva2VuLCBtYXBwZWRUb2tlbnMsIHRva2VuR3JvdXBzLCBjb2xsZWN0aW9ucyA9IFtdLCBpbXBvcnRDb2xsZWN0b3IpIHtcbiAgICAvLyBHZW5lcmF0ZSB0aGUgdmFyaWFibGUgbmFtZSBiYXNlZCBvbiB0b2tlbiBwcm9wZXJ0aWVzIGFuZCBjb25maWd1cmF0aW9uXG4gICAgY29uc3QgbmFtZSA9ICgwLCB0b2tlbl9uYW1lX3V0aWxzXzEudG9rZW5OYW1lKSh0b2tlbiwgdG9rZW5Hcm91cHMsIGNvbGxlY3Rpb25zKTtcbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICBjb2xvckZvcm1hdDogZXhwb3J0X3V0aWxzXzEuQ29sb3JGb3JtYXQuaGV4OCxcbiAgICAgICAgYWxsb3dSZWZlcmVuY2VzOiBfXzEuZXhwb3J0Q29uZmlndXJhdGlvbi51c2VSZWZlcmVuY2VzLFxuICAgICAgICBkZWNpbWFsczogMCxcbiAgICAgICAgaW5kZW50OiBfXzEuZXhwb3J0Q29uZmlndXJhdGlvbi5pbmRlbnQsXG4gICAgICAgIHRva2VuVG9WYXJpYWJsZVJlZjogKHRva2VuKSA9PiB7XG4gICAgICAgICAgICAvLyBUT0RPOiBhZGQgY2xhc3MgbmFtZSwgaW1wb3J0IGl0IGlmIG5lZWRlZFxuICAgICAgICAgICAgcmV0dXJuICgwLCB0b2tlbl9uYW1lX3V0aWxzXzEudG9rZW5OYW1lKSh0b2tlbiwgdG9rZW5Hcm91cHMsIGNvbGxlY3Rpb25zKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLy8gQ29udmVydCB0b2tlbiB2YWx1ZSB0byBvYmplY3QgaW5zdGFuY2UsIGhhbmRsaW5nIHJlZmVyZW5jZXMgYW5kIGZvcm1hdHRpbmcgYWNjb3JkaW5nIHRvIGNvbmZpZ3VyYXRpb25cbiAgICBjb25zdCB2YWx1ZSA9IGV4cG9ydF91dGlsc18xLktvdGxpbkhlbHBlci50b2tlblZhbHVlKHRva2VuLCBtYXBwZWRUb2tlbnMsIG9wdGlvbnMsIGltcG9ydENvbGxlY3Rvcik7XG4gICAgY29uc3QgaW5kZW50U3RyaW5nID0gZXhwb3J0X3V0aWxzXzEuR2VuZXJhbEhlbHBlci5pbmRlbnQoX18xLmV4cG9ydENvbmZpZ3VyYXRpb24uaW5kZW50KTtcbiAgICAvLyBBZGQgZGVzY3JpcHRpb24gY29tbWVudCBpZiBlbmFibGVkIGFuZCBkZXNjcmlwdGlvbiBleGlzdHNcbiAgICBjb25zdCBjb21tZW50ID0gX18xLmV4cG9ydENvbmZpZ3VyYXRpb24uc2hvd0Rlc2NyaXB0aW9ucyAmJiB0b2tlbi5kZXNjcmlwdGlvbj8udHJpbSgpXG4gICAgICAgID8gYC8qICR7dG9rZW4uZGVzY3JpcHRpb24udHJpbSgpfSAqL1xcbiR7aW5kZW50U3RyaW5nfWBcbiAgICAgICAgOiBcIlwiO1xuICAgIHJldHVybiBgJHtpbmRlbnRTdHJpbmd9JHtjb21tZW50fXZhbCAke25hbWV9ID0gJHt2YWx1ZX1gO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdlbmVyYXRlT2JqZWN0RmlsZXMgPSBnZW5lcmF0ZU9iamVjdEZpbGVzO1xuY29uc3QgZXhwb3J0X3V0aWxzXzEgPSByZXF1aXJlKFwiQHN1cGVybm92YWlvL2V4cG9ydC11dGlsc1wiKTtcbmNvbnN0IF9fMSA9IHJlcXVpcmUoXCIuLlwiKTtcbmNvbnN0IHRva2VuXzEgPSByZXF1aXJlKFwiLi4vY29udGVudC90b2tlblwiKTtcbmNvbnN0IGNvbmZpZ18xID0gcmVxdWlyZShcIi4uLy4uL2NvbmZpZ1wiKTtcbmNvbnN0IGZpbGVfdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi91dGlscy9maWxlLXV0aWxzXCIpO1xuLyoqXG4gKiBNYWluIGVudHJ5IHBvaW50IGZvciBnZW5lcmF0aW5nIEtvdGxpbiBvYmplY3QgZmlsZXNcbiAqIEBwYXJhbSB0b2tlbnMgLSBBcnJheSBvZiBhbGwgYXZhaWxhYmxlIHRva2Vuc1xuICogQHBhcmFtIHRva2VuR3JvdXBzIC0gQXJyYXkgb2YgdG9rZW4gZ3JvdXBzIGZvciByZWZlcmVuY2VcbiAqIEBwYXJhbSB0aGVtZSAtIE9wdGlvbmFsIHRoZW1lIGNvbmZpZ3VyYXRpb24gZm9yIHRoZW1lZCB0b2tlbnNcbiAqIEBwYXJhbSB0b2tlbkNvbGxlY3Rpb25zIC0gQXJyYXkgb2YgdG9rZW4gY29sbGVjdGlvbnNcbiAqIEByZXR1cm5zIEFycmF5IG9mIE91dHB1dFRleHRGaWxlIG9iamVjdHNcbiAqL1xuZnVuY3Rpb24gZ2VuZXJhdGVPYmplY3RGaWxlcyh0b2tlbnMsIHRva2VuR3JvdXBzLCB0aGVtZSwgdG9rZW5Db2xsZWN0aW9ucykge1xuICAgIC8vIFNraXAgZ2VuZXJhdGluZyBiYXNlIHRva2VuIGZpbGVzIGlmIGV4cG9ydEJhc2VWYWx1ZXMgaXMgZGlzYWJsZWQgYW5kIHRoaXMgaXNuJ3QgYSB0aGVtZSBmaWxlXG4gICAgaWYgKCFfXzEuZXhwb3J0Q29uZmlndXJhdGlvbi5leHBvcnRCYXNlVmFsdWVzICYmICF0aGVtZSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIC8vIEZvciBzaW5nbGUgZmlsZSBvdXRwdXRcbiAgICBpZiAoX18xLmV4cG9ydENvbmZpZ3VyYXRpb24uZmlsZVN0cnVjdHVyZSA9PT0gY29uZmlnXzEuRmlsZVN0cnVjdHVyZS5TaW5nbGVGaWxlKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGdlbmVyYXRlQ29tYmluZWRGaWxlKHRva2VucywgdG9rZW5Hcm91cHMsIHRoZW1lLCB0b2tlbkNvbGxlY3Rpb25zKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdCA/IFtyZXN1bHRdIDogW107XG4gICAgfVxuICAgIC8vIEZvciBzZXBhcmF0ZSBmaWxlcyBieSB0eXBlIChleGlzdGluZyBsb2dpYylcbiAgICByZXR1cm4gWy4uLm5ldyBTZXQodG9rZW5zLm1hcCgodG9rZW4pID0+IHRva2VuLnRva2VuVHlwZSkpXVxuICAgICAgICAubWFwKCh0eXBlKSA9PiBzZXBhcmF0ZVRva2VuVHlwZUZpbGUodHlwZSwgdG9rZW5zLCB0b2tlbkdyb3VwcywgdGhlbWUsIHRva2VuQ29sbGVjdGlvbnMpKVxuICAgICAgICAuZmlsdGVyKChmaWxlKSA9PiBmaWxlICE9PSBudWxsKTtcbn1cbi8qKlxuICogR2VuZXJhdGVzIGEgS290bGluIG91dHB1dCBmaWxlIGZvciBhIHNwZWNpZmljIHRva2VuIHR5cGUsIGhhbmRsaW5nIGJvdGggYmFzZSB0b2tlbnMgYW5kIHRoZW1lZCB0b2tlbnMuXG4gKiBAcGFyYW0gdHlwZSAtIFRoZSB0eXBlIG9mIHRva2VucyB0byBnZW5lcmF0ZSBmaWxlIGZvciAoY29sb3JzLCB0eXBvZ3JhcGh5LCBldGMuKVxuICogQHBhcmFtIHRva2VucyAtIEFycmF5IG9mIGFsbCBhdmFpbGFibGUgdG9rZW5zXG4gKiBAcGFyYW0gdG9rZW5Hcm91cHMgLSBBcnJheSBvZiB0b2tlbiBncm91cHMgZm9yIHJlZmVyZW5jZVxuICogQHBhcmFtIHRoZW1lIC0gT3B0aW9uYWwgdGhlbWUgY29uZmlndXJhdGlvbiBmb3IgdGhlbWVkIHRva2Vuc1xuICogQHBhcmFtIHRva2VuQ29sbGVjdGlvbnMgLSBBcnJheSBvZiB0b2tlbiBjb2xsZWN0aW9ucyBmb3IgcmVmZXJlbmNlXG4gKiBAcmV0dXJucyBPdXRwdXRUZXh0RmlsZSBvYmplY3QgaWYgdGhlIGZpbGUgc2hvdWxkIGJlIGdlbmVyYXRlZCwgbnVsbCBvdGhlcndpc2VcbiAqL1xuZnVuY3Rpb24gc2VwYXJhdGVUb2tlblR5cGVGaWxlKHR5cGUsIHRva2VucywgdG9rZW5Hcm91cHMsIHRoZW1lLCB0b2tlbkNvbGxlY3Rpb25zKSB7XG4gICAgLy8gU2tpcCBnZW5lcmF0aW5nIGJhc2UgdG9rZW4gZmlsZXMgaWYgZXhwb3J0QmFzZVZhbHVlcyBpcyBkaXNhYmxlZCBhbmQgdGhpcyBpc24ndCBhIHRoZW1lIGZpbGVcbiAgICBpZiAoIV9fMS5leHBvcnRDb25maWd1cmF0aW9uLmV4cG9ydEJhc2VWYWx1ZXMgJiYgIXRoZW1lKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICAvLyBHZXQgYWxsIHRva2VucyBtYXRjaGluZyB0aGUgc3BlY2lmaWVkIHRva2VuIHR5cGUgKGNvbG9ycywgdHlwb2dyYXBoeSwgZXRjLilcbiAgICBsZXQgdG9rZW5zT2ZUeXBlID0gdG9rZW5zLmZpbHRlcigodG9rZW4pID0+IHRva2VuLnRva2VuVHlwZSA9PT0gdHlwZSk7XG4gICAgLy8gRm9yIHRoZW1lIGZpbGVzOiBmaWx0ZXIgdG9rZW5zIHRvIG9ubHkgaW5jbHVkZSB0aG9zZSB0aGF0IGFyZSB0aGVtZWRcbiAgICBpZiAodGhlbWUgJiYgX18xLmV4cG9ydENvbmZpZ3VyYXRpb24uZXhwb3J0T25seVRoZW1lZFRva2Vucykge1xuICAgICAgICB0b2tlbnNPZlR5cGUgPSBleHBvcnRfdXRpbHNfMS5UaGVtZUhlbHBlci5maWx0ZXJUaGVtZWRUb2tlbnModG9rZW5zT2ZUeXBlLCB0aGVtZSk7XG4gICAgICAgIC8vIFNraXAgZ2VuZXJhdGluZyBhIHRoZW1lIGZpbGUgaWYgbm8gdG9rZW5zIGFyZSB0aGVtZWQgZm9yIHRoaXMgdHlwZVxuICAgICAgICBpZiAodG9rZW5zT2ZUeXBlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gU2tpcCBnZW5lcmF0aW5nIGZpbGUgaWYgdGhlcmUgYXJlIG5vIHRva2VucyBhbmQgZW1wdHkgZmlsZXMgYXJlIGRpc2FibGVkXG4gICAgaWYgKCFfXzEuZXhwb3J0Q29uZmlndXJhdGlvbi5nZW5lcmF0ZUVtcHR5RmlsZXMgJiYgdG9rZW5zT2ZUeXBlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgLy8gR2V0IHRoZSBmaWxlbmFtZSBiYXNlZCBvbiBjb25maWd1cmF0aW9uIG9yIGRlZmF1bHRzXG4gICAgbGV0IGZpbGVOYW1lID0gKDAsIGZpbGVfdXRpbHNfMS5nZXRUb2tlblR5cGVGaWxlTmFtZSkodHlwZSk7XG4gICAgLy8gQnVpbGQgdGhlIG91dHB1dCBwYXRoLCB1c2luZyB0aGUgdGhlbWUgc3ViZm9sZGVyIGZvciB0aGVtZWQgZmlsZXNcbiAgICBjb25zdCByZWxhdGl2ZVBhdGggPSB0aGVtZVxuICAgICAgICA/IGAuLyR7ZXhwb3J0X3V0aWxzXzEuVGhlbWVIZWxwZXIuZ2V0VGhlbWVJZGVudGlmaWVyKHRoZW1lLCBleHBvcnRfdXRpbHNfMS5TdHJpbmdDYXNlLnNuYWtlQ2FzZSl9YFxuICAgICAgICA6IF9fMS5leHBvcnRDb25maWd1cmF0aW9uLm5vblRoZW1lZEZpbGVQYXRoO1xuICAgIGNvbnN0IGNvbnRlbnQgPSBnZW5lcmF0ZUZpbGVDb250ZW50KHRva2Vuc09mVHlwZSwgZmlsZU5hbWUsIHRoZW1lLCB0b2tlbnMsIHRva2VuR3JvdXBzLCB0b2tlbkNvbGxlY3Rpb25zKTtcbiAgICAvLyBDcmVhdGUgYW5kIHJldHVybiB0aGUgb3V0cHV0IGZpbGUgb2JqZWN0XG4gICAgcmV0dXJuIGV4cG9ydF91dGlsc18xLkZpbGVIZWxwZXIuY3JlYXRlVGV4dEZpbGUoe1xuICAgICAgICByZWxhdGl2ZVBhdGg6IHJlbGF0aXZlUGF0aCxcbiAgICAgICAgZmlsZU5hbWU6IGZpbGVOYW1lLFxuICAgICAgICBjb250ZW50OiBjb250ZW50XG4gICAgfSk7XG59XG4vKipcbiAqIEdlbmVyYXRlcyBhIHNpbmdsZSBLb3RsaW4gZmlsZSBjb250YWluaW5nIGFsbCB0b2tlbiB0eXBlc1xuICovXG5mdW5jdGlvbiBnZW5lcmF0ZUNvbWJpbmVkRmlsZSh0b2tlbnMsIHRva2VuR3JvdXBzLCB0aGVtZSwgdG9rZW5Db2xsZWN0aW9ucyA9IFtdKSB7XG4gICAgbGV0IGZpbHRlcmVkVG9rZW5zID0gdG9rZW5zO1xuICAgIC8vIEZvciB0aGVtZSBmaWxlczogZmlsdGVyIHRva2VucyB0byBvbmx5IGluY2x1ZGUgdGhvc2UgdGhhdCBhcmUgdGhlbWVkXG4gICAgaWYgKHRoZW1lICYmIF9fMS5leHBvcnRDb25maWd1cmF0aW9uLmV4cG9ydE9ubHlUaGVtZWRUb2tlbnMpIHtcbiAgICAgICAgZmlsdGVyZWRUb2tlbnMgPSBleHBvcnRfdXRpbHNfMS5UaGVtZUhlbHBlci5maWx0ZXJUaGVtZWRUb2tlbnMoZmlsdGVyZWRUb2tlbnMsIHRoZW1lKTtcbiAgICAgICAgLy8gU2tpcCBnZW5lcmF0aW5nIGEgdGhlbWUgZmlsZSBpZiBubyB0b2tlbnMgYXJlIHRoZW1lZFxuICAgICAgICBpZiAoZmlsdGVyZWRUb2tlbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBTa2lwIGdlbmVyYXRpbmcgZmlsZSBpZiB0aGVyZSBhcmUgbm8gdG9rZW5zIGFuZCBlbXB0eSBmaWxlcyBhcmUgZGlzYWJsZWRcbiAgICBpZiAoIV9fMS5leHBvcnRDb25maWd1cmF0aW9uLmdlbmVyYXRlRW1wdHlGaWxlcyAmJiBmaWx0ZXJlZFRva2Vucy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIC8vIEZvciBzaW5nbGUgZmlsZSBtb2RlLCBhbGwgZmlsZXMgYXJlIG5hbWVkIGlkZW50aWNhbGx5IGJ1dCBhcmUgcGxhY2VkIGluIGRpZmZlcmVudCBmb2xkZXJzXG4gICAgY29uc3QgZmlsZU5hbWUgPSBleHBvcnRfdXRpbHNfMS5GaWxlTmFtZUhlbHBlci5lbnN1cmVGaWxlRXh0ZW5zaW9uKF9fMS5leHBvcnRDb25maWd1cmF0aW9uLnNpbmdsZUZpbGVOYW1lLCBcImt0XCIpO1xuICAgIGNvbnN0IHJlbGF0aXZlUGF0aCA9IHRoZW1lXG4gICAgICAgID8gYC4vJHtleHBvcnRfdXRpbHNfMS5UaGVtZUhlbHBlci5nZXRUaGVtZUlkZW50aWZpZXIodGhlbWUsIGV4cG9ydF91dGlsc18xLlN0cmluZ0Nhc2Uuc25ha2VDYXNlKX1gXG4gICAgICAgIDogX18xLmV4cG9ydENvbmZpZ3VyYXRpb24ubm9uVGhlbWVkRmlsZVBhdGg7XG4gICAgY29uc3QgY29udGVudCA9IGdlbmVyYXRlRmlsZUNvbnRlbnQoZmlsdGVyZWRUb2tlbnMsIGZpbGVOYW1lLCB0aGVtZSwgdG9rZW5zLCB0b2tlbkdyb3VwcywgdG9rZW5Db2xsZWN0aW9ucyk7XG4gICAgLy8gQ3JlYXRlIGFuZCByZXR1cm4gdGhlIG91dHB1dCBmaWxlXG4gICAgcmV0dXJuIGV4cG9ydF91dGlsc18xLkZpbGVIZWxwZXIuY3JlYXRlVGV4dEZpbGUoe1xuICAgICAgICByZWxhdGl2ZVBhdGg6IHJlbGF0aXZlUGF0aCxcbiAgICAgICAgZmlsZU5hbWU6IGZpbGVOYW1lLFxuICAgICAgICBjb250ZW50OiBjb250ZW50XG4gICAgfSk7XG59XG5mdW5jdGlvbiBnZW5lcmF0ZUZpbGVDb250ZW50KHRva2Vuc1RvRXhwb3J0LCBmaWxlTmFtZSwgdGhlbWUsIGFsbFRva2VucywgdG9rZW5Hcm91cHMsIHRva2VuQ29sbGVjdGlvbnMpIHtcbiAgICAvLyBFdmVyeSB0aGVtZSBpcyBsb2NhdGVkIGluIGEgZm9sZGVyIHdpdGggdGhlIHNhbWUgbmFtZTtcbiAgICAvLyBIb3dldmVyLCB0aGUgbm9uLXRoZW1lZCBwYXRoIGNhbiBiZSBuZXN0ZWQgYW5kIGNvbnRhaW4gc2V2ZXJhbCBzZWdtZW50c1xuICAgIGNvbnN0IHBhY2thZ2VOYW1lU3VmZml4ID0gdGhlbWVcbiAgICAgICAgPyBleHBvcnRfdXRpbHNfMS5UaGVtZUhlbHBlci5nZXRUaGVtZUlkZW50aWZpZXIodGhlbWUsIGV4cG9ydF91dGlsc18xLlN0cmluZ0Nhc2Uuc25ha2VDYXNlKVxuICAgICAgICA6IGV4cG9ydF91dGlsc18xLk5hbWluZ0hlbHBlci5jb2RlU2FmZVZhcmlhYmxlTmFtZShfXzEuZXhwb3J0Q29uZmlndXJhdGlvbi5ub25UaGVtZWRGaWxlUGF0aCwgZXhwb3J0X3V0aWxzXzEuU3RyaW5nQ2FzZS5kb3RDYXNlKTtcbiAgICBjb25zdCBmdWxsUGFja2FnZU5hbWUgPSBbX18xLmV4cG9ydENvbmZpZ3VyYXRpb24ucGFja2FnZVByZWZpeE5hbWUsIHBhY2thZ2VOYW1lU3VmZml4XS5maWx0ZXIoQm9vbGVhbikuam9pbihcIi5cIik7XG4gICAgY29uc3QgcGFja2FnZUxpdGVyYWwgPSBgcGFja2FnZSAke2Z1bGxQYWNrYWdlTmFtZX1gO1xuICAgIGNvbnN0IGltcG9ydENvbGxlY3RvciA9IG5ldyBleHBvcnRfdXRpbHNfMS5JbXBvcnRDb2xsZWN0b3IoKTtcbiAgICAvLyBEZXRlcm1pbmUgdGhlIEtvdGxpbiBvYmplY3QgbmFtZSAtIGl0IGlzIHRoZSBzYW1lIGFzIGZpbGUgbmFtZSwgYnV0IHdpdGhvdXQgdGhlIGV4dGVuc2lvblxuICAgIGNvbnN0IHNhbml0aXplZE9iamVjdE5hbWUgPSBmaWxlTmFtZS5lbmRzV2l0aChcIi5rdFwiKSA/IGZpbGVOYW1lLnNsaWNlKDAsIC0zKSA6IGZpbGVOYW1lO1xuICAgIGNvbnN0IG9iamVjdExpdGVyYWwgPSBgQEltbXV0YWJsZVxcbmAgKyBgb2JqZWN0ICR7c2FuaXRpemVkT2JqZWN0TmFtZX1gO1xuICAgIC8vIENyZWF0ZSBhIG1hcCBvZiBhbGwgdG9rZW5zIGJ5IElEIGZvciByZWZlcmVuY2UgcmVzb2x1dGlvblxuICAgIGNvbnN0IG1hcHBlZFRva2VucyA9IG5ldyBNYXAoYWxsVG9rZW5zLm1hcCgodG9rZW4pID0+IFt0b2tlbi5pZCwgdG9rZW5dKSk7XG4gICAgLy8gQ29udmVydCB0b2tlbnMgdG8gS290bGluIHZhcmlhYmxlIGRlY2xhcmF0aW9uc1xuICAgIGNvbnN0IHRva2VuVmFyaWFibGVzTGl0ZXJhbCA9IHRva2Vuc1RvRXhwb3J0XG4gICAgICAgIC5tYXAoKHRva2VuKSA9PiAoMCwgdG9rZW5fMS5jb252ZXJ0ZWRUb2tlbikodG9rZW4sIG1hcHBlZFRva2VucywgdG9rZW5Hcm91cHMsIHRva2VuQ29sbGVjdGlvbnMsIGltcG9ydENvbGxlY3RvcikpXG4gICAgICAgIC5qb2luKFwiXFxuXCIpO1xuICAgIGxldCBhbGxJbXBvcnRzID0gW1wiaW1wb3J0IGFuZHJvaWR4LmNvbXBvc2UucnVudGltZS5JbW11dGFibGVcIiwgLi4uaW1wb3J0Q29sbGVjdG9yLmFsbEltcG9ydHMoKV0uc29ydCgpO1xuICAgIGNvbnN0IGltcG9ydHNMaXRlcmFsID0gYWxsSW1wb3J0cy5qb2luKFwiXFxuXCIpO1xuICAgIC8vIENvbnN0cnVjdCB0aGUgZmlsZSBjb250ZW50IHdpdGggYW4gb2JqZWN0IHdpdGggdG9rZW4gdmFyaWFibGVzXG4gICAgbGV0IGNvbnRlbnQgPSBgJHtwYWNrYWdlTGl0ZXJhbH1cXG5cXG4ke2ltcG9ydHNMaXRlcmFsfVxcblxcbiR7b2JqZWN0TGl0ZXJhbH0ge1xcbiR7dG9rZW5WYXJpYWJsZXNMaXRlcmFsfVxcbn1gO1xuICAgIC8vIE9wdGlvbmFsbHkgYWRkIGEgZ2VuZXJhdGVkIGZpbGUgZGlzY2xhaW1lclxuICAgIGlmIChfXzEuZXhwb3J0Q29uZmlndXJhdGlvbi5zaG93R2VuZXJhdGVkRmlsZURpc2NsYWltZXIpIHtcbiAgICAgICAgY29udGVudCA9IGV4cG9ydF91dGlsc18xLkdlbmVyYWxIZWxwZXIuYWRkRGlzY2xhaW1lcihfXzEuZXhwb3J0Q29uZmlndXJhdGlvbi5kaXNjbGFpbWVyLCBjb250ZW50KTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZXhwb3J0Q29uZmlndXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IG9iamVjdF9maWxlXzEgPSByZXF1aXJlKFwiLi9maWxlcy9vYmplY3QtZmlsZVwiKTtcbmNvbnN0IGV4cG9ydF91dGlsc18xID0gcmVxdWlyZShcIkBzdXBlcm5vdmFpby9leHBvcnQtdXRpbHNcIik7XG5jb25zdCB0b2tlbl9uYW1lX3V0aWxzXzEgPSByZXF1aXJlKFwiLi91dGlscy90b2tlbi1uYW1lLXV0aWxzXCIpO1xuLyoqIEV4cG9ydGVyIGNvbmZpZ3VyYXRpb24gZnJvbSB0aGUgcmVzb2x2ZWQgZGVmYXVsdCBjb25maWd1cmF0aW9uIGFuZCB1c2VyIG92ZXJyaWRlcyAqL1xuZXhwb3J0cy5leHBvcnRDb25maWd1cmF0aW9uID0gUHVsc2FyLmV4cG9ydENvbmZpZygpO1xuLyoqXG4gKiBGaWx0ZXJzIG91dCBudWxsIHZhbHVlcyBmcm9tIGFuIGFycmF5IG9mIG91dHB1dCBmaWxlc1xuICogQHBhcmFtIGZpbGVzIEFycmF5IG9mIG91dHB1dCBmaWxlcyB0aGF0IG1heSBjb250YWluIG51bGwgdmFsdWVzXG4gKiBAcmV0dXJucyBBcnJheSBvZiBub24tbnVsbCBvdXRwdXQgZmlsZXNcbiAqL1xuZnVuY3Rpb24gc2FuaXRpemVPdXRwdXRGaWxlcyhmaWxlcykge1xuICAgIHJldHVybiBmaWxlcy5maWx0ZXIoKGZpbGUpID0+IGZpbGUgIT09IG51bGwpO1xufVxuLyoqXG4gKiBNYWluIGV4cG9ydCBmdW5jdGlvbiB0aGF0IGdlbmVyYXRlcyBLb3RsaW4gZmlsZXMgZnJvbSBkZXNpZ24gdG9rZW5zXG4gKlxuICogVGhpcyBmdW5jdGlvbiBoYW5kbGVzOlxuICogLSBGZXRjaGluZyB0b2tlbnMgYW5kIHRva2VuIGdyb3VwcyBmcm9tIHRoZSBkZXNpZ24gc3lzdGVtXG4gKiAtIEZpbHRlcmluZyB0b2tlbnMgYnkgYnJhbmQgaWYgc3BlY2lmaWVkXG4gKiAtIFByb2Nlc3NpbmcgdGhlbWVzIGluIGRpZmZlcmVudCBtb2RlcyAoZGlyZWN0LCBzZXBhcmF0ZSBmaWxlcywgb3IgY29tYmluZWQpXG4gKiAtIEdlbmVyYXRpbmcgc3R5bGUgZmlsZXMgZm9yIGVhY2ggdG9rZW4gdHlwZVxuICogLSBDcmVhdGluZyBhbiBvcHRpb25hbCBpbmRleCBmaWxlIHRoYXQgaW1wb3J0cyBhbGwgc3R5bGUgZmlsZXNcbiAqXG4gKiBAcGFyYW0gc2RrIC0gU3VwZXJub3ZhIFNESyBpbnN0YW5jZVxuICogQHBhcmFtIGNvbnRleHQgLSBFeHBvcnQgY29udGV4dCBjb250YWluaW5nIGRlc2lnbiBzeXN0ZW0gaW5mb3JtYXRpb25cbiAqIEByZXR1cm5zIFByb21pc2UgcmVzb2x2aW5nIHRvIGFuIGFycmF5IG9mIG91dHB1dCBmaWxlc1xuICovXG5QdWxzYXIuZXhwb3J0KGFzeW5jIChzZGssIGNvbnRleHQpID0+IHtcbiAgICAvLyBGZXRjaCBkYXRhIGZyb20gdGhlIGRlc2lnbiBzeXN0ZW0gdGhhdCBpcyBjdXJyZW50bHkgYmVpbmcgZXhwb3J0ZWRcbiAgICBjb25zdCByZW1vdGVWZXJzaW9uSWRlbnRpZmllciA9IHtcbiAgICAgICAgZGVzaWduU3lzdGVtSWQ6IGNvbnRleHQuZHNJZCxcbiAgICAgICAgdmVyc2lvbklkOiBjb250ZXh0LnZlcnNpb25JZFxuICAgIH07XG4gICAgLy8gRmV0Y2ggdG9rZW5zIGFuZCB0b2tlbiBncm91cHNcbiAgICBsZXQgb3V0cHV0RmlsZXMgPSBbXTtcbiAgICBsZXQgdG9rZW5zID0gYXdhaXQgc2RrLnRva2Vucy5nZXRUb2tlbnMocmVtb3RlVmVyc2lvbklkZW50aWZpZXIpO1xuICAgIGxldCB0b2tlbkdyb3VwcyA9IGF3YWl0IHNkay50b2tlbnMuZ2V0VG9rZW5Hcm91cHMocmVtb3RlVmVyc2lvbklkZW50aWZpZXIpO1xuICAgIGxldCB0b2tlbkNvbGxlY3Rpb25zID0gYXdhaXQgc2RrLnRva2Vucy5nZXRUb2tlbkNvbGxlY3Rpb25zKHJlbW90ZVZlcnNpb25JZGVudGlmaWVyKTtcbiAgICAvLyBGaWx0ZXIgYnkgYnJhbmQgaWYgc3BlY2lmaWVkXG4gICAgaWYgKGNvbnRleHQuYnJhbmRJZCkge1xuICAgICAgICBjb25zdCBicmFuZHMgPSBhd2FpdCBzZGsuYnJhbmRzLmdldEJyYW5kcyhyZW1vdGVWZXJzaW9uSWRlbnRpZmllcik7XG4gICAgICAgIGNvbnN0IGJyYW5kID0gYnJhbmRzLmZpbmQoKGJyYW5kKSA9PiBicmFuZC5pZCA9PT0gY29udGV4dC5icmFuZElkIHx8IGJyYW5kLmlkSW5WZXJzaW9uID09PSBjb250ZXh0LmJyYW5kSWQpO1xuICAgICAgICBpZiAoIWJyYW5kKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuYWJsZSB0byBmaW5kIGJyYW5kICR7Y29udGV4dC5icmFuZElkfS5gKTtcbiAgICAgICAgfVxuICAgICAgICB0b2tlbnMgPSB0b2tlbnMuZmlsdGVyKCh0b2tlbikgPT4gdG9rZW4uYnJhbmRJZCA9PT0gYnJhbmQuaWQpO1xuICAgICAgICB0b2tlbkdyb3VwcyA9IHRva2VuR3JvdXBzLmZpbHRlcigodG9rZW5Hcm91cCkgPT4gdG9rZW5Hcm91cC5icmFuZElkID09PSBicmFuZC5pZCk7XG4gICAgfVxuICAgIC8vIFByb2Nlc3MgdGhlbWVzIGlmIHNwZWNpZmllZFxuICAgIGlmIChjb250ZXh0LnRoZW1lSWRzICYmIGNvbnRleHQudGhlbWVJZHMubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCB0aGVtZXMgPSBhd2FpdCBzZGsudG9rZW5zLmdldFRva2VuVGhlbWVzKHJlbW90ZVZlcnNpb25JZGVudGlmaWVyKTtcbiAgICAgICAgLy8gRmluZCBhbmQgdmFsaWRhdGUgcmVxdWVzdGVkIHRoZW1lc1xuICAgICAgICBjb25zdCB0aGVtZXNUb0FwcGx5ID0gY29udGV4dC50aGVtZUlkcy5tYXAoKHRoZW1lSWQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHRoZW1lID0gdGhlbWVzLmZpbmQoKHRoZW1lKSA9PiB0aGVtZS5pZCA9PT0gdGhlbWVJZCB8fCB0aGVtZS5pZEluVmVyc2lvbiA9PT0gdGhlbWVJZCk7XG4gICAgICAgICAgICBpZiAoIXRoZW1lKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmFibGUgdG8gZmluZCB0aGVtZSAke3RoZW1lSWR9LmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoZW1lO1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gVE9ETzogc3VwcG9ydCBkaWZmZXJlbnQgbW9kZXNcbiAgICAgICAgLy8gR2VuZXJhdGUgc2VwYXJhdGUgZmlsZXMgZm9yIGVhY2ggdGhlbWVcbiAgICAgICAgY29uc3QgdGhlbWVGaWxlcyA9IHRoZW1lc1RvQXBwbHkuZmxhdE1hcCgodGhlbWUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHRoZW1lZFRva2VucyA9IHNkay50b2tlbnMuY29tcHV0ZVRva2Vuc0J5QXBwbHlpbmdUaGVtZXModG9rZW5zLCB0b2tlbnMsIFt0aGVtZV0pO1xuICAgICAgICAgICAgcmV0dXJuICgwLCBvYmplY3RfZmlsZV8xLmdlbmVyYXRlT2JqZWN0RmlsZXMpKHRoZW1lZFRva2VucywgdG9rZW5Hcm91cHMsIHRoZW1lLCB0b2tlbkNvbGxlY3Rpb25zKTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIEdlbmVyYXRlIGJhc2UgZmlsZXMgd2l0aG91dCB0aGVtZXMgb25seSBpZiBleHBvcnRCYXNlVmFsdWVzIGlzIHRydWVcbiAgICAgICAgY29uc3QgYmFzZUZpbGVzID0gZXhwb3J0cy5leHBvcnRDb25maWd1cmF0aW9uLmV4cG9ydEJhc2VWYWx1ZXNcbiAgICAgICAgICAgID8gKDAsIG9iamVjdF9maWxlXzEuZ2VuZXJhdGVPYmplY3RGaWxlcykodG9rZW5zLCB0b2tlbkdyb3VwcywgdW5kZWZpbmVkLCB0b2tlbkNvbGxlY3Rpb25zKVxuICAgICAgICAgICAgOiBbXTtcbiAgICAgICAgLy8gdG9kbyBpbmRleCBmaWxlc1xuICAgICAgICBjb25zdCBzZXBhcmF0ZUZpbGVzID0gW1xuICAgICAgICAgICAgLi4uYmFzZUZpbGVzLFxuICAgICAgICAgICAgLi4udGhlbWVGaWxlc1xuICAgICAgICAgICAgLy8gaW5kZXhPdXRwdXRGaWxlKHRva2VucywgdGhlbWVzVG9BcHBseSlcbiAgICAgICAgXTtcbiAgICAgICAgb3V0cHV0RmlsZXMgPSBzYW5pdGl6ZU91dHB1dEZpbGVzKHNlcGFyYXRlRmlsZXMpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLy8gRGVmYXVsdCBjYXNlOiBHZW5lcmF0ZSBmaWxlcyB3aXRob3V0IHRoZW1lc1xuICAgICAgICBjb25zdCBkZWZhdWx0RmlsZXMgPSBbXG4gICAgICAgICAgICAuLi4oZXhwb3J0cy5leHBvcnRDb25maWd1cmF0aW9uLmV4cG9ydEJhc2VWYWx1ZXNcbiAgICAgICAgICAgICAgICA/ICgwLCBvYmplY3RfZmlsZV8xLmdlbmVyYXRlT2JqZWN0RmlsZXMpKHRva2VucywgdG9rZW5Hcm91cHMsIHVuZGVmaW5lZCwgdG9rZW5Db2xsZWN0aW9ucylcbiAgICAgICAgICAgICAgICA6IFtdKVxuICAgICAgICAgICAgLy8gaW5kZXhPdXRwdXRGaWxlKHRva2VucyksXG4gICAgICAgIF07XG4gICAgICAgIG91dHB1dEZpbGVzID0gc2FuaXRpemVPdXRwdXRGaWxlcyhkZWZhdWx0RmlsZXMpO1xuICAgIH1cbiAgICAvLyBXcml0ZSB0aGUgcHJvcGVydHkgbmFtZSBvZiBlYWNoIHRva2VuIGlmIGl0IGlzIGVuYWJsZWQgaW4gdGhlIHNldHRpbmdzXG4gICAgaWYgKCFjb250ZXh0LmlzUHJldmlldyAmJiBleHBvcnRzLmV4cG9ydENvbmZpZ3VyYXRpb24ud3JpdGVOYW1lVG9Qcm9wZXJ0eSkge1xuICAgICAgICBjb25zdCB3cml0ZVN0b3JlID0gbmV3IGV4cG9ydF91dGlsc18xLldyaXRlVG9rZW5Qcm9wU3RvcmUoc2RrLCByZW1vdGVWZXJzaW9uSWRlbnRpZmllcik7XG4gICAgICAgIGF3YWl0IHdyaXRlU3RvcmUud3JpdGVUb2tlblByb3BlcnRpZXMoZXhwb3J0cy5leHBvcnRDb25maWd1cmF0aW9uLnByb3BlcnR5VG9Xcml0ZU5hbWVUbywgdG9rZW5zLCAodG9rZW4pID0+IHtcbiAgICAgICAgICAgIHJldHVybiAoMCwgdG9rZW5fbmFtZV91dGlsc18xLnRva2VuTmFtZSkodG9rZW4sIHRva2VuR3JvdXBzLCB0b2tlbkNvbGxlY3Rpb25zKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8vIEZpbmFsaXplIGV4cG9ydCBieSByZXRyaWV2aW5nIHRoZSBmaWxlcyB0byB3cml0ZSB0byBkZXN0aW5hdGlvblxuICAgIHJldHVybiBvdXRwdXRGaWxlcztcbn0pO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldFRva2VuVHlwZUZpbGVOYW1lID0gZ2V0VG9rZW5UeXBlRmlsZU5hbWU7XG5jb25zdCBleHBvcnRfdXRpbHNfMSA9IHJlcXVpcmUoXCJAc3VwZXJub3ZhaW8vZXhwb3J0LXV0aWxzXCIpO1xuY29uc3QgX18xID0gcmVxdWlyZShcIi4uXCIpO1xuY29uc3QgZGVmYXVsdHNfMSA9IHJlcXVpcmUoXCIuLi9jb25zdGFudHMvZGVmYXVsdHNcIik7XG5mdW5jdGlvbiBnZXRUb2tlblR5cGVGaWxlTmFtZSh0eXBlKSB7XG4gICAgY29uc3QgZmlsZU5hbWUgPSBfXzEuZXhwb3J0Q29uZmlndXJhdGlvbi5jdXN0b21pemVTZXBhcmF0ZWRCeVR5cGVGaWxlTmFtZXNcbiAgICAgICAgPyBfXzEuZXhwb3J0Q29uZmlndXJhdGlvbi5zZXBhcmF0ZWRCeVR5cGVGaWxlTmFtZXNbdHlwZV1cbiAgICAgICAgOiBkZWZhdWx0c18xLkRFRkFVTFRfVE9LRU5fVFlQRV9GSUxFX05BTUVTW3R5cGVdO1xuICAgIHJldHVybiBleHBvcnRfdXRpbHNfMS5GaWxlTmFtZUhlbHBlci5lbnN1cmVGaWxlRXh0ZW5zaW9uKGZpbGVOYW1lLCBcImt0XCIpO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnRva2VuTmFtZSA9IHRva2VuTmFtZTtcbmNvbnN0IGluZGV4XzEgPSByZXF1aXJlKFwiLi4vaW5kZXhcIik7XG5jb25zdCBjb25maWdfMSA9IHJlcXVpcmUoXCIuLi8uLi9jb25maWdcIik7XG5jb25zdCBleHBvcnRfdXRpbHNfMSA9IHJlcXVpcmUoXCJAc3VwZXJub3ZhaW8vZXhwb3J0LXV0aWxzXCIpO1xuY29uc3QgdG9rZW5fMSA9IHJlcXVpcmUoXCIuLi9jb250ZW50L3Rva2VuXCIpO1xuLyoqXG4gKiBHZW5lcmF0ZXMgYSBjb2RlLXNhZmUgdmFyaWFibGUgbmFtZSBmb3IgYSB0b2tlbiBiYXNlZCBvbiBpdHMgcHJvcGVydGllcyBhbmQgY29uZmlndXJhdGlvbi5cbiAqIEluY2x1ZGVzIHR5cGUtc3BlY2lmaWMgcHJlZml4IGFuZCBjb25zaWRlcnMgdG9rZW4gaGllcmFyY2h5IGFuZCBjb2xsZWN0aW9uLlxuICpcbiAqIEBwYXJhbSB0b2tlbiAtIFRoZSB0b2tlbiB0byBnZW5lcmF0ZSBhIG5hbWUgZm9yXG4gKiBAcGFyYW0gdG9rZW5Hcm91cHMgLSBBcnJheSBvZiB0b2tlbiBncm91cHMgZm9yIGRldGVybWluaW5nIHRva2VuIGhpZXJhcmNoeVxuICogQHBhcmFtIGNvbGxlY3Rpb25zIC0gQXJyYXkgb2YgY29sbGVjdGlvbnMgZm9yIHJlc29sdmluZyBjb2xsZWN0aW9uIG5hbWVzXG4gKiBAcmV0dXJucyBGb3JtYXR0ZWQgdmFyaWFibGUgbmFtZSBzdHJpbmdcbiAqL1xuZnVuY3Rpb24gdG9rZW5OYW1lKHRva2VuLCB0b2tlbkdyb3VwcywgY29sbGVjdGlvbnMgPSBbXSkge1xuICAgIGNvbnN0IHByZWZpeCA9ICgwLCB0b2tlbl8xLmdldFRva2VuUHJlZml4KSh0b2tlbi50b2tlblR5cGUpO1xuICAgIGNvbnN0IHBhcmVudCA9IHRva2VuR3JvdXBzLmZpbmQoKGdyb3VwKSA9PiBncm91cC5pZCA9PT0gdG9rZW4ucGFyZW50R3JvdXBJZCk7XG4gICAgLy8gRmluZCBhIGNvbGxlY3Rpb24gaWYgbmVlZGVkIGFuZCBleGlzdHNcbiAgICBsZXQgY29sbGVjdGlvbiA9IG51bGw7XG4gICAgaWYgKGluZGV4XzEuZXhwb3J0Q29uZmlndXJhdGlvbi50b2tlbk5hbWVTdHJ1Y3R1cmUgPT09IGNvbmZpZ18xLlRva2VuTmFtZVN0cnVjdHVyZS5Db2xsZWN0aW9uUGF0aEFuZE5hbWUgJiYgdG9rZW4uY29sbGVjdGlvbklkKSB7XG4gICAgICAgIGNvbGxlY3Rpb24gPSBjb2xsZWN0aW9ucy5maW5kKChjKSA9PiBjLnBlcnNpc3RlbnRJZCA9PT0gdG9rZW4uY29sbGVjdGlvbklkKSA/PyB7IG5hbWU6IHRva2VuLmNvbGxlY3Rpb25JZCB9O1xuICAgIH1cbiAgICByZXR1cm4gZXhwb3J0X3V0aWxzXzEuTmFtaW5nSGVscGVyLmNvZGVTYWZlVmFyaWFibGVOYW1lRm9yVG9rZW4odG9rZW4sIGV4cG9ydF91dGlsc18xLlN0cmluZ0Nhc2UuY2FtZWxDYXNlLCBpbmRleF8xLmV4cG9ydENvbmZpZ3VyYXRpb24udG9rZW5OYW1lU3RydWN0dXJlICE9PSBjb25maWdfMS5Ub2tlbk5hbWVTdHJ1Y3R1cmUuTmFtZU9ubHkgPyBwYXJlbnQgOiBudWxsLCBbaW5kZXhfMS5leHBvcnRDb25maWd1cmF0aW9uLmdsb2JhbE5hbWVQcmVmaXgsIHByZWZpeCwgY29sbGVjdGlvbj8ubmFtZV0uZmlsdGVyKEJvb2xlYW4pLmpvaW4oXCJcIikpO1xufVxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCIvLyBzdGFydHVwXG4vLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8vIFRoaXMgZW50cnkgbW9kdWxlIGlzIHJlZmVyZW5jZWQgYnkgb3RoZXIgbW9kdWxlcyBzbyBpdCBjYW4ndCBiZSBpbmxpbmVkXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3NyYy9pbmRleC50c1wiKTtcbiJdLCJuYW1lcyI6WyJDb2xvckZvcm1hdCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiU3RyaW5nQ2FzZSIsIkNTU0hlbHBlciIsInNka19leHBvcnRlcnNfMSIsIlRva2VuSGVscGVyXzEiLCJDb2xvckhlbHBlcl8xIiwidG9rZW5Ub0NTUyIsInRva2VuIiwiYWxsVG9rZW5zIiwib3B0aW9ucyIsImNzc1ZhbHVlIiwidG9rZW5UeXBlIiwiVG9rZW5UeXBlIiwiY29sb3IiLCJ0aGlzIiwiY29sb3JUb2tlblZhbHVlVG9DU1MiLCJib3JkZXIiLCJib3JkZXJUb2tlblZhbHVlVG9DU1MiLCJncmFkaWVudCIsImdyYWRpZW50VG9rZW5WYWx1ZVRvQ1NTIiwiZGltZW5zaW9uIiwic2l6ZSIsInNwYWNlIiwib3BhY2l0eSIsImZvbnRTaXplIiwibGluZUhlaWdodCIsImxldHRlclNwYWNpbmciLCJwYXJhZ3JhcGhTcGFjaW5nIiwiYm9yZGVyV2lkdGgiLCJyYWRpdXMiLCJkdXJhdGlvbiIsInpJbmRleCIsImRpbWVuc2lvblRva2VuVmFsdWVUb0NTUyIsInNoYWRvdyIsInNoYWRvd1Rva2VuVmFsdWVUb0NTUyIsImZvbnRXZWlnaHQiLCJmb250V2VpZ2h0VG9rZW5WYWx1ZVRvQ1NTIiwiZm9udEZhbWlseSIsInByb2R1Y3RDb3B5Iiwic3RyaW5nIiwic3RyaW5nVG9rZW5WYWx1ZVRvQ1NTIiwidGV4dENhc2UiLCJ0ZXh0RGVjb3JhdGlvbiIsInZpc2liaWxpdHkiLCJvcHRpb25Ub2tlblZhbHVlVG9DU1MiLCJibHVyIiwiYmx1clRva2VuVmFsdWVUb0NTUyIsInR5cG9ncmFwaHkiLCJ0eXBvZ3JhcGh5VG9rZW5WYWx1ZVRvQ1NTIiwiVW5yZWFjaGFibGVDYXNlRXJyb3IiLCJ2YWx1ZVRyYW5zZm9ybWVyIiwidHJhbnNmb3JtZWRWYWx1ZSIsInVuZGVmaW5lZCIsIkNvbG9ySGVscGVyIiwiZm9ybWF0dGVkQ29sb3JPclZhcmlhYmxlTmFtZSIsInJlZmVyZW5jZSIsInN1cmVPcHRpb25hbFJlZmVyZW5jZSIsInJlZmVyZW5jZWRUb2tlbklkIiwiYWxsb3dSZWZlcmVuY2VzIiwidG9rZW5Ub1ZhcmlhYmxlUmVmIiwiZGF0YSIsIndpZHRoIiwiYm9yZGVyU3R5bGVUb0NTUyIsInN0eWxlIiwiYm9yZGVyUG9zaXRpb25Ub0NTUyIsInBvc2l0aW9uIiwiZ3JhZGllbnRzIiwibWFwIiwiZ3JhZGllbnRMYXllclRvQ1NTIiwiam9pbiIsImRlbHRhWCIsInJvdW5kVG9EZWNpbWFscyIsInRvIiwieCIsImRlY2ltYWxzIiwiZnJvbSIsImRlbHRhWSIsInkiLCJkZWciLCJNYXRoIiwiYXRhbjIiLCJQSSIsImdldEFuZ2xlIiwiZ3JhZGllbnRUeXBlIiwidHlwZSIsIkdyYWRpZW50VHlwZSIsImxpbmVhciIsInJhZGlhbCIsImFuZ3VsYXIiLCJzdG9wcyIsInN0b3AiLCJmb3JjZVJlbVVuaXQiLCJ1bml0IiwiVW5pdCIsInBpeGVscyIsInJlbUJhc2UiLCJyZW1WYWx1ZSIsIm1lYXN1cmUiLCJ1bml0VG9DU1MiLCJzaGFkb3dzIiwibGF5ZXIiLCJzaGFkb3dMYXllclRvQ1NTIiwiY29udmVydFRvUmVtIiwicHgiLCJTaGFkb3dUeXBlIiwiaW5uZXIiLCJzcHJlYWQiLCJub3JtYWxpemVUZXh0V2VpZ2h0IiwidGV4dCIsIm9wdGlvbiIsInRleHRDYXNlVG9DU1MiLCJ0ZXh0RGVjb3JhdGlvblRvQ1NTIiwidG9Mb3dlckNhc2UiLCJmb250RmFtaWx5UmVmZXJlbmNlIiwiZm9udFdlaWdodFJlZmVyZW5jZSIsImRlY29yYXRpb25SZWZlcmVuY2UiLCJjYXNlUmVmZXJlbmNlIiwiVGV4dERlY29yYXRpb24iLCJvcmlnaW5hbCIsIlRleHRDYXNlIiwiY2FwcyIsInNtYWxsQ2FwcyIsImZyYWdtZW50U2l6ZSIsImJvcmRlclN0eWxlIiwiQm9yZGVyU3R5bGUiLCJkYXNoZWQiLCJkb3R0ZWQiLCJzb2xpZCIsImdyb292ZSIsImJvcmRlclBvc2l0aW9uIiwiQm9yZGVyUG9zaXRpb24iLCJjZW50ZXIiLCJpbnNpZGUiLCJvdXRzaWRlIiwicGVyY2VudCIsInJlbSIsInJhdyIsIm1zIiwidXBwZXIiLCJsb3dlciIsImNhbWVsIiwidW5kZXJsaW5lIiwic3RyaWtldGhyb3VnaCIsIkNvbG9yRm9ybWF0XzEiLCJmdWxsUmVmZXJlbmNlTmFtZSIsImNvbG9yUmVmZXJlbmNlTmFtZSIsIm9wYWNpdHlSZWZlcmVuY2VOYW1lIiwiZnVsbFRva2VuIiwiY29sb3JUb2tlbiIsIm9wYWNpdHlUb2tlbiIsInJlc3VsdCIsImZvcm1hdHRlZENvbG9yIiwiY29sb3JGb3JtYXQiLCJyYXdDb2xvclRva2VuRm9ybWF0dGVyIiwicmdiIiwicmdiYSIsInNtYXJ0UmdiYSIsImNvbG9yVG9SZ2IiLCJub3JtYWxpemVkSW50Q29sb3IiLCJmb3JtYXQiLCJoZXg2IiwiaGV4OCIsImhhc2hIZXg2IiwiaGFzaEhleDgiLCJzbWFydEhleCIsInNtYXJ0SGFzaEhleCIsImNvbG9yVG9IZXgiLCJoc2wiLCJoc2xhIiwic21hcnRIc2xhIiwiY29sb3JUb0hzbCIsIm5vcm1hbGl6ZWRGcmFjdGlvbmFsQ29sb3IiLCJzbWFydFVJQ29sb3IiLCJjb2xvclRvVUlDb2xvciIsIm9rbGNoIiwib2tsY2hhIiwic21hcnRPa2xjaCIsImNvbG9yVG9Pa2xjaCIsImFscGhhIiwiY29sb3JSZWZSZXBsYWNlIiwib3BhY2l0eVJlZlJlcGxhY2UiLCJyZXN1bHRpbmdSZ2IiLCJyIiwiZyIsImIiLCJyZXN1bHRpbmdIZXgiLCJwSGV4Iiwicm91bmQiLCJtYXgiLCJtaW4iLCJyZXN1bHRpbmdIc2wiLCJoIiwicyIsImwiLCJkZWx0YSIsInJlc3VsdGluZ1VJQ29sb3IiLCJmb3JjZVRyYWlsaW5nWmVybyIsIm11bHRpcGxpZXIiLCJwb3ciLCJyb3VuZGVkIiwiTnVtYmVyIiwidG9GaXhlZCIsInBhcnNlRmxvYXQiLCJ0b1N0cmluZyIsInBhZFN0YXJ0IiwiYyIsInJnYlRvT2tsY2giLCJsciIsInNSR0J0b0xpbmVhciIsImxnIiwibGIiLCJ6IiwibG1zX2wiLCJsbXNfbSIsImxtc19zIiwibHAiLCJjYnJ0IiwibXAiLCJzcCIsIkwiLCJsYWJfYSIsImxhYl9iIiwiQyIsInNxcnQiLCJGaWxlSGVscGVyIiwiY3JlYXRlQ29weVJlbW90ZUZpbGUiLCJyZWxhdGl2ZVBhdGgiLCJmaWxlTmFtZSIsInVybCIsInBhdGgiLCJuYW1lIiwiT3V0cHV0RmlsZVR5cGUiLCJjb3B5UmVtb3RlVXJsIiwiY3JlYXRlVGV4dEZpbGUiLCJjb250ZW50IiwiY3JlYXRlQmluYXJ5RmlsZSIsImJpbmFyeSIsIkZpbGVOYW1lSGVscGVyIiwiU3RyaW5nQ2FzZV8xIiwiTmFtaW5nSGVscGVyXzEiLCJlbnN1cmVGaWxlRXh0ZW5zaW9uIiwiZXh0ZW5zaW9uIiwibm9ybWFsaXplZEV4dGVuc2lvbiIsInN0YXJ0c1dpdGgiLCJlbmRzV2l0aCIsInJlcGxhY2VGaWxlRXh0ZW5zaW9uIiwib2xkRXh0IiwibmV3RXh0Iiwibm9ybWFsaXplZE9sZEV4dCIsIm5vcm1hbGl6ZWROZXdFeHQiLCJyZXBsYWNlIiwiUmVnRXhwIiwiZ2V0RGVmYXVsdFN0eWxlRmlsZU5hbWUiLCJzdHJpbmdDYXNlIiwia2ViYWJDYXNlIiwiTmFtaW5nSGVscGVyIiwiY29kZVNhZmVWYXJpYWJsZU5hbWUiLCJDb2xvciIsIlR5cG9ncmFwaHkiLCJEaW1lbnNpb24iLCJTaXplIiwiU3BhY2UiLCJPcGFjaXR5IiwiRm9udFNpemUiLCJMaW5lSGVpZ2h0IiwiTGV0dGVyU3BhY2luZyIsIlBhcmFncmFwaFNwYWNpbmciLCJCb3JkZXJXaWR0aCIsIkJvcmRlclJhZGl1cyIsIkR1cmF0aW9uIiwiWkluZGV4IiwiU2hhZG93IiwiQm9yZGVyIiwiR3JhZGllbnQiLCJTdHJpbmciLCJQcm9kdWN0Q29weSIsIkZvbnRGYW1pbHkiLCJGb250V2VpZ2h0IiwiVmlzaWJpbGl0eSIsIkJsdXIiLCJHZW5lcmFsSGVscGVyIiwiaW5kZW50Iiwic3BhY2VzIiwicmVwZWF0IiwiYWRkRGlzY2xhaW1lciIsImRpc2NsYWltZXIiLCJLb3RsaW5IZWxwZXIiLCJJbXBvcnRDb2xsZWN0b3IiLCJJbXBvcnRGbGFnIiwiR2VuZXJhbEhlbHBlcl8xIiwiY29uc3RydWN0b3IiLCJmbGFncyIsIlNldCIsInVzZSIsImZvckVhY2giLCJhZGQiLCJhbGxJbXBvcnRzIiwiaW1wb3J0TGlzdCIsImhhcyIsInB1c2giLCJEcCIsIlNwIiwiT2Zmc2V0IiwiQnJ1c2giLCJUaWxlTW9kZSIsIkJvcmRlclN0cm9rZSIsIk1vZGlmaWVyIiwiVGV4dFN0eWxlIiwic29ydCIsInRva2VuVmFsdWUiLCJpbXBvcnRDb2xsZWN0b3IiLCJhY3R1YWxPcHRpb25zIiwicmF3VmFsdWUiLCJjb2xvclRva2VuVmFsdWVUb0tvdGxpbiIsImJvcmRlclRva2VuVmFsdWVUb0tvdGxpbiIsImdyYWRpZW50VG9rZW5WYWx1ZVRvS290bGluIiwiZGltZW5zaW9uVG9rZW5WYWx1ZVRvS290bGluIiwic2hhZG93VG9rZW5WYWx1ZVRvS290bGluIiwiZm9udFdlaWdodFRva2VuVmFsdWVUb0tvdGxpbiIsInN0cmluZ1Rva2VuVmFsdWVUb0tvdGxpbiIsIm9wdGlvblRva2VuVmFsdWVUb0tvdGxpbiIsImJsdXJUb2tlblZhbHVlVG9Lb3RsaW4iLCJ0eXBvZ3JhcGh5VG9rZW5WYWx1ZVRvS290bGluIiwibGF5ZXJzIiwiZ3JhZGllbnRMYXllclRvS290bGluIiwibGVuZ3RoIiwiY29sb3JzTGl0Iiwic3RvcHNMaXQiLCJpbmRlbnRTdHJpbmciLCJzaGFkb3dMYXllclRvS290bGluIiwidW5pdFRvS290bGluIiwidGV4dENhc2VUb0tvdGxpbiIsInRleHREZWNvcmF0aW9uVG9Lb3RsaW4iLCJ2aXNpYmlsaXR5VG9Lb3RsaW4iLCJWaXNpYmlsaXR5VHlwZSIsInZpc2libGUiLCJub3JtYWxpemVkV2VpZ2h0IiwiZm9udFdlaWdodEludFRvS290bGluIiwid2VpZ2h0IiwiZm9udEZhbWlseVJlZiIsImZvbnRXZWlnaHRSZWYiLCJkZWNvcmF0aW9uUmVmIiwiZm9udEZhbWlseUxpdCIsImZvbnRXZWlnaHRMaXQiLCJ0ZXh0RGVjb3JhdGlvbkxpdCIsImZvbnRTaXplTGl0IiwibGluZUhlaWdodExpdCIsImxldHRlclNwYWNpbmdMaXQiLCJwYXJ0cyIsInAiLCJjaGFuZ2VfY2FzZV8xIiwiYXBwbHlGaW5kUmVwbGFjZSIsImZpbmRSZXBsYWNlIiwic29ydGVkUGF0dGVybnMiLCJlbnRyaWVzIiwiYSIsImZpbmQiLCJlc2NhcGVkRmluZCIsInBhdHRlcm4iLCJjb2RlU2FmZVZhcmlhYmxlTmFtZUZvclRva2VuIiwicGFyZW50IiwicHJlZml4IiwicmVtb3ZlRHVwbGljYXRlRnJhZ21lbnRzIiwiZnJhZ21lbnRzIiwiaXNSb290IiwidG9rZW5OYW1lUGFydHMiLCJzcGxpdCIsInNsaWNlIiwicGF0aEFuZE5hbWUiLCJmaWx0ZXIiLCJmIiwidHJpbSIsInVuc2hpZnQiLCJzZW50ZW5jZSIsInJlcGxhY2VBbGwiLCJub3JtYWxpemVkRnJhZ21lbnRzIiwiZnJhZ21lbnQiLCJpbmRleCIsImNhbWVsQ2FzZSIsImNhcGl0YWxDYXNlIiwiY29uc3RhbnRDYXNlIiwiZG90Q2FzZSIsInRyYWluQ2FzZSIsIm5vQ2FzZSIsInBhc2NhbENhc2UiLCJwYXRoQ2FzZSIsInNlbnRlbmNlQ2FzZSIsInNuYWtlQ2FzZSIsImZsYXRDYXNlIiwibWF0Y2giLCJuYW1lQXNDU1NWYXJSZWZlcmVuY2UiLCJuYW1lQXNDU1NWYXJEZWNsYXJhdGlvbiIsIlRoZW1lSGVscGVyIiwiaGFzVGhlbWVkVG9rZW5zIiwidG9rZW5zIiwidGhlbWUiLCJ0b2tlbnNPZlR5cGUiLCJvdmVycmlkZGVuVG9rZW5JZHMiLCJvdmVycmlkZGVuVG9rZW5zIiwidCIsImlkIiwic29tZSIsImZpbHRlclRoZW1lZFRva2VucyIsImdldFRoZW1lSWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJjb2RlTmFtZSIsImdldFRoZW1lTmFtZSIsInJlZmVyZW5jZUlkIiwiZ2V0IiwiRXJyb3IiLCJub3JtYWxpemVkVGV4dCIsIm51bWVyaWNXZWlnaHQiLCJwYXJzZUludCIsImlzTmFOIiwiVG9rZW5OYW1lVHJhY2tlciIsInRva2VuTmFtZU1hcCIsIk1hcCIsIm5hbWVUb1Rva2VuTWFwIiwiaGllcmFyY2h5TmFtZU1hcCIsInJlc2V0IiwiY2xlYXIiLCJnZXRTaW1wbGVUb2tlbk5hbWUiLCJmb3JFeHBvcnQiLCJoaWVyYXJjaHlGdWxsS2V5Iiwic2V0IiwidG9rZW5zQXRMZXZlbCIsImdldFRva2VuTmFtZSIsInRva2VuR3JvdXBzIiwiZ3JvdXAiLCJwYXJlbnRHcm91cElkIiwiY291bnRlciIsIldyaXRlVG9rZW5Qcm9wU3RvcmUiLCJzZGsiLCJ0YXJnZXQiLCJ0b2tlblByb3BlcnR5V3JpdGVNYXAiLCJzdG9yZVZhbHVlRm9yVG9rZW5Qcm9wZXJ0eSIsInByb3BlcnR5TmFtZSIsInRva2VuTWFwIiwiYmF0Y2hVcGRhdGVTdG9yZWRUb2tlblByb3BlcnRpZXMiLCJwcm9wZXJ0aWVzIiwiZ2V0VG9rZW5Qcm9wZXJ0aWVzIiwicHJvcGVydHkiLCJwcm9wIiwiY3JlYXRlVG9rZW5Qcm9wZXJ0eSIsImNvbHVtbldpZHRoIiwiZGVzY3JpcHRpb24iLCJwYXlsb2FkIiwiQXJyYXkiLCJ2YWx1ZVRvV3JpdGUiLCJkZWZpbml0aW9uSWQiLCJ0YXJnZXRFbGVtZW50SWQiLCJidWxrT3BlcmF0aW9ucyIsInVwZGF0ZUVsZW1lbnRQcm9wZXJ0aWVzIiwid3JpdGVUb2tlblByb3BlcnRpZXMiLCJ2YWx1ZUdlbmVyYXRvciIsInRyaW1tZWRQcm9wZXJ0eU5hbWUiLCJfX2NyZWF0ZUJpbmRpbmciLCJjcmVhdGUiLCJvIiwibSIsImsiLCJrMiIsImRlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfX2VzTW9kdWxlIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiX19leHBvcnRTdGFyIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZSIsIkRvY3NCbG9ja1RleHRQcm9wZXJ0eVN0eWxlIiwidGl0bGUxIiwidGl0bGUyIiwidGl0bGUzIiwidGl0bGU0IiwidGl0bGU1IiwiZGVmYXVsdCIsImRlZmF1bHRCb2xkIiwiZGVmYXVsdFNlbWlib2xkIiwic21hbGwiLCJzbWFsbEJvbGQiLCJzbWFsbFNlbWlib2xkIiwiY3VzdG9tIiwiQXNzZXRTY2FsZVR5cGUiLCJhc3BlY3RGaWxsIiwiYXNwZWN0Rml0IiwiQXNzZXRTY2FsZSIsIngxIiwieDIiLCJ4MyIsIng0IiwiSWNvblNldCIsImNoZWNrQ2lyY2xlIiwiY3Jvc3NDaXJjbGUiLCJhbGVydCIsIkFMTF9CT1JERVJfUE9TSVRJT05TIiwiRG9jc0VudGl0eVR5cGUiLCJwYWdlIiwiRnJhbWVBbGlnbm1lbnQiLCJmcmFtZUhlaWdodCIsIkRvY3VtZW50YXRpb25MZWdhY3lQYWdlQXNzZXRUeXBlIiwiaW1hZ2UiLCJmaWdtYUZyYW1lIiwiRG9jdW1lbnRhdGlvbkxlZ2FjeVBhZ2VCbG9ja1RoZW1lVHlwZSIsIm92ZXJyaWRlIiwiY29tcGFyaXNvbiIsIkRvY3VtZW50YXRpb25MZWdhY3lQYWdlQmxvY2tUeXBlIiwiaGVhZGluZyIsImNvZGUiLCJ1bm9yZGVyZWRMaXN0Iiwib3JkZXJlZExpc3QiLCJxdW90ZSIsImNhbGxvdXQiLCJkaXZpZGVyIiwidG9rZW5MaXN0IiwidG9rZW5Hcm91cCIsInNob3J0Y3V0cyIsImxpbmsiLCJmaWdtYUVtYmVkIiwieW91dHViZUVtYmVkIiwic3Rvcnlib29rRW1iZWQiLCJnZW5lcmljRW1iZWQiLCJmaWdtYUZyYW1lcyIsInJlbmRlckNvZGUiLCJjb21wb25lbnRBc3NldHMiLCJjb2x1bW4iLCJjb2x1bW5JdGVtIiwidGFicyIsInRhYkl0ZW0iLCJ0YWJsZSIsInRhYmxlQ2VsbCIsInRhYmxlUm93IiwiRG9jdW1lbnRhdGlvbkxlZ2FjeUdyb3VwQmVoYXZpb3IiLCJEb2N1bWVudGF0aW9uTGVnYWN5UGFnZUJsb2NrU2hvcnRjdXQiLCJEb2N1bWVudGF0aW9uTGVnYWN5UGFnZUJsb2NrU2hvcnRjdXRUeXBlIiwiZXh0ZXJuYWwiLCJpbnRlcm5hbCIsInRpdGxlIiwic2hvcnRjdXRUaXRsZUZyb21Nb2RlbCIsInNob3J0Y3V0RGVzY3JpcHRpb25Gcm9tTW9kZWwiLCJwcmV2aWV3VXJsIiwic2hvcnRjdXRQcmV2aWV3VXJsRnJvbU1vZGVsIiwiZG9jdW1lbnRhdGlvbkl0ZW1QcmV2aWV3IiwidmFsaWQiLCJkb2N1bWVudGF0aW9uSXRlbUlkIiwiaW50ZXJuYWxJZCIsImV4dGVybmFsVXJsIiwibiIsImkiLCJ1cmxQcmV2aWV3IiwiYXNzZXRVcmwiLCJhc3NldCIsInRodW1ibmFpbFVybCIsIlJpY2hUZXh0U3BhbkF0dHJpYnV0ZVR5cGUiLCJib2xkIiwiaXRhbGljIiwiUHVsc2FyRXhlY3V0b3IiLCJzdXBlcm5vdmEiLCJsb2NhbCIsIldvcmtzcGFjZVN1YnNjcmlwdGlvblN0YXR1cyIsImFjdGl2ZSIsImdyYWNlUGVyaW9kIiwiY2FuY2VsbGVkIiwic3VzcGVuZGVkIiwiRnJhbWVMYXlvdXQiLCJjOCIsImM3IiwiYzYiLCJjNSIsImM0IiwiYzMiLCJjMiIsImMxIiwiYzE3NSIsIkRvY3NCbG9ja0JlaGF2aW9yU2VsZWN0aW9uVHlwZSIsImVudGl0eSIsImVudGl0eUFuZEdyb3VwIiwiRFRfVE9LRU5fVFlQRVMiLCJ0b2tlblR5cGVJc1JlZmVyZW5jYWJsZSIsIlJFRkVSRU5DQUJMRV9UT0tFTl9UWVBFUyIsIlJFUExBQ0FCTEVfVE9LRU5fVFlQRVMiLCJ0b2tlblR5cGVJc05vblB1cmUiLCJ0b2tlblR5cGVJc1B1cmUiLCJQVVJFX1RPS0VOX1RZUEVTIiwiQUxMX1RPS0VOX1RZUEVTIiwiTVNfRElNRU5TSU9OX1RPS0VOX1RZUEVTIiwiUkFXX0RJTUVOU0lPTl9UT0tFTl9UWVBFUyIsIkRJTUVOU0lPTl9UT0tFTl9UWVBFUyIsIk9QVElPTl9UT0tFTl9UWVBFUyIsIlNUUklOR19UT0tFTl9UWVBFUyIsImluY2x1ZGVzIiwiRG9jc0VudGl0eUdyb3VwQmVoYXZpb3IiLCJXb3Jrc3BhY2VTdWJzY3JpcHRpb25Qcm9kdWN0Q29kZSIsImZyZWUiLCJ0ZWFtIiwidGVhbVRlc3QiLCJjb21wYW55IiwiZW50ZXJwcmlzZSIsIlN1cGVybm92YUVycm9yIiwic3VwZXIiLCJzdGF0dXMiLCJmb3JtRXJyb3JzIiwicmVxdWVzdElkIiwic2VydmVyVGltZSIsImZyb21OZXR3b3JrUmVzcG9uc2UiLCJtZXNzYWdlIiwiZXJyb3JDb2RlIiwicmVhc29uIiwibGFiZWwiLCJmcm9tTm9OZXR3b3JrUmVzcG9uc2UiLCJEYXRlIiwidG9JU09TdHJpbmciLCJmcm9tQ29kZSIsImZyb21NZXNzYWdlIiwiaXNGaWVsZEVycm9yZWQiLCJrZXkiLCJlcnJvckZvckZpZWxkIiwiSlNPTiIsInN0cmluZ2lmeSIsInN0YWNrIiwidG9IdW1hblJlYWRhYmxlIiwiQUxMX0JPUkRFUl9TVFlMRVMiLCJTb3VyY2VUeXBlIiwiZmlnbWEiLCJ0b2tlblN0dWRpbyIsImZpZ21hVmFyaWFibGVzUGx1Z2luIiwiRG9jdW1lbnRhdGlvbkxlZ2FjeUNhbGxvdXRUeXBlIiwiaW5mbyIsInN1Y2Nlc3MiLCJ3YXJuaW5nIiwiZXJyb3IiLCJXb3Jrc3BhY2VTdWJzY3JpcHRpb25QbGFuSW50ZXJ2YWwiLCJ5ZWFybHkiLCJtb250aGx5IiwiRG9jc0Jsb2NrQmVoYXZpb3JEYXRhVHlwZSIsIml0ZW0iLCJjb21wb25lbnQiLCJmaWdtYU5vZGUiLCJmaWdtYUNvbXBvbmVudCIsImRvY3VtZW50YXRpb25JdGVtIiwicGFnZUhlYWRpbmciLCJwYWdlSGVhZGluZ0lkIiwibGlua0F0dHJpYnV0ZVRvRG9jc0xpbmsiLCJkb2NzTGlua1RvTGlua0F0dHJpYnV0ZXMiLCJkb2NzTGlua1RvVXJsIiwiRG9jc0xpbmtSZWZUeXBlIiwiaHJlZiIsIm9wZW5Jbk5ld1RhYiIsIkN1c3RvbURvbWFpbkVycm9yQ29kZSIsImdlbmVyYWxFcnJvciIsImRuc05vdENvbmZpZ3VyZWQiLCJtYWludGVuYW5jZSIsIkRvY3NCbG9ja0l0ZW1Qcm9wZXJ0eU9wdGlvblJlbmRlcmluZ1N0eWxlIiwic2VnbWVudGVkQ29udHJvbCIsInRvZ2dsZUJ1dHRvbiIsInNlbGVjdCIsImNoZWNrYm94IiwiRG9jc0Jsb2NrT3B0aW9uUmVuZGVyaW5nU3R5bGUiLCJoaWRkZW4iLCJCbHVyVHlwZSIsImJhY2tncm91bmQiLCJXb3Jrc3BhY2VOUE1SZWdpc3RyeUF1dGhUeXBlIiwiYmFzaWMiLCJiZWFyZXIiLCJEb2NzQmxvY2tSaWNoVGV4dFByb3BlcnR5U3R5bGUiLCJEb2NzQmxvY2tJdGVtUHJvcGVydHlUeXBlIiwicmljaFRleHQiLCJtdWx0aVJpY2hUZXh0IiwicmljaFRleHRFZGl0b3IiLCJib29sZWFuIiwibnVtYmVyIiwic2luZ2xlU2VsZWN0IiwibXVsdGlTZWxlY3QiLCJ0b2tlblByb3BlcnR5IiwiY29tcG9uZW50UHJvcGVydHkiLCJhc3NldFByb3BlcnR5IiwiZW1iZWRVUkwiLCJtYXJrZG93biIsImNvZGVTYW5kYm94Iiwic3Rvcnlib29rIiwiRG9jc0Jsb2NrSXRlbVZhcmlhbnRMYXlvdXRXaWR0aCIsImM5IiwiYzEwIiwiYzExIiwiYzEyIiwiRG9jdW1lbnRhdGlvbkxlZ2FjeUl0ZW1UeXBlIiwiVGV4dEFsaWdubWVudCIsIkFsaWdubWVudCIsImxlZnQiLCJzdHJldGNoIiwicmlnaHQiLCJEb2NzQmxvY2tJdGVtUHJvcGVydHlUZXh0U3R5bGUiLCJyZWd1bGFyIiwiQ3VzdG9tRG9tYWluU3RhdGUiLCJpbml0aWFsIiwiZG9tYWluU2V0dXBJblByb2dyZXNzIiwiZG9tYWluU2V0dXBGYWlsZWQiLCJkb21haW5TZXR1cHNTdWNjZXMiLCJzc2xTZXR1cEluUHJvZ3Jlc3MiLCJzc2xTZXR1cEZhaWxlZCIsInNzbFNldHVwU3VjY2VzcyIsIldvcmtzcGFjZU5QTVJlZ2lzdHJ5VHlwZSIsIm5wbUpTIiwiZ2l0SHViIiwiYXp1cmVEZXZPcHMiLCJhcnRpZmFjdG9yeSIsIkRvY3NTZWN0aW9uVHlwZSIsInBsYWluIiwiSW1wb3J0V2FybmluZ1R5cGUiLCJVbnN1cHBvcnRlZEZpbGwiLCJVbnN1cHBvcnRlZFN0cm9rZSIsIlVuc3VwcG9ydGVkRWZmZWN0IiwiU3R5bGVOb3RBcHBsaWVkIiwiTm9QdWJsaXNoZWRTdHlsZXMiLCJOb1B1Ymxpc2hlZENvbXBvbmVudHMiLCJOb1B1Ymxpc2hlZEFzc2V0cyIsIk5vVmVyc2lvbkZvdW5kIiwiQ29tcG9uZW50SGFzTm9UaHVtYm5haWwiLCJEdXBsaWNhdGVJbXBvcnRlZFN0eWxlSWQiLCJEdXBsaWNhdGVJbXBvcnRlZFN0eWxlUGF0aCIsIk5vUHVibGlzaGVkRWxlbWVudHMiLCJOb1VucHVibGlzaGVkU3R5bGVzIiwiRG9jc0Jsb2NrSXRlbVByb3BlcnR5UmljaFRleHRTdHlsZSIsIm9sIiwidWwiLCJEb2NzQmxvY2tJdGVtVmFyaWFudExheW91dFR5cGUiLCJyb3ciLCJNU19VTklUUyIsIlBYX1VOSVRTIiwiUkFXX1VOSVRTIiwiTElORV9IRUlHSFRfVU5JVFMiLCJTSVpFX1VOSVRTIiwiQXNzZXRGb3JtYXQiLCJwbmciLCJwZGYiLCJzdmciLCJEb2NzQmxvY2tJbWFnZVByb3BlcnR5QXNwZWN0UmF0aW8iLCJhdXRvIiwic3F1YXJlIiwibGFuZHNjYXBlIiwicG9ydHJhaXQiLCJ3aWRlIiwiZHJvcCIsIkRvY3NCbG9ja09wdGlvbkNvbG9yIiwiZ3JlZW4iLCJyZWQiLCJ5ZWxsb3ciLCJibHVlIiwicHVycGxlIiwib3JhbmdlIiwicGluayIsInRlYWwiLCJncmV5IiwibGlnaHRHcmV5IiwiY3lhbiIsImZ1Y2hzaWEiLCJEb2NzQmxvY2tJdGVtRW50aXR5VHlwZSIsImFzc2V0R3JvdXAiLCJjb21wb25lbnRHcm91cCIsImNvbnZlcnRSZW1vdGVUb1VzZXJSb2xlIiwiVXNlclJvbGUiLCJvd25lciIsImFkbWluIiwiY3JlYXRvciIsImNvbnRyaWJ1dG9yIiwiYmlsbGluZyIsInZpZXdlciIsIkRvY3VtZW50YXRpb25MZWdhY3lIZWFkaW5nVHlwZSIsImgxIiwiaDIiLCJoMyIsImRvY3NJbWFnZVJlZlRvVXJsIiwiRG9jc0ltYWdlUmVmVHlwZSIsInJlc291cmNlIiwic291cmNlSWQiLCJmcmFtZVJlZmVyZW5jZUlkIiwicmVzb3VyY2VzIiwiZ2V0RmlnbWFGcmFtZUhvc3RlZFVybCIsImRlc2lnblN5c3RlbUlkIiwiZHNJZCIsInZlcnNpb25JZCIsInUiLCJkIiwiVCIsInYiLCJQIiwiUyIsIk8iLCJfIiwiRCIsIkkiLCJFIiwiTiIsIkIiLCJSIiwiaiIsIk0iLCJBIiwiRiIsInciLCJVIiwiWSIsIlciLCJHIiwiSyIsIkgiLCJWIiwiJCIsInEiLCJKIiwiUSIsIloiLCJYIiwiZWUiLCJ0ZSIsIm9lIiwicmUiLCJuZSIsImllIiwiYWUiLCJjZSIsImxlIiwiU1BMSVRfTE9XRVJfVVBQRVJfUkUiLCJTUExJVF9VUFBFUl9VUFBFUl9SRSIsIlNQTElUX1NFUEFSQVRFX05VTUJFUl9SRSIsIkRFRkFVTFRfU1RSSVBfUkVHRVhQIiwiU1BMSVRfUkVQTEFDRV9WQUxVRSIsIkRFRkFVTFRfUFJFRklYX1NVRkZJWF9DSEFSQUNURVJTIiwic3RhcnQiLCJlbmQiLCJjaGFyQXQiLCJzcGxpdFNlcGFyYXRlTnVtYmVycyIsIndvcmRzIiwid29yZCIsImV4ZWMiLCJvZmZzZXQiLCJzcGxpY2UiLCJpbnB1dCIsInN1ZmZpeCIsInNwbGl0UHJlZml4U3VmZml4IiwibG93ZXJGYWN0b3J5IiwibG9jYWxlIiwiZGVsaW1pdGVyIiwidXBwZXJGYWN0b3J5IiwidHJhbnNmb3JtIiwibWVyZ2VBbWJpZ3VvdXNDaGFyYWN0ZXJzIiwiY2FwaXRhbENhc2VUcmFuc2Zvcm1GYWN0b3J5IiwicGFzY2FsQ2FzZVRyYW5zZm9ybUZhY3RvcnkiLCJwYXNjYWxTbmFrZUNhc2UiLCJ0b0xvY2FsZUxvd2VyQ2FzZSIsInRvVXBwZXJDYXNlIiwidG9Mb2NhbGVVcHBlckNhc2UiLCJjaGFyMCIsInNwbGl0Rm4iLCJzZXBhcmF0ZU51bWJlcnMiLCJwcmVmaXhDaGFyYWN0ZXJzIiwic3VmZml4Q2hhcmFjdGVycyIsInByZWZpeEluZGV4Iiwic3VmZml4SW5kZXgiLCJjaGFyIiwiVGhlbWVFeHBvcnRTdHlsZSIsIkZpbGVTdHJ1Y3R1cmUiLCJUb2tlbk5hbWVTdHJ1Y3R1cmUiLCJERUZBVUxUX1RPS0VOX1BSRUZJWEVTIiwiREVGQVVMVF9UT0tFTl9UWVBFX0ZJTEVfTkFNRVMiLCJnZXRUb2tlblByZWZpeCIsIl9fMSIsImV4cG9ydENvbmZpZ3VyYXRpb24iLCJjdXN0b21pemVUb2tlblByZWZpeGVzIiwidG9rZW5QcmVmaXhlcyIsImRlZmF1bHRzXzEiLCJjb252ZXJ0ZWRUb2tlbiIsIm1hcHBlZFRva2VucyIsImNvbGxlY3Rpb25zIiwidG9rZW5fbmFtZV91dGlsc18xIiwidG9rZW5OYW1lIiwiZXhwb3J0X3V0aWxzXzEiLCJ1c2VSZWZlcmVuY2VzIiwiY29tbWVudCIsInNob3dEZXNjcmlwdGlvbnMiLCJnZW5lcmF0ZU9iamVjdEZpbGVzIiwidG9rZW5Db2xsZWN0aW9ucyIsImV4cG9ydEJhc2VWYWx1ZXMiLCJmaWxlU3RydWN0dXJlIiwiY29uZmlnXzEiLCJTaW5nbGVGaWxlIiwiZmlsdGVyZWRUb2tlbnMiLCJleHBvcnRPbmx5VGhlbWVkVG9rZW5zIiwiZ2VuZXJhdGVFbXB0eUZpbGVzIiwic2luZ2xlRmlsZU5hbWUiLCJub25UaGVtZWRGaWxlUGF0aCIsImdlbmVyYXRlRmlsZUNvbnRlbnQiLCJnZW5lcmF0ZUNvbWJpbmVkRmlsZSIsImZpbGVfdXRpbHNfMSIsImdldFRva2VuVHlwZUZpbGVOYW1lIiwic2VwYXJhdGVUb2tlblR5cGVGaWxlIiwiZmlsZSIsInRva2VuXzEiLCJ0b2tlbnNUb0V4cG9ydCIsInBhY2thZ2VOYW1lU3VmZml4IiwicGFja2FnZUxpdGVyYWwiLCJwYWNrYWdlUHJlZml4TmFtZSIsIkJvb2xlYW4iLCJvYmplY3RMaXRlcmFsIiwidG9rZW5WYXJpYWJsZXNMaXRlcmFsIiwic2hvd0dlbmVyYXRlZEZpbGVEaXNjbGFpbWVyIiwib2JqZWN0X2ZpbGVfMSIsInNhbml0aXplT3V0cHV0RmlsZXMiLCJmaWxlcyIsIlB1bHNhciIsImV4cG9ydENvbmZpZyIsImV4cG9ydCIsImFzeW5jIiwiY29udGV4dCIsInJlbW90ZVZlcnNpb25JZGVudGlmaWVyIiwib3V0cHV0RmlsZXMiLCJnZXRUb2tlbnMiLCJnZXRUb2tlbkdyb3VwcyIsImdldFRva2VuQ29sbGVjdGlvbnMiLCJicmFuZElkIiwiYnJhbmQiLCJicmFuZHMiLCJnZXRCcmFuZHMiLCJpZEluVmVyc2lvbiIsInRoZW1lSWRzIiwidGhlbWVzIiwiZ2V0VG9rZW5UaGVtZXMiLCJ0aGVtZUZpbGVzIiwidGhlbWVJZCIsImZsYXRNYXAiLCJ0aGVtZWRUb2tlbnMiLCJjb21wdXRlVG9rZW5zQnlBcHBseWluZ1RoZW1lcyIsImlzUHJldmlldyIsIndyaXRlTmFtZVRvUHJvcGVydHkiLCJ3cml0ZVN0b3JlIiwicHJvcGVydHlUb1dyaXRlTmFtZVRvIiwiY3VzdG9taXplU2VwYXJhdGVkQnlUeXBlRmlsZU5hbWVzIiwic2VwYXJhdGVkQnlUeXBlRmlsZU5hbWVzIiwiY29sbGVjdGlvbiIsImluZGV4XzEiLCJ0b2tlbk5hbWVTdHJ1Y3R1cmUiLCJDb2xsZWN0aW9uUGF0aEFuZE5hbWUiLCJjb2xsZWN0aW9uSWQiLCJwZXJzaXN0ZW50SWQiLCJOYW1lT25seSIsImdsb2JhbE5hbWVQcmVmaXgiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJtb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZGVmaW5pdGlvbiIsIm9iaiIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIl0sInNvdXJjZVJvb3QiOiIifQ==