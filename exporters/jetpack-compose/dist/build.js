(()=>{var e={"../../utils/dist/enums/ColorFormat.js":
/*!*********************************************!*\
  !*** ../../utils/dist/enums/ColorFormat.js ***!
  \*********************************************/(e,t)=>{"use strict";var o;Object.defineProperty(t,"__esModule",{value:!0}),t.ColorFormat=void 0,function(e){e.rgb="rgb",e.rgba="rgba",e.smartRgba="smartRgba",e.hex6="hex6",e.hex8="hex8",e.argbInt="argbInt",e.hashHex6="hashHex6",e.hashHex8="hashHex8",e.smartHashHex="smartHashHex",e.smartHex="smartHex",e.hsl="hsl",e.hsla="hsla",e.smartHsla="smartHsla",e.smartUIColor="smartUIColor",e.oklch="oklch",e.oklcha="oklcha",e.smartOklch="smartOklch"}(o||(t.ColorFormat=o={}))},"../../utils/dist/enums/StringCase.js":
/*!********************************************!*\
  !*** ../../utils/dist/enums/StringCase.js ***!
  \********************************************/(e,t)=>{"use strict";var o;Object.defineProperty(t,"__esModule",{value:!0}),t.StringCase=void 0,function(e){e.camelCase="camelCase",e.capitalCase="capitalCase",e.constantCase="constantCase",e.dotCase="dotCase",e.trainCase="trainCase",e.noCase="noCase",e.kebabCase="kebabCase",e.pascalCase="pascalCase",e.pathCase="pathCase",e.sentenceCase="sentenceCase",e.snakeCase="snakeCase",e.flatCase="flatCase"}(o||(t.StringCase=o={}))},"../../utils/dist/helpers/CSSHelper.js":
/*!*********************************************!*\
  !*** ../../utils/dist/helpers/CSSHelper.js ***!
  \*********************************************/(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CSSHelper=void 0;const r=o(/*! @supernovaio/sdk-exporters */"../../utils/node_modules/@supernovaio/sdk-exporters/build/supernova-sdk-typescript.js"),n=o(/*! ./TokenHelper */"../../utils/dist/helpers/TokenHelper.js"),i=o(/*! ./ColorHelper */"../../utils/dist/helpers/ColorHelper.js");t.CSSHelper=class{static tokenToCSS(e,t,o){let n;switch(e.tokenType){case r.TokenType.color:n=this.colorTokenValueToCSS(e.value,t,o);break;case r.TokenType.border:n=this.borderTokenValueToCSS(e.value,t,o);break;case r.TokenType.gradient:n=this.gradientTokenValueToCSS(e.value,t,o);break;case r.TokenType.dimension:case r.TokenType.size:case r.TokenType.space:case r.TokenType.opacity:case r.TokenType.fontSize:case r.TokenType.lineHeight:case r.TokenType.letterSpacing:case r.TokenType.paragraphSpacing:case r.TokenType.borderWidth:case r.TokenType.radius:case r.TokenType.duration:case r.TokenType.zIndex:n=this.dimensionTokenValueToCSS(e.value,t,o);break;case r.TokenType.shadow:n=this.shadowTokenValueToCSS(e.value,t,o);break;case r.TokenType.fontWeight:n=this.fontWeightTokenValueToCSS(e.value,t,o);break;case r.TokenType.fontFamily:case r.TokenType.productCopy:case r.TokenType.string:n=this.stringTokenValueToCSS(e.value,t,o);break;case r.TokenType.textCase:case r.TokenType.textDecoration:case r.TokenType.visibility:n=this.optionTokenValueToCSS(e.value,t,o,e.tokenType);break;case r.TokenType.blur:n=this.blurTokenValueToCSS(e.value,t,o);break;case r.TokenType.typography:n=this.typographyTokenValueToCSS(e.value,t,o);break;default:throw new r.UnreachableCaseError(e.tokenType,"Unsupported token type for transformation to CSS:")}if(o.valueTransformer){const t=o.valueTransformer(n,e);if(void 0!==t)return t}return n}static colorTokenValueToCSS(e,t,o){return i.ColorHelper.formattedColorOrVariableName(e,t,o)}static borderTokenValueToCSS(e,t,o){const r=(0,n.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);if(r)return o.tokenToVariableRef(r);const i=this.dimensionTokenValueToCSS(e.width,t,o),a=this.borderStyleToCSS(e.style),s=this.colorTokenValueToCSS(e.color,t,o);this.borderPositionToCSS(e.position);return`${i} ${a} ${s}`}static gradientTokenValueToCSS(e,t,o){return e.map((e=>this.gradientLayerToCSS(e,t,o))).join(", ")}static gradientLayerToCSS(e,t,o){const a=(0,n.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);if(a)return o.tokenToVariableRef(a);const s=i.ColorHelper.roundToDecimals(e.to.x,o.decimals)-i.ColorHelper.roundToDecimals(e.from.x,o.decimals),l=i.ColorHelper.roundToDecimals(e.to.y,o.decimals)-i.ColorHelper.roundToDecimals(e.from.y,o.decimals),c=Math.atan2(l,s)*(180/Math.PI),u=()=>s>=0&&l>0||s>0&&l<=0||s<=0&&l<0?90+c:c-270;let p="";switch(e.type){case r.GradientType.linear:p=`linear-gradient(${u()}deg, `;break;case r.GradientType.radial:p="radial-gradient(circle, ";break;case r.GradientType.angular:p="conic-gradient(";break;default:p=`linear-gradient(${u()}deg, `}return`${p}${e.stops.map((e=>`${this.colorTokenValueToCSS(e.color,t,o)} ${i.ColorHelper.roundToDecimals(100*e.position,o.decimals)}%`)).join(", ")})`}static dimensionTokenValueToCSS(e,t,o){const a=(0,n.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);if(a)return o.tokenToVariableRef(a);if(o.forceRemUnit&&e.unit===r.Unit.pixels){const t=o.remBase||16,r=e.measure/t;return`${i.ColorHelper.roundToDecimals(r,o.decimals)}rem`}return`${i.ColorHelper.roundToDecimals(e.measure,o.decimals)}${this.unitToCSS(e.unit)}`}static shadowTokenValueToCSS(e,t,o){return e.map((e=>this.shadowLayerToCSS(e,t,o))).join(", ")}static shadowLayerToCSS(e,t,o){const a=(0,n.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);if(a)return o.tokenToVariableRef(a);const s=e=>{if(o.forceRemUnit){const t=e/(o.remBase||16);return`${i.ColorHelper.roundToDecimals(t,o.decimals)}rem`}return`${e}px`};return`${e.type===r.ShadowType.inner?"inset ":""}${s(e.x)} ${s(e.y)} ${s(e.radius)} ${s(e.spread)} ${this.colorTokenValueToCSS({...e.color,...e.opacity&&{opacity:e.opacity}},t,o)}`}static fontWeightTokenValueToCSS(e,t,o){const r=(0,n.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);if(r)return o.tokenToVariableRef(r);return`${(0,n.normalizeTextWeight)(e.text)}`}static stringTokenValueToCSS(e,t,o){const r=(0,n.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);return r?o.tokenToVariableRef(r):`"${e.text}"`}static optionTokenValueToCSS(e,t,o,i){const a=(0,n.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);return a?o.tokenToVariableRef(a):i===r.TokenType.textCase?this.textCaseToCSS(e.value):i===r.TokenType.textDecoration?this.textDecorationToCSS(e.value):e.value.toLowerCase()}static blurTokenValueToCSS(e,t,o){const r=(0,n.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);return r?o.tokenToVariableRef(r):`blur(${this.dimensionTokenValueToCSS(e.radius,t,o)})`}static typographyTokenValueToCSS(e,t,o){const i=(0,n.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);if(i)return o.tokenToVariableRef(i);const a=(0,n.sureOptionalReference)(e.fontFamily.referencedTokenId,t,o.allowReferences),s=(0,n.sureOptionalReference)(e.fontWeight.referencedTokenId,t,o.allowReferences),l=(0,n.sureOptionalReference)(e.textDecoration.referencedTokenId,t,o.allowReferences),c=(0,n.sureOptionalReference)(e.textCase.referencedTokenId,t,o.allowReferences),u={fontFamily:a?o.tokenToVariableRef(a):e.fontFamily.text,fontWeight:s?o.tokenToVariableRef(s):(0,n.normalizeTextWeight)(e.fontWeight.text),textDecoration:l?o.tokenToVariableRef(l):e.textDecoration.value===r.TextDecoration.original?this.textDecorationToCSS(e.textDecoration.value):void 0,textCase:c?o.tokenToVariableRef(c):e.textCase.value===r.TextCase.original?this.textCaseToCSS(e.textCase.value):void 0,caps:e.textCase.value===r.TextCase.smallCaps,fontSize:this.dimensionTokenValueToCSS(e.fontSize,t,o),lineHeight:e.lineHeight?this.dimensionTokenValueToCSS(e.lineHeight,t,o):void 0},p=u.fontSize;return`${u.caps?"small-caps ":""}${u.fontWeight} ${u.lineHeight?`${p}/${u.lineHeight}`:p} ${a?u.fontFamily:`"${u.fontFamily}"`}`}static borderStyleToCSS(e){switch(e){case r.BorderStyle.dashed:return"dashed";case r.BorderStyle.dotted:return"dotted";case r.BorderStyle.solid:return"solid";case r.BorderStyle.groove:return"groove";default:return"solid"}}static borderPositionToCSS(e){switch(e){case r.BorderPosition.center:return"center";case r.BorderPosition.inside:return"inside";case r.BorderPosition.outside:default:return"outside"}}static unitToCSS(e){switch(e){case r.Unit.percent:return"%";case r.Unit.pixels:return"px";case r.Unit.rem:return"rem";case r.Unit.raw:return"";case r.Unit.ms:return"ms";default:return"px"}}static textCaseToCSS(e){switch(e){case r.TextCase.original:return"none";case r.TextCase.upper:return"uppercase";case r.TextCase.lower:return"lowercase";case r.TextCase.camel:return"capitalize";case r.TextCase.smallCaps:return"small-caps"}}static textDecorationToCSS(e){switch(e){case r.TextDecoration.original:return"none";case r.TextDecoration.underline:return"underline";case r.TextDecoration.strikethrough:return"line-through"}}}},"../../utils/dist/helpers/ColorHelper.js":
/*!***********************************************!*\
  !*** ../../utils/dist/helpers/ColorHelper.js ***!
  \***********************************************/(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ColorHelper=void 0;const r=o(/*! ../enums/ColorFormat */"../../utils/dist/enums/ColorFormat.js"),n=o(/*! ./TokenHelper */"../../utils/dist/helpers/TokenHelper.js");class i{static formattedColorOrVariableName(e,t,o){let i,a=null,s=null;const l=(0,n.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);if(l)i=o.tokenToVariableRef(l);else{const r=(0,n.sureOptionalReference)(e.color.referencedTokenId,t,o.allowReferences);r&&(a=o.tokenToVariableRef(r));const i=(0,n.sureOptionalReference)(e.opacity.referencedTokenId,t,o.allowReferences);i&&(s=o.tokenToVariableRef(i))}if(i)return i;if(!i&&!a&&!s)return this.formattedColor(e,o.colorFormat,o.decimals);switch(o.colorFormat){case r.ColorFormat.rgb:case r.ColorFormat.rgba:case r.ColorFormat.smartRgba:return this.colorToRgb(o.colorFormat,this.normalizedIntColor(e),e.opacity.measure,o.decimals,a,s);default:return this.formattedColor(e,o.colorFormat,o.decimals)}}static formattedColor(e,t,o=3){switch(t){case r.ColorFormat.hex6:case r.ColorFormat.hex8:case r.ColorFormat.hashHex6:case r.ColorFormat.hashHex8:case r.ColorFormat.smartHex:case r.ColorFormat.smartHashHex:case r.ColorFormat.argbInt:return this.colorToHex(t,this.normalizedIntColor(e),e.opacity.measure);case r.ColorFormat.rgb:case r.ColorFormat.rgba:case r.ColorFormat.smartRgba:return this.colorToRgb(t,this.normalizedIntColor(e),e.opacity.measure,o,null,null);case r.ColorFormat.hsl:case r.ColorFormat.hsla:case r.ColorFormat.smartHsla:return this.colorToHsl(t,this.normalizedFractionalColor(e),e.opacity.measure,o);case r.ColorFormat.smartUIColor:return this.colorToUIColor(this.normalizedIntColor(e),e.opacity.measure,o);case r.ColorFormat.oklch:case r.ColorFormat.oklcha:case r.ColorFormat.smartOklch:return this.colorToOklch(t,this.normalizedIntColor(e),e.opacity.measure,o);default:return this.colorToHex(r.ColorFormat.smartHashHex,this.normalizedIntColor(e),e.opacity.measure)}}static colorToRgb(e,t,o,n,i,a){let s;return s=e===r.ColorFormat.rgba||e===r.ColorFormat.smartRgba&&o<1?`rgba(${i||`${t.r}, ${t.g}, ${t.b}`}, ${a||this.roundToDecimals(o,n)})`:`rgb(${i||`${t.r}, ${t.g}, ${t.b}`})`,s}static colorToHex(e,t,o){let n=`${this.pHex(t.r)}${this.pHex(t.g)}${this.pHex(t.b)}`;return(e===r.ColorFormat.hex8||e===r.ColorFormat.hashHex8||e===r.ColorFormat.smartHex&&o<1||e===r.ColorFormat.smartHashHex&&o<1)&&(n+=`${this.pHex(Math.round(255*o))}`),e===r.ColorFormat.argbInt&&(n=`Color(0x${this.pHex(Math.round(255*o))}${n})`),e!==r.ColorFormat.hashHex6&&e!==r.ColorFormat.hashHex8&&e!==r.ColorFormat.smartHashHex||(n=`#${n}`),n}static colorToHsl(e,t,o,n){const i=Math.max(t.r,t.g,t.b),a=Math.min(t.r,t.g,t.b);let s,l=0,c=0,u=(i+a)/2;if(i===a)l=c=0;else{const e=i-a;switch(c=u>.5?e/(2-i-a):e/(i+a),i){case t.r:l=(t.g-t.b)/e+(t.g<t.b?6:0);break;case t.g:l=(t.b-t.r)/e+2;break;case t.b:l=(t.r-t.g)/e+4}l/=6}return s=e===r.ColorFormat.hsla||e===r.ColorFormat.smartHsla&&o<1?`hsla(${Math.round(360*l)}%, ${Math.round(100*c)}%, ${Math.round(100*u)}%, ${this.roundToDecimals(o,n)})`:`hsl(${Math.round(360*l)}%, ${Math.round(100*c)}%, ${Math.round(100*u)}%)`,s}static colorToUIColor(e,t,o=3){let r=`UIColor(rgb: 0x${this.pHex(e.r)}${this.pHex(e.g)}${this.pHex(e.b)})`;return t<1&&(r+=`.withAlphaComponent(${t})`),r}static normalizedIntColor(e){return{r:Math.round(e.color.r),g:Math.round(e.color.g),b:Math.round(e.color.b)}}static normalizedFractionalColor(e,t=3){return{r:this.roundToDecimals(e.color.r/255,t),g:i.roundToDecimals(e.color.g/255,t),b:i.roundToDecimals(e.color.b/255,t)}}static roundToDecimals(e,t,o=!1){const r=Math.pow(10,t),n=Math.round(e*r)/r;return o?Number(n.toFixed(t)):parseFloat(n.toFixed(t))}static pHex(e){return e.toString(16).padStart(2,"0")}static colorToOklch(e,t,o,n){const{l:i,c:a,h:s}=this.rgbToOklch(t.r,t.g,t.b);switch(e){case r.ColorFormat.oklcha:return`oklch(${i}% ${a} ${s} / ${this.roundToDecimals(100*o,n)}%)`;case r.ColorFormat.smartOklch:return o<1?`oklch(${i}% ${a} ${s} / ${this.roundToDecimals(100*o,n)}%)`:`oklch(${i}% ${a} ${s})`;case r.ColorFormat.oklch:default:return`oklch(${i}% ${a} ${s})`}}static rgbToOklch(e,t,o){const r=this.sRGBtoLinear(e/255),n=this.sRGBtoLinear(t/255),i=this.sRGBtoLinear(o/255),a=.4124564*r+.3575761*n+.1804375*i,s=.2126729*r+.7151522*n+.072175*i,l=.0193339*r+.119192*n+.9503041*i,c=.8189330101*a+.3618667424*s-.1288597137*l,u=.0329845436*a+.9293118715*s+.0361456387*l,p=.0482003018*a+.2643662691*s+.633851707*l,d=Math.cbrt(c),m=Math.cbrt(u),T=Math.cbrt(p),f=.2104542553*d+.793617785*m-.0040720468*T,y=1.9779984951*d-2.428592205*m+.4505937099*T,h=.0259040371*d+.7827717662*m-.808675766*T,g=Math.sqrt(y*y+h*h);let k=180*Math.atan2(h,y)/Math.PI;return k<0&&(k+=360),{l:this.roundToDecimals(100*f,2),c:this.roundToDecimals(g,3,!0),h:this.roundToDecimals(k,2)}}static sRGBtoLinear(e){return e<=.04045?e/12.92:Math.pow((e+.055)/1.055,2.4)}}t.ColorHelper=i},"../../utils/dist/helpers/FileHelper.js":
/*!**********************************************!*\
  !*** ../../utils/dist/helpers/FileHelper.js ***!
  \**********************************************/(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FileHelper=void 0;const r=o(/*! @supernovaio/sdk-exporters */"../../utils/node_modules/@supernovaio/sdk-exporters/build/supernova-sdk-typescript.js");t.FileHelper=class{static createCopyRemoteFile({relativePath:e,fileName:t,url:o}){return{path:e,name:t,type:r.OutputFileType.copyRemoteUrl,url:o}}static createTextFile({relativePath:e,fileName:t,content:o}){return{path:e,name:t,type:r.OutputFileType.text,content:o}}static createBinaryFile({relativePath:e,fileName:t,data:o}){return{path:e,name:t,type:r.OutputFileType.binary,data:o}}}},"../../utils/dist/helpers/FileNameHelper.js":
/*!**************************************************!*\
  !*** ../../utils/dist/helpers/FileNameHelper.js ***!
  \**************************************************/(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FileNameHelper=void 0;const r=o(/*! ../enums/StringCase */"../../utils/dist/enums/StringCase.js"),n=o(/*! ./NamingHelper */"../../utils/dist/helpers/NamingHelper.js");t.FileNameHelper=class{static ensureFileExtension(e,t){const o=t.startsWith(".")?t:`.${t}`;return e.toLowerCase().endsWith(o.toLowerCase())?e:e+o}static replaceFileExtension(e,t,o){const r=t.startsWith(".")?t:`.${t}`,n=o.startsWith(".")?o:`.${o}`;return e.replace(new RegExp(`${r}$`),n)}static getDefaultStyleFileName(e,t=".css",o=r.StringCase.kebabCase){const i=t.startsWith(".")?t:`.${t}`;return n.NamingHelper.codeSafeVariableName({Color:"color",Typography:"typography",Dimension:"dimension",Size:"size",Space:"space",Opacity:"opacity",FontSize:"font-size",LineHeight:"line-height",LetterSpacing:"letter-spacing",ParagraphSpacing:"paragraph-spacing",BorderWidth:"border-width",BorderRadius:"border-radius",Duration:"duration",ZIndex:"z-index",Shadow:"shadow",Border:"border",Gradient:"gradient",String:"string",ProductCopy:"product-copy",FontFamily:"font-family",FontWeight:"font-weight",TextCase:"text-case",TextDecoration:"text-decoration",Visibility:"visibility",Blur:"blur"}[e],o)+i}}},"../../utils/dist/helpers/GeneralHelper.js":
/*!*************************************************!*\
  !*** ../../utils/dist/helpers/GeneralHelper.js ***!
  \*************************************************/(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GeneralHelper=void 0;t.GeneralHelper=class{static indent(e=2){return" ".repeat(Math.max(0,e))}static addDisclaimer(e,t){if(!e)return t;return`/**\n * ${e.replace(/\n/g,"\n * ")} \n */\n\n${t}`}}},"../../utils/dist/helpers/KotlinHelper.js":
/*!************************************************!*\
  !*** ../../utils/dist/helpers/KotlinHelper.js ***!
  \************************************************/(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.KotlinHelper=t.ImportCollector=t.ImportFlag=void 0;const r=o(/*! @supernovaio/sdk-exporters */"../../utils/node_modules/@supernovaio/sdk-exporters/build/supernova-sdk-typescript.js"),n=o(/*! ./ColorHelper */"../../utils/dist/helpers/ColorHelper.js"),i=o(/*! ./TokenHelper */"../../utils/dist/helpers/TokenHelper.js"),a=o(/*! ./GeneralHelper */"../../utils/dist/helpers/GeneralHelper.js"),s=o(/*! ./NamingHelper */"../../utils/dist/helpers/NamingHelper.js"),l=o(/*! ../enums/StringCase */"../../utils/dist/enums/StringCase.js"),c=o(/*! ../enums/ColorFormat */"../../utils/dist/enums/ColorFormat.js");var u;!function(e){e[e.Color=0]="Color",e[e.Dp=1]="Dp",e[e.Sp=2]="Sp",e[e.Em=3]="Em",e[e.Offset=4]="Offset",e[e.Brush=5]="Brush",e[e.TileMode=6]="TileMode",e[e.Shadow=7]="Shadow",e[e.BorderStroke=8]="BorderStroke",e[e.Modifier=9]="Modifier",e[e.Blur=10]="Blur",e[e.Font=11]="Font",e[e.FontFamily=12]="FontFamily",e[e.FontWeight=13]="FontWeight",e[e.TextDecoration=14]="TextDecoration",e[e.TextStyle=15]="TextStyle",e[e.R=16]="R"}(u||(t.ImportFlag=u={}));t.ImportCollector=class{constructor(e){this.rPackageName=e,this.importFlags=new Set}use(...e){e.forEach((e=>this.importFlags.add(e)))}allImports(){const e=[];return this.rPackageName&&this.importFlags.has(u.R)&&e.push(`import ${this.rPackageName}.R`),this.importFlags.has(u.Color)&&e.push("import androidx.compose.ui.graphics.Color"),this.importFlags.has(u.Dp)&&e.push("import androidx.compose.ui.unit.dp"),this.importFlags.has(u.Sp)&&e.push("import androidx.compose.ui.unit.sp"),this.importFlags.has(u.Em)&&e.push("import androidx.compose.ui.unit.em"),this.importFlags.has(u.Offset)&&e.push("import androidx.compose.ui.geometry.Offset"),this.importFlags.has(u.Brush)&&e.push("import androidx.compose.ui.graphics.Brush"),this.importFlags.has(u.TileMode)&&e.push("import androidx.compose.ui.graphics.TileMode"),this.importFlags.has(u.Shadow)&&e.push("import androidx.compose.ui.graphics.Shadow"),this.importFlags.has(u.BorderStroke)&&e.push("import androidx.compose.foundation.BorderStroke"),this.importFlags.has(u.Modifier)&&(e.push("import androidx.compose.ui.Modifier"),this.importFlags.has(u.Blur)&&e.push("import androidx.compose.ui.draw.blur")),this.importFlags.has(u.FontFamily)&&e.push("import androidx.compose.ui.text.font.FontFamily"),this.importFlags.has(u.Font)&&e.push("import androidx.compose.ui.text.font.Font"),this.importFlags.has(u.FontWeight)&&e.push("import androidx.compose.ui.text.font.FontWeight"),this.importFlags.has(u.TextDecoration)&&e.push("import androidx.compose.ui.text.style.TextDecoration"),this.importFlags.has(u.TextStyle)&&e.push("import androidx.compose.ui.text.TextStyle"),e.sort()}};t.KotlinHelper=class{static tokenValue(e,t,o,n){let i;switch(e.tokenType){case r.TokenType.color:i=this.colorTokenValueToKotlin(e.value,t,o,n);break;case r.TokenType.border:i=this.borderTokenValueToKotlin(e.value,t,o,n);break;case r.TokenType.gradient:i=this.gradientTokenValueToKotlin(e.value,t,o,n);break;case r.TokenType.fontSize:case r.TokenType.lineHeight:i=this.textUnitTokenValueToKotlin(e.value,t,o,n);break;case r.TokenType.letterSpacing:i=this.letterSpacingTokenValueToKotlin(e.value,t,o,n);break;case r.TokenType.dimension:case r.TokenType.size:case r.TokenType.space:case r.TokenType.opacity:case r.TokenType.paragraphSpacing:case r.TokenType.borderWidth:case r.TokenType.radius:case r.TokenType.duration:case r.TokenType.zIndex:i=this.dimensionTokenValueToKotlin(e.value,t,o,n);break;case r.TokenType.shadow:i=this.shadowTokenValueToKotlin(e.value,t,o,n);break;case r.TokenType.fontWeight:i=this.fontWeightTokenValueToKotlin(e.value,t,o,n);break;case r.TokenType.fontFamily:i=this.fontFamilyTokenValueToKotlin(e.value,t,o,n);break;case r.TokenType.productCopy:case r.TokenType.string:i=this.stringTokenValueToKotlin(e.value,t,o);break;case r.TokenType.textCase:case r.TokenType.textDecoration:case r.TokenType.visibility:i=this.optionTokenValueToKotlin(e.value,t,o,e.tokenType,n);break;case r.TokenType.blur:i=this.blurTokenValueToKotlin(e.value,t,o,n);break;case r.TokenType.typography:i=this.typographyTokenValueToKotlin(e.value,t,o,n);break;default:throw new r.UnreachableCaseError(e.tokenType,"Unsupported token type for transformation:")}return i}static colorTokenValueToKotlin(e,t,o,r){r.use(u.Color);const i={...o,colorFormat:c.ColorFormat.argbInt};return n.ColorHelper.formattedColorOrVariableName(e,t,i)}static borderTokenValueToKotlin(e,t,o,r){const n=(0,i.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);if(n)return o.tokenToVariableRef(n);r.use(u.BorderStroke);return`BorderStroke(${this.dimensionTokenValueToKotlin(e.width,t,o,r)}, ${this.colorTokenValueToKotlin(e.color,t,o,r)})`}static gradientTokenValueToKotlin(e,t,o,r){const n=e.map((e=>this.gradientLayerToKotlin(e,t,o,r)));return 1===n.length?n[0]:`listOf(${n.join(", ")})`}static gradientLayerToKotlin(e,t,o,s){const l=(0,i.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);if(l)return o.tokenToVariableRef(l);s.use(u.Brush,u.Offset);const c=e.stops.map((e=>`${n.ColorHelper.roundToDecimals(e.position,o.decimals)+"f"} to ${this.colorTokenValueToKotlin(e.color,t,o,s)}`)).join(", "),p=a.GeneralHelper.indent(o.indent);switch(e.type){case r.GradientType.radial:s.use(u.TileMode);return`Brush.radialGradient(\n${p}${p}${c},\n${p}${p}center = Offset(${((e.from.x+e.to.x)/2).toFixed(2)}f, ${((e.from.y+e.to.y)/2).toFixed(2)}f),\n${p}${p}radius = 0.5f,\n${p}${p}tileMode = TileMode.Clamp\n${p})`;case r.GradientType.angular:return`Brush.sweepGradient(\n${p}${p}${c},\n${p}${p}center = Offset(0.5f, 0.5f)\n${p})`;case r.GradientType.linear:default:return`Brush.linearGradient(\n${p}${p}${c},\n${p}${p}start = Offset(${e.from.x}f, ${e.from.y}f),\n${p}${p}end = Offset(${e.to.x}f, ${e.to.y}f)\n${p})`}}static shadowTokenValueToKotlin(e,t,o,r){const n=e.map((e=>this.shadowLayerToKotlin(e,t,o,r))),i=a.GeneralHelper.indent(o.indent);return 1===n.length?n[0]:`listOf(\n${n.map((e=>`${i}${i}${e}`)).join(",\n")}\n${i})`}static shadowLayerToKotlin(e,t,o,r){const a=(0,i.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);if(a)return o.tokenToVariableRef(a);r.use(u.Shadow,u.Offset);return`Shadow(color = ${this.colorTokenValueToKotlin({...e.color,...e.opacity&&{opacity:e.opacity}},t,o,r)}, offset = Offset(${n.ColorHelper.roundToDecimals(e.x,o.decimals)}f, ${n.ColorHelper.roundToDecimals(e.y,o.decimals)}f), blurRadius = ${n.ColorHelper.roundToDecimals(e.radius,o.decimals)}f)`}static dimensionTokenValueToKotlin(e,t,o,a){const s=(0,i.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);if(s)return o.tokenToVariableRef(s);const l=n.ColorHelper.roundToDecimals(e.measure,o.decimals);if(e.unit===r.Unit.percent){return`${+l/100}f`}return`${l}${this.unitToKotlin(e.unit,a)}`}static textUnitTokenValueToKotlin(e,t,o,a,s=!1){const l=(0,i.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);if(l)return o.tokenToVariableRef(l);const c=n.ColorHelper.roundToDecimals(e.measure,o.decimals);if(e.unit===r.Unit.percent){const e=+c/100;return a.use(s?u.Em:u.Sp),`${e}${s?".em":".sp"}`}return a.use(u.Sp),`${c}.sp`}static letterSpacingTokenValueToKotlin(e,t,o,r){return this.textUnitTokenValueToKotlin(e,t,o,r,!0)}static unitToKotlin(e,t){switch(e){case r.Unit.percent:return"f";case r.Unit.pixels:return t.use(u.Dp),".dp";case r.Unit.rem:return t.use(u.Sp),".sp";case r.Unit.ms:case r.Unit.raw:return"";default:return t.use(u.Dp),".dp"}}static stringTokenValueToKotlin(e,t,o){const r=(0,i.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);return r?o.tokenToVariableRef(r):`"${e.text}"`}static optionTokenValueToKotlin(e,t,o,n,a){const s=(0,i.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);return s?o.tokenToVariableRef(s):n===r.TokenType.textCase?this.textCaseToKotlin(e.value):n===r.TokenType.textDecoration?this.textDecorationToKotlin(e.value,a):this.visibilityToKotlin(e.value)}static textCaseToKotlin(e){switch(e){case r.TextCase.original:return'"none"';case r.TextCase.upper:return'"uppercase"';case r.TextCase.lower:return'"lowercase"';case r.TextCase.camel:return'"capitalize"';case r.TextCase.smallCaps:return'"smallCaps"'}}static textDecorationToKotlin(e,t){switch(t.use(u.TextDecoration),e){case r.TextDecoration.original:return"TextDecoration.None";case r.TextDecoration.underline:return"TextDecoration.Underline";case r.TextDecoration.strikethrough:return"TextDecoration.LineThrough"}}static visibilityToKotlin(e){return e===r.VisibilityType.visible?"true":"false"}static blurTokenValueToKotlin(e,t,o,r){const n=(0,i.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);return n?o.tokenToVariableRef(n):(r.use(u.Modifier,u.Blur),`Modifier.blur(${this.dimensionTokenValueToKotlin(e.radius,t,o,r)})`)}static fontWeightTokenValueToKotlin(e,t,o,r){const n=(0,i.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);if(n)return o.tokenToVariableRef(n);const a=(0,i.normalizeTextWeight)(e.text);return this.fontWeightIntToKotlin(a,r)}static fontWeightIntToKotlin(e,t){switch(t.use(u.FontWeight),e){case 100:return"FontWeight.Thin";case 200:return"FontWeight.ExtraLight";case 300:return"FontWeight.Light";case 400:return"FontWeight.Normal";case 500:return"FontWeight.Medium";case 600:return"FontWeight.SemiBold";case 700:return"FontWeight.Bold";case 800:return"FontWeight.ExtraBold";case 900:return"FontWeight.Black";default:return`FontWeight(${e})`}}static fontFamilyTokenValueToKotlin(e,t,o,r){const n=(0,i.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);if(n)return o.tokenToVariableRef(n);r.use(u.FontFamily,u.Font,u.R);return`FontFamily(Font(R.font.${s.NamingHelper.codeSafeVariableName(e.text,l.StringCase.snakeCase)}))`}static typographyTokenValueToKotlin(e,t,o,n){const s=(0,i.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);if(s)return o.tokenToVariableRef(s);n.use(u.TextStyle,u.TextDecoration);const l=(0,i.sureOptionalReference)(e.fontFamily.referencedTokenId,t,o.allowReferences),c=(0,i.sureOptionalReference)(e.fontWeight.referencedTokenId,t,o.allowReferences),p=(0,i.sureOptionalReference)(e.textDecoration.referencedTokenId,t,o.allowReferences),d=l?o.tokenToVariableRef(l):this.fontFamilyTokenValueToKotlin(e.fontFamily,t,o,n),m=c?o.tokenToVariableRef(c):this.fontWeightIntToKotlin((0,i.normalizeTextWeight)(e.fontWeight.text),n),T=p?o.tokenToVariableRef(p):e.textDecoration.value===r.TextDecoration.original?"TextDecoration.None":this.textDecorationToKotlin(e.textDecoration.value,n),f=this.textUnitTokenValueToKotlin(e.fontSize,t,o,n),y=e.lineHeight?this.textUnitTokenValueToKotlin(e.lineHeight,t,o,n):void 0,h=e.letterSpacing?this.letterSpacingTokenValueToKotlin(e.letterSpacing,t,o,n):void 0,g=[`fontFamily = ${d}`,`fontWeight = ${m}`,`fontSize = ${f}`];y&&g.push(`lineHeight = ${y}`),h&&g.push(`letterSpacing = ${h}`),T&&g.push(`textDecoration = ${T}`);const k=a.GeneralHelper.indent(o.indent);return`TextStyle(\n${g.map((e=>`${k}${k}${e}`)).join(",\n")}\n${k})`}}},"../../utils/dist/helpers/NamingHelper.js":
/*!************************************************!*\
  !*** ../../utils/dist/helpers/NamingHelper.js ***!
  \************************************************/(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.NamingHelper=void 0;const r=o(/*! ../enums/StringCase */"../../utils/dist/enums/StringCase.js"),n=o(/*! change-case */"../../utils/node_modules/change-case/dist/index.js");class i{static applyFindReplace(e,t){if(!t)return e;const o=Object.entries(t).sort((([e],[t])=>t.length-e.length));let r=e;for(const[e,t]of o){const o=e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&"),n=new RegExp(`\\b${o}\\b|(?<=^|\\s)${o}(?=\\s|$)`,"gi");r=r.replace(n,t)}return r}static codeSafeVariableNameForToken(e,t,o,r,n,a=!0){let s=[];o&&(s.push(...o.path),o.isRoot||s.push(o.name));const l=e.name.split(/[\s-_]+/);if(s.length>0&&l.length>1&&l[0].toLowerCase()===s[s.length-1].toLowerCase()?s.push(l.slice(1).join(" ")):s.push(e.name),n){let e=s.join(" ");e=i.applyFindReplace(e,n),s=e.split(/\s+/).filter((e=>e.length>0)).map((e=>e.trim()))}return r&&r.length>0&&s.unshift(r),i.codeSafeVariableName(s,t,void 0,a)}static codeSafeVariableName(e,t,o,a=!1){let s="string"==typeof e?e:e.join(" ");if(s=i.applyFindReplace(s,o),s=s.replaceAll(/[^a-zA-Z0-9_-]/g,"_"),a){const e=(0,n.kebabCase)(s).split("-").filter((e=>e.length>0));s=e.filter(((t,o)=>0===o||t!==e[o-1])).join(" ")}switch(t){case r.StringCase.camelCase:s=(0,n.camelCase)(s);break;case r.StringCase.capitalCase:s=(0,n.capitalCase)(s);break;case r.StringCase.constantCase:s=(0,n.constantCase)(s);break;case r.StringCase.dotCase:s=(0,n.dotCase)(s);break;case r.StringCase.trainCase:s=(0,n.trainCase)(s);break;case r.StringCase.noCase:s=(0,n.noCase)(s);break;case r.StringCase.kebabCase:s=(0,n.kebabCase)(s);break;case r.StringCase.pascalCase:s=(0,n.pascalCase)(s);break;case r.StringCase.pathCase:s=(0,n.pathCase)(s);break;case r.StringCase.sentenceCase:s=(0,n.sentenceCase)(s);break;case r.StringCase.snakeCase:s=(0,n.snakeCase)(s);break;case r.StringCase.flatCase:s=(0,n.camelCase)(s).toLowerCase()}return t!==r.StringCase.snakeCase&&t!==r.StringCase.constantCase&&(s=s.replaceAll("_","")),s.match(/^[^a-zA-Z]/)&&(s="_"+s),s}static nameAsCSSVarReference(e){return`var(--${e})`}static nameAsCSSVarDeclaration(e){return`--${e}`}}t.NamingHelper=i},"../../utils/dist/helpers/ThemeHelper.js":
/*!***********************************************!*\
  !*** ../../utils/dist/helpers/ThemeHelper.js ***!
  \***********************************************/(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ThemeHelper=void 0;const r=o(/*! ./NamingHelper */"../../utils/dist/helpers/NamingHelper.js"),n=o(/*! ../enums/StringCase */"../../utils/dist/enums/StringCase.js");t.ThemeHelper=class{static hasThemedTokens(e,t,o){const r=e.filter((e=>e.tokenType===t)),n=new Set(o.overriddenTokens.map((e=>e.id)));return r.some((e=>n.has(e.id)))}static filterThemedTokens(e,t){const o=new Set(t.overriddenTokens.map((e=>e.id)));return e.filter((e=>o.has(e.id)))}static getThemeIdentifier(e,t=n.StringCase.kebabCase){if("string"==typeof e)return e;const o=e.codeName||e.name;return r.NamingHelper.codeSafeVariableName(o,t)}static getThemeName(e){if("string"==typeof e)return e;const t=e.codeName||e.name;return r.NamingHelper.codeSafeVariableName(t,n.StringCase.capitalCase)}}},"../../utils/dist/helpers/TokenHelper.js":
/*!***********************************************!*\
  !*** ../../utils/dist/helpers/TokenHelper.js ***!
  \***********************************************/(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.sureOptionalReference=function(e,t,o=!0){if(!e||!o)return null;const r=t.get(e);if(!r)throw new Error(`Trying to retrieve unknown referenced token ${e}`);return r},t.normalizeTextWeight=function(e){const t=e.toLowerCase().trim(),o=parseInt(t);if(!isNaN(o))return o;switch(t){case"thin":case"hairline":return 100;case"extra light":case"extralight":case"ultra light":case"ultralight":return 200;case"light":return 300;case"normal":case"regular":case"book":default:return 400;case"medium":return 500;case"semi bold":case"semibold":case"demi bold":case"demibold":return 600;case"bold":return 700;case"extra bold":case"extrabold":case"ultra bold":case"ultrabold":return 800;case"black":case"heavy":return 900}}},"../../utils/dist/helpers/TokenNameTracker.js":
/*!****************************************************!*\
  !*** ../../utils/dist/helpers/TokenNameTracker.js ***!
  \****************************************************/(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TokenNameTracker=void 0;const r=o(/*! ./NamingHelper */"../../utils/dist/helpers/NamingHelper.js");t.TokenNameTracker=class{constructor(){this.tokenNameMap=new Map,this.nameToTokenMap=new Map,this.hierarchyNameMap=new Map}reset(){this.tokenNameMap.clear(),this.nameToTokenMap.clear(),this.hierarchyNameMap.clear()}getSimpleTokenName(e,t,o=!1,n=[]){const i=`${n.join("/")}/${e.name}`;if(!o&&this.tokenNameMap.has(e.id))return this.tokenNameMap.get(e.id);let a=r.NamingHelper.codeSafeVariableName(e.name,t);this.hierarchyNameMap.has(i)||this.hierarchyNameMap.set(i,new Set);const s=this.hierarchyNameMap.get(i);return s.size>0&&!s.has(e.id)&&(a=`${a}_${s.size}`),s.add(e.id),o||(this.tokenNameMap.set(e.id,a),this.nameToTokenMap.set(a,e.id)),a}getTokenName(e,t,o,n,i=!1,a="_copy_"){if(!i&&this.tokenNameMap.has(e.id))return this.tokenNameMap.get(e.id);const s=t.find((t=>t.id===e.parentGroupId));let l=r.NamingHelper.codeSafeVariableNameForToken(e,o,s,n),c=1;for(;this.nameToTokenMap.has(l)&&this.nameToTokenMap.get(l)!==e.id;)l=`${l}${a}${c++}`;return i||(this.tokenNameMap.set(e.id,l),this.nameToTokenMap.set(l,e.id)),l}}},"../../utils/dist/helpers/WriteTokenPropStore.js":
/*!*******************************************************!*\
  !*** ../../utils/dist/helpers/WriteTokenPropStore.js ***!
  \*******************************************************/(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.WriteTokenPropStore=void 0;const r=o(/*! ./NamingHelper */"../../utils/dist/helpers/NamingHelper.js"),n=o(/*! ../enums/StringCase */"../../utils/dist/enums/StringCase.js");t.WriteTokenPropStore=class{constructor(e,t){this.tokenPropertyWriteMap=new Map,this.sdk=e,this.target=t}storeValueForTokenProperty(e,t,o){let r=this.tokenPropertyWriteMap.get(t);r||(r=new Map,this.tokenPropertyWriteMap.set(t,r)),r.set(e,o)}async batchUpdateStoredTokenProperties(){if(0===this.tokenPropertyWriteMap.size)return;let e=await this.sdk.tokens.getTokenProperties(this.target);for(const[t,o]of this.tokenPropertyWriteMap){let i=e.find((e=>e.name===t));if(i||(await this.sdk.tokens.createTokenProperty(this.target,{type:"Generic",name:t,codeName:r.NamingHelper.codeSafeVariableName([t],n.StringCase.camelCase),columnWidth:200,description:"Variable name to use in code"}),e=await this.sdk.tokens.getTokenProperties(this.target),i=e.find((e=>e.name===t))),!i)throw new Error(`Failed to retrieve or create property ${t}.`);const a=Array.from(o).map((([e,t])=>({definitionId:i.id,targetElementId:e.id,value:t})));await this.sdk.bulkOperations.updateElementProperties(this.target,a)}}async writeTokenProperties(e,t,o){const r=e?.trim();if(r){for(const e of t){const t=o(e);this.storeValueForTokenProperty(e,r,t)}await this.batchUpdateStoredTokenProperties()}}}},"../../utils/dist/index.js":
/*!*********************************!*\
  !*** ../../utils/dist/index.js ***!
  \*********************************/function(e,t,o){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,o,r){void 0===r&&(r=o);var n=Object.getOwnPropertyDescriptor(t,o);n&&!("get"in n?!t.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return t[o]}}),Object.defineProperty(e,r,n)}:function(e,t,o,r){void 0===r&&(r=o),e[r]=t[o]}),n=this&&this.__exportStar||function(e,t){for(var o in e)"default"===o||Object.prototype.hasOwnProperty.call(t,o)||r(t,e,o)};Object.defineProperty(t,"__esModule",{value:!0}),n(o(/*! ./helpers/NamingHelper */"../../utils/dist/helpers/NamingHelper.js"),t),n(o(/*! ./helpers/ColorHelper */"../../utils/dist/helpers/ColorHelper.js"),t),n(o(/*! ./helpers/TokenHelper */"../../utils/dist/helpers/TokenHelper.js"),t),n(o(/*! ./helpers/CSSHelper */"../../utils/dist/helpers/CSSHelper.js"),t),n(o(/*! ./helpers/FileHelper */"../../utils/dist/helpers/FileHelper.js"),t),n(o(/*! ./helpers/ThemeHelper */"../../utils/dist/helpers/ThemeHelper.js"),t),n(o(/*! ./helpers/FileNameHelper */"../../utils/dist/helpers/FileNameHelper.js"),t),n(o(/*! ./helpers/GeneralHelper */"../../utils/dist/helpers/GeneralHelper.js"),t),n(o(/*! ./enums/StringCase */"../../utils/dist/enums/StringCase.js"),t),n(o(/*! ./enums/ColorFormat */"../../utils/dist/enums/ColorFormat.js"),t),n(o(/*! ./helpers/TokenNameTracker */"../../utils/dist/helpers/TokenNameTracker.js"),t),n(o(/*! ./helpers/WriteTokenPropStore */"../../utils/dist/helpers/WriteTokenPropStore.js"),t),n(o(/*! ./helpers/KotlinHelper */"../../utils/dist/helpers/KotlinHelper.js"),t)},"../../utils/node_modules/@supernovaio/sdk-exporters/build/supernova-sdk-typescript.js":
/*!*********************************************************************************************!*\
  !*** ../../utils/node_modules/@supernovaio/sdk-exporters/build/supernova-sdk-typescript.js ***!
  \*********************************************************************************************/(e,t)=>{(()=>{"use strict";var e={1:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.GradientType=void 0,function(e){e.linear="Linear",e.radial="Radial",e.angular="Angular"}(o||(t.GradientType=o={}))},306:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockTextPropertyStyle=void 0,function(e){e.title1="Title1",e.title2="Title2",e.title3="Title3",e.title4="Title4",e.title5="Title5",e.default="Default",e.defaultBold="DefaultBold",e.defaultSemibold="DefaultSemibold",e.small="Small",e.smallBold="SmallBold",e.smallSemibold="SmallSemibold",e.custom="Custom"}(o||(t.DocsBlockTextPropertyStyle=o={}))},899:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.AssetScaleType=void 0,function(e){e.aspectFill="AspectFill",e.aspectFit="AspectFit"}(o||(t.AssetScaleType=o={}))},915:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.AssetScale=void 0,function(e){e.x1="x1",e.x2="x2",e.x3="x3",e.x4="x4"}(o||(t.AssetScale=o={}))},922:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.TextCase=void 0,function(e){e.original="Original",e.upper="Upper",e.lower="Lower",e.camel="Camel",e.smallCaps="SmallCaps"}(o||(t.TextCase=o={}))},934:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.IconSet=void 0,function(e){e.checkCircle="CheckCircle",e.crossCircle="CrossCircle",e.alert="Alert"}(o||(t.IconSet=o={}))},1160:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.ALL_BORDER_POSITIONS=t.BorderPosition=void 0,function(e){e.inside="Inside",e.center="Center",e.outside="Outside"}(o||(t.BorderPosition=o={})),t.ALL_BORDER_POSITIONS=[o.inside,o.center,o.outside]},1233:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsEntityType=void 0,function(e){e.group="Group",e.page="Page"}(o||(t.DocsEntityType=o={}))},1255:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.FrameAlignment=void 0,function(e){e.frameHeight="FrameHeight",e.center="Center"}(o||(t.FrameAlignment=o={}))},1423:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyPageAssetType=void 0,function(e){e.image="image",e.figmaFrame="figmaFrame"}(o||(t.DocumentationLegacyPageAssetType=o={}))},1601:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyPageBlockThemeType=void 0,function(e){e.override="Override",e.comparison="Comparison"}(o||(t.DocumentationLegacyPageBlockThemeType=o={}))},1846:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyPageBlockType=void 0,function(e){e.text="Text",e.heading="Heading",e.code="Code",e.unorderedList="UnorderedList",e.orderedList="OrderedList",e.quote="Quote",e.callout="Callout",e.divider="Divider",e.image="Image",e.token="Token",e.tokenList="TokenList",e.tokenGroup="TokenGroup",e.shortcuts="Shortcuts",e.link="Link",e.figmaEmbed="FigmaEmbed",e.youtubeEmbed="YoutubeEmbed",e.storybookEmbed="StorybookEmbed",e.genericEmbed="Embed",e.figmaFrames="FigmaFrames",e.custom="Custom",e.renderCode="RenderCode",e.componentAssets="ComponentAssets",e.column="Column",e.columnItem="ColumnItem",e.tabs="Tabs",e.tabItem="TabItem",e.table="Table",e.tableCell="TableCell",e.tableRow="TableRow"}(o||(t.DocumentationLegacyPageBlockType=o={}))},2123:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyGroupBehavior=void 0,function(e){e.group="Group",e.tabs="Tabs"}(o||(t.DocumentationLegacyGroupBehavior=o={}))},2657:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyPageBlockShortcut=t.DocumentationLegacyPageBlockShortcutType=void 0,function(e){e.external="External",e.internal="Internal"}(o||(t.DocumentationLegacyPageBlockShortcutType=o={})),t.DocumentationLegacyPageBlockShortcut=class{constructor(e){var t;e.url?this.type=o.external:this.type=o.internal,this.title=this.shortcutTitleFromModel(e,this.type),this.description=this.shortcutDescriptionFromModel(e,this.type),this.previewUrl=this.shortcutPreviewUrlFromModel(e),this.type===o.internal&&(null===(t=e.documentationItemPreview)||void 0===t?void 0:t.valid)&&e.documentationItemId?this.internalId=e.documentationItemId:(this.internalId=null,this.type===o.external&&e.url?this.externalUrl=e.url:this.externalUrl=null)}shortcutTitleFromModel(e,t){var r,n,i,a,s;let l=null;return e.title&&e.title.trim().length>0?l=e.title:t===o.internal?l=null!==(n=null===(r=e.documentationItemPreview)||void 0===r?void 0:r.title)&&void 0!==n?n:null:t===o.external&&(l=null!==(s=null!==(a=null===(i=e.urlPreview)||void 0===i?void 0:i.title)&&void 0!==a?a:e.url)&&void 0!==s?s:null),l&&0!==l.trim().length?l:null}shortcutDescriptionFromModel(e,t){var r;let n=null;return e.description&&e.description.trim().length>0?n=e.description:t===o.external&&(n=null===(r=e.urlPreview)||void 0===r?void 0:r.description),n&&0!==n.trim().length?n:null}shortcutPreviewUrlFromModel(e){var t,o,r,n,i;return null!==(i=null!==(r=null!==(t=e.assetUrl)&&void 0!==t?t:null===(o=e.asset)||void 0===o?void 0:o.url)&&void 0!==r?r:null===(n=e.urlPreview)||void 0===n?void 0:n.thumbnailUrl)&&void 0!==i?i:null}}},2674:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.RichTextSpanAttributeType=void 0,function(e){e.bold="Bold",e.italic="Italic",e.link="Link",e.strikethrough="Strikethrough",e.code="Code"}(o||(t.RichTextSpanAttributeType=o={}))},2802:(e,t)=>{var o,r;Object.defineProperty(t,"__esModule",{value:!0}),t.PulsarExecutor=t.OutputFileType=void 0,function(e){e.copyRemoteUrl="copyRemoteUrl",e.text="text",e.binary="binary"}(o||(t.OutputFileType=o={})),function(e){e.supernova="supernova",e.local="local"}(r||(t.PulsarExecutor=r={}))},3607:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.WorkspaceSubscriptionStatus=void 0,function(e){e.active="active",e.gracePeriod="gracePeriod",e.cancelled="cancelled",e.suspended="suspended"}(o||(t.WorkspaceSubscriptionStatus=o={}))},3718:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.FrameLayout=void 0,function(e){e.c8="C8",e.c7="C7",e.c6="C6",e.c5="C5",e.c4="C4",e.c3="C3",e.c2="C2",e.c1="C1",e.c175="C1_75"}(o||(t.FrameLayout=o={}))},3733:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockBehaviorSelectionType=void 0,function(e){e.entity="Entity",e.group="Group",e.entityAndGroup="EntityAndGroup"}(o||(t.DocsBlockBehaviorSelectionType=o={}))},3788:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DT_TOKEN_TYPES=t.tokenTypeIsReferencable=t.REFERENCABLE_TOKEN_TYPES=t.REPLACABLE_TOKEN_TYPES=t.tokenTypeIsNonPure=t.tokenTypeIsPure=t.PURE_TOKEN_TYPES=t.ALL_TOKEN_TYPES=t.MS_DIMENSION_TOKEN_TYPES=t.RAW_DIMENSION_TOKEN_TYPES=t.DIMENSION_TOKEN_TYPES=t.OPTION_TOKEN_TYPES=t.STRING_TOKEN_TYPES=t.TokenType=void 0,function(e){e.color="Color",e.typography="Typography",e.shadow="Shadow",e.border="Border",e.gradient="Gradient",e.blur="Blur",e.radius="BorderRadius",e.borderWidth="BorderWidth",e.duration="Duration",e.fontSize="FontSize",e.dimension="Dimension",e.letterSpacing="LetterSpacing",e.lineHeight="LineHeight",e.opacity="Opacity",e.paragraphSpacing="ParagraphSpacing",e.size="Size",e.space="Space",e.zIndex="ZIndex",e.textDecoration="TextDecoration",e.textCase="TextCase",e.visibility="Visibility",e.fontFamily="FontFamily",e.fontWeight="FontWeight",e.string="String",e.productCopy="ProductCopy"}(o||(t.TokenType=o={})),t.STRING_TOKEN_TYPES=[o.string,o.productCopy,o.fontFamily,o.fontWeight],t.OPTION_TOKEN_TYPES=[o.textCase,o.textDecoration,o.visibility],t.DIMENSION_TOKEN_TYPES=[o.dimension,o.size,o.space,o.opacity,o.fontSize,o.lineHeight,o.letterSpacing,o.paragraphSpacing,o.borderWidth,o.radius,o.duration,o.zIndex],t.RAW_DIMENSION_TOKEN_TYPES=[o.opacity,o.zIndex],t.MS_DIMENSION_TOKEN_TYPES=[o.duration],t.ALL_TOKEN_TYPES=[...t.DIMENSION_TOKEN_TYPES,...t.STRING_TOKEN_TYPES,...t.OPTION_TOKEN_TYPES,o.color,o.gradient,o.border,o.radius,o.shadow,o.typography,o.blur],t.PURE_TOKEN_TYPES=[...t.DIMENSION_TOKEN_TYPES,...t.STRING_TOKEN_TYPES,...t.OPTION_TOKEN_TYPES],t.tokenTypeIsPure=e=>t.PURE_TOKEN_TYPES.includes(e),t.tokenTypeIsNonPure=e=>!(0,t.tokenTypeIsPure)(e),t.REPLACABLE_TOKEN_TYPES=[o.color,...t.DIMENSION_TOKEN_TYPES,...t.STRING_TOKEN_TYPES,...t.OPTION_TOKEN_TYPES],t.REFERENCABLE_TOKEN_TYPES=[o.color,...t.DIMENSION_TOKEN_TYPES,o.fontFamily,o.fontWeight,o.textCase,o.textDecoration],t.tokenTypeIsReferencable=e=>t.REFERENCABLE_TOKEN_TYPES.includes(e),t.DT_TOKEN_TYPES=[o.color,o.shadow,o.gradient,o.typography,o.border,...t.DIMENSION_TOKEN_TYPES,o.fontFamily,o.fontWeight,o.string,...t.OPTION_TOKEN_TYPES]},4068:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsEntityGroupBehavior=void 0,function(e){e.group="Group",e.tabs="Tabs"}(o||(t.DocsEntityGroupBehavior=o={}))},4290:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.WorkspaceSubscriptionProductCode=void 0,function(e){e.free="free",e.team="team",e.teamTest="team_test",e.company="company",e.enterprise="enterprise"}(o||(t.WorkspaceSubscriptionProductCode=o={}))},4379:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.SupernovaError=void 0;class o extends Error{constructor(e,t,o,r,n,i,a){super(e),this.code=t,this.status=o,this.formErrors=r,this.requestId=n,this.serverTime=i,this.url=a}static fromNetworkResponse(e,t,r){var n,i,a;return new o(e.message,e.errorCode||e.reason||e.label||null,e.code||t,null!==(n=e.formErrors)&&void 0!==n?n:null,null!==(i=e.requestId)&&void 0!==i?i:null,null!==(a=e.serverTime)&&void 0!==a?a:null,r)}static fromNoNetworkResponse(e){return new o("No network or internet unreachable","NO_NETWORK",12163,null,(new Date).toISOString(),null,e)}static fromCode(e){return new o(e,e,null,null,null,null,null)}static fromMessage(e){return new o(e,null,null,null,null,null,null)}isFieldErrored(e){return void 0!==this.formErrors.find((t=>t.key===e))}errorForField(e){var t;return null!==(t=this.formErrors.find((t=>t.key===e)))&&void 0!==t?t:null}toString(){var e,t,o,r,n,i;return`\n    Error thrown: ${this.message}\n\n    Code: ${null!==(e=this.code)&&void 0!==e?e:"-"}\n\n    Status: ${null!==(t=this.status)&&void 0!==t?t:"-"}\n\n    Fields: ${JSON.stringify(this.formErrors,null,2)}\n\n    Request ID: ${null!==(o=this.requestId)&&void 0!==o?o:"-"}\n\n    Server time: ${null!==(r=this.serverTime)&&void 0!==r?r:"-"}\n\n    Network URL: ${null!==(n=this.url)&&void 0!==n?n:"-"}\n\n    Stack: ${null!==(i=this.stack)&&void 0!==i?i:"-"}\n    `}toHumanReadable(){return`${this.message}${this.requestId?` (request ${this.requestId})`:""}`}}t.SupernovaError=o},4546:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.ALL_BORDER_STYLES=t.BorderStyle=void 0,function(e){e.dashed="Dashed",e.dotted="Dotted",e.solid="Solid",e.groove="Groove"}(o||(t.BorderStyle=o={})),t.ALL_BORDER_STYLES=[o.dashed,o.dotted,o.solid,o.groove]},4652:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.SourceType=void 0,function(e){e.figma="Figma",e.tokenStudio="TokenStudio",e.figmaVariablesPlugin="FigmaVariablesPlugin"}(o||(t.SourceType=o={}))},5102:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyCalloutType=void 0,function(e){e.info="Info",e.success="Success",e.warning="Warning",e.error="Error"}(o||(t.DocumentationLegacyCalloutType=o={}))},5503:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.WorkspaceSubscriptionPlanInterval=void 0,function(e){e.yearly="yearly",e.monthly="monthly"}(o||(t.WorkspaceSubscriptionPlanInterval=o={}))},5651:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockBehaviorDataType=void 0,function(e){e.item="Item",e.token="Token",e.asset="Asset",e.component="Component",e.figmaNode="FigmaNode",e.figmaComponent="FigmaComponent"}(o||(t.DocsBlockBehaviorDataType=o={}))},5673:(e,t)=>{var o;function r(e){switch(e.type){case o.documentationItem:return`@page:${e.documentationItemId}`;case o.pageHeading:return`@page:${e.documentationItemId}#${e.pageHeadingId}`;case o.url:return e.url;default:return}}Object.defineProperty(t,"__esModule",{value:!0}),t.linkAttributeToDocsLink=t.docsLinkToLinkAttributes=t.docsLinkToUrl=t.DocsLinkRefType=void 0,function(e){e.documentationItem="DocumentationItem",e.pageHeading="PageHeading",e.url="Url"}(o||(t.DocsLinkRefType=o={})),t.docsLinkToUrl=r,t.docsLinkToLinkAttributes=function(e){const t=r(e);if(t)return{href:t,target:e.openInNewTab?"_blank":"_self"}},t.linkAttributeToDocsLink=function(e,t){if(!e)return;const r="_blank"===t;if(e.startsWith("@page:")){if(e.includes("#")){const[t,n]=e.replace("@page:","").split("#");return{type:o.pageHeading,documentationItemId:t,pageHeadingId:n,openInNewTab:r}}return{type:o.documentationItem,documentationItemId:e.replace("@page:",""),openInNewTab:r}}return{type:o.url,url:e,openInNewTab:r}}},5695:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.CustomDomainErrorCode=void 0,function(e){e.generalError="GeneralError",e.dnsNotConfigured="DNSNotConfigured",e.maintenance="Maintenance"}(o||(t.CustomDomainErrorCode=o={}))},5883:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockItemPropertyOptionRenderingStyle=void 0,function(e){e.segmentedControl="SegmentedControl",e.toggleButton="ToggleButton",e.select="Select",e.checkbox="Checkbox"}(o||(t.DocsBlockItemPropertyOptionRenderingStyle=o={}))},5963:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockOptionRenderingStyle=void 0,function(e){e.segmentedControl="SegmentedControl",e.toggleButton="ToggleButton",e.select="Select",e.checkbox="Checkbox"}(o||(t.DocsBlockOptionRenderingStyle=o={}))},6141:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.VisibilityType=void 0,function(e){e.visible="Visible",e.hidden="Hidden"}(o||(t.VisibilityType=o={}))},6192:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.BlurType=void 0,function(e){e.layer="Layer",e.background="Background"}(o||(t.BlurType=o={}))},6298:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.WorkspaceNPMRegistryAuthType=void 0,function(e){e.basic="Basic",e.bearer="Bearer"}(o||(t.WorkspaceNPMRegistryAuthType=o={}))},6644:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockRichTextPropertyStyle=void 0,function(e){e.title1="Title1",e.title2="Title2",e.title3="Title3",e.title4="Title4",e.title5="Title5",e.quote="Quote",e.callout="Callout",e.default="Default"}(o||(t.DocsBlockRichTextPropertyStyle=o={}))},6839:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockItemPropertyType=void 0,function(e){e.richText="RichText",e.multiRichText="MultiRichText",e.text="Text",e.richTextEditor="RichTextEditor",e.boolean="Boolean",e.number="Number",e.singleSelect="SingleSelect",e.multiSelect="MultiSelect",e.image="Image",e.token="Token",e.tokenType="TokenType",e.tokenProperty="TokenProperty",e.component="Component",e.componentProperty="ComponentProperty",e.asset="Asset",e.assetProperty="AssetProperty",e.embedURL="EmbedURL",e.url="URL",e.markdown="Markdown",e.code="Code",e.codeSandbox="CodeSandbox",e.table="Table",e.divider="Divider",e.storybook="Storybook",e.color="Color",e.figmaNode="FigmaNode",e.figmaComponent="FigmaComponent"}(o||(t.DocsBlockItemPropertyType=o={}))},7040:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.TextDecoration=void 0,function(e){e.original="None",e.underline="Underline",e.strikethrough="Strikethrough"}(o||(t.TextDecoration=o={}))},7291:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockItemVariantLayoutWidth=void 0,function(e){e.c1="1",e.c2="2",e.c3="3",e.c4="4",e.c5="5",e.c6="6",e.c7="7",e.c8="8",e.c9="9",e.c10="10",e.c11="11",e.c12="12"}(o||(t.DocsBlockItemVariantLayoutWidth=o={}))},7379:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyItemType=void 0,function(e){e.group="Group",e.page="Page"}(o||(t.DocumentationLegacyItemType=o={}))},7476:(e,t)=>{var o,r;Object.defineProperty(t,"__esModule",{value:!0}),t.TextAlignment=t.Alignment=void 0,function(e){e.left="Left",e.center="Center",e.stretch="Stretch"}(o||(t.Alignment=o={})),function(e){e.left="Left",e.center="Center",e.right="Right"}(r||(t.TextAlignment=r={}))},7479:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockItemPropertyTextStyle=void 0,function(e){e.small="Small",e.regular="Regular",e.bold="Bold"}(o||(t.DocsBlockItemPropertyTextStyle=o={}))},7737:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.CustomDomainState=void 0,function(e){e.initial="Initial",e.domainSetupInProgress="DomainSetupInProgress",e.domainSetupFailed="DomainSetupFailed",e.domainSetupsSucces="DomainSetupSuccess",e.sslSetupInProgress="SSLSetupInProgress",e.sslSetupFailed="SSLSetupFailed",e.sslSetupSuccess="SSLSetupSuccess"}(o||(t.CustomDomainState=o={}))},7968:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.WorkspaceNPMRegistryType=void 0,function(e){e.npmJS="NPMJS",e.gitHub="GitHub",e.azureDevOps="AzureDevOps",e.artifactory="Artifactory",e.custom="Custom"}(o||(t.WorkspaceNPMRegistryType=o={}))},7971:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsSectionType=void 0,function(e){e.plain="Plain",e.tabs="Tabs"}(o||(t.DocsSectionType=o={}))},8042:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.ImportWarningType=void 0,function(e){e.UnsupportedFill="UnsupportedFill",e.UnsupportedStroke="UnsupportedStroke",e.UnsupportedEffect="UnsupportedEffect",e.StyleNotApplied="StyleNotApplied",e.NoPublishedStyles="NoPublishedStyles",e.NoPublishedComponents="NoPublishedComponents",e.NoPublishedAssets="NoPublishedAssets",e.NoVersionFound="NoVersionFound",e.ComponentHasNoThumbnail="ComponentHasNoThumbnail",e.DuplicateImportedStyleId="DuplicateImportedStyleId",e.DuplicateImportedStylePath="DuplicateImportedStylePath",e.NoPublishedElements="NoPublishedElements",e.NoUnpublishedStyles="NoUnpublishedStyles"}(o||(t.ImportWarningType=o={}))},8061:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockItemPropertyRichTextStyle=void 0,function(e){e.title1="Title1",e.title2="Title2",e.title3="Title3",e.title4="Title4",e.title5="Title5",e.quote="Quote",e.callout="Callout",e.ol="OL",e.ul="UL"}(o||(t.DocsBlockItemPropertyRichTextStyle=o={}))},8095:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockItemVariantLayoutType=void 0,function(e){e.column="Column",e.row="Row"}(o||(t.DocsBlockItemVariantLayoutType=o={}))},8607:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.MS_UNITS=t.PX_UNITS=t.RAW_UNITS=t.LINE_HEIGHT_UNITS=t.SIZE_UNITS=t.Unit=void 0,function(e){e.pixels="Pixels",e.percent="Percent",e.rem="Rem",e.ms="Ms",e.raw="Raw"}(o||(t.Unit=o={})),t.SIZE_UNITS=[o.pixels,o.percent,o.rem],t.LINE_HEIGHT_UNITS=[o.pixels,o.percent,o.rem,o.raw],t.RAW_UNITS=[o.raw],t.PX_UNITS=[o.pixels],t.MS_UNITS=[o.ms]},8738:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.AssetFormat=void 0,function(e){e.png="png",e.pdf="pdf",e.svg="svg"}(o||(t.AssetFormat=o={}))},8890:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockImagePropertyAspectRatio=void 0,function(e){e.auto="Auto",e.square="Square",e.landscape="Landscape",e.portrait="Portrait",e.wide="Wide"}(o||(t.DocsBlockImagePropertyAspectRatio=o={}))},9125:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.ShadowType=void 0,function(e){e.drop="Drop",e.inner="Inner"}(o||(t.ShadowType=o={}))},9133:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockOptionColor=void 0,function(e){e.green="Green",e.red="Red",e.yellow="Yellow",e.blue="Blue",e.purple="Purple",e.orange="Orange",e.pink="Pink",e.teal="Teal",e.grey="Grey",e.lightGrey="LightGrey",e.cyan="Cyan",e.fuchsia="Fuchsia"}(o||(t.DocsBlockOptionColor=o={}))},9377:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockItemEntityType=void 0,function(e){e.token="Token",e.tokenGroup="TokenGroup",e.asset="Asset",e.assetGroup="AssetGroup",e.component="Component",e.componentGroup="ComponentGroup"}(o||(t.DocsBlockItemEntityType=o={}))},9478:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.convertRemoteToUserRole=t.UserRole=void 0;const r=o(4379);var n;!function(e){e.owner="Owner",e.admin="Admin",e.creator="Creator",e.contributor="Contributor",e.billing="Billing",e.viewer="Viewer"}(n||(t.UserRole=n={})),t.convertRemoteToUserRole=e=>{switch(e){case"Owner":return n.owner;case"Admin":return n.admin;case"Creator":return n.creator;case"Contributor":return n.contributor;case"Billing":return n.billing;case"Viewer":return n.viewer;default:throw r.SupernovaError.fromMessage(`Unknown role: ${e}`)}}},9896:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyHeadingType=void 0,function(e){e[e.h1=1]="h1",e[e.h2=2]="h2",e[e.h3=3]="h3"}(o||(t.DocumentationLegacyHeadingType=o={}))},9932:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.docsImageRefToUrl=t.DocsImageRefType=void 0,function(e){e.resource="Resource",e.figmaNode="FigmaNode"}(o||(t.DocsImageRefType=o={})),t.docsImageRefToUrl=function(e,t,r){var n;if(e)switch(e.type){case o.resource:return null===(n=e.resource)||void 0===n?void 0:n.url;case o.figmaNode:if(!e.figmaNode||!e.figmaNode.sourceId||!e.figmaNode.frameReferenceId)return;return t.resources.getFigmaFrameHostedUrl({designSystemId:r.dsId,versionId:r.versionId},e.figmaNode.frameReferenceId);default:return}}}},o={};function r(t){var n=o[t];if(void 0!==n)return n.exports;var i=o[t]={exports:{}};return e[t](i,i.exports,r),i.exports}var n={};(()=>{var e=n;Object.defineProperty(e,"__esModule",{value:!0}),e.TokenType=e.TextDecoration=e.TextCase=e.ShadowType=e.RichTextSpanAttributeType=e.GradientType=e.FrameLayout=e.FrameAlignment=e.IconSet=e.SourceType=e.DocsImageRefType=e.DocsLinkRefType=e.DocsSectionType=e.DocsEntityType=e.DocsEntityGroupBehavior=e.DocsBlockTextPropertyStyle=e.DocsBlockRichTextPropertyStyle=e.DocsBlockOptionColor=e.DocsBlockOptionRenderingStyle=e.DocsBlockItemVariantLayoutWidth=e.DocsBlockItemVariantLayoutType=e.DocsBlockItemPropertyType=e.DocsBlockItemPropertyTextStyle=e.DocsBlockItemPropertyRichTextStyle=e.DocsBlockItemPropertyOptionRenderingStyle=e.DocsBlockItemEntityType=e.DocsBlockImagePropertyAspectRatio=e.DocsBlockBehaviorSelectionType=e.DocsBlockBehaviorDataType=e.DocumentationLegacyPageBlockShortcutType=e.DocumentationLegacyPageBlockThemeType=e.DocumentationLegacyPageBlockType=e.DocumentationLegacyPageAssetType=e.DocumentationLegacyItemType=e.DocumentationLegacyHeadingType=e.DocumentationLegacyGroupBehavior=e.DocumentationLegacyCalloutType=e.BorderStyle=e.BorderPosition=e.BlurType=e.AssetScaleType=e.AssetScale=e.AssetFormat=e.Alignment=e.ALL_TOKEN_TYPES=e.ALL_BORDER_STYLES=e.ALL_BORDER_POSITIONS=e.OPTION_TOKEN_TYPES=e.STRING_TOKEN_TYPES=e.DIMENSION_TOKEN_TYPES=void 0,e.PulsarExecutor=e.OutputFileType=e.CustomDomainState=e.CustomDomainErrorCode=e.ImportWarningType=e.WorkspaceNPMRegistryType=e.WorkspaceNPMRegistryAuthType=e.WorkspaceSubscriptionStatus=e.WorkspaceSubscriptionProductCode=e.WorkspaceSubscriptionPlanInterval=e.VisibilityType=e.UserRole=e.Unit=void 0;var t=r(3788);Object.defineProperty(e,"DIMENSION_TOKEN_TYPES",{enumerable:!0,get:function(){return t.DIMENSION_TOKEN_TYPES}}),Object.defineProperty(e,"STRING_TOKEN_TYPES",{enumerable:!0,get:function(){return t.STRING_TOKEN_TYPES}}),Object.defineProperty(e,"OPTION_TOKEN_TYPES",{enumerable:!0,get:function(){return t.OPTION_TOKEN_TYPES}});var o=r(1160);Object.defineProperty(e,"ALL_BORDER_POSITIONS",{enumerable:!0,get:function(){return o.ALL_BORDER_POSITIONS}});var i=r(4546);Object.defineProperty(e,"ALL_BORDER_STYLES",{enumerable:!0,get:function(){return i.ALL_BORDER_STYLES}});var a=r(3788);Object.defineProperty(e,"ALL_TOKEN_TYPES",{enumerable:!0,get:function(){return a.ALL_TOKEN_TYPES}});var s=r(7476);Object.defineProperty(e,"Alignment",{enumerable:!0,get:function(){return s.Alignment}});var l=r(8738);Object.defineProperty(e,"AssetFormat",{enumerable:!0,get:function(){return l.AssetFormat}});var c=r(915);Object.defineProperty(e,"AssetScale",{enumerable:!0,get:function(){return c.AssetScale}});var u=r(899);Object.defineProperty(e,"AssetScaleType",{enumerable:!0,get:function(){return u.AssetScaleType}});var p=r(6192);Object.defineProperty(e,"BlurType",{enumerable:!0,get:function(){return p.BlurType}});var d=r(1160);Object.defineProperty(e,"BorderPosition",{enumerable:!0,get:function(){return d.BorderPosition}});var m=r(4546);Object.defineProperty(e,"BorderStyle",{enumerable:!0,get:function(){return m.BorderStyle}});var T=r(5102);Object.defineProperty(e,"DocumentationLegacyCalloutType",{enumerable:!0,get:function(){return T.DocumentationLegacyCalloutType}});var f=r(2123);Object.defineProperty(e,"DocumentationLegacyGroupBehavior",{enumerable:!0,get:function(){return f.DocumentationLegacyGroupBehavior}});var y=r(9896);Object.defineProperty(e,"DocumentationLegacyHeadingType",{enumerable:!0,get:function(){return y.DocumentationLegacyHeadingType}});var h=r(7379);Object.defineProperty(e,"DocumentationLegacyItemType",{enumerable:!0,get:function(){return h.DocumentationLegacyItemType}});var g=r(1423);Object.defineProperty(e,"DocumentationLegacyPageAssetType",{enumerable:!0,get:function(){return g.DocumentationLegacyPageAssetType}});var k=r(1846);Object.defineProperty(e,"DocumentationLegacyPageBlockType",{enumerable:!0,get:function(){return k.DocumentationLegacyPageBlockType}});var b=r(1601);Object.defineProperty(e,"DocumentationLegacyPageBlockThemeType",{enumerable:!0,get:function(){return b.DocumentationLegacyPageBlockThemeType}});var S=r(2657);Object.defineProperty(e,"DocumentationLegacyPageBlockShortcutType",{enumerable:!0,get:function(){return S.DocumentationLegacyPageBlockShortcutType}});var v=r(5651);Object.defineProperty(e,"DocsBlockBehaviorDataType",{enumerable:!0,get:function(){return v.DocsBlockBehaviorDataType}});var C=r(3733);Object.defineProperty(e,"DocsBlockBehaviorSelectionType",{enumerable:!0,get:function(){return C.DocsBlockBehaviorSelectionType}});var P=r(8890);Object.defineProperty(e,"DocsBlockImagePropertyAspectRatio",{enumerable:!0,get:function(){return P.DocsBlockImagePropertyAspectRatio}});var x=r(9377);Object.defineProperty(e,"DocsBlockItemEntityType",{enumerable:!0,get:function(){return x.DocsBlockItemEntityType}});var O=r(5883);Object.defineProperty(e,"DocsBlockItemPropertyOptionRenderingStyle",{enumerable:!0,get:function(){return O.DocsBlockItemPropertyOptionRenderingStyle}});var _=r(8061);Object.defineProperty(e,"DocsBlockItemPropertyRichTextStyle",{enumerable:!0,get:function(){return _.DocsBlockItemPropertyRichTextStyle}});var I=r(7479);Object.defineProperty(e,"DocsBlockItemPropertyTextStyle",{enumerable:!0,get:function(){return I.DocsBlockItemPropertyTextStyle}});var D=r(6839);Object.defineProperty(e,"DocsBlockItemPropertyType",{enumerable:!0,get:function(){return D.DocsBlockItemPropertyType}});var F=r(8095);Object.defineProperty(e,"DocsBlockItemVariantLayoutType",{enumerable:!0,get:function(){return F.DocsBlockItemVariantLayoutType}});var N=r(7291);Object.defineProperty(e,"DocsBlockItemVariantLayoutWidth",{enumerable:!0,get:function(){return N.DocsBlockItemVariantLayoutWidth}});var R=r(5963);Object.defineProperty(e,"DocsBlockOptionRenderingStyle",{enumerable:!0,get:function(){return R.DocsBlockOptionRenderingStyle}});var E=r(9133);Object.defineProperty(e,"DocsBlockOptionColor",{enumerable:!0,get:function(){return E.DocsBlockOptionColor}});var j=r(6644);Object.defineProperty(e,"DocsBlockRichTextPropertyStyle",{enumerable:!0,get:function(){return j.DocsBlockRichTextPropertyStyle}});var B=r(306);Object.defineProperty(e,"DocsBlockTextPropertyStyle",{enumerable:!0,get:function(){return B.DocsBlockTextPropertyStyle}});var w=r(4068);Object.defineProperty(e,"DocsEntityGroupBehavior",{enumerable:!0,get:function(){return w.DocsEntityGroupBehavior}});var $=r(1233);Object.defineProperty(e,"DocsEntityType",{enumerable:!0,get:function(){return $.DocsEntityType}});var M=r(7971);Object.defineProperty(e,"DocsSectionType",{enumerable:!0,get:function(){return M.DocsSectionType}});var L=r(5673);Object.defineProperty(e,"DocsLinkRefType",{enumerable:!0,get:function(){return L.DocsLinkRefType}});var H=r(9932);Object.defineProperty(e,"DocsImageRefType",{enumerable:!0,get:function(){return H.DocsImageRefType}});var V=r(4652);Object.defineProperty(e,"SourceType",{enumerable:!0,get:function(){return V.SourceType}});var A=r(934);Object.defineProperty(e,"IconSet",{enumerable:!0,get:function(){return A.IconSet}});var W=r(1255);Object.defineProperty(e,"FrameAlignment",{enumerable:!0,get:function(){return W.FrameAlignment}});var K=r(3718);Object.defineProperty(e,"FrameLayout",{enumerable:!0,get:function(){return K.FrameLayout}});var U=r(1);Object.defineProperty(e,"GradientType",{enumerable:!0,get:function(){return U.GradientType}});var G=r(2674);Object.defineProperty(e,"RichTextSpanAttributeType",{enumerable:!0,get:function(){return G.RichTextSpanAttributeType}});var z=r(9125);Object.defineProperty(e,"ShadowType",{enumerable:!0,get:function(){return z.ShadowType}});var Y=r(922);Object.defineProperty(e,"TextCase",{enumerable:!0,get:function(){return Y.TextCase}});var q=r(7040);Object.defineProperty(e,"TextDecoration",{enumerable:!0,get:function(){return q.TextDecoration}});var Z=r(3788);Object.defineProperty(e,"TokenType",{enumerable:!0,get:function(){return Z.TokenType}});var X=r(8607);Object.defineProperty(e,"Unit",{enumerable:!0,get:function(){return X.Unit}});var J=r(9478);Object.defineProperty(e,"UserRole",{enumerable:!0,get:function(){return J.UserRole}});var Q=r(6141);Object.defineProperty(e,"VisibilityType",{enumerable:!0,get:function(){return Q.VisibilityType}});var ee=r(5503);Object.defineProperty(e,"WorkspaceSubscriptionPlanInterval",{enumerable:!0,get:function(){return ee.WorkspaceSubscriptionPlanInterval}});var te=r(4290);Object.defineProperty(e,"WorkspaceSubscriptionProductCode",{enumerable:!0,get:function(){return te.WorkspaceSubscriptionProductCode}});var oe=r(3607);Object.defineProperty(e,"WorkspaceSubscriptionStatus",{enumerable:!0,get:function(){return oe.WorkspaceSubscriptionStatus}});var re=r(6298);Object.defineProperty(e,"WorkspaceNPMRegistryAuthType",{enumerable:!0,get:function(){return re.WorkspaceNPMRegistryAuthType}});var ne=r(7968);Object.defineProperty(e,"WorkspaceNPMRegistryType",{enumerable:!0,get:function(){return ne.WorkspaceNPMRegistryType}});var ie=r(8042);Object.defineProperty(e,"ImportWarningType",{enumerable:!0,get:function(){return ie.ImportWarningType}});var ae=r(5695);Object.defineProperty(e,"CustomDomainErrorCode",{enumerable:!0,get:function(){return ae.CustomDomainErrorCode}});var se=r(7737);Object.defineProperty(e,"CustomDomainState",{enumerable:!0,get:function(){return se.CustomDomainState}});var le=r(2802);Object.defineProperty(e,"OutputFileType",{enumerable:!0,get:function(){return le.OutputFileType}}),Object.defineProperty(e,"PulsarExecutor",{enumerable:!0,get:function(){return le.PulsarExecutor}})})();var i=t;for(var a in n)i[a]=n[a];n.__esModule&&Object.defineProperty(i,"__esModule",{value:!0})})()},"../../utils/node_modules/change-case/dist/index.js":
/*!**********************************************************!*\
  !*** ../../utils/node_modules/change-case/dist/index.js ***!
  \**********************************************************/(e,t,o)=>{"use strict";o.r(t),o.d(t,{camelCase:()=>d,capitalCase:()=>f,constantCase:()=>y,dotCase:()=>h,kebabCase:()=>g,noCase:()=>p,pascalCase:()=>m,pascalSnakeCase:()=>T,pathCase:()=>k,sentenceCase:()=>b,snakeCase:()=>S,split:()=>c,splitSeparateNumbers:()=>u,trainCase:()=>v});const r=/([\p{Ll}\d])(\p{Lu})/gu,n=/(\p{Lu})([\p{Lu}][\p{Ll}])/gu,i=/(\d)\p{Ll}|(\p{L})\d/u,a=/[^\p{L}\d]+/giu,s="$1\0$2",l="";function c(e){let t=e.trim();t=t.replace(r,s).replace(n,s),t=t.replace(a,"\0");let o=0,i=t.length;for(;"\0"===t.charAt(o);)o++;if(o===i)return[];for(;"\0"===t.charAt(i-1);)i--;return t.slice(o,i).split(/\0/g)}function u(e){const t=c(e);for(let e=0;e<t.length;e++){const o=t[e],r=i.exec(o);if(r){const n=r.index+(r[1]??r[2]).length;t.splice(e,1,o.slice(0,n),o.slice(n))}}return t}function p(e,t){const[o,r,n]=_(e,t);return o+r.map(C(t?.locale)).join(t?.delimiter??" ")+n}function d(e,t){const[o,r,n]=_(e,t),i=C(t?.locale),a=P(t?.locale),s=t?.mergeAmbiguousCharacters?x(i,a):O(i,a);return o+r.map(((e,t)=>0===t?i(e):s(e,t))).join(t?.delimiter??"")+n}function m(e,t){const[o,r,n]=_(e,t),i=C(t?.locale),a=P(t?.locale),s=t?.mergeAmbiguousCharacters?x(i,a):O(i,a);return o+r.map(s).join(t?.delimiter??"")+n}function T(e,t){return f(e,{delimiter:"_",...t})}function f(e,t){const[o,r,n]=_(e,t),i=C(t?.locale),a=P(t?.locale);return o+r.map(x(i,a)).join(t?.delimiter??" ")+n}function y(e,t){const[o,r,n]=_(e,t);return o+r.map(P(t?.locale)).join(t?.delimiter??"_")+n}function h(e,t){return p(e,{delimiter:".",...t})}function g(e,t){return p(e,{delimiter:"-",...t})}function k(e,t){return p(e,{delimiter:"/",...t})}function b(e,t){const[o,r,n]=_(e,t),i=C(t?.locale),a=P(t?.locale),s=x(i,a);return o+r.map(((e,t)=>0===t?s(e):i(e))).join(t?.delimiter??" ")+n}function S(e,t){return p(e,{delimiter:"_",...t})}function v(e,t){return f(e,{delimiter:"-",...t})}function C(e){return!1===e?e=>e.toLowerCase():t=>t.toLocaleLowerCase(e)}function P(e){return!1===e?e=>e.toUpperCase():t=>t.toLocaleUpperCase(e)}function x(e,t){return o=>`${t(o[0])}${e(o.slice(1))}`}function O(e,t){return(o,r)=>{const n=o[0];return(r>0&&n>="0"&&n<="9"?"_"+n:t(n))+e(o.slice(1))}}function _(e,t={}){const o=t.split??(t.separateNumbers?u:c),r=t.prefixCharacters??l,n=t.suffixCharacters??l;let i=0,a=e.length;for(;i<e.length;){const t=e.charAt(i);if(!r.includes(t))break;i++}for(;a>i;){const t=a-1,o=e.charAt(t);if(!n.includes(o))break;a=t}return[e.slice(0,i),o(e.slice(i,a)),e.slice(a)]}},"./config.ts":
/*!*******************!*\
  !*** ./config.ts ***!
  \*******************/(e,t)=>{"use strict";var o,r;Object.defineProperty(t,"__esModule",{value:!0}),t.TokenNameStructure=t.FileStructure=void 0,function(e){e.SeparateByType="separateByType",e.SingleFile="singleFile"}(o||(t.FileStructure=o={})),function(e){e.PathAndName="pathAndName",e.NameOnly="nameOnly",e.CollectionPathAndName="collectionPathAndName"}(r||(t.TokenNameStructure=r={}))},"./src/constants/defaults.ts":
/*!***********************************!*\
  !*** ./src/constants/defaults.ts ***!
  \***********************************/(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DEFAULT_TOKEN_PREFIXES=t.DEFAULT_TOKEN_TYPE_FILE_NAMES=void 0,t.DEFAULT_TOKEN_TYPE_FILE_NAMES={Color:"ColorTokens.kt",Typography:"TypographyTokens.kt",Dimension:"DimensionTokens.kt",Size:"SizeTokens.kt",Space:"SpaceTokens.kt",Opacity:"OpacityTokens.kt",FontSize:"FontSizeTokens.kt",LineHeight:"LineHeightTokens.kt",LetterSpacing:"LetterSpacingTokens.kt",ParagraphSpacing:"ParagraphSpacingTokens.kt",BorderWidth:"BorderWidthTokens.kt",BorderRadius:"BorderRadiusTokens.kt",Duration:"DurationTokens.kt",ZIndex:"ZIndexTokens.kt",Shadow:"ShadowTokens.kt",Border:"BorderTokens.kt",Gradient:"GradientTokens.kt",String:"StringTokens.kt",ProductCopy:"ProductCopyTokens.kt",FontFamily:"FontFamilyTokens.kt",FontWeight:"FontWeightTokens.kt",TextCase:"TextCaseTokens.kt",TextDecoration:"TextDecorationTokens.kt",Visibility:"VisibilityTokens.kt",Blur:"BlurTokens.kt"},t.DEFAULT_TOKEN_PREFIXES={Color:"color",Typography:"typography",Dimension:"dimension",Size:"size",Space:"space",Opacity:"opacity",FontSize:"fontSize",LineHeight:"lineHeight",LetterSpacing:"letterSpacing",ParagraphSpacing:"paragraphSpacing",BorderWidth:"borderWidth",BorderRadius:"borderRadius",Duration:"duration",ZIndex:"zIndex",Shadow:"shadow",Border:"border",Gradient:"gradient",String:"string",ProductCopy:"productCopy",FontFamily:"fontFamily",FontWeight:"fontWeight",TextCase:"textCase",TextDecoration:"textDecoration",Visibility:"visibility",Blur:"blur"}},"./src/content/token.ts":
/*!******************************!*\
  !*** ./src/content/token.ts ***!
  \******************************/(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.resetTokenNameTracking=function(){l.reset()},t.tokenPropertyName=c,t.convertedToken=function(e,t,o,i=[],l){const u=c(e,o,i),p={colorFormat:r.ColorFormat.hex8,allowReferences:n.exportConfiguration.useReferences,decimals:0,indent:n.exportConfiguration.indent,tokenToVariableRef:t=>{const r=c(t,o,i);if(t.tokenType===e.tokenType||n.exportConfiguration.fileStructure===a.FileStructure.SingleFile)return r;return`${(0,s.getObjectNameFromTokenType)(t.tokenType)}.${r}`}},d=r.KotlinHelper.tokenValue(e,t,p,l),m=r.GeneralHelper.indent(n.exportConfiguration.indent),T=n.exportConfiguration.showDescriptions&&e.description?.trim()?`/** ${e.description.trim()} */\n${m}`:"";return`${m}${T}val ${u} = ${d}`};const r=o(/*! @supernovaio/export-utils */"../../utils/dist/index.js"),n=o(/*! .. */"./src/index.ts"),i=o(/*! ../constants/defaults */"./src/constants/defaults.ts"),a=o(/*! ../../config */"./config.ts"),s=o(/*! ../utils/object-utils */"./src/utils/object-utils.ts"),l=new r.TokenNameTracker;function c(e,t,o,s=!1){let c=null;n.exportConfiguration.tokenNameStructure===a.TokenNameStructure.CollectionPathAndName&&e.collectionId&&(c=o.find((t=>t.persistentId===e.collectionId))??{name:e.collectionId});const u=[n.exportConfiguration.globalNamePrefix,(p=e.tokenType,n.exportConfiguration.customizeTokenPrefixes?n.exportConfiguration.tokenPrefixes[p]:i.DEFAULT_TOKEN_PREFIXES[p]),c?.name].filter(Boolean).join("");var p;return l.getTokenName(e,t,r.StringCase.camelCase,u,!1,"Copy")}},"./src/files/index-file.ts":
/*!*********************************!*\
  !*** ./src/files/index-file.ts ***!
  \*********************************/(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.indexFiles=function(e,t){if(!n.exportConfiguration.generateIndexFile)return[];if(n.exportConfiguration.fileStructure===i.FileStructure.SingleFile)return[];const o=[...new Set(e.map((e=>e.tokenType)))],a=Array();n.exportConfiguration.exportBaseValues&&a.push(l(void 0,o));return t?.map((t=>{const i=n.exportConfiguration.exportOnlyThemedTokens?o.filter((o=>r.ThemeHelper.hasThemedTokens(e,o,t))):o;return l(t,i)})).map((e=>a.push(e))),a};const r=o(/*! @supernovaio/export-utils */"../../utils/dist/index.js"),n=o(/*! .. */"./src/index.ts"),i=o(/*! ../../config */"./config.ts"),a=o(/*! ../utils/package-utils */"./src/utils/package-utils.ts"),s=o(/*! ../utils/object-utils */"./src/utils/object-utils.ts");function l(e,t){const o=r.FileNameHelper.ensureFileExtension(n.exportConfiguration.indexFileName,".kt"),i=r.GeneralHelper.indent(n.exportConfiguration.indent);let l=`package ${(0,a.getPackageName)(e)}\n\nimport androidx.compose.runtime.Immutable\n\n@Immutable\nobject ${(0,s.getObjectNameFromFileName)(o)} {\n`+t.map((e=>{const t=(0,s.getObjectNameFromTokenType)(e);let o=r.NamingHelper.codeSafeVariableName(t,r.StringCase.camelCase);return`${i}val ${o} = ${t}`})).join("\n")+"\n}";const c=e?`./${r.ThemeHelper.getThemeIdentifier(e,r.StringCase.camelCase)}`:n.exportConfiguration.nonThemedFilePath;return n.exportConfiguration.showGeneratedFileDisclaimer&&(l=r.GeneralHelper.addDisclaimer(n.exportConfiguration.disclaimer,l)),r.FileHelper.createTextFile({relativePath:c,fileName:o,content:l})}},"./src/files/object-file.ts":
/*!**********************************!*\
  !*** ./src/files/object-file.ts ***!
  \**********************************/(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.generateObjectFiles=function(e,t,o,l){if((0,i.resetTokenNameTracking)(),!n.exportConfiguration.exportBaseValues&&!o)return[];if(n.exportConfiguration.fileStructure===a.FileStructure.SingleFile){const i=function(e,t,o,i=[]){let a=e;if(o&&n.exportConfiguration.exportOnlyThemedTokens&&(a=r.ThemeHelper.filterThemedTokens(a,o),0===a.length))return null;if(!n.exportConfiguration.generateEmptyFiles&&0===a.length)return null;const s=r.FileNameHelper.ensureFileExtension(n.exportConfiguration.singleFileName,"kt"),l=o?`./${r.ThemeHelper.getThemeIdentifier(o,r.StringCase.camelCase)}`:n.exportConfiguration.nonThemedFilePath,c=u(a,s,o,e,t,i);return r.FileHelper.createTextFile({relativePath:l,fileName:s,content:c})}(e,t,o,l);return i?[i]:[]}return[...new Set(e.map((e=>e.tokenType)))].map((i=>function(e,t,o,i,a){if(!n.exportConfiguration.exportBaseValues&&!i)return null;let l=t.filter((t=>t.tokenType===e));if(i&&n.exportConfiguration.exportOnlyThemedTokens&&(l=r.ThemeHelper.filterThemedTokens(l,i),0===l.length))return null;if(!n.exportConfiguration.generateEmptyFiles&&0===l.length)return null;let c=(0,s.getTokenTypeFileName)(e);const p=i?`./${r.ThemeHelper.getThemeIdentifier(i,r.StringCase.camelCase)}`:n.exportConfiguration.nonThemedFilePath,d=u(l,c,i,t,o,a);return r.FileHelper.createTextFile({relativePath:p,fileName:c,content:d})}(i,e,t,o,l))).filter((e=>null!==e))};const r=o(/*! @supernovaio/export-utils */"../../utils/dist/index.js"),n=o(/*! .. */"./src/index.ts"),i=o(/*! ../content/token */"./src/content/token.ts"),a=o(/*! ../../config */"./config.ts"),s=o(/*! ../utils/file-utils */"./src/utils/file-utils.ts"),l=o(/*! ../utils/object-utils */"./src/utils/object-utils.ts"),c=o(/*! ../utils/package-utils */"./src/utils/package-utils.ts");function u(e,t,o,a,s,u){const p=`package ${(0,c.getPackageName)(o)}`,d=new r.ImportCollector(n.exportConfiguration.rPackageName||n.exportConfiguration.packageNamePrefix),m=`@Immutable\nobject ${(0,l.getObjectNameFromFileName)(t)}`,T=new Map(a.map((e=>[e.id,e]))),f=[...e].sort(((e,t)=>{const o=!!e?.value?.referencedTokenId;return o===!!t?.value?.referencedTokenId?0:o?1:-1})).map((e=>(0,i.convertedToken)(e,T,s,u,d))).join("\n");let y=`${p}\n\n${["import androidx.compose.runtime.Immutable",...d.allImports()].sort().join("\n")}\n\n${m} {\n${f}\n}`;return n.exportConfiguration.showGeneratedFileDisclaimer&&(y=r.GeneralHelper.addDisclaimer(n.exportConfiguration.disclaimer,y)),y}},"./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.exportConfiguration=void 0;const r=o(/*! ./files/object-file */"./src/files/object-file.ts"),n=o(/*! @supernovaio/export-utils */"../../utils/dist/index.js"),i=o(/*! ./content/token */"./src/content/token.ts"),a=o(/*! ./files/index-file */"./src/files/index-file.ts");t.exportConfiguration=Pulsar.exportConfig(),Pulsar.export((async(e,o)=>{const s={designSystemId:o.dsId,versionId:o.versionId};let l=[],c=await e.tokens.getTokens(s),u=await e.tokens.getTokenGroups(s),p=await e.tokens.getTokenCollections(s);if(o.brandId){const t=(await e.brands.getBrands(s)).find((e=>e.id===o.brandId||e.idInVersion===o.brandId));if(!t)throw new Error(`Unable to find brand ${o.brandId}.`);c=c.filter((e=>e.brandId===t.id)),u=u.filter((e=>e.brandId===t.id))}if(o.themeIds&&o.themeIds.length>0){const n=await e.tokens.getTokenThemes(s),i=o.themeIds.map((e=>{const t=n.find((t=>t.id===e||t.idInVersion===e));if(!t)throw new Error(`Unable to find theme ${e}.`);return t})),d=i.flatMap((t=>{const o=e.tokens.computeTokensByApplyingThemes(c,c,[t]);return(0,r.generateObjectFiles)(o,u,t,p)}));l=[...t.exportConfiguration.exportBaseValues?(0,r.generateObjectFiles)(c,u,void 0,p):[],...d,...(0,a.indexFiles)(c,i)]}else l=[...t.exportConfiguration.exportBaseValues?(0,r.generateObjectFiles)(c,u,void 0,p):[],...(0,a.indexFiles)(c,void 0)];if(!o.isPreview&&t.exportConfiguration.writeNameToProperty){const o=new n.WriteTokenPropStore(e,s);await o.writeTokenProperties(t.exportConfiguration.propertyToWriteNameTo,c,(e=>(0,i.tokenPropertyName)(e,u,p)))}return l}))},"./src/utils/file-utils.ts":
/*!*********************************!*\
  !*** ./src/utils/file-utils.ts ***!
  \*********************************/(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getTokenTypeFileName=function(e){const t=n.exportConfiguration.customizeSeparatedByTypeFileNames?n.exportConfiguration.separatedByTypeFileNames[e]:i.DEFAULT_TOKEN_TYPE_FILE_NAMES[e];return r.FileNameHelper.ensureFileExtension(t,"kt")};const r=o(/*! @supernovaio/export-utils */"../../utils/dist/index.js"),n=o(/*! .. */"./src/index.ts"),i=o(/*! ../constants/defaults */"./src/constants/defaults.ts")},"./src/utils/object-utils.ts":
/*!***********************************!*\
  !*** ./src/utils/object-utils.ts ***!
  \***********************************/(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getObjectNameFromFileName=n,t.getObjectNameFromTokenType=function(e){return n((0,r.getTokenTypeFileName)(e))};const r=o(/*! ./file-utils */"./src/utils/file-utils.ts");function n(e){return e.endsWith(".kt")?e.slice(0,-3):e}},"./src/utils/package-utils.ts":
/*!************************************!*\
  !*** ./src/utils/package-utils.ts ***!
  \************************************/(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getPackageName=function(e){const t=e?r.ThemeHelper.getThemeIdentifier(e,r.StringCase.camelCase):r.NamingHelper.codeSafeVariableName(n.exportConfiguration.nonThemedFilePath,r.StringCase.dotCase);return[n.exportConfiguration.packageNamePrefix,t].filter(Boolean).join(".")};const r=o(/*! @supernovaio/export-utils */"../../utils/dist/index.js"),n=o(/*! ../index */"./src/index.ts")}},t={};function o(r){var n=t[r];if(void 0!==n)return n.exports;var i=t[r]={exports:{}};return e[r].call(i.exports,i,i.exports,o),i.exports}o.d=(e,t)=>{for(var r in t)o.o(t,r)&&!o.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};o("./src/index.ts")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,