(()=>{var e={"./node_modules/@supernovaio/sdk-exporters/build/supernova-sdk-typescript.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@supernovaio/sdk-exporters/build/supernova-sdk-typescript.js ***!
  \***********************************************************************************/(e,t)=>{(()=>{"use strict";var e={4379:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.SupernovaError=void 0;class o extends Error{constructor(e,t,o,r,n,i,a){super(e),this.code=t,this.status=o,this.formErrors=r,this.requestId=n,this.serverTime=i,this.url=a}static fromNetworkResponse(e,t,r){var n,i,a;return new o(e.message,e.errorCode||e.reason||e.label||null,e.code||t,null!==(n=e.formErrors)&&void 0!==n?n:null,null!==(i=e.requestId)&&void 0!==i?i:null,null!==(a=e.serverTime)&&void 0!==a?a:null,r)}static fromNoNetworkResponse(e){return new o("No network or internet unreachable","NO_NETWORK",12163,null,(new Date).toISOString(),null,e)}static fromCode(e){return new o(e,e,null,null,null,null,null)}static fromMessage(e){return new o(e,null,null,null,null,null,null)}isFieldErrored(e){return void 0!==this.formErrors.find((t=>t.key===e))}errorForField(e){var t;return null!==(t=this.formErrors.find((t=>t.key===e)))&&void 0!==t?t:null}toString(){var e,t,o,r,n,i;return`\n    Error thrown: ${this.message}\n\n    Code: ${null!==(e=this.code)&&void 0!==e?e:"-"}\n\n    Status: ${null!==(t=this.status)&&void 0!==t?t:"-"}\n\n    Fields: ${JSON.stringify(this.formErrors,null,2)}\n\n    Request ID: ${null!==(o=this.requestId)&&void 0!==o?o:"-"}\n\n    Server time: ${null!==(r=this.serverTime)&&void 0!==r?r:"-"}\n\n    Network URL: ${null!==(n=this.url)&&void 0!==n?n:"-"}\n\n    Stack: ${null!==(i=this.stack)&&void 0!==i?i:"-"}\n    `}toHumanReadable(){return`${this.message}${this.requestId?` (request ${this.requestId})`:""}`}}t.SupernovaError=o},9932:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.docsImageRefToUrl=t.DocsImageRefType=void 0,function(e){e.resource="Resource",e.figmaNode="FigmaNode"}(o||(t.DocsImageRefType=o={})),t.docsImageRefToUrl=function(e,t,r){var n;if(e)switch(e.type){case o.resource:return null===(n=e.resource)||void 0===n?void 0:n.url;case o.figmaNode:if(!e.figmaNode||!e.figmaNode.sourceId||!e.figmaNode.frameReferenceId)return;return t.resources.getFigmaFrameHostedUrl({designSystemId:r.dsId,versionId:r.versionId},e.figmaNode.frameReferenceId);default:return}}},5673:(e,t)=>{var o;function r(e){switch(e.type){case o.documentationItem:return`@page:${e.documentationItemId}`;case o.pageHeading:return`@page:${e.documentationItemId}#${e.pageHeadingId}`;case o.url:return e.url;default:return}}Object.defineProperty(t,"__esModule",{value:!0}),t.linkAttributeToDocsLink=t.docsLinkToLinkAttributes=t.docsLinkToUrl=t.DocsLinkRefType=void 0,function(e){e.documentationItem="DocumentationItem",e.pageHeading="PageHeading",e.url="Url"}(o||(t.DocsLinkRefType=o={})),t.docsLinkToUrl=r,t.docsLinkToLinkAttributes=function(e){const t=r(e);if(t)return{href:t,target:e.openInNewTab?"_blank":"_self"}},t.linkAttributeToDocsLink=function(e,t){if(!e)return;const r="_blank"===t;if(e.startsWith("@page:")){if(e.includes("#")){const[t,n]=e.replace("@page:","").split("#");return{type:o.pageHeading,documentationItemId:t,pageHeadingId:n,openInNewTab:r}}return{type:o.documentationItem,documentationItemId:e.replace("@page:",""),openInNewTab:r}}return{type:o.url,url:e,openInNewTab:r}}},2657:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyPageBlockShortcut=t.DocumentationLegacyPageBlockShortcutType=void 0,function(e){e.external="External",e.internal="Internal"}(o||(t.DocumentationLegacyPageBlockShortcutType=o={})),t.DocumentationLegacyPageBlockShortcut=class{constructor(e){var t;e.url?this.type=o.external:this.type=o.internal,this.title=this.shortcutTitleFromModel(e,this.type),this.description=this.shortcutDescriptionFromModel(e,this.type),this.previewUrl=this.shortcutPreviewUrlFromModel(e),this.type===o.internal&&(null===(t=e.documentationItemPreview)||void 0===t?void 0:t.valid)&&e.documentationItemId?this.internalId=e.documentationItemId:(this.internalId=null,this.type===o.external&&e.url?this.externalUrl=e.url:this.externalUrl=null)}shortcutTitleFromModel(e,t){var r,n,i,a,l;let s=null;return e.title&&e.title.trim().length>0?s=e.title:t===o.internal?s=null!==(n=null===(r=e.documentationItemPreview)||void 0===r?void 0:r.title)&&void 0!==n?n:null:t===o.external&&(s=null!==(l=null!==(a=null===(i=e.urlPreview)||void 0===i?void 0:i.title)&&void 0!==a?a:e.url)&&void 0!==l?l:null),s&&0!==s.trim().length?s:null}shortcutDescriptionFromModel(e,t){var r;let n=null;return e.description&&e.description.trim().length>0?n=e.description:t===o.external&&(n=null===(r=e.urlPreview)||void 0===r?void 0:r.description),n&&0!==n.trim().length?n:null}shortcutPreviewUrlFromModel(e){var t,o,r,n,i;return null!==(i=null!==(r=null!==(t=e.assetUrl)&&void 0!==t?t:null===(o=e.asset)||void 0===o?void 0:o.url)&&void 0!==r?r:null===(n=e.urlPreview)||void 0===n?void 0:n.thumbnailUrl)&&void 0!==i?i:null}}},7476:(e,t)=>{var o,r;Object.defineProperty(t,"__esModule",{value:!0}),t.TextAlignment=t.Alignment=void 0,function(e){e.left="Left",e.center="Center",e.stretch="Stretch"}(o||(t.Alignment=o={})),function(e){e.left="Left",e.center="Center",e.right="Right"}(r||(t.TextAlignment=r={}))},8738:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.AssetFormat=void 0,function(e){e.png="png",e.pdf="pdf",e.svg="svg"}(o||(t.AssetFormat=o={}))},915:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.AssetScale=void 0,function(e){e.x1="x1",e.x2="x2",e.x3="x3",e.x4="x4"}(o||(t.AssetScale=o={}))},899:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.AssetScaleType=void 0,function(e){e.aspectFill="AspectFill",e.aspectFit="AspectFit"}(o||(t.AssetScaleType=o={}))},6192:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.BlurType=void 0,function(e){e.layer="Layer",e.background="Background"}(o||(t.BlurType=o={}))},1160:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.ALL_BORDER_POSITIONS=t.BorderPosition=void 0,function(e){e.inside="Inside",e.center="Center",e.outside="Outside"}(o||(t.BorderPosition=o={})),t.ALL_BORDER_POSITIONS=[o.inside,o.center,o.outside]},4546:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.ALL_BORDER_STYLES=t.BorderStyle=void 0,function(e){e.dashed="Dashed",e.dotted="Dotted",e.solid="Solid",e.groove="Groove"}(o||(t.BorderStyle=o={})),t.ALL_BORDER_STYLES=[o.dashed,o.dotted,o.solid,o.groove]},8042:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.ImportWarningType=void 0,function(e){e.UnsupportedFill="UnsupportedFill",e.UnsupportedStroke="UnsupportedStroke",e.UnsupportedEffect="UnsupportedEffect",e.StyleNotApplied="StyleNotApplied",e.NoPublishedStyles="NoPublishedStyles",e.NoPublishedComponents="NoPublishedComponents",e.NoPublishedAssets="NoPublishedAssets",e.NoVersionFound="NoVersionFound",e.ComponentHasNoThumbnail="ComponentHasNoThumbnail",e.DuplicateImportedStyleId="DuplicateImportedStyleId",e.DuplicateImportedStylePath="DuplicateImportedStylePath",e.NoPublishedElements="NoPublishedElements",e.NoUnpublishedStyles="NoUnpublishedStyles"}(o||(t.ImportWarningType=o={}))},5695:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.CustomDomainErrorCode=void 0,function(e){e.generalError="GeneralError",e.dnsNotConfigured="DNSNotConfigured",e.maintenance="Maintenance"}(o||(t.CustomDomainErrorCode=o={}))},7737:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.CustomDomainState=void 0,function(e){e.initial="Initial",e.domainSetupInProgress="DomainSetupInProgress",e.domainSetupFailed="DomainSetupFailed",e.domainSetupsSucces="DomainSetupSuccess",e.sslSetupInProgress="SSLSetupInProgress",e.sslSetupFailed="SSLSetupFailed",e.sslSetupSuccess="SSLSetupSuccess"}(o||(t.CustomDomainState=o={}))},5651:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockBehaviorDataType=void 0,function(e){e.item="Item",e.token="Token",e.asset="Asset",e.component="Component",e.figmaNode="FigmaNode",e.figmaComponent="FigmaComponent"}(o||(t.DocsBlockBehaviorDataType=o={}))},3733:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockBehaviorSelectionType=void 0,function(e){e.entity="Entity",e.group="Group",e.entityAndGroup="EntityAndGroup"}(o||(t.DocsBlockBehaviorSelectionType=o={}))},8890:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockImagePropertyAspectRatio=void 0,function(e){e.auto="Auto",e.square="Square",e.landscape="Landscape",e.portrait="Portrait",e.wide="Wide"}(o||(t.DocsBlockImagePropertyAspectRatio=o={}))},9377:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockItemEntityType=void 0,function(e){e.token="Token",e.tokenGroup="TokenGroup",e.asset="Asset",e.assetGroup="AssetGroup",e.component="Component",e.componentGroup="ComponentGroup"}(o||(t.DocsBlockItemEntityType=o={}))},5883:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockItemPropertyOptionRenderingStyle=void 0,function(e){e.segmentedControl="SegmentedControl",e.toggleButton="ToggleButton",e.select="Select",e.checkbox="Checkbox"}(o||(t.DocsBlockItemPropertyOptionRenderingStyle=o={}))},8061:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockItemPropertyRichTextStyle=void 0,function(e){e.title1="Title1",e.title2="Title2",e.title3="Title3",e.title4="Title4",e.title5="Title5",e.quote="Quote",e.callout="Callout",e.ol="OL",e.ul="UL"}(o||(t.DocsBlockItemPropertyRichTextStyle=o={}))},7479:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockItemPropertyTextStyle=void 0,function(e){e.small="Small",e.regular="Regular",e.bold="Bold"}(o||(t.DocsBlockItemPropertyTextStyle=o={}))},6839:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockItemPropertyType=void 0,function(e){e.richText="RichText",e.multiRichText="MultiRichText",e.text="Text",e.richTextEditor="RichTextEditor",e.boolean="Boolean",e.number="Number",e.singleSelect="SingleSelect",e.multiSelect="MultiSelect",e.image="Image",e.token="Token",e.tokenType="TokenType",e.tokenProperty="TokenProperty",e.component="Component",e.componentProperty="ComponentProperty",e.asset="Asset",e.assetProperty="AssetProperty",e.embedURL="EmbedURL",e.url="URL",e.markdown="Markdown",e.code="Code",e.codeSandbox="CodeSandbox",e.table="Table",e.divider="Divider",e.storybook="Storybook",e.color="Color",e.figmaNode="FigmaNode",e.figmaComponent="FigmaComponent"}(o||(t.DocsBlockItemPropertyType=o={}))},8095:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockItemVariantLayoutType=void 0,function(e){e.column="Column",e.row="Row"}(o||(t.DocsBlockItemVariantLayoutType=o={}))},7291:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockItemVariantLayoutWidth=void 0,function(e){e.c1="1",e.c2="2",e.c3="3",e.c4="4",e.c5="5",e.c6="6",e.c7="7",e.c8="8",e.c9="9",e.c10="10",e.c11="11",e.c12="12"}(o||(t.DocsBlockItemVariantLayoutWidth=o={}))},9133:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockOptionColor=void 0,function(e){e.green="Green",e.red="Red",e.yellow="Yellow",e.blue="Blue",e.purple="Purple",e.orange="Orange",e.pink="Pink",e.teal="Teal",e.grey="Grey",e.lightGrey="LightGrey",e.cyan="Cyan",e.fuchsia="Fuchsia"}(o||(t.DocsBlockOptionColor=o={}))},5963:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockOptionRenderingStyle=void 0,function(e){e.segmentedControl="SegmentedControl",e.toggleButton="ToggleButton",e.select="Select",e.checkbox="Checkbox"}(o||(t.DocsBlockOptionRenderingStyle=o={}))},6644:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockRichTextPropertyStyle=void 0,function(e){e.title1="Title1",e.title2="Title2",e.title3="Title3",e.title4="Title4",e.title5="Title5",e.quote="Quote",e.callout="Callout",e.default="Default"}(o||(t.DocsBlockRichTextPropertyStyle=o={}))},306:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockTextPropertyStyle=void 0,function(e){e.title1="Title1",e.title2="Title2",e.title3="Title3",e.title4="Title4",e.title5="Title5",e.default="Default",e.defaultBold="DefaultBold",e.defaultSemibold="DefaultSemibold",e.small="Small",e.smallBold="SmallBold",e.smallSemibold="SmallSemibold",e.custom="Custom"}(o||(t.DocsBlockTextPropertyStyle=o={}))},4068:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsEntityGroupBehavior=void 0,function(e){e.group="Group",e.tabs="Tabs"}(o||(t.DocsEntityGroupBehavior=o={}))},1233:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsEntityType=void 0,function(e){e.group="Group",e.page="Page"}(o||(t.DocsEntityType=o={}))},7971:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsSectionType=void 0,function(e){e.plain="Plain",e.tabs="Tabs"}(o||(t.DocsSectionType=o={}))},5102:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyCalloutType=void 0,function(e){e.info="Info",e.success="Success",e.warning="Warning",e.error="Error"}(o||(t.DocumentationLegacyCalloutType=o={}))},2123:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyGroupBehavior=void 0,function(e){e.group="Group",e.tabs="Tabs"}(o||(t.DocumentationLegacyGroupBehavior=o={}))},9896:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyHeadingType=void 0,function(e){e[e.h1=1]="h1",e[e.h2=2]="h2",e[e.h3=3]="h3"}(o||(t.DocumentationLegacyHeadingType=o={}))},7379:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyItemType=void 0,function(e){e.group="Group",e.page="Page"}(o||(t.DocumentationLegacyItemType=o={}))},1423:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyPageAssetType=void 0,function(e){e.image="image",e.figmaFrame="figmaFrame"}(o||(t.DocumentationLegacyPageAssetType=o={}))},1601:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyPageBlockThemeType=void 0,function(e){e.override="Override",e.comparison="Comparison"}(o||(t.DocumentationLegacyPageBlockThemeType=o={}))},1846:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyPageBlockType=void 0,function(e){e.text="Text",e.heading="Heading",e.code="Code",e.unorderedList="UnorderedList",e.orderedList="OrderedList",e.quote="Quote",e.callout="Callout",e.divider="Divider",e.image="Image",e.token="Token",e.tokenList="TokenList",e.tokenGroup="TokenGroup",e.shortcuts="Shortcuts",e.link="Link",e.figmaEmbed="FigmaEmbed",e.youtubeEmbed="YoutubeEmbed",e.storybookEmbed="StorybookEmbed",e.genericEmbed="Embed",e.figmaFrames="FigmaFrames",e.custom="Custom",e.renderCode="RenderCode",e.componentAssets="ComponentAssets",e.column="Column",e.columnItem="ColumnItem",e.tabs="Tabs",e.tabItem="TabItem",e.table="Table",e.tableCell="TableCell",e.tableRow="TableRow"}(o||(t.DocumentationLegacyPageBlockType=o={}))},1255:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.FrameAlignment=void 0,function(e){e.frameHeight="FrameHeight",e.center="Center"}(o||(t.FrameAlignment=o={}))},3718:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.FrameLayout=void 0,function(e){e.c8="C8",e.c7="C7",e.c6="C6",e.c5="C5",e.c4="C4",e.c3="C3",e.c2="C2",e.c1="C1",e.c175="C1_75"}(o||(t.FrameLayout=o={}))},1:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.GradientType=void 0,function(e){e.linear="Linear",e.radial="Radial",e.angular="Angular"}(o||(t.GradientType=o={}))},934:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.IconSet=void 0,function(e){e.checkCircle="CheckCircle",e.crossCircle="CrossCircle",e.alert="Alert"}(o||(t.IconSet=o={}))},2674:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.RichTextSpanAttributeType=void 0,function(e){e.bold="Bold",e.italic="Italic",e.link="Link",e.strikethrough="Strikethrough",e.code="Code"}(o||(t.RichTextSpanAttributeType=o={}))},9125:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.ShadowType=void 0,function(e){e.drop="Drop",e.inner="Inner"}(o||(t.ShadowType=o={}))},4652:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.SourceType=void 0,function(e){e.figma="Figma",e.tokenStudio="TokenStudio",e.figmaVariablesPlugin="FigmaVariablesPlugin"}(o||(t.SourceType=o={}))},922:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.TextCase=void 0,function(e){e.original="Original",e.upper="Upper",e.lower="Lower",e.camel="Camel",e.smallCaps="SmallCaps"}(o||(t.TextCase=o={}))},7040:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.TextDecoration=void 0,function(e){e.original="None",e.underline="Underline",e.strikethrough="Strikethrough"}(o||(t.TextDecoration=o={}))},3788:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DT_TOKEN_TYPES=t.tokenTypeIsReferencable=t.REFERENCABLE_TOKEN_TYPES=t.REPLACABLE_TOKEN_TYPES=t.tokenTypeIsNonPure=t.tokenTypeIsPure=t.PURE_TOKEN_TYPES=t.ALL_TOKEN_TYPES=t.MS_DIMENSION_TOKEN_TYPES=t.RAW_DIMENSION_TOKEN_TYPES=t.DIMENSION_TOKEN_TYPES=t.OPTION_TOKEN_TYPES=t.STRING_TOKEN_TYPES=t.TokenType=void 0,function(e){e.color="Color",e.typography="Typography",e.shadow="Shadow",e.border="Border",e.gradient="Gradient",e.blur="Blur",e.radius="BorderRadius",e.borderWidth="BorderWidth",e.duration="Duration",e.fontSize="FontSize",e.dimension="Dimension",e.letterSpacing="LetterSpacing",e.lineHeight="LineHeight",e.opacity="Opacity",e.paragraphSpacing="ParagraphSpacing",e.size="Size",e.space="Space",e.zIndex="ZIndex",e.textDecoration="TextDecoration",e.textCase="TextCase",e.visibility="Visibility",e.fontFamily="FontFamily",e.fontWeight="FontWeight",e.string="String",e.productCopy="ProductCopy"}(o||(t.TokenType=o={})),t.STRING_TOKEN_TYPES=[o.string,o.productCopy,o.fontFamily,o.fontWeight],t.OPTION_TOKEN_TYPES=[o.textCase,o.textDecoration,o.visibility],t.DIMENSION_TOKEN_TYPES=[o.dimension,o.size,o.space,o.opacity,o.fontSize,o.lineHeight,o.letterSpacing,o.paragraphSpacing,o.borderWidth,o.radius,o.duration,o.zIndex],t.RAW_DIMENSION_TOKEN_TYPES=[o.opacity,o.zIndex],t.MS_DIMENSION_TOKEN_TYPES=[o.duration],t.ALL_TOKEN_TYPES=[...t.DIMENSION_TOKEN_TYPES,...t.STRING_TOKEN_TYPES,...t.OPTION_TOKEN_TYPES,o.color,o.gradient,o.border,o.radius,o.shadow,o.typography,o.blur],t.PURE_TOKEN_TYPES=[...t.DIMENSION_TOKEN_TYPES,...t.STRING_TOKEN_TYPES,...t.OPTION_TOKEN_TYPES],t.tokenTypeIsPure=e=>t.PURE_TOKEN_TYPES.includes(e),t.tokenTypeIsNonPure=e=>!(0,t.tokenTypeIsPure)(e),t.REPLACABLE_TOKEN_TYPES=[o.color,...t.DIMENSION_TOKEN_TYPES,...t.STRING_TOKEN_TYPES,...t.OPTION_TOKEN_TYPES],t.REFERENCABLE_TOKEN_TYPES=[o.color,...t.DIMENSION_TOKEN_TYPES,o.fontFamily,o.fontWeight,o.textCase,o.textDecoration],t.tokenTypeIsReferencable=e=>t.REFERENCABLE_TOKEN_TYPES.includes(e),t.DT_TOKEN_TYPES=[o.color,o.shadow,o.gradient,o.typography,o.border,...t.DIMENSION_TOKEN_TYPES,o.fontFamily,o.fontWeight,o.string,...t.OPTION_TOKEN_TYPES]},8607:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.MS_UNITS=t.PX_UNITS=t.RAW_UNITS=t.LINE_HEIGHT_UNITS=t.SIZE_UNITS=t.Unit=void 0,function(e){e.pixels="Pixels",e.percent="Percent",e.rem="Rem",e.ms="Ms",e.raw="Raw"}(o||(t.Unit=o={})),t.SIZE_UNITS=[o.pixels,o.percent,o.rem],t.LINE_HEIGHT_UNITS=[o.pixels,o.percent,o.rem,o.raw],t.RAW_UNITS=[o.raw],t.PX_UNITS=[o.pixels],t.MS_UNITS=[o.ms]},9478:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.convertRemoteToUserRole=t.UserRole=void 0;const r=o(4379);var n;!function(e){e.owner="Owner",e.admin="Admin",e.creator="Creator",e.contributor="Contributor",e.billing="Billing",e.viewer="Viewer"}(n||(t.UserRole=n={})),t.convertRemoteToUserRole=e=>{switch(e){case"Owner":return n.owner;case"Admin":return n.admin;case"Creator":return n.creator;case"Contributor":return n.contributor;case"Billing":return n.billing;case"Viewer":return n.viewer;default:throw r.SupernovaError.fromMessage(`Unknown role: ${e}`)}}},6141:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.VisibilityType=void 0,function(e){e.visible="Visible",e.hidden="Hidden"}(o||(t.VisibilityType=o={}))},6298:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.WorkspaceNPMRegistryAuthType=void 0,function(e){e.basic="Basic",e.bearer="Bearer"}(o||(t.WorkspaceNPMRegistryAuthType=o={}))},7968:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.WorkspaceNPMRegistryType=void 0,function(e){e.npmJS="NPMJS",e.gitHub="GitHub",e.azureDevOps="AzureDevOps",e.artifactory="Artifactory",e.custom="Custom"}(o||(t.WorkspaceNPMRegistryType=o={}))},5503:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.WorkspaceSubscriptionPlanInterval=void 0,function(e){e.yearly="yearly",e.monthly="monthly"}(o||(t.WorkspaceSubscriptionPlanInterval=o={}))},4290:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.WorkspaceSubscriptionProductCode=void 0,function(e){e.free="free",e.team="team",e.teamTest="team_test",e.company="company",e.enterprise="enterprise"}(o||(t.WorkspaceSubscriptionProductCode=o={}))},3607:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.WorkspaceSubscriptionStatus=void 0,function(e){e.active="active",e.gracePeriod="gracePeriod",e.cancelled="cancelled",e.suspended="suspended"}(o||(t.WorkspaceSubscriptionStatus=o={}))},2802:(e,t)=>{var o,r;Object.defineProperty(t,"__esModule",{value:!0}),t.PulsarExecutor=t.OutputFileType=void 0,function(e){e.copyRemoteUrl="copyRemoteUrl",e.text="text",e.binary="binary"}(o||(t.OutputFileType=o={})),function(e){e.supernova="supernova",e.local="local"}(r||(t.PulsarExecutor=r={}))}},o={};function r(t){var n=o[t];if(void 0!==n)return n.exports;var i=o[t]={exports:{}};return e[t](i,i.exports,r),i.exports}var n={};(()=>{var e=n;Object.defineProperty(e,"__esModule",{value:!0}),e.TokenType=e.TextDecoration=e.TextCase=e.ShadowType=e.RichTextSpanAttributeType=e.GradientType=e.FrameLayout=e.FrameAlignment=e.IconSet=e.SourceType=e.DocsImageRefType=e.DocsLinkRefType=e.DocsSectionType=e.DocsEntityType=e.DocsEntityGroupBehavior=e.DocsBlockTextPropertyStyle=e.DocsBlockRichTextPropertyStyle=e.DocsBlockOptionColor=e.DocsBlockOptionRenderingStyle=e.DocsBlockItemVariantLayoutWidth=e.DocsBlockItemVariantLayoutType=e.DocsBlockItemPropertyType=e.DocsBlockItemPropertyTextStyle=e.DocsBlockItemPropertyRichTextStyle=e.DocsBlockItemPropertyOptionRenderingStyle=e.DocsBlockItemEntityType=e.DocsBlockImagePropertyAspectRatio=e.DocsBlockBehaviorSelectionType=e.DocsBlockBehaviorDataType=e.DocumentationLegacyPageBlockShortcutType=e.DocumentationLegacyPageBlockThemeType=e.DocumentationLegacyPageBlockType=e.DocumentationLegacyPageAssetType=e.DocumentationLegacyItemType=e.DocumentationLegacyHeadingType=e.DocumentationLegacyGroupBehavior=e.DocumentationLegacyCalloutType=e.BorderStyle=e.BorderPosition=e.BlurType=e.AssetScaleType=e.AssetScale=e.AssetFormat=e.Alignment=e.ALL_TOKEN_TYPES=e.ALL_BORDER_STYLES=e.ALL_BORDER_POSITIONS=e.OPTION_TOKEN_TYPES=e.STRING_TOKEN_TYPES=e.DIMENSION_TOKEN_TYPES=void 0,e.PulsarExecutor=e.OutputFileType=e.CustomDomainState=e.CustomDomainErrorCode=e.ImportWarningType=e.WorkspaceNPMRegistryType=e.WorkspaceNPMRegistryAuthType=e.WorkspaceSubscriptionStatus=e.WorkspaceSubscriptionProductCode=e.WorkspaceSubscriptionPlanInterval=e.VisibilityType=e.UserRole=e.Unit=void 0;var t=r(3788);Object.defineProperty(e,"DIMENSION_TOKEN_TYPES",{enumerable:!0,get:function(){return t.DIMENSION_TOKEN_TYPES}}),Object.defineProperty(e,"STRING_TOKEN_TYPES",{enumerable:!0,get:function(){return t.STRING_TOKEN_TYPES}}),Object.defineProperty(e,"OPTION_TOKEN_TYPES",{enumerable:!0,get:function(){return t.OPTION_TOKEN_TYPES}});var o=r(1160);Object.defineProperty(e,"ALL_BORDER_POSITIONS",{enumerable:!0,get:function(){return o.ALL_BORDER_POSITIONS}});var i=r(4546);Object.defineProperty(e,"ALL_BORDER_STYLES",{enumerable:!0,get:function(){return i.ALL_BORDER_STYLES}});var a=r(3788);Object.defineProperty(e,"ALL_TOKEN_TYPES",{enumerable:!0,get:function(){return a.ALL_TOKEN_TYPES}});var l=r(7476);Object.defineProperty(e,"Alignment",{enumerable:!0,get:function(){return l.Alignment}});var s=r(8738);Object.defineProperty(e,"AssetFormat",{enumerable:!0,get:function(){return s.AssetFormat}});var c=r(915);Object.defineProperty(e,"AssetScale",{enumerable:!0,get:function(){return c.AssetScale}});var u=r(899);Object.defineProperty(e,"AssetScaleType",{enumerable:!0,get:function(){return u.AssetScaleType}});var p=r(6192);Object.defineProperty(e,"BlurType",{enumerable:!0,get:function(){return p.BlurType}});var d=r(1160);Object.defineProperty(e,"BorderPosition",{enumerable:!0,get:function(){return d.BorderPosition}});var m=r(4546);Object.defineProperty(e,"BorderStyle",{enumerable:!0,get:function(){return m.BorderStyle}});var T=r(5102);Object.defineProperty(e,"DocumentationLegacyCalloutType",{enumerable:!0,get:function(){return T.DocumentationLegacyCalloutType}});var y=r(2123);Object.defineProperty(e,"DocumentationLegacyGroupBehavior",{enumerable:!0,get:function(){return y.DocumentationLegacyGroupBehavior}});var f=r(9896);Object.defineProperty(e,"DocumentationLegacyHeadingType",{enumerable:!0,get:function(){return f.DocumentationLegacyHeadingType}});var g=r(7379);Object.defineProperty(e,"DocumentationLegacyItemType",{enumerable:!0,get:function(){return g.DocumentationLegacyItemType}});var h=r(1423);Object.defineProperty(e,"DocumentationLegacyPageAssetType",{enumerable:!0,get:function(){return h.DocumentationLegacyPageAssetType}});var b=r(1846);Object.defineProperty(e,"DocumentationLegacyPageBlockType",{enumerable:!0,get:function(){return b.DocumentationLegacyPageBlockType}});var S=r(1601);Object.defineProperty(e,"DocumentationLegacyPageBlockThemeType",{enumerable:!0,get:function(){return S.DocumentationLegacyPageBlockThemeType}});var k=r(2657);Object.defineProperty(e,"DocumentationLegacyPageBlockShortcutType",{enumerable:!0,get:function(){return k.DocumentationLegacyPageBlockShortcutType}});var v=r(5651);Object.defineProperty(e,"DocsBlockBehaviorDataType",{enumerable:!0,get:function(){return v.DocsBlockBehaviorDataType}});var P=r(3733);Object.defineProperty(e,"DocsBlockBehaviorSelectionType",{enumerable:!0,get:function(){return P.DocsBlockBehaviorSelectionType}});var O=r(8890);Object.defineProperty(e,"DocsBlockImagePropertyAspectRatio",{enumerable:!0,get:function(){return O.DocsBlockImagePropertyAspectRatio}});var C=r(9377);Object.defineProperty(e,"DocsBlockItemEntityType",{enumerable:!0,get:function(){return C.DocsBlockItemEntityType}});var _=r(5883);Object.defineProperty(e,"DocsBlockItemPropertyOptionRenderingStyle",{enumerable:!0,get:function(){return _.DocsBlockItemPropertyOptionRenderingStyle}});var x=r(8061);Object.defineProperty(e,"DocsBlockItemPropertyRichTextStyle",{enumerable:!0,get:function(){return x.DocsBlockItemPropertyRichTextStyle}});var I=r(7479);Object.defineProperty(e,"DocsBlockItemPropertyTextStyle",{enumerable:!0,get:function(){return I.DocsBlockItemPropertyTextStyle}});var D=r(6839);Object.defineProperty(e,"DocsBlockItemPropertyType",{enumerable:!0,get:function(){return D.DocsBlockItemPropertyType}});var N=r(8095);Object.defineProperty(e,"DocsBlockItemVariantLayoutType",{enumerable:!0,get:function(){return N.DocsBlockItemVariantLayoutType}});var E=r(7291);Object.defineProperty(e,"DocsBlockItemVariantLayoutWidth",{enumerable:!0,get:function(){return E.DocsBlockItemVariantLayoutWidth}});var R=r(5963);Object.defineProperty(e,"DocsBlockOptionRenderingStyle",{enumerable:!0,get:function(){return R.DocsBlockOptionRenderingStyle}});var B=r(9133);Object.defineProperty(e,"DocsBlockOptionColor",{enumerable:!0,get:function(){return B.DocsBlockOptionColor}});var j=r(6644);Object.defineProperty(e,"DocsBlockRichTextPropertyStyle",{enumerable:!0,get:function(){return j.DocsBlockRichTextPropertyStyle}});var F=r(306);Object.defineProperty(e,"DocsBlockTextPropertyStyle",{enumerable:!0,get:function(){return F.DocsBlockTextPropertyStyle}});var L=r(4068);Object.defineProperty(e,"DocsEntityGroupBehavior",{enumerable:!0,get:function(){return L.DocsEntityGroupBehavior}});var M=r(1233);Object.defineProperty(e,"DocsEntityType",{enumerable:!0,get:function(){return M.DocsEntityType}});var w=r(7971);Object.defineProperty(e,"DocsSectionType",{enumerable:!0,get:function(){return w.DocsSectionType}});var A=r(5673);Object.defineProperty(e,"DocsLinkRefType",{enumerable:!0,get:function(){return A.DocsLinkRefType}});var $=r(9932);Object.defineProperty(e,"DocsImageRefType",{enumerable:!0,get:function(){return $.DocsImageRefType}});var H=r(4652);Object.defineProperty(e,"SourceType",{enumerable:!0,get:function(){return H.SourceType}});var V=r(934);Object.defineProperty(e,"IconSet",{enumerable:!0,get:function(){return V.IconSet}});var W=r(1255);Object.defineProperty(e,"FrameAlignment",{enumerable:!0,get:function(){return W.FrameAlignment}});var U=r(3718);Object.defineProperty(e,"FrameLayout",{enumerable:!0,get:function(){return U.FrameLayout}});var K=r(1);Object.defineProperty(e,"GradientType",{enumerable:!0,get:function(){return K.GradientType}});var G=r(2674);Object.defineProperty(e,"RichTextSpanAttributeType",{enumerable:!0,get:function(){return G.RichTextSpanAttributeType}});var Y=r(9125);Object.defineProperty(e,"ShadowType",{enumerable:!0,get:function(){return Y.ShadowType}});var z=r(922);Object.defineProperty(e,"TextCase",{enumerable:!0,get:function(){return z.TextCase}});var q=r(7040);Object.defineProperty(e,"TextDecoration",{enumerable:!0,get:function(){return q.TextDecoration}});var J=r(3788);Object.defineProperty(e,"TokenType",{enumerable:!0,get:function(){return J.TokenType}});var Z=r(8607);Object.defineProperty(e,"Unit",{enumerable:!0,get:function(){return Z.Unit}});var X=r(9478);Object.defineProperty(e,"UserRole",{enumerable:!0,get:function(){return X.UserRole}});var Q=r(6141);Object.defineProperty(e,"VisibilityType",{enumerable:!0,get:function(){return Q.VisibilityType}});var ee=r(5503);Object.defineProperty(e,"WorkspaceSubscriptionPlanInterval",{enumerable:!0,get:function(){return ee.WorkspaceSubscriptionPlanInterval}});var te=r(4290);Object.defineProperty(e,"WorkspaceSubscriptionProductCode",{enumerable:!0,get:function(){return te.WorkspaceSubscriptionProductCode}});var oe=r(3607);Object.defineProperty(e,"WorkspaceSubscriptionStatus",{enumerable:!0,get:function(){return oe.WorkspaceSubscriptionStatus}});var re=r(6298);Object.defineProperty(e,"WorkspaceNPMRegistryAuthType",{enumerable:!0,get:function(){return re.WorkspaceNPMRegistryAuthType}});var ne=r(7968);Object.defineProperty(e,"WorkspaceNPMRegistryType",{enumerable:!0,get:function(){return ne.WorkspaceNPMRegistryType}});var ie=r(8042);Object.defineProperty(e,"ImportWarningType",{enumerable:!0,get:function(){return ie.ImportWarningType}});var ae=r(5695);Object.defineProperty(e,"CustomDomainErrorCode",{enumerable:!0,get:function(){return ae.CustomDomainErrorCode}});var le=r(7737);Object.defineProperty(e,"CustomDomainState",{enumerable:!0,get:function(){return le.CustomDomainState}});var se=r(2802);Object.defineProperty(e,"OutputFileType",{enumerable:!0,get:function(){return se.OutputFileType}}),Object.defineProperty(e,"PulsarExecutor",{enumerable:!0,get:function(){return se.PulsarExecutor}})})();var i=t;for(var a in n)i[a]=n[a];n.__esModule&&Object.defineProperty(i,"__esModule",{value:!0})})()},"./config.ts":
/*!*******************!*\
  !*** ./config.ts ***!
  \*******************/(e,t)=>{"use strict";var o,r,n,i;Object.defineProperty(t,"__esModule",{value:!0}),t.TokenNameStructure=t.TokenSortOrder=t.FileStructure=t.ThemeExportStyle=void 0,function(e){e.ApplyDirectly="applyDirectly",e.SeparateFiles="separateFiles",e.MergedTheme="mergedTheme",e.NestedThemes="nestedThemes"}(o||(t.ThemeExportStyle=o={})),function(e){e.SeparateByType="separateByType",e.SingleFile="singleFile"}(r||(t.FileStructure=r={})),function(e){e.Default="default",e.Alphabetical="alphabetical"}(n||(t.TokenSortOrder=n={})),function(e){e.PathAndName="pathAndName",e.NameOnly="nameOnly",e.CollectionPathAndName="collectionPathAndName"}(i||(t.TokenNameStructure=i={}))},"./src/constants/defaults.ts":
/*!***********************************!*\
  !*** ./src/constants/defaults.ts ***!
  \***********************************/(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DEFAULT_TOKEN_PREFIXES=t.DEFAULT_STYLE_FILE_NAMES=void 0,t.DEFAULT_STYLE_FILE_NAMES={Color:"color.json",Typography:"typography.json",Dimension:"dimension.json",Size:"size.json",Space:"space.json",Opacity:"opacity.json",FontSize:"font-size.json",LineHeight:"line-height.json",LetterSpacing:"letter-spacing.json",ParagraphSpacing:"paragraph-spacing.json",BorderWidth:"border-width.json",BorderRadius:"border-radius.json",Duration:"duration.json",ZIndex:"z-index.json",Shadow:"shadow.json",Border:"border.json",Gradient:"gradient.json",String:"string.json",ProductCopy:"product-copy.json",FontFamily:"font-family.json",FontWeight:"font-weight.json",TextCase:"text-case.json",TextDecoration:"text-decoration.json",Visibility:"visibility.json",Blur:"blur.json"},t.DEFAULT_TOKEN_PREFIXES={Color:"color",Typography:"typography",Dimension:"dimension",Size:"size",Space:"space",Opacity:"opacity",FontSize:"fontSize",LineHeight:"lineHeight",LetterSpacing:"letterSpacing",ParagraphSpacing:"paragraphSpacing",BorderWidth:"borderWidth",BorderRadius:"borderRadius",Duration:"duration",ZIndex:"zIndex",Shadow:"shadow",Border:"border",Gradient:"gradient",String:"string",ProductCopy:"productCopy",FontFamily:"fontFamily",FontWeight:"fontWeight",TextCase:"textCase",TextDecoration:"textDecoration",Visibility:"visibility",Blur:"blur"}},"./src/content/token.ts":
/*!******************************!*\
  !*** ./src/content/token.ts ***!
  \******************************/(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getTokenPrefix=s,t.tokenObjectKeyName=c,t.resetTokenNameTracking=function(){(0,l.resetNameTracking)()},t.convertedToken=function(e,t,o,i=[]){const l=c(e,o,!1,i),s=r.CSSHelper.tokenToCSS(e,t,{allowReferences:n.exportConfiguration.useReferences,decimals:n.exportConfiguration.colorPrecision,colorFormat:n.exportConfiguration.colorFormat,forceRemUnit:n.exportConfiguration.forceRemUnit,remBase:n.exportConfiguration.remBase,tokenToVariableRef:e=>c(e,o,!1,i)}),u=" ".repeat(n.exportConfiguration.indent),p=(0,a.formatTokenValue)(s);return n.exportConfiguration.showDescriptions&&e.description?`${u}// ${e.description.trim()}\n${u}${l}: ${p},`:`${u}${l}: ${p},`};const r=o(/*! @supernovaio/export-utils */"../../utils/dist/index.js"),n=o(/*! .. */"./src/index.ts"),i=o(/*! ../constants/defaults */"./src/constants/defaults.ts"),a=o(/*! ../utils/value-formatter */"./src/utils/value-formatter.ts"),l=o(/*! ../utils/token-hierarchy */"./src/utils/token-hierarchy.ts");function s(e,t=!1){return n.exportConfiguration.useTokenTypePrefixes||t?n.exportConfiguration.customizeTokenPrefixes?n.exportConfiguration.tokenPrefixes[e].trim():i.DEFAULT_TOKEN_PREFIXES[e]:""}function c(e,t,o=!1,i=[]){let a=null;if("collectionPathAndName"===n.exportConfiguration.tokenNameStructure&&e.collectionId){const t=i.find((t=>t.persistentId===e.collectionId));a=t?.name??null}const l="nameOnly"!==n.exportConfiguration.tokenNameStructure?t.find((t=>t.id===e.parentGroupId)):null,c=s(e.tokenType);return r.NamingHelper.codeSafeVariableNameForToken(e,n.exportConfiguration.tokenNameStyle,l??null,[n.exportConfiguration.globalNamePrefix,c,a].filter(Boolean).join("-"))}},"./src/files/style-file.ts":
/*!*********************************!*\
  !*** ./src/files/style-file.ts ***!
  \*********************************/(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.styleOutputFile=function(e,t,o,i="",l,s=[]){if(!n.exportConfiguration.exportBaseValues&&!i&&n.exportConfiguration.exportThemesAs!==c.ThemeExportStyle.NestedThemes)return null;let p=t.filter((t=>t.tokenType===e));if(i&&l&&n.exportConfiguration.exportOnlyThemedTokens&&(p=r.ThemeHelper.filterThemedTokens(p,l),0===p.length))return null;const d=u(p,o,l,s,t);if(!d)return null;const m=JSON.stringify(d,null,n.exportConfiguration.indent);return r.FileHelper.createTextFile({relativePath:i?`./${i}`:n.exportConfiguration.baseStyleFilePath,fileName:n.exportConfiguration.customizeStyleFileNames?r.FileNameHelper.ensureFileExtension(n.exportConfiguration.styleFileNames[e],".json"):a.DEFAULT_STYLE_FILE_NAMES[e],content:m})},t.combinedStyleOutputFile=function(e,t,o="",i,a=[]){if(!n.exportConfiguration.exportBaseValues&&!o&&n.exportConfiguration.exportThemesAs!==c.ThemeExportStyle.NestedThemes)return null;const l=[...e];if(o&&i&&n.exportConfiguration.exportOnlyThemedTokens&&0===(e=r.ThemeHelper.filterThemedTokens(e,i)).length)return null;const s=u(e,t,i,a,l);if(!s)return null;const p=JSON.stringify(s,null,n.exportConfiguration.indent),d=o?`tokens.${o}.json`:"tokens.json";return r.FileHelper.createTextFile({relativePath:"./",fileName:d,content:p})};const r=o(/*! @supernovaio/export-utils */"../../utils/dist/index.js"),n=o(/*! .. */"./src/index.ts"),i=o(/*! ../content/token */"./src/content/token.ts"),a=o(/*! ../constants/defaults */"./src/constants/defaults.ts"),l=o(/*! ../utils/token-hierarchy */"./src/utils/token-hierarchy.ts"),s=o(/*! @supernovaio/export-utils */"../../utils/dist/index.js"),c=o(/*! ../../config */"./config.ts");function u(e,t,o,a=[],u){if((0,i.resetTokenNameTracking)(),!n.exportConfiguration.generateEmptyFiles&&0===e.length)return null;const p=new Map((u||e).map((e=>[e.id,e])));let d=[...e];"alphabetical"===n.exportConfiguration.tokenSortOrder&&d.sort(((e,o)=>{const r=(0,i.tokenObjectKeyName)(e,t,!0,a),n=(0,i.tokenObjectKeyName)(o,t,!0,a);return r.localeCompare(n)}));const m={};return n.exportConfiguration.showGeneratedFileDisclaimer&&(m._comment=n.exportConfiguration.disclaimer),d.forEach((e=>{(0,i.tokenObjectKeyName)(e,t,!0,a);const u=r.CSSHelper.tokenToCSS(e,p,{allowReferences:n.exportConfiguration.useReferences,decimals:n.exportConfiguration.colorPrecision,colorFormat:n.exportConfiguration.colorFormat,forceRemUnit:n.exportConfiguration.forceRemUnit,remBase:n.exportConfiguration.remBase,tokenToVariableRef:e=>{const t=(0,i.getTokenPrefix)(e.tokenType),o=(e.tokenPath||[]).filter((e=>e&&e.trim().length>0)).map((e=>s.NamingHelper.codeSafeVariableName(e,n.exportConfiguration.tokenNameStyle))),r=(0,l.processTokenName)(e,o);let u=[];switch(t&&u.push(t),n.exportConfiguration.tokenNameStructure){case c.TokenNameStructure.NameOnly:u.push(r);break;case c.TokenNameStructure.CollectionPathAndName:if(e.collectionId){const t=a.find((t=>t.persistentId===e.collectionId));if(t){const e=s.NamingHelper.codeSafeVariableName(t.name,n.exportConfiguration.tokenNameStyle);u.push(e)}}u.push(...o,r);break;case c.TokenNameStructure.PathAndName:u.push(...o,r)}return n.exportConfiguration.globalNamePrefix&&u.unshift(s.NamingHelper.codeSafeVariableName(n.exportConfiguration.globalNamePrefix,n.exportConfiguration.tokenNameStyle)),`{${u.join(".")}}`}}),d=(0,l.createHierarchicalStructure)(e.tokenPath||[],e.name,function(e,t,o){const a=e.replace(/['"]/g,""),l=t.description&&n.exportConfiguration.showDescriptions?{description:t.description.trim()}:{},s=(0,i.getTokenPrefix)(t.tokenType,!0);if(n.exportConfiguration.exportThemesAs===c.ThemeExportStyle.NestedThemes){const e={};return!o&&n.exportConfiguration.exportBaseValues&&(e.base={value:a,type:s}),o&&(e[r.ThemeHelper.getThemeIdentifier(o,r.StringCase.kebabCase)]={value:a,type:s}),{...e,...l}}return{value:a,type:s,...l}}(u,e,o),e,a);Object.assign(m,(0,l.deepMerge)(m,d))})),m}},"./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.exportConfiguration=void 0;const r=o(/*! @supernovaio/sdk-exporters */"./node_modules/@supernovaio/sdk-exporters/build/supernova-sdk-typescript.js"),n=o(/*! ../config */"./config.ts"),i=o(/*! ./files/style-file */"./src/files/style-file.ts"),a=o(/*! @supernovaio/export-utils */"../../utils/dist/index.js"),l=o(/*! ./utils/token-hierarchy */"./src/utils/token-hierarchy.ts");function s(e){return e.filter((e=>null!==e))}t.exportConfiguration=Pulsar.exportConfig(),Pulsar.export((async(e,o)=>{const c={designSystemId:o.dsId,versionId:o.versionId};let u=await e.tokens.getTokens(c),p=await e.tokens.getTokenGroups(c),d=await e.tokens.getTokenCollections(c);if(o.brandId){const t=(await e.brands.getBrands(c)).find((e=>e.id===o.brandId||e.idInVersion===o.brandId));if(!t)throw new Error(`Unable to find brand ${o.brandId}.`);u=u.filter((e=>e.brandId===t.id)),p=p.filter((e=>e.brandId===t.id))}if(o.themeIds&&o.themeIds.length>0){const m=await e.tokens.getTokenThemes(c),T=o.themeIds.map((e=>{const t=m.find((t=>t.id===e||t.idInVersion===e));if(!t)throw new Error(`Unable to find theme ${e}`);return t}));switch(t.exportConfiguration.exportThemesAs){case n.ThemeExportStyle.NestedThemes:if(t.exportConfiguration.fileStructure===n.FileStructure.SingleFile){const o=t.exportConfiguration.exportBaseValues?(0,i.combinedStyleOutputFile)(u,p,"",void 0,d):null,r=T.map((o=>{const r=e.tokens.computeTokensByApplyingThemes(u,u,[o]),n=t.exportConfiguration.exportBaseValues;t.exportConfiguration.exportBaseValues=!1;const a=(0,i.combinedStyleOutputFile)(r,p,"",o,d);return t.exportConfiguration.exportBaseValues=n,a}));return s([[o,...r].reduce(((e,o)=>{if(!o)return e;if(!e)return o;const r=(0,l.deepMerge)(JSON.parse(e.content),JSON.parse(o.content));return{...o,content:JSON.stringify(r,null,t.exportConfiguration.indent)}}),null)])}const o=Object.values(r.TokenType).map((o=>{const r=t.exportConfiguration.exportBaseValues?(0,i.styleOutputFile)(o,u,p,"",void 0,d):null,n=T.map((r=>{const n=e.tokens.computeTokensByApplyingThemes(u,u,[r]),a=t.exportConfiguration.exportBaseValues;t.exportConfiguration.exportBaseValues=!1;const l=(0,i.styleOutputFile)(o,n,p,"",r,d);return t.exportConfiguration.exportBaseValues=a,l}));return[r,...n].reduce(((e,o)=>{if(!o)return e;if(!e)return o;const r=(0,l.deepMerge)(JSON.parse(e.content),JSON.parse(o.content));return{...o,content:JSON.stringify(r,null,t.exportConfiguration.indent)}}),null)}));return s(o);case n.ThemeExportStyle.SeparateFiles:if(t.exportConfiguration.fileStructure===n.FileStructure.SingleFile){const o=T.map((t=>{const o=e.tokens.computeTokensByApplyingThemes(u,u,[t]),r=a.ThemeHelper.getThemeIdentifier(t,a.StringCase.camelCase);return(0,i.combinedStyleOutputFile)(o,p,r,t,d)}));return s([t.exportConfiguration.exportBaseValues?(0,i.combinedStyleOutputFile)(u,p,"",void 0,d):null,...o])}const c=T.flatMap((t=>{const o=e.tokens.computeTokensByApplyingThemes(u,u,[t]),n=a.ThemeHelper.getThemeIdentifier(t,a.StringCase.camelCase);return Object.values(r.TokenType).map((e=>(0,i.styleOutputFile)(e,o,p,n,t,d)))}));return s([...t.exportConfiguration.exportBaseValues?Object.values(r.TokenType).map((e=>(0,i.styleOutputFile)(e,u,p,"",void 0,d))):[],...c]);case n.ThemeExportStyle.MergedTheme:if(t.exportConfiguration.fileStructure===n.FileStructure.SingleFile){const o=t.exportConfiguration.exportBaseValues?(0,i.combinedStyleOutputFile)(u,p,"",void 0,d):null,r=e.tokens.computeTokensByApplyingThemes(u,u,T);return s([o,(0,i.combinedStyleOutputFile)(r,p,"themed",T[0],d)])}const m=t.exportConfiguration.exportBaseValues?Object.values(r.TokenType).map((e=>(0,i.styleOutputFile)(e,u,p,"",void 0,d))):[],y=e.tokens.computeTokensByApplyingThemes(u,u,T);return s([...m,...Object.values(r.TokenType).map((e=>(0,i.styleOutputFile)(e,y,p,"themed",T[0],d)))]);case n.ThemeExportStyle.ApplyDirectly:u=e.tokens.computeTokensByApplyingThemes(u,u,T)}}if(t.exportConfiguration.fileStructure===n.FileStructure.SingleFile){return s([t.exportConfiguration.exportBaseValues?(0,i.combinedStyleOutputFile)(u,p,"",void 0,d):null])}return s(t.exportConfiguration.exportBaseValues?Object.values(r.TokenType).map((e=>(0,i.styleOutputFile)(e,u,p,"",void 0,d))):[])}))},"./src/utils/token-hierarchy.ts":
/*!**************************************!*\
  !*** ./src/utils/token-hierarchy.ts ***!
  \**************************************/(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.resetNameTracking=function(){a.reset()},t.processTokenName=function(e,t=[],o=[]){let r=a.getSimpleTokenName(e,n.exportConfiguration.tokenNameStyle,!1,t);r.startsWith("_")&&(r=r.slice(1));return r},t.createHierarchicalStructure=function(e,t,o,l,s=[]){let c=null;if("collectionPathAndName"===n.exportConfiguration.tokenNameStructure&&l.collectionId){const e=s.find((e=>e.persistentId===l.collectionId));c=e?.name??null}const u=r.NamingHelper.codeSafeVariableName((0,i.getTokenPrefix)(l.tokenType),n.exportConfiguration.tokenNameStyle),p=[...n.exportConfiguration.globalNamePrefix?[r.NamingHelper.codeSafeVariableName(n.exportConfiguration.globalNamePrefix,n.exportConfiguration.tokenNameStyle)]:[],...u?[u]:[]];c&&p.push(r.NamingHelper.codeSafeVariableName(c,n.exportConfiguration.tokenNameStyle));const d=[...c?[c]:[],..."nameOnly"!==n.exportConfiguration.tokenNameStructure?(e||[]).filter((e=>e&&e.trim().length>0)).map((e=>r.NamingHelper.codeSafeVariableName(e,n.exportConfiguration.tokenNameStyle))):[]];"nameOnly"!==n.exportConfiguration.tokenNameStructure&&p.push(...(e||[]).filter((e=>e&&e.trim().length>0)).map((e=>r.NamingHelper.codeSafeVariableName(e,n.exportConfiguration.tokenNameStyle))));const m=a.getSimpleTokenName(l,n.exportConfiguration.tokenNameStyle,!1,d);return p.push(m.replace(/^_/,"")),p.reduceRight(((e,t)=>({[t]:e})),o)},t.deepMerge=function e(t,o){if(!t)return o;if(!o)return t;const r={...t},n=o.description||t.description;delete r.description,delete o.description,Object.keys(o).forEach((n=>{o[n]&&"object"==typeof o[n]&&!Array.isArray(o[n])?r[n]=n in t?e(t[n],o[n]):o[n]:r[n]=o[n]})),n&&(r.description=n);return r};const r=o(/*! @supernovaio/export-utils */"../../utils/dist/index.js"),n=o(/*! .. */"./src/index.ts"),i=o(/*! ../content/token */"./src/content/token.ts"),a=new r.TokenNameTracker},"./src/utils/value-formatter.ts":
/*!**************************************!*\
  !*** ./src/utils/value-formatter.ts ***!
  \**************************************/(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.formatTokenValue=function(e){e.startsWith("${")&&e.endsWith("}")&&(e=e.slice(2,-1));return`{ "value": "${e=e.replace(/['"]/g,"")}" }`}},"../../utils/dist/enums/ColorFormat.js":
/*!*********************************************!*\
  !*** ../../utils/dist/enums/ColorFormat.js ***!
  \*********************************************/(e,t)=>{"use strict";var o;Object.defineProperty(t,"__esModule",{value:!0}),t.ColorFormat=void 0,function(e){e.rgb="rgb",e.rgba="rgba",e.smartRgba="smartRgba",e.hex6="hex6",e.hex8="hex8",e.argbInt="argbInt",e.hashHex6="hashHex6",e.hashHex8="hashHex8",e.smartHashHex="smartHashHex",e.smartHex="smartHex",e.hsl="hsl",e.hsla="hsla",e.smartHsla="smartHsla",e.smartUIColor="smartUIColor",e.oklch="oklch",e.oklcha="oklcha",e.smartOklch="smartOklch"}(o||(t.ColorFormat=o={}))},"../../utils/dist/enums/StringCase.js":
/*!********************************************!*\
  !*** ../../utils/dist/enums/StringCase.js ***!
  \********************************************/(e,t)=>{"use strict";var o;Object.defineProperty(t,"__esModule",{value:!0}),t.StringCase=void 0,function(e){e.camelCase="camelCase",e.capitalCase="capitalCase",e.constantCase="constantCase",e.dotCase="dotCase",e.trainCase="trainCase",e.noCase="noCase",e.kebabCase="kebabCase",e.pascalCase="pascalCase",e.pathCase="pathCase",e.sentenceCase="sentenceCase",e.snakeCase="snakeCase",e.flatCase="flatCase"}(o||(t.StringCase=o={}))},"../../utils/dist/helpers/CSSHelper.js":
/*!*********************************************!*\
  !*** ../../utils/dist/helpers/CSSHelper.js ***!
  \*********************************************/(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CSSHelper=void 0;const r=o(/*! @supernovaio/sdk-exporters */"../../utils/node_modules/@supernovaio/sdk-exporters/build/supernova-sdk-typescript.js"),n=o(/*! ./TokenHelper */"../../utils/dist/helpers/TokenHelper.js"),i=o(/*! ./ColorHelper */"../../utils/dist/helpers/ColorHelper.js");t.CSSHelper=class{static handleColorWithCustomOpacity(e,t,o,n){if(t&&e.referencedTokenId){const a=o.get(e.referencedTokenId);if(a&&a.tokenType===r.TokenType.color){return`rgba(${n.tokenToVariableRef(a,{needsRgb:!0})}, ${i.ColorHelper.roundToDecimals(t.measure,n.decimals)})`}}return this.colorTokenValueToCSS({...e,...t&&{opacity:t}},o,n)}static tokenToCSS(e,t,o){let n;switch(e.tokenType){case r.TokenType.color:n=this.colorTokenValueToCSS(e.value,t,o);break;case r.TokenType.border:n=this.borderTokenValueToCSS(e.value,t,o);break;case r.TokenType.gradient:n=this.gradientTokenValueToCSS(e.value,t,o);break;case r.TokenType.dimension:case r.TokenType.size:case r.TokenType.space:case r.TokenType.opacity:case r.TokenType.fontSize:case r.TokenType.lineHeight:case r.TokenType.letterSpacing:case r.TokenType.paragraphSpacing:case r.TokenType.borderWidth:case r.TokenType.radius:case r.TokenType.duration:case r.TokenType.zIndex:n=this.dimensionTokenValueToCSS(e.value,t,o);break;case r.TokenType.shadow:n=this.shadowTokenValueToCSS(e.value,t,o);break;case r.TokenType.fontWeight:n=this.fontWeightTokenValueToCSS(e.value,t,o);break;case r.TokenType.fontFamily:case r.TokenType.productCopy:case r.TokenType.string:n=this.stringTokenValueToCSS(e.value,t,o);break;case r.TokenType.textCase:case r.TokenType.textDecoration:case r.TokenType.visibility:n=this.optionTokenValueToCSS(e.value,t,o,e.tokenType);break;case r.TokenType.blur:n=this.blurTokenValueToCSS(e.value,t,o);break;case r.TokenType.typography:n=this.typographyTokenValueToCSS(e.value,t,o);break;default:throw new r.UnreachableCaseError(e.tokenType,"Unsupported token type for transformation to CSS:")}if(o.valueTransformer){const t=o.valueTransformer(n,e);if(void 0!==t)return t}return n}static colorTokenValueToCSS(e,t,o){return i.ColorHelper.formattedColorOrVariableName(e,t,o)}static borderTokenValueToCSS(e,t,o){const r=(0,n.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);if(r)return o.tokenToVariableRef(r);const i=this.handleColorWithCustomOpacity(e.color,e.color.opacity,t,o),a=this.dimensionTokenValueToCSS(e.width,t,o),l=this.borderStyleToCSS(e.style),s=i;this.borderPositionToCSS(e.position);return`${a} ${l} ${s}`}static gradientTokenValueToCSS(e,t,o){return e.map((e=>this.gradientLayerToCSS(e,t,o))).join(", ")}static gradientLayerToCSS(e,t,o){const a=(0,n.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);if(a)return o.tokenToVariableRef(a);const l=i.ColorHelper.roundToDecimals(e.to.x,o.decimals)-i.ColorHelper.roundToDecimals(e.from.x,o.decimals),s=i.ColorHelper.roundToDecimals(e.to.y,o.decimals)-i.ColorHelper.roundToDecimals(e.from.y,o.decimals),c=Math.atan2(s,l)*(180/Math.PI),u=()=>l>=0&&s>0||l>0&&s<=0||l<=0&&s<0?90+c:c-270;let p="";switch(e.type){case r.GradientType.linear:p=`linear-gradient(${u()}deg, `;break;case r.GradientType.radial:p="radial-gradient(circle, ";break;case r.GradientType.angular:p="conic-gradient(";break;default:p=`linear-gradient(${u()}deg, `}return`${p}${e.stops.map((e=>`${this.handleColorWithCustomOpacity(e.color,e.color.opacity,t,o)} ${i.ColorHelper.roundToDecimals(100*e.position,o.decimals)}%`)).join(", ")})`}static dimensionTokenValueToCSS(e,t,o){const a=(0,n.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);if(a)return o.tokenToVariableRef(a);if(o.forceRemUnit&&e.unit===r.Unit.pixels){const t=o.remBase||16,r=e.measure/t;return`${i.ColorHelper.roundToDecimals(r,o.decimals)}rem`}return`${i.ColorHelper.roundToDecimals(e.measure,o.decimals)}${this.unitToCSS(e.unit)}`}static shadowTokenValueToCSS(e,t,o){return e.map((e=>this.shadowLayerToCSS(e,t,o))).join(", ")}static shadowLayerToCSS(e,t,o){const a=(0,n.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);if(a)return o.tokenToVariableRef(a);const l=e=>{if(o.forceRemUnit){const t=e/(o.remBase||16);return`${i.ColorHelper.roundToDecimals(t,o.decimals)}rem`}return`${e}px`},s=this.handleColorWithCustomOpacity(e.color,e.opacity,t,o);return`${e.type===r.ShadowType.inner?"inset ":""}${l(e.x)} ${l(e.y)} ${l(e.radius)} ${l(e.spread)} ${s}`}static fontWeightTokenValueToCSS(e,t,o){const r=(0,n.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);if(r)return o.tokenToVariableRef(r);return`${(0,n.normalizeTextWeight)(e.text)}`}static stringTokenValueToCSS(e,t,o){const r=(0,n.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);return r?o.tokenToVariableRef(r):`"${e.text}"`}static optionTokenValueToCSS(e,t,o,i){const a=(0,n.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);return a?o.tokenToVariableRef(a):i===r.TokenType.textCase?this.textCaseToCSS(e.value):i===r.TokenType.textDecoration?this.textDecorationToCSS(e.value):e.value.toLowerCase()}static blurTokenValueToCSS(e,t,o){const r=(0,n.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);return r?o.tokenToVariableRef(r):`blur(${this.dimensionTokenValueToCSS(e.radius,t,o)})`}static typographyTokenValueToCSS(e,t,o){const i=(0,n.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);if(i)return o.tokenToVariableRef(i);const a=(0,n.sureOptionalReference)(e.fontFamily.referencedTokenId,t,o.allowReferences),l=(0,n.sureOptionalReference)(e.fontWeight.referencedTokenId,t,o.allowReferences),s=(0,n.sureOptionalReference)(e.textDecoration.referencedTokenId,t,o.allowReferences),c=(0,n.sureOptionalReference)(e.textCase.referencedTokenId,t,o.allowReferences),u={fontFamily:a?o.tokenToVariableRef(a):e.fontFamily.text,fontWeight:l?o.tokenToVariableRef(l):(0,n.normalizeTextWeight)(e.fontWeight.text),textDecoration:s?o.tokenToVariableRef(s):e.textDecoration.value===r.TextDecoration.original?this.textDecorationToCSS(e.textDecoration.value):void 0,textCase:c?o.tokenToVariableRef(c):e.textCase.value===r.TextCase.original?this.textCaseToCSS(e.textCase.value):void 0,caps:e.textCase.value===r.TextCase.smallCaps,fontSize:this.dimensionTokenValueToCSS(e.fontSize,t,o),lineHeight:e.lineHeight?this.dimensionTokenValueToCSS(e.lineHeight,t,o):void 0},p=u.fontSize;return`${u.caps?"small-caps ":""}${u.fontWeight} ${u.lineHeight?`${p}/${u.lineHeight}`:p} ${a?u.fontFamily:`"${u.fontFamily}"`}`}static borderStyleToCSS(e){switch(e){case r.BorderStyle.dashed:return"dashed";case r.BorderStyle.dotted:return"dotted";case r.BorderStyle.solid:return"solid";case r.BorderStyle.groove:return"groove";default:return"solid"}}static borderPositionToCSS(e){switch(e){case r.BorderPosition.center:return"center";case r.BorderPosition.inside:return"inside";case r.BorderPosition.outside:default:return"outside"}}static unitToCSS(e){switch(e){case r.Unit.percent:return"%";case r.Unit.pixels:return"px";case r.Unit.rem:return"rem";case r.Unit.raw:return"";case r.Unit.ms:return"ms";default:return"px"}}static textCaseToCSS(e){switch(e){case r.TextCase.original:return"none";case r.TextCase.upper:return"uppercase";case r.TextCase.lower:return"lowercase";case r.TextCase.camel:return"capitalize";case r.TextCase.smallCaps:return"small-caps"}}static textDecorationToCSS(e){switch(e){case r.TextDecoration.original:return"none";case r.TextDecoration.underline:return"underline";case r.TextDecoration.strikethrough:return"line-through"}}}},"../../utils/dist/helpers/ColorHelper.js":
/*!***********************************************!*\
  !*** ../../utils/dist/helpers/ColorHelper.js ***!
  \***********************************************/(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ColorHelper=void 0;const r=o(/*! ../enums/ColorFormat */"../../utils/dist/enums/ColorFormat.js"),n=o(/*! ./TokenHelper */"../../utils/dist/helpers/TokenHelper.js");class i{static formattedColorOrVariableName(e,t,o){let i,a=null,l=null;const s=(0,n.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);if(s)i=o.tokenToVariableRef(s);else{const r=(0,n.sureOptionalReference)(e.color.referencedTokenId,t,o.allowReferences);r&&(a=o.tokenToVariableRef(r));const i=(0,n.sureOptionalReference)(e.opacity.referencedTokenId,t,o.allowReferences);i&&(l=o.tokenToVariableRef(i))}if(i)return i;if(!i&&!a&&!l)return this.formattedColor(e,o.colorFormat,o.decimals);switch(o.colorFormat){case r.ColorFormat.rgb:case r.ColorFormat.rgba:case r.ColorFormat.smartRgba:return this.colorToRgb(o.colorFormat,this.normalizedIntColor(e),e.opacity.measure,o.decimals,a,l);default:return this.formattedColor(e,o.colorFormat,o.decimals)}}static formattedColor(e,t,o=3){switch(t){case r.ColorFormat.hex6:case r.ColorFormat.hex8:case r.ColorFormat.hashHex6:case r.ColorFormat.hashHex8:case r.ColorFormat.smartHex:case r.ColorFormat.smartHashHex:case r.ColorFormat.argbInt:return this.colorToHex(t,this.normalizedIntColor(e),e.opacity.measure);case r.ColorFormat.rgb:case r.ColorFormat.rgba:case r.ColorFormat.smartRgba:return this.colorToRgb(t,this.normalizedIntColor(e),e.opacity.measure,o,null,null);case r.ColorFormat.hsl:case r.ColorFormat.hsla:case r.ColorFormat.smartHsla:return this.colorToHsl(t,this.normalizedFractionalColor(e),e.opacity.measure,o);case r.ColorFormat.smartUIColor:return this.colorToUIColor(this.normalizedIntColor(e),e.opacity.measure,o);case r.ColorFormat.oklch:case r.ColorFormat.oklcha:case r.ColorFormat.smartOklch:return this.colorToOklch(t,this.normalizedIntColor(e),e.opacity.measure,o);default:return this.colorToHex(r.ColorFormat.smartHashHex,this.normalizedIntColor(e),e.opacity.measure)}}static colorToRgb(e,t,o,n,i,a){let l;return l=e===r.ColorFormat.rgba||e===r.ColorFormat.smartRgba&&o<1?`rgba(${i||`${t.r}, ${t.g}, ${t.b}`}, ${a||this.roundToDecimals(o,n)})`:`rgb(${i||`${t.r}, ${t.g}, ${t.b}`})`,l}static colorToHex(e,t,o){let n=`${this.pHex(t.r)}${this.pHex(t.g)}${this.pHex(t.b)}`;return(e===r.ColorFormat.hex8||e===r.ColorFormat.hashHex8||e===r.ColorFormat.smartHex&&o<1||e===r.ColorFormat.smartHashHex&&o<1)&&(n+=`${this.pHex(Math.round(255*o))}`),e===r.ColorFormat.argbInt&&(n=`Color(0x${this.pHex(Math.round(255*o))}${n})`),e!==r.ColorFormat.hashHex6&&e!==r.ColorFormat.hashHex8&&e!==r.ColorFormat.smartHashHex||(n=`#${n}`),n}static colorToHsl(e,t,o,n){const i=Math.max(t.r,t.g,t.b),a=Math.min(t.r,t.g,t.b);let l,s=0,c=0,u=(i+a)/2;if(i===a)s=c=0;else{const e=i-a;switch(c=u>.5?e/(2-i-a):e/(i+a),i){case t.r:s=(t.g-t.b)/e+(t.g<t.b?6:0);break;case t.g:s=(t.b-t.r)/e+2;break;case t.b:s=(t.r-t.g)/e+4}s/=6}return l=e===r.ColorFormat.hsla||e===r.ColorFormat.smartHsla&&o<1?`hsla(${Math.round(360*s)}%, ${Math.round(100*c)}%, ${Math.round(100*u)}%, ${this.roundToDecimals(o,n)})`:`hsl(${Math.round(360*s)}%, ${Math.round(100*c)}%, ${Math.round(100*u)}%)`,l}static colorToUIColor(e,t,o=3){let r=`UIColor(rgb: 0x${this.pHex(e.r)}${this.pHex(e.g)}${this.pHex(e.b)})`;return t<1&&(r+=`.withAlphaComponent(${t})`),r}static normalizedIntColor(e){return{r:Math.round(e.color.r),g:Math.round(e.color.g),b:Math.round(e.color.b)}}static normalizedFractionalColor(e,t=3){return{r:this.roundToDecimals(e.color.r/255,t),g:i.roundToDecimals(e.color.g/255,t),b:i.roundToDecimals(e.color.b/255,t)}}static roundToDecimals(e,t,o=!1){const r=Math.pow(10,t),n=Math.round(e*r)/r;return o?Number(n.toFixed(t)):parseFloat(n.toFixed(t))}static pHex(e){return e.toString(16).padStart(2,"0")}static colorToOklch(e,t,o,n){const{l:i,c:a,h:l}=this.rgbToOklch(t.r,t.g,t.b);switch(e){case r.ColorFormat.oklcha:return`oklch(${i}% ${a} ${l} / ${this.roundToDecimals(100*o,n)}%)`;case r.ColorFormat.smartOklch:return o<1?`oklch(${i}% ${a} ${l} / ${this.roundToDecimals(100*o,n)}%)`:`oklch(${i}% ${a} ${l})`;case r.ColorFormat.oklch:default:return`oklch(${i}% ${a} ${l})`}}static rgbToOklch(e,t,o){const r=this.sRGBtoLinear(e/255),n=this.sRGBtoLinear(t/255),i=this.sRGBtoLinear(o/255),a=.4124564*r+.3575761*n+.1804375*i,l=.2126729*r+.7151522*n+.072175*i,s=.0193339*r+.119192*n+.9503041*i,c=.8189330101*a+.3618667424*l-.1288597137*s,u=.0329845436*a+.9293118715*l+.0361456387*s,p=.0482003018*a+.2643662691*l+.633851707*s,d=Math.cbrt(c),m=Math.cbrt(u),T=Math.cbrt(p),y=.2104542553*d+.793617785*m-.0040720468*T,f=1.9779984951*d-2.428592205*m+.4505937099*T,g=.0259040371*d+.7827717662*m-.808675766*T,h=Math.sqrt(f*f+g*g);let b=180*Math.atan2(g,f)/Math.PI;return b<0&&(b+=360),{l:this.roundToDecimals(100*y,2),c:this.roundToDecimals(h,3,!0),h:this.roundToDecimals(b,2)}}static sRGBtoLinear(e){return e<=.04045?e/12.92:Math.pow((e+.055)/1.055,2.4)}}t.ColorHelper=i},"../../utils/dist/helpers/FileHelper.js":
/*!**********************************************!*\
  !*** ../../utils/dist/helpers/FileHelper.js ***!
  \**********************************************/(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FileHelper=void 0;const r=o(/*! @supernovaio/sdk-exporters */"../../utils/node_modules/@supernovaio/sdk-exporters/build/supernova-sdk-typescript.js");t.FileHelper=class{static createCopyRemoteFile({relativePath:e,fileName:t,url:o}){return{path:e,name:t,type:r.OutputFileType.copyRemoteUrl,url:o}}static createTextFile({relativePath:e,fileName:t,content:o}){return{path:e,name:t,type:r.OutputFileType.text,content:o}}static createBinaryFile({relativePath:e,fileName:t,data:o}){return{path:e,name:t,type:r.OutputFileType.binary,data:o}}}},"../../utils/dist/helpers/FileNameHelper.js":
/*!**************************************************!*\
  !*** ../../utils/dist/helpers/FileNameHelper.js ***!
  \**************************************************/(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FileNameHelper=void 0;const r=o(/*! ../enums/StringCase */"../../utils/dist/enums/StringCase.js"),n=o(/*! ./NamingHelper */"../../utils/dist/helpers/NamingHelper.js");t.FileNameHelper=class{static ensureFileExtension(e,t){const o=t.startsWith(".")?t:`.${t}`;return e.toLowerCase().endsWith(o.toLowerCase())?e:e+o}static replaceFileExtension(e,t,o){const r=t.startsWith(".")?t:`.${t}`,n=o.startsWith(".")?o:`.${o}`;return e.replace(new RegExp(`${r}$`),n)}static getDefaultStyleFileName(e,t=".css",o=r.StringCase.kebabCase){const i=t.startsWith(".")?t:`.${t}`;return n.NamingHelper.codeSafeVariableName({Color:"color",Typography:"typography",Dimension:"dimension",Size:"size",Space:"space",Opacity:"opacity",FontSize:"font-size",LineHeight:"line-height",LetterSpacing:"letter-spacing",ParagraphSpacing:"paragraph-spacing",BorderWidth:"border-width",BorderRadius:"border-radius",Duration:"duration",ZIndex:"z-index",Shadow:"shadow",Border:"border",Gradient:"gradient",String:"string",ProductCopy:"product-copy",FontFamily:"font-family",FontWeight:"font-weight",TextCase:"text-case",TextDecoration:"text-decoration",Visibility:"visibility",Blur:"blur"}[e],o)+i}}},"../../utils/dist/helpers/GeneralHelper.js":
/*!*************************************************!*\
  !*** ../../utils/dist/helpers/GeneralHelper.js ***!
  \*************************************************/(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GeneralHelper=void 0;t.GeneralHelper=class{static indent(e=2){return" ".repeat(Math.max(0,e))}static addDisclaimer(e,t){if(!e)return t;return`/**\n * ${e.replace(/\n/g,"\n * ")} \n */\n\n${t}`}}},"../../utils/dist/helpers/KotlinHelper.js":
/*!************************************************!*\
  !*** ../../utils/dist/helpers/KotlinHelper.js ***!
  \************************************************/(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.KotlinHelper=t.ImportCollector=t.ImportFlag=void 0;const r=o(/*! @supernovaio/sdk-exporters */"../../utils/node_modules/@supernovaio/sdk-exporters/build/supernova-sdk-typescript.js"),n=o(/*! ./ColorHelper */"../../utils/dist/helpers/ColorHelper.js"),i=o(/*! ./TokenHelper */"../../utils/dist/helpers/TokenHelper.js"),a=o(/*! ./GeneralHelper */"../../utils/dist/helpers/GeneralHelper.js"),l=o(/*! ./NamingHelper */"../../utils/dist/helpers/NamingHelper.js"),s=o(/*! ../enums/StringCase */"../../utils/dist/enums/StringCase.js"),c=o(/*! ../enums/ColorFormat */"../../utils/dist/enums/ColorFormat.js");var u;!function(e){e[e.Color=0]="Color",e[e.Dp=1]="Dp",e[e.Sp=2]="Sp",e[e.Em=3]="Em",e[e.Offset=4]="Offset",e[e.Brush=5]="Brush",e[e.TileMode=6]="TileMode",e[e.Shadow=7]="Shadow",e[e.BorderStroke=8]="BorderStroke",e[e.Modifier=9]="Modifier",e[e.Blur=10]="Blur",e[e.Font=11]="Font",e[e.FontFamily=12]="FontFamily",e[e.FontWeight=13]="FontWeight",e[e.TextDecoration=14]="TextDecoration",e[e.TextStyle=15]="TextStyle",e[e.R=16]="R"}(u||(t.ImportFlag=u={}));t.ImportCollector=class{constructor(e){this.rPackageName=e,this.importFlags=new Set}use(...e){e.forEach((e=>this.importFlags.add(e)))}allImports(){const e=[];return this.rPackageName&&this.importFlags.has(u.R)&&e.push(`import ${this.rPackageName}.R`),this.importFlags.has(u.Color)&&e.push("import androidx.compose.ui.graphics.Color"),this.importFlags.has(u.Dp)&&e.push("import androidx.compose.ui.unit.dp"),this.importFlags.has(u.Sp)&&e.push("import androidx.compose.ui.unit.sp"),this.importFlags.has(u.Em)&&e.push("import androidx.compose.ui.unit.em"),this.importFlags.has(u.Offset)&&e.push("import androidx.compose.ui.geometry.Offset"),this.importFlags.has(u.Brush)&&e.push("import androidx.compose.ui.graphics.Brush"),this.importFlags.has(u.TileMode)&&e.push("import androidx.compose.ui.graphics.TileMode"),this.importFlags.has(u.Shadow)&&e.push("import androidx.compose.ui.graphics.Shadow"),this.importFlags.has(u.BorderStroke)&&e.push("import androidx.compose.foundation.BorderStroke"),this.importFlags.has(u.Modifier)&&(e.push("import androidx.compose.ui.Modifier"),this.importFlags.has(u.Blur)&&e.push("import androidx.compose.ui.draw.blur")),this.importFlags.has(u.FontFamily)&&e.push("import androidx.compose.ui.text.font.FontFamily"),this.importFlags.has(u.Font)&&e.push("import androidx.compose.ui.text.font.Font"),this.importFlags.has(u.FontWeight)&&e.push("import androidx.compose.ui.text.font.FontWeight"),this.importFlags.has(u.TextDecoration)&&e.push("import androidx.compose.ui.text.style.TextDecoration"),this.importFlags.has(u.TextStyle)&&e.push("import androidx.compose.ui.text.TextStyle"),e.sort()}};t.KotlinHelper=class{static tokenValue(e,t,o,n){let i;switch(e.tokenType){case r.TokenType.color:i=this.colorTokenValueToKotlin(e.value,t,o,n);break;case r.TokenType.border:i=this.borderTokenValueToKotlin(e.value,t,o,n);break;case r.TokenType.gradient:i=this.gradientTokenValueToKotlin(e.value,t,o,n);break;case r.TokenType.fontSize:case r.TokenType.lineHeight:i=this.textUnitTokenValueToKotlin(e.value,t,o,n);break;case r.TokenType.letterSpacing:i=this.letterSpacingTokenValueToKotlin(e.value,t,o,n);break;case r.TokenType.dimension:case r.TokenType.size:case r.TokenType.space:case r.TokenType.opacity:case r.TokenType.paragraphSpacing:case r.TokenType.borderWidth:case r.TokenType.radius:case r.TokenType.duration:case r.TokenType.zIndex:i=this.dimensionTokenValueToKotlin(e.value,t,o,n);break;case r.TokenType.shadow:i=this.shadowTokenValueToKotlin(e.value,t,o,n);break;case r.TokenType.fontWeight:i=this.fontWeightTokenValueToKotlin(e.value,t,o,n);break;case r.TokenType.fontFamily:i=this.fontFamilyTokenValueToKotlin(e.value,t,o,n);break;case r.TokenType.productCopy:case r.TokenType.string:i=this.stringTokenValueToKotlin(e.value,t,o);break;case r.TokenType.textCase:case r.TokenType.textDecoration:case r.TokenType.visibility:i=this.optionTokenValueToKotlin(e.value,t,o,e.tokenType,n);break;case r.TokenType.blur:i=this.blurTokenValueToKotlin(e.value,t,o,n);break;case r.TokenType.typography:i=this.typographyTokenValueToKotlin(e.value,t,o,n);break;default:throw new r.UnreachableCaseError(e.tokenType,"Unsupported token type for transformation:")}return i}static colorTokenValueToKotlin(e,t,o,r){r.use(u.Color);const i={...o,colorFormat:c.ColorFormat.argbInt};return n.ColorHelper.formattedColorOrVariableName(e,t,i)}static borderTokenValueToKotlin(e,t,o,r){const n=(0,i.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);if(n)return o.tokenToVariableRef(n);r.use(u.BorderStroke);return`BorderStroke(${this.dimensionTokenValueToKotlin(e.width,t,o,r)}, ${this.colorTokenValueToKotlin(e.color,t,o,r)})`}static gradientTokenValueToKotlin(e,t,o,r){const n=e.map((e=>this.gradientLayerToKotlin(e,t,o,r)));return 1===n.length?n[0]:`listOf(${n.join(", ")})`}static gradientLayerToKotlin(e,t,o,l){const s=(0,i.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);if(s)return o.tokenToVariableRef(s);l.use(u.Brush,u.Offset);const c=e.stops.map((e=>`${n.ColorHelper.roundToDecimals(e.position,o.decimals)+"f"} to ${this.colorTokenValueToKotlin(e.color,t,o,l)}`)).join(", "),p=a.GeneralHelper.indent(o.indent);switch(e.type){case r.GradientType.radial:l.use(u.TileMode);return`Brush.radialGradient(\n${p}${p}${c},\n${p}${p}center = Offset(${((e.from.x+e.to.x)/2).toFixed(2)}f, ${((e.from.y+e.to.y)/2).toFixed(2)}f),\n${p}${p}radius = 0.5f,\n${p}${p}tileMode = TileMode.Clamp\n${p})`;case r.GradientType.angular:return`Brush.sweepGradient(\n${p}${p}${c},\n${p}${p}center = Offset(0.5f, 0.5f)\n${p})`;case r.GradientType.linear:default:return`Brush.linearGradient(\n${p}${p}${c},\n${p}${p}start = Offset(${e.from.x}f, ${e.from.y}f),\n${p}${p}end = Offset(${e.to.x}f, ${e.to.y}f)\n${p})`}}static shadowTokenValueToKotlin(e,t,o,r){const n=e.map((e=>this.shadowLayerToKotlin(e,t,o,r))),i=a.GeneralHelper.indent(o.indent);return 1===n.length?n[0]:`listOf(\n${n.map((e=>`${i}${i}${e}`)).join(",\n")}\n${i})`}static shadowLayerToKotlin(e,t,o,r){const a=(0,i.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);if(a)return o.tokenToVariableRef(a);r.use(u.Shadow,u.Offset);return`Shadow(color = ${this.colorTokenValueToKotlin({...e.color,...e.opacity&&{opacity:e.opacity}},t,o,r)}, offset = Offset(${n.ColorHelper.roundToDecimals(e.x,o.decimals)}f, ${n.ColorHelper.roundToDecimals(e.y,o.decimals)}f), blurRadius = ${n.ColorHelper.roundToDecimals(e.radius,o.decimals)}f)`}static dimensionTokenValueToKotlin(e,t,o,a){const l=(0,i.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);if(l)return o.tokenToVariableRef(l);const s=n.ColorHelper.roundToDecimals(e.measure,o.decimals);if(e.unit===r.Unit.percent){return`${+s/100}f`}return`${s}${this.unitToKotlin(e.unit,a)}`}static textUnitTokenValueToKotlin(e,t,o,a,l=!1){const s=(0,i.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);if(s)return o.tokenToVariableRef(s);const c=n.ColorHelper.roundToDecimals(e.measure,o.decimals);if(e.unit===r.Unit.percent){const e=+c/100;return a.use(l?u.Em:u.Sp),`${e}${l?".em":".sp"}`}return a.use(u.Sp),`${c}.sp`}static letterSpacingTokenValueToKotlin(e,t,o,r){return this.textUnitTokenValueToKotlin(e,t,o,r,!0)}static unitToKotlin(e,t){switch(e){case r.Unit.percent:return"f";case r.Unit.pixels:return t.use(u.Dp),".dp";case r.Unit.rem:return t.use(u.Sp),".sp";case r.Unit.ms:case r.Unit.raw:return"";default:return t.use(u.Dp),".dp"}}static stringTokenValueToKotlin(e,t,o){const r=(0,i.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);return r?o.tokenToVariableRef(r):`"${e.text}"`}static optionTokenValueToKotlin(e,t,o,n,a){const l=(0,i.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);return l?o.tokenToVariableRef(l):n===r.TokenType.textCase?this.textCaseToKotlin(e.value):n===r.TokenType.textDecoration?this.textDecorationToKotlin(e.value,a):this.visibilityToKotlin(e.value)}static textCaseToKotlin(e){switch(e){case r.TextCase.original:return'"none"';case r.TextCase.upper:return'"uppercase"';case r.TextCase.lower:return'"lowercase"';case r.TextCase.camel:return'"capitalize"';case r.TextCase.smallCaps:return'"smallCaps"'}}static textDecorationToKotlin(e,t){switch(t.use(u.TextDecoration),e){case r.TextDecoration.original:return"TextDecoration.None";case r.TextDecoration.underline:return"TextDecoration.Underline";case r.TextDecoration.strikethrough:return"TextDecoration.LineThrough"}}static visibilityToKotlin(e){return e===r.VisibilityType.visible?"true":"false"}static blurTokenValueToKotlin(e,t,o,r){const n=(0,i.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);return n?o.tokenToVariableRef(n):(r.use(u.Modifier,u.Blur),`Modifier.blur(${this.dimensionTokenValueToKotlin(e.radius,t,o,r)})`)}static fontWeightTokenValueToKotlin(e,t,o,r){const n=(0,i.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);if(n)return o.tokenToVariableRef(n);const a=(0,i.normalizeTextWeight)(e.text);return this.fontWeightIntToKotlin(a,r)}static fontWeightIntToKotlin(e,t){switch(t.use(u.FontWeight),e){case 100:return"FontWeight.Thin";case 200:return"FontWeight.ExtraLight";case 300:return"FontWeight.Light";case 400:return"FontWeight.Normal";case 500:return"FontWeight.Medium";case 600:return"FontWeight.SemiBold";case 700:return"FontWeight.Bold";case 800:return"FontWeight.ExtraBold";case 900:return"FontWeight.Black";default:return`FontWeight(${e})`}}static fontFamilyTokenValueToKotlin(e,t,o,r){const n=(0,i.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);if(n)return o.tokenToVariableRef(n);r.use(u.FontFamily,u.Font,u.R);return`FontFamily(Font(R.font.${l.NamingHelper.codeSafeVariableName(e.text,s.StringCase.snakeCase)}))`}static typographyTokenValueToKotlin(e,t,o,n){const l=(0,i.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);if(l)return o.tokenToVariableRef(l);n.use(u.TextStyle,u.TextDecoration);const s=(0,i.sureOptionalReference)(e.fontFamily.referencedTokenId,t,o.allowReferences),c=(0,i.sureOptionalReference)(e.fontWeight.referencedTokenId,t,o.allowReferences),p=(0,i.sureOptionalReference)(e.textDecoration.referencedTokenId,t,o.allowReferences),d=s?o.tokenToVariableRef(s):this.fontFamilyTokenValueToKotlin(e.fontFamily,t,o,n),m=c?o.tokenToVariableRef(c):this.fontWeightIntToKotlin((0,i.normalizeTextWeight)(e.fontWeight.text),n),T=p?o.tokenToVariableRef(p):e.textDecoration.value===r.TextDecoration.original?"TextDecoration.None":this.textDecorationToKotlin(e.textDecoration.value,n),y=this.textUnitTokenValueToKotlin(e.fontSize,t,o,n),f=e.lineHeight?this.textUnitTokenValueToKotlin(e.lineHeight,t,o,n):void 0,g=e.letterSpacing?this.letterSpacingTokenValueToKotlin(e.letterSpacing,t,o,n):void 0,h=[`fontFamily = ${d}`,`fontWeight = ${m}`,`fontSize = ${y}`];f&&h.push(`lineHeight = ${f}`),g&&h.push(`letterSpacing = ${g}`),T&&h.push(`textDecoration = ${T}`);const b=a.GeneralHelper.indent(o.indent);return`TextStyle(\n${h.map((e=>`${b}${b}${e}`)).join(",\n")}\n${b})`}}},"../../utils/dist/helpers/NamingHelper.js":
/*!************************************************!*\
  !*** ../../utils/dist/helpers/NamingHelper.js ***!
  \************************************************/(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.NamingHelper=void 0;const r=o(/*! ../enums/StringCase */"../../utils/dist/enums/StringCase.js"),n=o(/*! change-case */"../../utils/node_modules/change-case/dist/index.js");class i{static applyFindReplace(e,t){if(!t)return e;const o=Object.entries(t).sort((([e],[t])=>t.length-e.length));let r=e;for(const[e,t]of o){const o=e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&"),n=new RegExp(`\\b${o}\\b|(?<=^|\\s)${o}(?=\\s|$)`,"gi");r=r.replace(n,t)}return r}static codeSafeVariableNameForToken(e,t,o,r,n,a=!0){let l=[];o&&(l.push(...o.path),o.isRoot||l.push(o.name));const s=e.name.split(/[\s-_]+/);if(l.length>0&&s.length>1&&s[0].toLowerCase()===l[l.length-1].toLowerCase()?l.push(s.slice(1).join(" ")):l.push(e.name),n){let e=l.join(" ");e=i.applyFindReplace(e,n),l=e.split(/\s+/).filter((e=>e.length>0)).map((e=>e.trim()))}return r&&r.length>0&&l.unshift(r),i.codeSafeVariableName(l,t,void 0,a)}static codeSafeVariableName(e,t,o,a=!1){let l="string"==typeof e?e:e.join(" ");if(l=i.applyFindReplace(l,o),l=l.replaceAll(/[^a-zA-Z0-9_-]/g,"_"),a){const e=(0,n.kebabCase)(l).split("-").filter((e=>e.length>0));l=e.filter(((t,o)=>0===o||t!==e[o-1])).join(" ")}switch(t){case r.StringCase.camelCase:l=(0,n.camelCase)(l);break;case r.StringCase.capitalCase:l=(0,n.capitalCase)(l);break;case r.StringCase.constantCase:l=(0,n.constantCase)(l);break;case r.StringCase.dotCase:l=(0,n.dotCase)(l);break;case r.StringCase.trainCase:l=(0,n.trainCase)(l);break;case r.StringCase.noCase:l=(0,n.noCase)(l);break;case r.StringCase.kebabCase:l=(0,n.kebabCase)(l);break;case r.StringCase.pascalCase:l=(0,n.pascalCase)(l);break;case r.StringCase.pathCase:l=(0,n.pathCase)(l);break;case r.StringCase.sentenceCase:l=(0,n.sentenceCase)(l);break;case r.StringCase.snakeCase:l=(0,n.snakeCase)(l);break;case r.StringCase.flatCase:l=(0,n.camelCase)(l).toLowerCase()}return t!==r.StringCase.snakeCase&&t!==r.StringCase.constantCase&&(l=l.replaceAll("_","")),l.match(/^[^a-zA-Z]/)&&(l="_"+l),l}static nameAsCSSVarReference(e){return`var(--${e})`}static nameAsCSSVarDeclaration(e){return`--${e}`}}t.NamingHelper=i},"../../utils/dist/helpers/ThemeHelper.js":
/*!***********************************************!*\
  !*** ../../utils/dist/helpers/ThemeHelper.js ***!
  \***********************************************/(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ThemeHelper=void 0;const r=o(/*! ./NamingHelper */"../../utils/dist/helpers/NamingHelper.js"),n=o(/*! ../enums/StringCase */"../../utils/dist/enums/StringCase.js");t.ThemeHelper=class{static hasThemedTokens(e,t,o){const r=e.filter((e=>e.tokenType===t)),n=new Set(o.overriddenTokens.map((e=>e.id)));return r.some((e=>n.has(e.id)))}static filterThemedTokens(e,t){const o=new Set(t.overriddenTokens.map((e=>e.id)));return e.filter((e=>o.has(e.id)))}static getThemeIdentifier(e,t=n.StringCase.kebabCase){if("string"==typeof e)return e;const o=e.codeName||e.name;return r.NamingHelper.codeSafeVariableName(o,t)}static getThemeName(e){if("string"==typeof e)return e;const t=e.codeName||e.name;return r.NamingHelper.codeSafeVariableName(t,n.StringCase.capitalCase)}}},"../../utils/dist/helpers/TokenHelper.js":
/*!***********************************************!*\
  !*** ../../utils/dist/helpers/TokenHelper.js ***!
  \***********************************************/(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.sureOptionalReference=function(e,t,o=!0){if(!e||!o)return null;const r=t.get(e);if(!r)throw new Error(`Trying to retrieve unknown referenced token ${e}`);return r},t.normalizeTextWeight=function(e){const t=e.toLowerCase().trim(),o=parseInt(t);if(!isNaN(o))return o;switch(t){case"thin":case"hairline":return 100;case"extra light":case"extralight":case"ultra light":case"ultralight":return 200;case"light":return 300;case"normal":case"regular":case"book":default:return 400;case"medium":return 500;case"semi bold":case"semibold":case"demi bold":case"demibold":return 600;case"bold":return 700;case"extra bold":case"extrabold":case"ultra bold":case"ultrabold":return 800;case"black":case"heavy":return 900}}},"../../utils/dist/helpers/TokenNameTracker.js":
/*!****************************************************!*\
  !*** ../../utils/dist/helpers/TokenNameTracker.js ***!
  \****************************************************/(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TokenNameTracker=void 0;const r=o(/*! ./NamingHelper */"../../utils/dist/helpers/NamingHelper.js");t.TokenNameTracker=class{constructor(){this.tokenNameMap=new Map,this.nameToTokenMap=new Map,this.hierarchyNameMap=new Map}reset(){this.tokenNameMap.clear(),this.nameToTokenMap.clear(),this.hierarchyNameMap.clear()}getSimpleTokenName(e,t,o=!1,n=[]){const i=`${n.join("/")}/${e.name}`;if(!o&&this.tokenNameMap.has(e.id))return this.tokenNameMap.get(e.id);let a=r.NamingHelper.codeSafeVariableName(e.name,t);this.hierarchyNameMap.has(i)||this.hierarchyNameMap.set(i,new Set);const l=this.hierarchyNameMap.get(i);return l.size>0&&!l.has(e.id)&&(a=`${a}_${l.size}`),l.add(e.id),o||(this.tokenNameMap.set(e.id,a),this.nameToTokenMap.set(a,e.id)),a}getTokenName(e,t,o,n,i=!1,a="_copy_"){if(!i&&this.tokenNameMap.has(e.id))return this.tokenNameMap.get(e.id);const l=t.find((t=>t.id===e.parentGroupId));let s=r.NamingHelper.codeSafeVariableNameForToken(e,o,l,n),c=1;for(;this.nameToTokenMap.has(s)&&this.nameToTokenMap.get(s)!==e.id;)s=`${s}${a}${c++}`;return i||(this.tokenNameMap.set(e.id,s),this.nameToTokenMap.set(s,e.id)),s}}},"../../utils/dist/helpers/WriteTokenPropStore.js":
/*!*******************************************************!*\
  !*** ../../utils/dist/helpers/WriteTokenPropStore.js ***!
  \*******************************************************/(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.WriteTokenPropStore=void 0;const r=o(/*! ./NamingHelper */"../../utils/dist/helpers/NamingHelper.js"),n=o(/*! ../enums/StringCase */"../../utils/dist/enums/StringCase.js");t.WriteTokenPropStore=class{constructor(e,t){this.tokenPropertyWriteMap=new Map,this.sdk=e,this.target=t}storeValueForTokenProperty(e,t,o){let r=this.tokenPropertyWriteMap.get(t);r||(r=new Map,this.tokenPropertyWriteMap.set(t,r)),r.set(e,o)}async batchUpdateStoredTokenProperties(){if(0===this.tokenPropertyWriteMap.size)return;let e=await this.sdk.tokens.getTokenProperties(this.target);for(const[t,o]of this.tokenPropertyWriteMap){let i=e.find((e=>e.name===t));if(i||(await this.sdk.tokens.createTokenProperty(this.target,{type:"Generic",name:t,codeName:r.NamingHelper.codeSafeVariableName([t],n.StringCase.camelCase),columnWidth:200,description:"Variable name to use in code"}),e=await this.sdk.tokens.getTokenProperties(this.target),i=e.find((e=>e.name===t))),!i)throw new Error(`Failed to retrieve or create property ${t}.`);const a=Array.from(o).map((([e,t])=>({definitionId:i.id,targetElementId:e.id,value:t})));await this.sdk.bulkOperations.updateElementProperties(this.target,a)}}async writeTokenProperties(e,t,o){const r=e?.trim();if(r){for(const e of t){const t=o(e);this.storeValueForTokenProperty(e,r,t)}await this.batchUpdateStoredTokenProperties()}}}},"../../utils/dist/index.js":
/*!*********************************!*\
  !*** ../../utils/dist/index.js ***!
  \*********************************/function(e,t,o){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,o,r){void 0===r&&(r=o);var n=Object.getOwnPropertyDescriptor(t,o);n&&!("get"in n?!t.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return t[o]}}),Object.defineProperty(e,r,n)}:function(e,t,o,r){void 0===r&&(r=o),e[r]=t[o]}),n=this&&this.__exportStar||function(e,t){for(var o in e)"default"===o||Object.prototype.hasOwnProperty.call(t,o)||r(t,e,o)};Object.defineProperty(t,"__esModule",{value:!0}),n(o(/*! ./helpers/NamingHelper */"../../utils/dist/helpers/NamingHelper.js"),t),n(o(/*! ./helpers/ColorHelper */"../../utils/dist/helpers/ColorHelper.js"),t),n(o(/*! ./helpers/TokenHelper */"../../utils/dist/helpers/TokenHelper.js"),t),n(o(/*! ./helpers/CSSHelper */"../../utils/dist/helpers/CSSHelper.js"),t),n(o(/*! ./helpers/FileHelper */"../../utils/dist/helpers/FileHelper.js"),t),n(o(/*! ./helpers/ThemeHelper */"../../utils/dist/helpers/ThemeHelper.js"),t),n(o(/*! ./helpers/FileNameHelper */"../../utils/dist/helpers/FileNameHelper.js"),t),n(o(/*! ./helpers/GeneralHelper */"../../utils/dist/helpers/GeneralHelper.js"),t),n(o(/*! ./enums/StringCase */"../../utils/dist/enums/StringCase.js"),t),n(o(/*! ./enums/ColorFormat */"../../utils/dist/enums/ColorFormat.js"),t),n(o(/*! ./helpers/TokenNameTracker */"../../utils/dist/helpers/TokenNameTracker.js"),t),n(o(/*! ./helpers/WriteTokenPropStore */"../../utils/dist/helpers/WriteTokenPropStore.js"),t),n(o(/*! ./helpers/KotlinHelper */"../../utils/dist/helpers/KotlinHelper.js"),t)},"../../utils/node_modules/@supernovaio/sdk-exporters/build/supernova-sdk-typescript.js":
/*!*********************************************************************************************!*\
  !*** ../../utils/node_modules/@supernovaio/sdk-exporters/build/supernova-sdk-typescript.js ***!
  \*********************************************************************************************/(e,t)=>{(()=>{"use strict";var e={1:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.GradientType=void 0,function(e){e.linear="Linear",e.radial="Radial",e.angular="Angular"}(o||(t.GradientType=o={}))},306:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockTextPropertyStyle=void 0,function(e){e.title1="Title1",e.title2="Title2",e.title3="Title3",e.title4="Title4",e.title5="Title5",e.default="Default",e.defaultBold="DefaultBold",e.defaultSemibold="DefaultSemibold",e.small="Small",e.smallBold="SmallBold",e.smallSemibold="SmallSemibold",e.custom="Custom"}(o||(t.DocsBlockTextPropertyStyle=o={}))},899:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.AssetScaleType=void 0,function(e){e.aspectFill="AspectFill",e.aspectFit="AspectFit"}(o||(t.AssetScaleType=o={}))},915:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.AssetScale=void 0,function(e){e.x1="x1",e.x2="x2",e.x3="x3",e.x4="x4"}(o||(t.AssetScale=o={}))},922:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.TextCase=void 0,function(e){e.original="Original",e.upper="Upper",e.lower="Lower",e.camel="Camel",e.smallCaps="SmallCaps"}(o||(t.TextCase=o={}))},934:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.IconSet=void 0,function(e){e.checkCircle="CheckCircle",e.crossCircle="CrossCircle",e.alert="Alert"}(o||(t.IconSet=o={}))},1160:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.ALL_BORDER_POSITIONS=t.BorderPosition=void 0,function(e){e.inside="Inside",e.center="Center",e.outside="Outside"}(o||(t.BorderPosition=o={})),t.ALL_BORDER_POSITIONS=[o.inside,o.center,o.outside]},1233:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsEntityType=void 0,function(e){e.group="Group",e.page="Page"}(o||(t.DocsEntityType=o={}))},1255:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.FrameAlignment=void 0,function(e){e.frameHeight="FrameHeight",e.center="Center"}(o||(t.FrameAlignment=o={}))},1423:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyPageAssetType=void 0,function(e){e.image="image",e.figmaFrame="figmaFrame"}(o||(t.DocumentationLegacyPageAssetType=o={}))},1601:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyPageBlockThemeType=void 0,function(e){e.override="Override",e.comparison="Comparison"}(o||(t.DocumentationLegacyPageBlockThemeType=o={}))},1846:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyPageBlockType=void 0,function(e){e.text="Text",e.heading="Heading",e.code="Code",e.unorderedList="UnorderedList",e.orderedList="OrderedList",e.quote="Quote",e.callout="Callout",e.divider="Divider",e.image="Image",e.token="Token",e.tokenList="TokenList",e.tokenGroup="TokenGroup",e.shortcuts="Shortcuts",e.link="Link",e.figmaEmbed="FigmaEmbed",e.youtubeEmbed="YoutubeEmbed",e.storybookEmbed="StorybookEmbed",e.genericEmbed="Embed",e.figmaFrames="FigmaFrames",e.custom="Custom",e.renderCode="RenderCode",e.componentAssets="ComponentAssets",e.column="Column",e.columnItem="ColumnItem",e.tabs="Tabs",e.tabItem="TabItem",e.table="Table",e.tableCell="TableCell",e.tableRow="TableRow"}(o||(t.DocumentationLegacyPageBlockType=o={}))},2123:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyGroupBehavior=void 0,function(e){e.group="Group",e.tabs="Tabs"}(o||(t.DocumentationLegacyGroupBehavior=o={}))},2657:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyPageBlockShortcut=t.DocumentationLegacyPageBlockShortcutType=void 0,function(e){e.external="External",e.internal="Internal"}(o||(t.DocumentationLegacyPageBlockShortcutType=o={})),t.DocumentationLegacyPageBlockShortcut=class{constructor(e){var t;e.url?this.type=o.external:this.type=o.internal,this.title=this.shortcutTitleFromModel(e,this.type),this.description=this.shortcutDescriptionFromModel(e,this.type),this.previewUrl=this.shortcutPreviewUrlFromModel(e),this.type===o.internal&&(null===(t=e.documentationItemPreview)||void 0===t?void 0:t.valid)&&e.documentationItemId?this.internalId=e.documentationItemId:(this.internalId=null,this.type===o.external&&e.url?this.externalUrl=e.url:this.externalUrl=null)}shortcutTitleFromModel(e,t){var r,n,i,a,l;let s=null;return e.title&&e.title.trim().length>0?s=e.title:t===o.internal?s=null!==(n=null===(r=e.documentationItemPreview)||void 0===r?void 0:r.title)&&void 0!==n?n:null:t===o.external&&(s=null!==(l=null!==(a=null===(i=e.urlPreview)||void 0===i?void 0:i.title)&&void 0!==a?a:e.url)&&void 0!==l?l:null),s&&0!==s.trim().length?s:null}shortcutDescriptionFromModel(e,t){var r;let n=null;return e.description&&e.description.trim().length>0?n=e.description:t===o.external&&(n=null===(r=e.urlPreview)||void 0===r?void 0:r.description),n&&0!==n.trim().length?n:null}shortcutPreviewUrlFromModel(e){var t,o,r,n,i;return null!==(i=null!==(r=null!==(t=e.assetUrl)&&void 0!==t?t:null===(o=e.asset)||void 0===o?void 0:o.url)&&void 0!==r?r:null===(n=e.urlPreview)||void 0===n?void 0:n.thumbnailUrl)&&void 0!==i?i:null}}},2674:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.RichTextSpanAttributeType=void 0,function(e){e.bold="Bold",e.italic="Italic",e.link="Link",e.strikethrough="Strikethrough",e.code="Code"}(o||(t.RichTextSpanAttributeType=o={}))},2802:(e,t)=>{var o,r;Object.defineProperty(t,"__esModule",{value:!0}),t.PulsarExecutor=t.OutputFileType=void 0,function(e){e.copyRemoteUrl="copyRemoteUrl",e.text="text",e.binary="binary"}(o||(t.OutputFileType=o={})),function(e){e.supernova="supernova",e.local="local"}(r||(t.PulsarExecutor=r={}))},3607:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.WorkspaceSubscriptionStatus=void 0,function(e){e.active="active",e.gracePeriod="gracePeriod",e.cancelled="cancelled",e.suspended="suspended"}(o||(t.WorkspaceSubscriptionStatus=o={}))},3718:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.FrameLayout=void 0,function(e){e.c8="C8",e.c7="C7",e.c6="C6",e.c5="C5",e.c4="C4",e.c3="C3",e.c2="C2",e.c1="C1",e.c175="C1_75"}(o||(t.FrameLayout=o={}))},3733:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockBehaviorSelectionType=void 0,function(e){e.entity="Entity",e.group="Group",e.entityAndGroup="EntityAndGroup"}(o||(t.DocsBlockBehaviorSelectionType=o={}))},3788:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DT_TOKEN_TYPES=t.tokenTypeIsReferencable=t.REFERENCABLE_TOKEN_TYPES=t.REPLACABLE_TOKEN_TYPES=t.tokenTypeIsNonPure=t.tokenTypeIsPure=t.PURE_TOKEN_TYPES=t.ALL_TOKEN_TYPES=t.MS_DIMENSION_TOKEN_TYPES=t.RAW_DIMENSION_TOKEN_TYPES=t.DIMENSION_TOKEN_TYPES=t.OPTION_TOKEN_TYPES=t.STRING_TOKEN_TYPES=t.TokenType=void 0,function(e){e.color="Color",e.typography="Typography",e.shadow="Shadow",e.border="Border",e.gradient="Gradient",e.blur="Blur",e.radius="BorderRadius",e.borderWidth="BorderWidth",e.duration="Duration",e.fontSize="FontSize",e.dimension="Dimension",e.letterSpacing="LetterSpacing",e.lineHeight="LineHeight",e.opacity="Opacity",e.paragraphSpacing="ParagraphSpacing",e.size="Size",e.space="Space",e.zIndex="ZIndex",e.textDecoration="TextDecoration",e.textCase="TextCase",e.visibility="Visibility",e.fontFamily="FontFamily",e.fontWeight="FontWeight",e.string="String",e.productCopy="ProductCopy"}(o||(t.TokenType=o={})),t.STRING_TOKEN_TYPES=[o.string,o.productCopy,o.fontFamily,o.fontWeight],t.OPTION_TOKEN_TYPES=[o.textCase,o.textDecoration,o.visibility],t.DIMENSION_TOKEN_TYPES=[o.dimension,o.size,o.space,o.opacity,o.fontSize,o.lineHeight,o.letterSpacing,o.paragraphSpacing,o.borderWidth,o.radius,o.duration,o.zIndex],t.RAW_DIMENSION_TOKEN_TYPES=[o.opacity,o.zIndex],t.MS_DIMENSION_TOKEN_TYPES=[o.duration],t.ALL_TOKEN_TYPES=[...t.DIMENSION_TOKEN_TYPES,...t.STRING_TOKEN_TYPES,...t.OPTION_TOKEN_TYPES,o.color,o.gradient,o.border,o.radius,o.shadow,o.typography,o.blur],t.PURE_TOKEN_TYPES=[...t.DIMENSION_TOKEN_TYPES,...t.STRING_TOKEN_TYPES,...t.OPTION_TOKEN_TYPES],t.tokenTypeIsPure=e=>t.PURE_TOKEN_TYPES.includes(e),t.tokenTypeIsNonPure=e=>!(0,t.tokenTypeIsPure)(e),t.REPLACABLE_TOKEN_TYPES=[o.color,...t.DIMENSION_TOKEN_TYPES,...t.STRING_TOKEN_TYPES,...t.OPTION_TOKEN_TYPES],t.REFERENCABLE_TOKEN_TYPES=[o.color,...t.DIMENSION_TOKEN_TYPES,o.fontFamily,o.fontWeight,o.textCase,o.textDecoration],t.tokenTypeIsReferencable=e=>t.REFERENCABLE_TOKEN_TYPES.includes(e),t.DT_TOKEN_TYPES=[o.color,o.shadow,o.gradient,o.typography,o.border,...t.DIMENSION_TOKEN_TYPES,o.fontFamily,o.fontWeight,o.string,...t.OPTION_TOKEN_TYPES]},4068:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsEntityGroupBehavior=void 0,function(e){e.group="Group",e.tabs="Tabs"}(o||(t.DocsEntityGroupBehavior=o={}))},4290:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.WorkspaceSubscriptionProductCode=void 0,function(e){e.free="free",e.team="team",e.teamTest="team_test",e.company="company",e.enterprise="enterprise"}(o||(t.WorkspaceSubscriptionProductCode=o={}))},4379:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.SupernovaError=void 0;class o extends Error{constructor(e,t,o,r,n,i,a){super(e),this.code=t,this.status=o,this.formErrors=r,this.requestId=n,this.serverTime=i,this.url=a}static fromNetworkResponse(e,t,r){var n,i,a;return new o(e.message,e.errorCode||e.reason||e.label||null,e.code||t,null!==(n=e.formErrors)&&void 0!==n?n:null,null!==(i=e.requestId)&&void 0!==i?i:null,null!==(a=e.serverTime)&&void 0!==a?a:null,r)}static fromNoNetworkResponse(e){return new o("No network or internet unreachable","NO_NETWORK",12163,null,(new Date).toISOString(),null,e)}static fromCode(e){return new o(e,e,null,null,null,null,null)}static fromMessage(e){return new o(e,null,null,null,null,null,null)}isFieldErrored(e){return void 0!==this.formErrors.find((t=>t.key===e))}errorForField(e){var t;return null!==(t=this.formErrors.find((t=>t.key===e)))&&void 0!==t?t:null}toString(){var e,t,o,r,n,i;return`\n    Error thrown: ${this.message}\n\n    Code: ${null!==(e=this.code)&&void 0!==e?e:"-"}\n\n    Status: ${null!==(t=this.status)&&void 0!==t?t:"-"}\n\n    Fields: ${JSON.stringify(this.formErrors,null,2)}\n\n    Request ID: ${null!==(o=this.requestId)&&void 0!==o?o:"-"}\n\n    Server time: ${null!==(r=this.serverTime)&&void 0!==r?r:"-"}\n\n    Network URL: ${null!==(n=this.url)&&void 0!==n?n:"-"}\n\n    Stack: ${null!==(i=this.stack)&&void 0!==i?i:"-"}\n    `}toHumanReadable(){return`${this.message}${this.requestId?` (request ${this.requestId})`:""}`}}t.SupernovaError=o},4546:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.ALL_BORDER_STYLES=t.BorderStyle=void 0,function(e){e.dashed="Dashed",e.dotted="Dotted",e.solid="Solid",e.groove="Groove"}(o||(t.BorderStyle=o={})),t.ALL_BORDER_STYLES=[o.dashed,o.dotted,o.solid,o.groove]},4652:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.SourceType=void 0,function(e){e.figma="Figma",e.tokenStudio="TokenStudio",e.figmaVariablesPlugin="FigmaVariablesPlugin"}(o||(t.SourceType=o={}))},5102:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyCalloutType=void 0,function(e){e.info="Info",e.success="Success",e.warning="Warning",e.error="Error"}(o||(t.DocumentationLegacyCalloutType=o={}))},5503:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.WorkspaceSubscriptionPlanInterval=void 0,function(e){e.yearly="yearly",e.monthly="monthly"}(o||(t.WorkspaceSubscriptionPlanInterval=o={}))},5651:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockBehaviorDataType=void 0,function(e){e.item="Item",e.token="Token",e.asset="Asset",e.component="Component",e.figmaNode="FigmaNode",e.figmaComponent="FigmaComponent"}(o||(t.DocsBlockBehaviorDataType=o={}))},5673:(e,t)=>{var o;function r(e){switch(e.type){case o.documentationItem:return`@page:${e.documentationItemId}`;case o.pageHeading:return`@page:${e.documentationItemId}#${e.pageHeadingId}`;case o.url:return e.url;default:return}}Object.defineProperty(t,"__esModule",{value:!0}),t.linkAttributeToDocsLink=t.docsLinkToLinkAttributes=t.docsLinkToUrl=t.DocsLinkRefType=void 0,function(e){e.documentationItem="DocumentationItem",e.pageHeading="PageHeading",e.url="Url"}(o||(t.DocsLinkRefType=o={})),t.docsLinkToUrl=r,t.docsLinkToLinkAttributes=function(e){const t=r(e);if(t)return{href:t,target:e.openInNewTab?"_blank":"_self"}},t.linkAttributeToDocsLink=function(e,t){if(!e)return;const r="_blank"===t;if(e.startsWith("@page:")){if(e.includes("#")){const[t,n]=e.replace("@page:","").split("#");return{type:o.pageHeading,documentationItemId:t,pageHeadingId:n,openInNewTab:r}}return{type:o.documentationItem,documentationItemId:e.replace("@page:",""),openInNewTab:r}}return{type:o.url,url:e,openInNewTab:r}}},5695:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.CustomDomainErrorCode=void 0,function(e){e.generalError="GeneralError",e.dnsNotConfigured="DNSNotConfigured",e.maintenance="Maintenance"}(o||(t.CustomDomainErrorCode=o={}))},5883:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockItemPropertyOptionRenderingStyle=void 0,function(e){e.segmentedControl="SegmentedControl",e.toggleButton="ToggleButton",e.select="Select",e.checkbox="Checkbox"}(o||(t.DocsBlockItemPropertyOptionRenderingStyle=o={}))},5963:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockOptionRenderingStyle=void 0,function(e){e.segmentedControl="SegmentedControl",e.toggleButton="ToggleButton",e.select="Select",e.checkbox="Checkbox"}(o||(t.DocsBlockOptionRenderingStyle=o={}))},6141:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.VisibilityType=void 0,function(e){e.visible="Visible",e.hidden="Hidden"}(o||(t.VisibilityType=o={}))},6192:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.BlurType=void 0,function(e){e.layer="Layer",e.background="Background"}(o||(t.BlurType=o={}))},6298:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.WorkspaceNPMRegistryAuthType=void 0,function(e){e.basic="Basic",e.bearer="Bearer"}(o||(t.WorkspaceNPMRegistryAuthType=o={}))},6644:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockRichTextPropertyStyle=void 0,function(e){e.title1="Title1",e.title2="Title2",e.title3="Title3",e.title4="Title4",e.title5="Title5",e.quote="Quote",e.callout="Callout",e.default="Default"}(o||(t.DocsBlockRichTextPropertyStyle=o={}))},6839:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockItemPropertyType=void 0,function(e){e.richText="RichText",e.multiRichText="MultiRichText",e.text="Text",e.richTextEditor="RichTextEditor",e.boolean="Boolean",e.number="Number",e.singleSelect="SingleSelect",e.multiSelect="MultiSelect",e.image="Image",e.token="Token",e.tokenType="TokenType",e.tokenProperty="TokenProperty",e.component="Component",e.componentProperty="ComponentProperty",e.asset="Asset",e.assetProperty="AssetProperty",e.embedURL="EmbedURL",e.url="URL",e.markdown="Markdown",e.code="Code",e.codeSandbox="CodeSandbox",e.table="Table",e.divider="Divider",e.storybook="Storybook",e.color="Color",e.figmaNode="FigmaNode",e.figmaComponent="FigmaComponent"}(o||(t.DocsBlockItemPropertyType=o={}))},7040:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.TextDecoration=void 0,function(e){e.original="None",e.underline="Underline",e.strikethrough="Strikethrough"}(o||(t.TextDecoration=o={}))},7291:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockItemVariantLayoutWidth=void 0,function(e){e.c1="1",e.c2="2",e.c3="3",e.c4="4",e.c5="5",e.c6="6",e.c7="7",e.c8="8",e.c9="9",e.c10="10",e.c11="11",e.c12="12"}(o||(t.DocsBlockItemVariantLayoutWidth=o={}))},7379:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyItemType=void 0,function(e){e.group="Group",e.page="Page"}(o||(t.DocumentationLegacyItemType=o={}))},7476:(e,t)=>{var o,r;Object.defineProperty(t,"__esModule",{value:!0}),t.TextAlignment=t.Alignment=void 0,function(e){e.left="Left",e.center="Center",e.stretch="Stretch"}(o||(t.Alignment=o={})),function(e){e.left="Left",e.center="Center",e.right="Right"}(r||(t.TextAlignment=r={}))},7479:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockItemPropertyTextStyle=void 0,function(e){e.small="Small",e.regular="Regular",e.bold="Bold"}(o||(t.DocsBlockItemPropertyTextStyle=o={}))},7737:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.CustomDomainState=void 0,function(e){e.initial="Initial",e.domainSetupInProgress="DomainSetupInProgress",e.domainSetupFailed="DomainSetupFailed",e.domainSetupsSucces="DomainSetupSuccess",e.sslSetupInProgress="SSLSetupInProgress",e.sslSetupFailed="SSLSetupFailed",e.sslSetupSuccess="SSLSetupSuccess"}(o||(t.CustomDomainState=o={}))},7968:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.WorkspaceNPMRegistryType=void 0,function(e){e.npmJS="NPMJS",e.gitHub="GitHub",e.azureDevOps="AzureDevOps",e.artifactory="Artifactory",e.custom="Custom"}(o||(t.WorkspaceNPMRegistryType=o={}))},7971:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsSectionType=void 0,function(e){e.plain="Plain",e.tabs="Tabs"}(o||(t.DocsSectionType=o={}))},8042:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.ImportWarningType=void 0,function(e){e.UnsupportedFill="UnsupportedFill",e.UnsupportedStroke="UnsupportedStroke",e.UnsupportedEffect="UnsupportedEffect",e.StyleNotApplied="StyleNotApplied",e.NoPublishedStyles="NoPublishedStyles",e.NoPublishedComponents="NoPublishedComponents",e.NoPublishedAssets="NoPublishedAssets",e.NoVersionFound="NoVersionFound",e.ComponentHasNoThumbnail="ComponentHasNoThumbnail",e.DuplicateImportedStyleId="DuplicateImportedStyleId",e.DuplicateImportedStylePath="DuplicateImportedStylePath",e.NoPublishedElements="NoPublishedElements",e.NoUnpublishedStyles="NoUnpublishedStyles"}(o||(t.ImportWarningType=o={}))},8061:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockItemPropertyRichTextStyle=void 0,function(e){e.title1="Title1",e.title2="Title2",e.title3="Title3",e.title4="Title4",e.title5="Title5",e.quote="Quote",e.callout="Callout",e.ol="OL",e.ul="UL"}(o||(t.DocsBlockItemPropertyRichTextStyle=o={}))},8095:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockItemVariantLayoutType=void 0,function(e){e.column="Column",e.row="Row"}(o||(t.DocsBlockItemVariantLayoutType=o={}))},8607:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.MS_UNITS=t.PX_UNITS=t.RAW_UNITS=t.LINE_HEIGHT_UNITS=t.SIZE_UNITS=t.Unit=void 0,function(e){e.pixels="Pixels",e.percent="Percent",e.rem="Rem",e.ms="Ms",e.raw="Raw"}(o||(t.Unit=o={})),t.SIZE_UNITS=[o.pixels,o.percent,o.rem],t.LINE_HEIGHT_UNITS=[o.pixels,o.percent,o.rem,o.raw],t.RAW_UNITS=[o.raw],t.PX_UNITS=[o.pixels],t.MS_UNITS=[o.ms]},8738:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.AssetFormat=void 0,function(e){e.png="png",e.pdf="pdf",e.svg="svg"}(o||(t.AssetFormat=o={}))},8890:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockImagePropertyAspectRatio=void 0,function(e){e.auto="Auto",e.square="Square",e.landscape="Landscape",e.portrait="Portrait",e.wide="Wide"}(o||(t.DocsBlockImagePropertyAspectRatio=o={}))},9125:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.ShadowType=void 0,function(e){e.drop="Drop",e.inner="Inner"}(o||(t.ShadowType=o={}))},9133:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockOptionColor=void 0,function(e){e.green="Green",e.red="Red",e.yellow="Yellow",e.blue="Blue",e.purple="Purple",e.orange="Orange",e.pink="Pink",e.teal="Teal",e.grey="Grey",e.lightGrey="LightGrey",e.cyan="Cyan",e.fuchsia="Fuchsia"}(o||(t.DocsBlockOptionColor=o={}))},9377:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockItemEntityType=void 0,function(e){e.token="Token",e.tokenGroup="TokenGroup",e.asset="Asset",e.assetGroup="AssetGroup",e.component="Component",e.componentGroup="ComponentGroup"}(o||(t.DocsBlockItemEntityType=o={}))},9478:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.convertRemoteToUserRole=t.UserRole=void 0;const r=o(4379);var n;!function(e){e.owner="Owner",e.admin="Admin",e.creator="Creator",e.contributor="Contributor",e.billing="Billing",e.viewer="Viewer"}(n||(t.UserRole=n={})),t.convertRemoteToUserRole=e=>{switch(e){case"Owner":return n.owner;case"Admin":return n.admin;case"Creator":return n.creator;case"Contributor":return n.contributor;case"Billing":return n.billing;case"Viewer":return n.viewer;default:throw r.SupernovaError.fromMessage(`Unknown role: ${e}`)}}},9896:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyHeadingType=void 0,function(e){e[e.h1=1]="h1",e[e.h2=2]="h2",e[e.h3=3]="h3"}(o||(t.DocumentationLegacyHeadingType=o={}))},9932:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.docsImageRefToUrl=t.DocsImageRefType=void 0,function(e){e.resource="Resource",e.figmaNode="FigmaNode"}(o||(t.DocsImageRefType=o={})),t.docsImageRefToUrl=function(e,t,r){var n;if(e)switch(e.type){case o.resource:return null===(n=e.resource)||void 0===n?void 0:n.url;case o.figmaNode:if(!e.figmaNode||!e.figmaNode.sourceId||!e.figmaNode.frameReferenceId)return;return t.resources.getFigmaFrameHostedUrl({designSystemId:r.dsId,versionId:r.versionId},e.figmaNode.frameReferenceId);default:return}}}},o={};function r(t){var n=o[t];if(void 0!==n)return n.exports;var i=o[t]={exports:{}};return e[t](i,i.exports,r),i.exports}var n={};(()=>{var e=n;Object.defineProperty(e,"__esModule",{value:!0}),e.TokenType=e.TextDecoration=e.TextCase=e.ShadowType=e.RichTextSpanAttributeType=e.GradientType=e.FrameLayout=e.FrameAlignment=e.IconSet=e.SourceType=e.DocsImageRefType=e.DocsLinkRefType=e.DocsSectionType=e.DocsEntityType=e.DocsEntityGroupBehavior=e.DocsBlockTextPropertyStyle=e.DocsBlockRichTextPropertyStyle=e.DocsBlockOptionColor=e.DocsBlockOptionRenderingStyle=e.DocsBlockItemVariantLayoutWidth=e.DocsBlockItemVariantLayoutType=e.DocsBlockItemPropertyType=e.DocsBlockItemPropertyTextStyle=e.DocsBlockItemPropertyRichTextStyle=e.DocsBlockItemPropertyOptionRenderingStyle=e.DocsBlockItemEntityType=e.DocsBlockImagePropertyAspectRatio=e.DocsBlockBehaviorSelectionType=e.DocsBlockBehaviorDataType=e.DocumentationLegacyPageBlockShortcutType=e.DocumentationLegacyPageBlockThemeType=e.DocumentationLegacyPageBlockType=e.DocumentationLegacyPageAssetType=e.DocumentationLegacyItemType=e.DocumentationLegacyHeadingType=e.DocumentationLegacyGroupBehavior=e.DocumentationLegacyCalloutType=e.BorderStyle=e.BorderPosition=e.BlurType=e.AssetScaleType=e.AssetScale=e.AssetFormat=e.Alignment=e.ALL_TOKEN_TYPES=e.ALL_BORDER_STYLES=e.ALL_BORDER_POSITIONS=e.OPTION_TOKEN_TYPES=e.STRING_TOKEN_TYPES=e.DIMENSION_TOKEN_TYPES=void 0,e.PulsarExecutor=e.OutputFileType=e.CustomDomainState=e.CustomDomainErrorCode=e.ImportWarningType=e.WorkspaceNPMRegistryType=e.WorkspaceNPMRegistryAuthType=e.WorkspaceSubscriptionStatus=e.WorkspaceSubscriptionProductCode=e.WorkspaceSubscriptionPlanInterval=e.VisibilityType=e.UserRole=e.Unit=void 0;var t=r(3788);Object.defineProperty(e,"DIMENSION_TOKEN_TYPES",{enumerable:!0,get:function(){return t.DIMENSION_TOKEN_TYPES}}),Object.defineProperty(e,"STRING_TOKEN_TYPES",{enumerable:!0,get:function(){return t.STRING_TOKEN_TYPES}}),Object.defineProperty(e,"OPTION_TOKEN_TYPES",{enumerable:!0,get:function(){return t.OPTION_TOKEN_TYPES}});var o=r(1160);Object.defineProperty(e,"ALL_BORDER_POSITIONS",{enumerable:!0,get:function(){return o.ALL_BORDER_POSITIONS}});var i=r(4546);Object.defineProperty(e,"ALL_BORDER_STYLES",{enumerable:!0,get:function(){return i.ALL_BORDER_STYLES}});var a=r(3788);Object.defineProperty(e,"ALL_TOKEN_TYPES",{enumerable:!0,get:function(){return a.ALL_TOKEN_TYPES}});var l=r(7476);Object.defineProperty(e,"Alignment",{enumerable:!0,get:function(){return l.Alignment}});var s=r(8738);Object.defineProperty(e,"AssetFormat",{enumerable:!0,get:function(){return s.AssetFormat}});var c=r(915);Object.defineProperty(e,"AssetScale",{enumerable:!0,get:function(){return c.AssetScale}});var u=r(899);Object.defineProperty(e,"AssetScaleType",{enumerable:!0,get:function(){return u.AssetScaleType}});var p=r(6192);Object.defineProperty(e,"BlurType",{enumerable:!0,get:function(){return p.BlurType}});var d=r(1160);Object.defineProperty(e,"BorderPosition",{enumerable:!0,get:function(){return d.BorderPosition}});var m=r(4546);Object.defineProperty(e,"BorderStyle",{enumerable:!0,get:function(){return m.BorderStyle}});var T=r(5102);Object.defineProperty(e,"DocumentationLegacyCalloutType",{enumerable:!0,get:function(){return T.DocumentationLegacyCalloutType}});var y=r(2123);Object.defineProperty(e,"DocumentationLegacyGroupBehavior",{enumerable:!0,get:function(){return y.DocumentationLegacyGroupBehavior}});var f=r(9896);Object.defineProperty(e,"DocumentationLegacyHeadingType",{enumerable:!0,get:function(){return f.DocumentationLegacyHeadingType}});var g=r(7379);Object.defineProperty(e,"DocumentationLegacyItemType",{enumerable:!0,get:function(){return g.DocumentationLegacyItemType}});var h=r(1423);Object.defineProperty(e,"DocumentationLegacyPageAssetType",{enumerable:!0,get:function(){return h.DocumentationLegacyPageAssetType}});var b=r(1846);Object.defineProperty(e,"DocumentationLegacyPageBlockType",{enumerable:!0,get:function(){return b.DocumentationLegacyPageBlockType}});var S=r(1601);Object.defineProperty(e,"DocumentationLegacyPageBlockThemeType",{enumerable:!0,get:function(){return S.DocumentationLegacyPageBlockThemeType}});var k=r(2657);Object.defineProperty(e,"DocumentationLegacyPageBlockShortcutType",{enumerable:!0,get:function(){return k.DocumentationLegacyPageBlockShortcutType}});var v=r(5651);Object.defineProperty(e,"DocsBlockBehaviorDataType",{enumerable:!0,get:function(){return v.DocsBlockBehaviorDataType}});var P=r(3733);Object.defineProperty(e,"DocsBlockBehaviorSelectionType",{enumerable:!0,get:function(){return P.DocsBlockBehaviorSelectionType}});var O=r(8890);Object.defineProperty(e,"DocsBlockImagePropertyAspectRatio",{enumerable:!0,get:function(){return O.DocsBlockImagePropertyAspectRatio}});var C=r(9377);Object.defineProperty(e,"DocsBlockItemEntityType",{enumerable:!0,get:function(){return C.DocsBlockItemEntityType}});var _=r(5883);Object.defineProperty(e,"DocsBlockItemPropertyOptionRenderingStyle",{enumerable:!0,get:function(){return _.DocsBlockItemPropertyOptionRenderingStyle}});var x=r(8061);Object.defineProperty(e,"DocsBlockItemPropertyRichTextStyle",{enumerable:!0,get:function(){return x.DocsBlockItemPropertyRichTextStyle}});var I=r(7479);Object.defineProperty(e,"DocsBlockItemPropertyTextStyle",{enumerable:!0,get:function(){return I.DocsBlockItemPropertyTextStyle}});var D=r(6839);Object.defineProperty(e,"DocsBlockItemPropertyType",{enumerable:!0,get:function(){return D.DocsBlockItemPropertyType}});var N=r(8095);Object.defineProperty(e,"DocsBlockItemVariantLayoutType",{enumerable:!0,get:function(){return N.DocsBlockItemVariantLayoutType}});var E=r(7291);Object.defineProperty(e,"DocsBlockItemVariantLayoutWidth",{enumerable:!0,get:function(){return E.DocsBlockItemVariantLayoutWidth}});var R=r(5963);Object.defineProperty(e,"DocsBlockOptionRenderingStyle",{enumerable:!0,get:function(){return R.DocsBlockOptionRenderingStyle}});var B=r(9133);Object.defineProperty(e,"DocsBlockOptionColor",{enumerable:!0,get:function(){return B.DocsBlockOptionColor}});var j=r(6644);Object.defineProperty(e,"DocsBlockRichTextPropertyStyle",{enumerable:!0,get:function(){return j.DocsBlockRichTextPropertyStyle}});var F=r(306);Object.defineProperty(e,"DocsBlockTextPropertyStyle",{enumerable:!0,get:function(){return F.DocsBlockTextPropertyStyle}});var L=r(4068);Object.defineProperty(e,"DocsEntityGroupBehavior",{enumerable:!0,get:function(){return L.DocsEntityGroupBehavior}});var M=r(1233);Object.defineProperty(e,"DocsEntityType",{enumerable:!0,get:function(){return M.DocsEntityType}});var w=r(7971);Object.defineProperty(e,"DocsSectionType",{enumerable:!0,get:function(){return w.DocsSectionType}});var A=r(5673);Object.defineProperty(e,"DocsLinkRefType",{enumerable:!0,get:function(){return A.DocsLinkRefType}});var $=r(9932);Object.defineProperty(e,"DocsImageRefType",{enumerable:!0,get:function(){return $.DocsImageRefType}});var H=r(4652);Object.defineProperty(e,"SourceType",{enumerable:!0,get:function(){return H.SourceType}});var V=r(934);Object.defineProperty(e,"IconSet",{enumerable:!0,get:function(){return V.IconSet}});var W=r(1255);Object.defineProperty(e,"FrameAlignment",{enumerable:!0,get:function(){return W.FrameAlignment}});var U=r(3718);Object.defineProperty(e,"FrameLayout",{enumerable:!0,get:function(){return U.FrameLayout}});var K=r(1);Object.defineProperty(e,"GradientType",{enumerable:!0,get:function(){return K.GradientType}});var G=r(2674);Object.defineProperty(e,"RichTextSpanAttributeType",{enumerable:!0,get:function(){return G.RichTextSpanAttributeType}});var Y=r(9125);Object.defineProperty(e,"ShadowType",{enumerable:!0,get:function(){return Y.ShadowType}});var z=r(922);Object.defineProperty(e,"TextCase",{enumerable:!0,get:function(){return z.TextCase}});var q=r(7040);Object.defineProperty(e,"TextDecoration",{enumerable:!0,get:function(){return q.TextDecoration}});var J=r(3788);Object.defineProperty(e,"TokenType",{enumerable:!0,get:function(){return J.TokenType}});var Z=r(8607);Object.defineProperty(e,"Unit",{enumerable:!0,get:function(){return Z.Unit}});var X=r(9478);Object.defineProperty(e,"UserRole",{enumerable:!0,get:function(){return X.UserRole}});var Q=r(6141);Object.defineProperty(e,"VisibilityType",{enumerable:!0,get:function(){return Q.VisibilityType}});var ee=r(5503);Object.defineProperty(e,"WorkspaceSubscriptionPlanInterval",{enumerable:!0,get:function(){return ee.WorkspaceSubscriptionPlanInterval}});var te=r(4290);Object.defineProperty(e,"WorkspaceSubscriptionProductCode",{enumerable:!0,get:function(){return te.WorkspaceSubscriptionProductCode}});var oe=r(3607);Object.defineProperty(e,"WorkspaceSubscriptionStatus",{enumerable:!0,get:function(){return oe.WorkspaceSubscriptionStatus}});var re=r(6298);Object.defineProperty(e,"WorkspaceNPMRegistryAuthType",{enumerable:!0,get:function(){return re.WorkspaceNPMRegistryAuthType}});var ne=r(7968);Object.defineProperty(e,"WorkspaceNPMRegistryType",{enumerable:!0,get:function(){return ne.WorkspaceNPMRegistryType}});var ie=r(8042);Object.defineProperty(e,"ImportWarningType",{enumerable:!0,get:function(){return ie.ImportWarningType}});var ae=r(5695);Object.defineProperty(e,"CustomDomainErrorCode",{enumerable:!0,get:function(){return ae.CustomDomainErrorCode}});var le=r(7737);Object.defineProperty(e,"CustomDomainState",{enumerable:!0,get:function(){return le.CustomDomainState}});var se=r(2802);Object.defineProperty(e,"OutputFileType",{enumerable:!0,get:function(){return se.OutputFileType}}),Object.defineProperty(e,"PulsarExecutor",{enumerable:!0,get:function(){return se.PulsarExecutor}})})();var i=t;for(var a in n)i[a]=n[a];n.__esModule&&Object.defineProperty(i,"__esModule",{value:!0})})()},"../../utils/node_modules/change-case/dist/index.js":
/*!**********************************************************!*\
  !*** ../../utils/node_modules/change-case/dist/index.js ***!
  \**********************************************************/(e,t,o)=>{"use strict";o.r(t),o.d(t,{camelCase:()=>d,capitalCase:()=>y,constantCase:()=>f,dotCase:()=>g,kebabCase:()=>h,noCase:()=>p,pascalCase:()=>m,pascalSnakeCase:()=>T,pathCase:()=>b,sentenceCase:()=>S,snakeCase:()=>k,split:()=>c,splitSeparateNumbers:()=>u,trainCase:()=>v});const r=/([\p{Ll}\d])(\p{Lu})/gu,n=/(\p{Lu})([\p{Lu}][\p{Ll}])/gu,i=/(\d)\p{Ll}|(\p{L})\d/u,a=/[^\p{L}\d]+/giu,l="$1\0$2",s="";function c(e){let t=e.trim();t=t.replace(r,l).replace(n,l),t=t.replace(a,"\0");let o=0,i=t.length;for(;"\0"===t.charAt(o);)o++;if(o===i)return[];for(;"\0"===t.charAt(i-1);)i--;return t.slice(o,i).split(/\0/g)}function u(e){const t=c(e);for(let e=0;e<t.length;e++){const o=t[e],r=i.exec(o);if(r){const n=r.index+(r[1]??r[2]).length;t.splice(e,1,o.slice(0,n),o.slice(n))}}return t}function p(e,t){const[o,r,n]=x(e,t);return o+r.map(P(t?.locale)).join(t?.delimiter??" ")+n}function d(e,t){const[o,r,n]=x(e,t),i=P(t?.locale),a=O(t?.locale),l=t?.mergeAmbiguousCharacters?C(i,a):_(i,a);return o+r.map(((e,t)=>0===t?i(e):l(e,t))).join(t?.delimiter??"")+n}function m(e,t){const[o,r,n]=x(e,t),i=P(t?.locale),a=O(t?.locale),l=t?.mergeAmbiguousCharacters?C(i,a):_(i,a);return o+r.map(l).join(t?.delimiter??"")+n}function T(e,t){return y(e,{delimiter:"_",...t})}function y(e,t){const[o,r,n]=x(e,t),i=P(t?.locale),a=O(t?.locale);return o+r.map(C(i,a)).join(t?.delimiter??" ")+n}function f(e,t){const[o,r,n]=x(e,t);return o+r.map(O(t?.locale)).join(t?.delimiter??"_")+n}function g(e,t){return p(e,{delimiter:".",...t})}function h(e,t){return p(e,{delimiter:"-",...t})}function b(e,t){return p(e,{delimiter:"/",...t})}function S(e,t){const[o,r,n]=x(e,t),i=P(t?.locale),a=O(t?.locale),l=C(i,a);return o+r.map(((e,t)=>0===t?l(e):i(e))).join(t?.delimiter??" ")+n}function k(e,t){return p(e,{delimiter:"_",...t})}function v(e,t){return y(e,{delimiter:"-",...t})}function P(e){return!1===e?e=>e.toLowerCase():t=>t.toLocaleLowerCase(e)}function O(e){return!1===e?e=>e.toUpperCase():t=>t.toLocaleUpperCase(e)}function C(e,t){return o=>`${t(o[0])}${e(o.slice(1))}`}function _(e,t){return(o,r)=>{const n=o[0];return(r>0&&n>="0"&&n<="9"?"_"+n:t(n))+e(o.slice(1))}}function x(e,t={}){const o=t.split??(t.separateNumbers?u:c),r=t.prefixCharacters??s,n=t.suffixCharacters??s;let i=0,a=e.length;for(;i<e.length;){const t=e.charAt(i);if(!r.includes(t))break;i++}for(;a>i;){const t=a-1,o=e.charAt(t);if(!n.includes(o))break;a=t}return[e.slice(0,i),o(e.slice(i,a)),e.slice(a)]}}},t={};function o(r){var n=t[r];if(void 0!==n)return n.exports;var i=t[r]={exports:{}};return e[r].call(i.exports,i,i.exports,o),i.exports}o.d=(e,t)=>{for(var r in t)o.o(t,r)&&!o.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};o("./src/index.ts")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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U3NtQixPQUFPQyxZQUFhLENBQUVwL0IsTUFBTyxXQUU3REYsT0FBT0MsZUFBZThZLEVBQVMsYUFBYyxDQUFFN1ksT0FBTyxHQUFPLEVDRnBDNCtCLEVBQW9CLGlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHN1cGVybm92YWlvL2V4cG9ydGVyLXN0eWxlLWRpY3Rpb25hcnkvLi9ub2RlX21vZHVsZXMvQHN1cGVybm92YWlvL3Nkay1leHBvcnRlcnMvYnVpbGQvc3VwZXJub3ZhLXNkay10eXBlc2NyaXB0LmpzIiwid2VicGFjazovL0BzdXBlcm5vdmFpby9leHBvcnRlci1zdHlsZS1kaWN0aW9uYXJ5Ly4vY29uZmlnLnRzIiwid2VicGFjazovL0BzdXBlcm5vdmFpby9leHBvcnRlci1zdHlsZS1kaWN0aW9uYXJ5Ly4vc3JjL2NvbnN0YW50cy9kZWZhdWx0cy50cyIsIndlYnBhY2s6Ly9Ac3VwZXJub3ZhaW8vZXhwb3J0ZXItc3R5bGUtZGljdGlvbmFyeS8uL3NyYy9jb250ZW50L3Rva2VuLnRzIiwid2VicGFjazovL0BzdXBlcm5vdmFpby9leHBvcnRlci1zdHlsZS1kaWN0aW9uYXJ5Ly4vc3JjL2ZpbGVzL3N0eWxlLWZpbGUudHMiLCJ3ZWJwYWNrOi8vQHN1cGVybm92YWlvL2V4cG9ydGVyLXN0eWxlLWRpY3Rpb25hcnkvLi9zcmMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vQHN1cGVybm92YWlvL2V4cG9ydGVyLXN0eWxlLWRpY3Rpb25hcnkvLi9zcmMvdXRpbHMvdG9rZW4taGllcmFyY2h5LnRzIiwid2VicGFjazovL0BzdXBlcm5vdmFpby9leHBvcnRlci1zdHlsZS1kaWN0aW9uYXJ5Ly4vc3JjL3V0aWxzL3ZhbHVlLWZvcm1hdHRlci50cyIsIndlYnBhY2s6Ly9Ac3VwZXJub3ZhaW8vZXhwb3J0ZXItc3R5bGUtZGljdGlvbmFyeS8uLi8uLi91dGlscy9kaXN0L2VudW1zL0NvbG9yRm9ybWF0LmpzIiwid2VicGFjazovL0BzdXBlcm5vdmFpby9leHBvcnRlci1zdHlsZS1kaWN0aW9uYXJ5Ly4uLy4uL3V0aWxzL2Rpc3QvZW51bXMvU3RyaW5nQ2FzZS5qcyIsIndlYnBhY2s6Ly9Ac3VwZXJub3ZhaW8vZXhwb3J0ZXItc3R5bGUtZGljdGlvbmFyeS8uLi8uLi91dGlscy9kaXN0L2hlbHBlcnMvQ1NTSGVscGVyLmpzIiwid2VicGFjazovL0BzdXBlcm5vdmFpby9leHBvcnRlci1zdHlsZS1kaWN0aW9uYXJ5Ly4uLy4uL3V0aWxzL2Rpc3QvaGVscGVycy9Db2xvckhlbHBlci5qcyIsIndlYnBhY2s6Ly9Ac3VwZXJub3ZhaW8vZXhwb3J0ZXItc3R5bGUtZGljdGlvbmFyeS8uLi8uLi91dGlscy9kaXN0L2hlbHBlcnMvRmlsZUhlbHBlci5qcyIsIndlYnBhY2s6Ly9Ac3VwZXJub3ZhaW8vZXhwb3J0ZXItc3R5bGUtZGljdGlvbmFyeS8uLi8uLi91dGlscy9kaXN0L2hlbHBlcnMvRmlsZU5hbWVIZWxwZXIuanMiLCJ3ZWJwYWNrOi8vQHN1cGVybm92YWlvL2V4cG9ydGVyLXN0eWxlLWRpY3Rpb25hcnkvLi4vLi4vdXRpbHMvZGlzdC9oZWxwZXJzL0dlbmVyYWxIZWxwZXIuanMiLCJ3ZWJwYWNrOi8vQHN1cGVybm92YWlvL2V4cG9ydGVyLXN0eWxlLWRpY3Rpb25hcnkvLi4vLi4vdXRpbHMvZGlzdC9oZWxwZXJzL0tvdGxpbkhlbHBlci5qcyIsIndlYnBhY2s6Ly9Ac3VwZXJub3ZhaW8vZXhwb3J0ZXItc3R5bGUtZGljdGlvbmFyeS8uLi8uLi91dGlscy9kaXN0L2hlbHBlcnMvTmFtaW5nSGVscGVyLmpzIiwid2VicGFjazovL0BzdXBlcm5vdmFpby9leHBvcnRlci1zdHlsZS1kaWN0aW9uYXJ5Ly4uLy4uL3V0aWxzL2Rpc3QvaGVscGVycy9UaGVtZUhlbHBlci5qcyIsIndlYnBhY2s6Ly9Ac3VwZXJub3ZhaW8vZXhwb3J0ZXItc3R5bGUtZGljdGlvbmFyeS8uLi8uLi91dGlscy9kaXN0L2hlbHBlcnMvVG9rZW5IZWxwZXIuanMiLCJ3ZWJwYWNrOi8vQHN1cGVybm92YWlvL2V4cG9ydGVyLXN0eWxlLWRpY3Rpb25hcnkvLi4vLi4vdXRpbHMvZGlzdC9oZWxwZXJzL1Rva2VuTmFtZVRyYWNrZXIuanMiLCJ3ZWJwYWNrOi8vQHN1cGVybm92YWlvL2V4cG9ydGVyLXN0eWxlLWRpY3Rpb25hcnkvLi4vLi4vdXRpbHMvZGlzdC9oZWxwZXJzL1dyaXRlVG9rZW5Qcm9wU3RvcmUuanMiLCJ3ZWJwYWNrOi8vQHN1cGVybm92YWlvL2V4cG9ydGVyLXN0eWxlLWRpY3Rpb25hcnkvLi4vLi4vdXRpbHMvZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9Ac3VwZXJub3ZhaW8vZXhwb3J0ZXItc3R5bGUtZGljdGlvbmFyeS8uLi8uLi91dGlscy9ub2RlX21vZHVsZXMvQHN1cGVybm92YWlvL3Nkay1leHBvcnRlcnMvYnVpbGQvc3VwZXJub3ZhLXNkay10eXBlc2NyaXB0LmpzIiwid2VicGFjazovL0BzdXBlcm5vdmFpby9leHBvcnRlci1zdHlsZS1kaWN0aW9uYXJ5Ly4uLy4uL3V0aWxzL25vZGVfbW9kdWxlcy9jaGFuZ2UtY2FzZS9kaXN0L2luZGV4LmpzIiwid2VicGFjazovL0BzdXBlcm5vdmFpby9leHBvcnRlci1zdHlsZS1kaWN0aW9uYXJ5L3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL0BzdXBlcm5vdmFpby9leHBvcnRlci1zdHlsZS1kaWN0aW9uYXJ5L3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9Ac3VwZXJub3ZhaW8vZXhwb3J0ZXItc3R5bGUtZGljdGlvbmFyeS93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL0BzdXBlcm5vdmFpby9leHBvcnRlci1zdHlsZS1kaWN0aW9uYXJ5L3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vQHN1cGVybm92YWlvL2V4cG9ydGVyLXN0eWxlLWRpY3Rpb25hcnkvd2VicGFjay9zdGFydHVwIl0sInNvdXJjZXNDb250ZW50IjpbIigoKT0+e1widXNlIHN0cmljdFwiO3ZhciBlPXs0Mzc5OihlLHQpPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5TdXBlcm5vdmFFcnJvcj12b2lkIDA7Y2xhc3MgbyBleHRlbmRzIEVycm9ye2NvbnN0cnVjdG9yKGUsdCxvLHIsbixpLGEpe3N1cGVyKGUpLHRoaXMuY29kZT10LHRoaXMuc3RhdHVzPW8sdGhpcy5mb3JtRXJyb3JzPXIsdGhpcy5yZXF1ZXN0SWQ9bix0aGlzLnNlcnZlclRpbWU9aSx0aGlzLnVybD1hfXN0YXRpYyBmcm9tTmV0d29ya1Jlc3BvbnNlKGUsdCxyKXt2YXIgbixpLGE7cmV0dXJuIG5ldyBvKGUubWVzc2FnZSxlLmVycm9yQ29kZXx8ZS5yZWFzb258fGUubGFiZWx8fG51bGwsZS5jb2RlfHx0LG51bGwhPT0obj1lLmZvcm1FcnJvcnMpJiZ2b2lkIDAhPT1uP246bnVsbCxudWxsIT09KGk9ZS5yZXF1ZXN0SWQpJiZ2b2lkIDAhPT1pP2k6bnVsbCxudWxsIT09KGE9ZS5zZXJ2ZXJUaW1lKSYmdm9pZCAwIT09YT9hOm51bGwscil9c3RhdGljIGZyb21Ob05ldHdvcmtSZXNwb25zZShlKXtyZXR1cm4gbmV3IG8oXCJObyBuZXR3b3JrIG9yIGludGVybmV0IHVucmVhY2hhYmxlXCIsXCJOT19ORVRXT1JLXCIsMTIxNjMsbnVsbCwobmV3IERhdGUpLnRvSVNPU3RyaW5nKCksbnVsbCxlKX1zdGF0aWMgZnJvbUNvZGUoZSl7cmV0dXJuIG5ldyBvKGUsZSxudWxsLG51bGwsbnVsbCxudWxsLG51bGwpfXN0YXRpYyBmcm9tTWVzc2FnZShlKXtyZXR1cm4gbmV3IG8oZSxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCl9aXNGaWVsZEVycm9yZWQoZSl7cmV0dXJuIHZvaWQgMCE9PXRoaXMuZm9ybUVycm9ycy5maW5kKCh0PT50LmtleT09PWUpKX1lcnJvckZvckZpZWxkKGUpe3ZhciB0O3JldHVybiBudWxsIT09KHQ9dGhpcy5mb3JtRXJyb3JzLmZpbmQoKHQ9PnQua2V5PT09ZSkpKSYmdm9pZCAwIT09dD90Om51bGx9dG9TdHJpbmcoKXt2YXIgZSx0LG8scixuLGk7cmV0dXJuYFxcbiAgICBFcnJvciB0aHJvd246ICR7dGhpcy5tZXNzYWdlfVxcblxcbiAgICBDb2RlOiAke251bGwhPT0oZT10aGlzLmNvZGUpJiZ2b2lkIDAhPT1lP2U6XCItXCJ9XFxuXFxuICAgIFN0YXR1czogJHtudWxsIT09KHQ9dGhpcy5zdGF0dXMpJiZ2b2lkIDAhPT10P3Q6XCItXCJ9XFxuXFxuICAgIEZpZWxkczogJHtKU09OLnN0cmluZ2lmeSh0aGlzLmZvcm1FcnJvcnMsbnVsbCwyKX1cXG5cXG4gICAgUmVxdWVzdCBJRDogJHtudWxsIT09KG89dGhpcy5yZXF1ZXN0SWQpJiZ2b2lkIDAhPT1vP286XCItXCJ9XFxuXFxuICAgIFNlcnZlciB0aW1lOiAke251bGwhPT0ocj10aGlzLnNlcnZlclRpbWUpJiZ2b2lkIDAhPT1yP3I6XCItXCJ9XFxuXFxuICAgIE5ldHdvcmsgVVJMOiAke251bGwhPT0obj10aGlzLnVybCkmJnZvaWQgMCE9PW4/bjpcIi1cIn1cXG5cXG4gICAgU3RhY2s6ICR7bnVsbCE9PShpPXRoaXMuc3RhY2spJiZ2b2lkIDAhPT1pP2k6XCItXCJ9XFxuICAgIGB9dG9IdW1hblJlYWRhYmxlKCl7cmV0dXJuYCR7dGhpcy5tZXNzYWdlfSR7dGhpcy5yZXF1ZXN0SWQ/YCAocmVxdWVzdCAke3RoaXMucmVxdWVzdElkfSlgOlwiXCJ9YH19dC5TdXBlcm5vdmFFcnJvcj1vfSw5OTMyOihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5kb2NzSW1hZ2VSZWZUb1VybD10LkRvY3NJbWFnZVJlZlR5cGU9dm9pZCAwLGZ1bmN0aW9uKGUpe2UucmVzb3VyY2U9XCJSZXNvdXJjZVwiLGUuZmlnbWFOb2RlPVwiRmlnbWFOb2RlXCJ9KG98fCh0LkRvY3NJbWFnZVJlZlR5cGU9bz17fSkpLHQuZG9jc0ltYWdlUmVmVG9Vcmw9ZnVuY3Rpb24oZSx0LHIpe3ZhciBuO2lmKGUpc3dpdGNoKGUudHlwZSl7Y2FzZSBvLnJlc291cmNlOnJldHVybiBudWxsPT09KG49ZS5yZXNvdXJjZSl8fHZvaWQgMD09PW4/dm9pZCAwOm4udXJsO2Nhc2Ugby5maWdtYU5vZGU6aWYoIWUuZmlnbWFOb2RlfHwhZS5maWdtYU5vZGUuc291cmNlSWR8fCFlLmZpZ21hTm9kZS5mcmFtZVJlZmVyZW5jZUlkKXJldHVybjtyZXR1cm4gdC5yZXNvdXJjZXMuZ2V0RmlnbWFGcmFtZUhvc3RlZFVybCh7ZGVzaWduU3lzdGVtSWQ6ci5kc0lkLHZlcnNpb25JZDpyLnZlcnNpb25JZH0sZS5maWdtYU5vZGUuZnJhbWVSZWZlcmVuY2VJZCk7ZGVmYXVsdDpyZXR1cm59fX0sNTY3MzooZSx0KT0+e3ZhciBvO2Z1bmN0aW9uIHIoZSl7c3dpdGNoKGUudHlwZSl7Y2FzZSBvLmRvY3VtZW50YXRpb25JdGVtOnJldHVybmBAcGFnZToke2UuZG9jdW1lbnRhdGlvbkl0ZW1JZH1gO2Nhc2Ugby5wYWdlSGVhZGluZzpyZXR1cm5gQHBhZ2U6JHtlLmRvY3VtZW50YXRpb25JdGVtSWR9IyR7ZS5wYWdlSGVhZGluZ0lkfWA7Y2FzZSBvLnVybDpyZXR1cm4gZS51cmw7ZGVmYXVsdDpyZXR1cm59fU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQubGlua0F0dHJpYnV0ZVRvRG9jc0xpbms9dC5kb2NzTGlua1RvTGlua0F0dHJpYnV0ZXM9dC5kb2NzTGlua1RvVXJsPXQuRG9jc0xpbmtSZWZUeXBlPXZvaWQgMCxmdW5jdGlvbihlKXtlLmRvY3VtZW50YXRpb25JdGVtPVwiRG9jdW1lbnRhdGlvbkl0ZW1cIixlLnBhZ2VIZWFkaW5nPVwiUGFnZUhlYWRpbmdcIixlLnVybD1cIlVybFwifShvfHwodC5Eb2NzTGlua1JlZlR5cGU9bz17fSkpLHQuZG9jc0xpbmtUb1VybD1yLHQuZG9jc0xpbmtUb0xpbmtBdHRyaWJ1dGVzPWZ1bmN0aW9uKGUpe2NvbnN0IHQ9cihlKTtpZih0KXJldHVybntocmVmOnQsdGFyZ2V0OmUub3BlbkluTmV3VGFiP1wiX2JsYW5rXCI6XCJfc2VsZlwifX0sdC5saW5rQXR0cmlidXRlVG9Eb2NzTGluaz1mdW5jdGlvbihlLHQpe2lmKCFlKXJldHVybjtjb25zdCByPVwiX2JsYW5rXCI9PT10O2lmKGUuc3RhcnRzV2l0aChcIkBwYWdlOlwiKSl7aWYoZS5pbmNsdWRlcyhcIiNcIikpe2NvbnN0W3Qsbl09ZS5yZXBsYWNlKFwiQHBhZ2U6XCIsXCJcIikuc3BsaXQoXCIjXCIpO3JldHVybnt0eXBlOm8ucGFnZUhlYWRpbmcsZG9jdW1lbnRhdGlvbkl0ZW1JZDp0LHBhZ2VIZWFkaW5nSWQ6bixvcGVuSW5OZXdUYWI6cn19cmV0dXJue3R5cGU6by5kb2N1bWVudGF0aW9uSXRlbSxkb2N1bWVudGF0aW9uSXRlbUlkOmUucmVwbGFjZShcIkBwYWdlOlwiLFwiXCIpLG9wZW5Jbk5ld1RhYjpyfX1yZXR1cm57dHlwZTpvLnVybCx1cmw6ZSxvcGVuSW5OZXdUYWI6cn19fSwyNjU3OihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Eb2N1bWVudGF0aW9uTGVnYWN5UGFnZUJsb2NrU2hvcnRjdXQ9dC5Eb2N1bWVudGF0aW9uTGVnYWN5UGFnZUJsb2NrU2hvcnRjdXRUeXBlPXZvaWQgMCxmdW5jdGlvbihlKXtlLmV4dGVybmFsPVwiRXh0ZXJuYWxcIixlLmludGVybmFsPVwiSW50ZXJuYWxcIn0ob3x8KHQuRG9jdW1lbnRhdGlvbkxlZ2FjeVBhZ2VCbG9ja1Nob3J0Y3V0VHlwZT1vPXt9KSksdC5Eb2N1bWVudGF0aW9uTGVnYWN5UGFnZUJsb2NrU2hvcnRjdXQ9Y2xhc3N7Y29uc3RydWN0b3IoZSl7dmFyIHQ7ZS51cmw/dGhpcy50eXBlPW8uZXh0ZXJuYWw6dGhpcy50eXBlPW8uaW50ZXJuYWwsdGhpcy50aXRsZT10aGlzLnNob3J0Y3V0VGl0bGVGcm9tTW9kZWwoZSx0aGlzLnR5cGUpLHRoaXMuZGVzY3JpcHRpb249dGhpcy5zaG9ydGN1dERlc2NyaXB0aW9uRnJvbU1vZGVsKGUsdGhpcy50eXBlKSx0aGlzLnByZXZpZXdVcmw9dGhpcy5zaG9ydGN1dFByZXZpZXdVcmxGcm9tTW9kZWwoZSksdGhpcy50eXBlPT09by5pbnRlcm5hbCYmKG51bGw9PT0odD1lLmRvY3VtZW50YXRpb25JdGVtUHJldmlldyl8fHZvaWQgMD09PXQ/dm9pZCAwOnQudmFsaWQpJiZlLmRvY3VtZW50YXRpb25JdGVtSWQ/dGhpcy5pbnRlcm5hbElkPWUuZG9jdW1lbnRhdGlvbkl0ZW1JZDoodGhpcy5pbnRlcm5hbElkPW51bGwsdGhpcy50eXBlPT09by5leHRlcm5hbCYmZS51cmw/dGhpcy5leHRlcm5hbFVybD1lLnVybDp0aGlzLmV4dGVybmFsVXJsPW51bGwpfXNob3J0Y3V0VGl0bGVGcm9tTW9kZWwoZSx0KXt2YXIgcixuLGksYSxjO2xldCBsPW51bGw7cmV0dXJuIGUudGl0bGUmJmUudGl0bGUudHJpbSgpLmxlbmd0aD4wP2w9ZS50aXRsZTp0PT09by5pbnRlcm5hbD9sPW51bGwhPT0obj1udWxsPT09KHI9ZS5kb2N1bWVudGF0aW9uSXRlbVByZXZpZXcpfHx2b2lkIDA9PT1yP3ZvaWQgMDpyLnRpdGxlKSYmdm9pZCAwIT09bj9uOm51bGw6dD09PW8uZXh0ZXJuYWwmJihsPW51bGwhPT0oYz1udWxsIT09KGE9bnVsbD09PShpPWUudXJsUHJldmlldyl8fHZvaWQgMD09PWk/dm9pZCAwOmkudGl0bGUpJiZ2b2lkIDAhPT1hP2E6ZS51cmwpJiZ2b2lkIDAhPT1jP2M6bnVsbCksbCYmMCE9PWwudHJpbSgpLmxlbmd0aD9sOm51bGx9c2hvcnRjdXREZXNjcmlwdGlvbkZyb21Nb2RlbChlLHQpe3ZhciByO2xldCBuPW51bGw7cmV0dXJuIGUuZGVzY3JpcHRpb24mJmUuZGVzY3JpcHRpb24udHJpbSgpLmxlbmd0aD4wP249ZS5kZXNjcmlwdGlvbjp0PT09by5leHRlcm5hbCYmKG49bnVsbD09PShyPWUudXJsUHJldmlldyl8fHZvaWQgMD09PXI/dm9pZCAwOnIuZGVzY3JpcHRpb24pLG4mJjAhPT1uLnRyaW0oKS5sZW5ndGg/bjpudWxsfXNob3J0Y3V0UHJldmlld1VybEZyb21Nb2RlbChlKXt2YXIgdCxvLHIsbixpO3JldHVybiBudWxsIT09KGk9bnVsbCE9PShyPW51bGwhPT0odD1lLmFzc2V0VXJsKSYmdm9pZCAwIT09dD90Om51bGw9PT0obz1lLmFzc2V0KXx8dm9pZCAwPT09bz92b2lkIDA6by51cmwpJiZ2b2lkIDAhPT1yP3I6bnVsbD09PShuPWUudXJsUHJldmlldyl8fHZvaWQgMD09PW4/dm9pZCAwOm4udGh1bWJuYWlsVXJsKSYmdm9pZCAwIT09aT9pOm51bGx9fX0sNzQ3NjooZSx0KT0+e3ZhciBvLHI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5UZXh0QWxpZ25tZW50PXQuQWxpZ25tZW50PXZvaWQgMCxmdW5jdGlvbihlKXtlLmxlZnQ9XCJMZWZ0XCIsZS5jZW50ZXI9XCJDZW50ZXJcIixlLnN0cmV0Y2g9XCJTdHJldGNoXCJ9KG98fCh0LkFsaWdubWVudD1vPXt9KSksZnVuY3Rpb24oZSl7ZS5sZWZ0PVwiTGVmdFwiLGUuY2VudGVyPVwiQ2VudGVyXCIsZS5yaWdodD1cIlJpZ2h0XCJ9KHJ8fCh0LlRleHRBbGlnbm1lbnQ9cj17fSkpfSw4NzM4OihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Bc3NldEZvcm1hdD12b2lkIDAsZnVuY3Rpb24oZSl7ZS5wbmc9XCJwbmdcIixlLnBkZj1cInBkZlwiLGUuc3ZnPVwic3ZnXCJ9KG98fCh0LkFzc2V0Rm9ybWF0PW89e30pKX0sOTE1OihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Bc3NldFNjYWxlPXZvaWQgMCxmdW5jdGlvbihlKXtlLngxPVwieDFcIixlLngyPVwieDJcIixlLngzPVwieDNcIixlLng0PVwieDRcIn0ob3x8KHQuQXNzZXRTY2FsZT1vPXt9KSl9LDg5OTooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuQXNzZXRTY2FsZVR5cGU9dm9pZCAwLGZ1bmN0aW9uKGUpe2UuYXNwZWN0RmlsbD1cIkFzcGVjdEZpbGxcIixlLmFzcGVjdEZpdD1cIkFzcGVjdEZpdFwifShvfHwodC5Bc3NldFNjYWxlVHlwZT1vPXt9KSl9LDYxOTI6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkJsdXJUeXBlPXZvaWQgMCxmdW5jdGlvbihlKXtlLmxheWVyPVwiTGF5ZXJcIixlLmJhY2tncm91bmQ9XCJCYWNrZ3JvdW5kXCJ9KG98fCh0LkJsdXJUeXBlPW89e30pKX0sMTE2MDooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuQUxMX0JPUkRFUl9QT1NJVElPTlM9dC5Cb3JkZXJQb3NpdGlvbj12b2lkIDAsZnVuY3Rpb24oZSl7ZS5pbnNpZGU9XCJJbnNpZGVcIixlLmNlbnRlcj1cIkNlbnRlclwiLGUub3V0c2lkZT1cIk91dHNpZGVcIn0ob3x8KHQuQm9yZGVyUG9zaXRpb249bz17fSkpLHQuQUxMX0JPUkRFUl9QT1NJVElPTlM9W28uaW5zaWRlLG8uY2VudGVyLG8ub3V0c2lkZV19LDQ1NDY6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkFMTF9CT1JERVJfU1RZTEVTPXQuQm9yZGVyU3R5bGU9dm9pZCAwLGZ1bmN0aW9uKGUpe2UuZGFzaGVkPVwiRGFzaGVkXCIsZS5kb3R0ZWQ9XCJEb3R0ZWRcIixlLnNvbGlkPVwiU29saWRcIixlLmdyb292ZT1cIkdyb292ZVwifShvfHwodC5Cb3JkZXJTdHlsZT1vPXt9KSksdC5BTExfQk9SREVSX1NUWUxFUz1bby5kYXNoZWQsby5kb3R0ZWQsby5zb2xpZCxvLmdyb292ZV19LDgwNDI6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkltcG9ydFdhcm5pbmdUeXBlPXZvaWQgMCxmdW5jdGlvbihlKXtlLlVuc3VwcG9ydGVkRmlsbD1cIlVuc3VwcG9ydGVkRmlsbFwiLGUuVW5zdXBwb3J0ZWRTdHJva2U9XCJVbnN1cHBvcnRlZFN0cm9rZVwiLGUuVW5zdXBwb3J0ZWRFZmZlY3Q9XCJVbnN1cHBvcnRlZEVmZmVjdFwiLGUuU3R5bGVOb3RBcHBsaWVkPVwiU3R5bGVOb3RBcHBsaWVkXCIsZS5Ob1B1Ymxpc2hlZFN0eWxlcz1cIk5vUHVibGlzaGVkU3R5bGVzXCIsZS5Ob1B1Ymxpc2hlZENvbXBvbmVudHM9XCJOb1B1Ymxpc2hlZENvbXBvbmVudHNcIixlLk5vUHVibGlzaGVkQXNzZXRzPVwiTm9QdWJsaXNoZWRBc3NldHNcIixlLk5vVmVyc2lvbkZvdW5kPVwiTm9WZXJzaW9uRm91bmRcIixlLkNvbXBvbmVudEhhc05vVGh1bWJuYWlsPVwiQ29tcG9uZW50SGFzTm9UaHVtYm5haWxcIixlLkR1cGxpY2F0ZUltcG9ydGVkU3R5bGVJZD1cIkR1cGxpY2F0ZUltcG9ydGVkU3R5bGVJZFwiLGUuRHVwbGljYXRlSW1wb3J0ZWRTdHlsZVBhdGg9XCJEdXBsaWNhdGVJbXBvcnRlZFN0eWxlUGF0aFwiLGUuTm9QdWJsaXNoZWRFbGVtZW50cz1cIk5vUHVibGlzaGVkRWxlbWVudHNcIixlLk5vVW5wdWJsaXNoZWRTdHlsZXM9XCJOb1VucHVibGlzaGVkU3R5bGVzXCJ9KG98fCh0LkltcG9ydFdhcm5pbmdUeXBlPW89e30pKX0sNTY5NTooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuQ3VzdG9tRG9tYWluRXJyb3JDb2RlPXZvaWQgMCxmdW5jdGlvbihlKXtlLmdlbmVyYWxFcnJvcj1cIkdlbmVyYWxFcnJvclwiLGUuZG5zTm90Q29uZmlndXJlZD1cIkROU05vdENvbmZpZ3VyZWRcIixlLm1haW50ZW5hbmNlPVwiTWFpbnRlbmFuY2VcIn0ob3x8KHQuQ3VzdG9tRG9tYWluRXJyb3JDb2RlPW89e30pKX0sNzczNzooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuQ3VzdG9tRG9tYWluU3RhdGU9dm9pZCAwLGZ1bmN0aW9uKGUpe2UuaW5pdGlhbD1cIkluaXRpYWxcIixlLmRvbWFpblNldHVwSW5Qcm9ncmVzcz1cIkRvbWFpblNldHVwSW5Qcm9ncmVzc1wiLGUuZG9tYWluU2V0dXBGYWlsZWQ9XCJEb21haW5TZXR1cEZhaWxlZFwiLGUuZG9tYWluU2V0dXBzU3VjY2VzPVwiRG9tYWluU2V0dXBTdWNjZXNzXCIsZS5zc2xTZXR1cEluUHJvZ3Jlc3M9XCJTU0xTZXR1cEluUHJvZ3Jlc3NcIixlLnNzbFNldHVwRmFpbGVkPVwiU1NMU2V0dXBGYWlsZWRcIixlLnNzbFNldHVwU3VjY2Vzcz1cIlNTTFNldHVwU3VjY2Vzc1wifShvfHwodC5DdXN0b21Eb21haW5TdGF0ZT1vPXt9KSl9LDU2NTE6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkRvY3NCbG9ja0JlaGF2aW9yRGF0YVR5cGU9dm9pZCAwLGZ1bmN0aW9uKGUpe2UuaXRlbT1cIkl0ZW1cIixlLnRva2VuPVwiVG9rZW5cIixlLmFzc2V0PVwiQXNzZXRcIixlLmNvbXBvbmVudD1cIkNvbXBvbmVudFwiLGUuZmlnbWFOb2RlPVwiRmlnbWFOb2RlXCIsZS5maWdtYUNvbXBvbmVudD1cIkZpZ21hQ29tcG9uZW50XCJ9KG98fCh0LkRvY3NCbG9ja0JlaGF2aW9yRGF0YVR5cGU9bz17fSkpfSwzNzMzOihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Eb2NzQmxvY2tCZWhhdmlvclNlbGVjdGlvblR5cGU9dm9pZCAwLGZ1bmN0aW9uKGUpe2UuZW50aXR5PVwiRW50aXR5XCIsZS5ncm91cD1cIkdyb3VwXCIsZS5lbnRpdHlBbmRHcm91cD1cIkVudGl0eUFuZEdyb3VwXCJ9KG98fCh0LkRvY3NCbG9ja0JlaGF2aW9yU2VsZWN0aW9uVHlwZT1vPXt9KSl9LDg4OTA6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkRvY3NCbG9ja0ltYWdlUHJvcGVydHlBc3BlY3RSYXRpbz12b2lkIDAsZnVuY3Rpb24oZSl7ZS5hdXRvPVwiQXV0b1wiLGUuc3F1YXJlPVwiU3F1YXJlXCIsZS5sYW5kc2NhcGU9XCJMYW5kc2NhcGVcIixlLnBvcnRyYWl0PVwiUG9ydHJhaXRcIixlLndpZGU9XCJXaWRlXCJ9KG98fCh0LkRvY3NCbG9ja0ltYWdlUHJvcGVydHlBc3BlY3RSYXRpbz1vPXt9KSl9LDkzNzc6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkRvY3NCbG9ja0l0ZW1FbnRpdHlUeXBlPXZvaWQgMCxmdW5jdGlvbihlKXtlLnRva2VuPVwiVG9rZW5cIixlLnRva2VuR3JvdXA9XCJUb2tlbkdyb3VwXCIsZS5hc3NldD1cIkFzc2V0XCIsZS5hc3NldEdyb3VwPVwiQXNzZXRHcm91cFwiLGUuY29tcG9uZW50PVwiQ29tcG9uZW50XCIsZS5jb21wb25lbnRHcm91cD1cIkNvbXBvbmVudEdyb3VwXCJ9KG98fCh0LkRvY3NCbG9ja0l0ZW1FbnRpdHlUeXBlPW89e30pKX0sNTg4MzooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuRG9jc0Jsb2NrSXRlbVByb3BlcnR5T3B0aW9uUmVuZGVyaW5nU3R5bGU9dm9pZCAwLGZ1bmN0aW9uKGUpe2Uuc2VnbWVudGVkQ29udHJvbD1cIlNlZ21lbnRlZENvbnRyb2xcIixlLnRvZ2dsZUJ1dHRvbj1cIlRvZ2dsZUJ1dHRvblwiLGUuc2VsZWN0PVwiU2VsZWN0XCIsZS5jaGVja2JveD1cIkNoZWNrYm94XCJ9KG98fCh0LkRvY3NCbG9ja0l0ZW1Qcm9wZXJ0eU9wdGlvblJlbmRlcmluZ1N0eWxlPW89e30pKX0sODA2MTooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuRG9jc0Jsb2NrSXRlbVByb3BlcnR5UmljaFRleHRTdHlsZT12b2lkIDAsZnVuY3Rpb24oZSl7ZS50aXRsZTE9XCJUaXRsZTFcIixlLnRpdGxlMj1cIlRpdGxlMlwiLGUudGl0bGUzPVwiVGl0bGUzXCIsZS50aXRsZTQ9XCJUaXRsZTRcIixlLnRpdGxlNT1cIlRpdGxlNVwiLGUucXVvdGU9XCJRdW90ZVwiLGUuY2FsbG91dD1cIkNhbGxvdXRcIixlLm9sPVwiT0xcIixlLnVsPVwiVUxcIn0ob3x8KHQuRG9jc0Jsb2NrSXRlbVByb3BlcnR5UmljaFRleHRTdHlsZT1vPXt9KSl9LDc0Nzk6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkRvY3NCbG9ja0l0ZW1Qcm9wZXJ0eVRleHRTdHlsZT12b2lkIDAsZnVuY3Rpb24oZSl7ZS5zbWFsbD1cIlNtYWxsXCIsZS5yZWd1bGFyPVwiUmVndWxhclwiLGUuYm9sZD1cIkJvbGRcIn0ob3x8KHQuRG9jc0Jsb2NrSXRlbVByb3BlcnR5VGV4dFN0eWxlPW89e30pKX0sNjgzOTooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuRG9jc0Jsb2NrSXRlbVByb3BlcnR5VHlwZT12b2lkIDAsZnVuY3Rpb24oZSl7ZS5yaWNoVGV4dD1cIlJpY2hUZXh0XCIsZS5tdWx0aVJpY2hUZXh0PVwiTXVsdGlSaWNoVGV4dFwiLGUudGV4dD1cIlRleHRcIixlLnJpY2hUZXh0RWRpdG9yPVwiUmljaFRleHRFZGl0b3JcIixlLmJvb2xlYW49XCJCb29sZWFuXCIsZS5udW1iZXI9XCJOdW1iZXJcIixlLnNpbmdsZVNlbGVjdD1cIlNpbmdsZVNlbGVjdFwiLGUubXVsdGlTZWxlY3Q9XCJNdWx0aVNlbGVjdFwiLGUuaW1hZ2U9XCJJbWFnZVwiLGUudG9rZW49XCJUb2tlblwiLGUudG9rZW5UeXBlPVwiVG9rZW5UeXBlXCIsZS50b2tlblByb3BlcnR5PVwiVG9rZW5Qcm9wZXJ0eVwiLGUuY29tcG9uZW50PVwiQ29tcG9uZW50XCIsZS5jb21wb25lbnRQcm9wZXJ0eT1cIkNvbXBvbmVudFByb3BlcnR5XCIsZS5hc3NldD1cIkFzc2V0XCIsZS5hc3NldFByb3BlcnR5PVwiQXNzZXRQcm9wZXJ0eVwiLGUuZW1iZWRVUkw9XCJFbWJlZFVSTFwiLGUudXJsPVwiVVJMXCIsZS5tYXJrZG93bj1cIk1hcmtkb3duXCIsZS5jb2RlPVwiQ29kZVwiLGUuY29kZVNhbmRib3g9XCJDb2RlU2FuZGJveFwiLGUudGFibGU9XCJUYWJsZVwiLGUuZGl2aWRlcj1cIkRpdmlkZXJcIixlLnN0b3J5Ym9vaz1cIlN0b3J5Ym9va1wiLGUuY29sb3I9XCJDb2xvclwiLGUuZmlnbWFOb2RlPVwiRmlnbWFOb2RlXCIsZS5maWdtYUNvbXBvbmVudD1cIkZpZ21hQ29tcG9uZW50XCJ9KG98fCh0LkRvY3NCbG9ja0l0ZW1Qcm9wZXJ0eVR5cGU9bz17fSkpfSw4MDk1OihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Eb2NzQmxvY2tJdGVtVmFyaWFudExheW91dFR5cGU9dm9pZCAwLGZ1bmN0aW9uKGUpe2UuY29sdW1uPVwiQ29sdW1uXCIsZS5yb3c9XCJSb3dcIn0ob3x8KHQuRG9jc0Jsb2NrSXRlbVZhcmlhbnRMYXlvdXRUeXBlPW89e30pKX0sNzI5MTooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuRG9jc0Jsb2NrSXRlbVZhcmlhbnRMYXlvdXRXaWR0aD12b2lkIDAsZnVuY3Rpb24oZSl7ZS5jMT1cIjFcIixlLmMyPVwiMlwiLGUuYzM9XCIzXCIsZS5jND1cIjRcIixlLmM1PVwiNVwiLGUuYzY9XCI2XCIsZS5jNz1cIjdcIixlLmM4PVwiOFwiLGUuYzk9XCI5XCIsZS5jMTA9XCIxMFwiLGUuYzExPVwiMTFcIixlLmMxMj1cIjEyXCJ9KG98fCh0LkRvY3NCbG9ja0l0ZW1WYXJpYW50TGF5b3V0V2lkdGg9bz17fSkpfSw5MTMzOihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Eb2NzQmxvY2tPcHRpb25Db2xvcj12b2lkIDAsZnVuY3Rpb24oZSl7ZS5ncmVlbj1cIkdyZWVuXCIsZS5yZWQ9XCJSZWRcIixlLnllbGxvdz1cIlllbGxvd1wiLGUuYmx1ZT1cIkJsdWVcIixlLnB1cnBsZT1cIlB1cnBsZVwiLGUub3JhbmdlPVwiT3JhbmdlXCIsZS5waW5rPVwiUGlua1wiLGUudGVhbD1cIlRlYWxcIixlLmdyZXk9XCJHcmV5XCIsZS5saWdodEdyZXk9XCJMaWdodEdyZXlcIixlLmN5YW49XCJDeWFuXCIsZS5mdWNoc2lhPVwiRnVjaHNpYVwifShvfHwodC5Eb2NzQmxvY2tPcHRpb25Db2xvcj1vPXt9KSl9LDU5NjM6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkRvY3NCbG9ja09wdGlvblJlbmRlcmluZ1N0eWxlPXZvaWQgMCxmdW5jdGlvbihlKXtlLnNlZ21lbnRlZENvbnRyb2w9XCJTZWdtZW50ZWRDb250cm9sXCIsZS50b2dnbGVCdXR0b249XCJUb2dnbGVCdXR0b25cIixlLnNlbGVjdD1cIlNlbGVjdFwiLGUuY2hlY2tib3g9XCJDaGVja2JveFwifShvfHwodC5Eb2NzQmxvY2tPcHRpb25SZW5kZXJpbmdTdHlsZT1vPXt9KSl9LDY2NDQ6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkRvY3NCbG9ja1JpY2hUZXh0UHJvcGVydHlTdHlsZT12b2lkIDAsZnVuY3Rpb24oZSl7ZS50aXRsZTE9XCJUaXRsZTFcIixlLnRpdGxlMj1cIlRpdGxlMlwiLGUudGl0bGUzPVwiVGl0bGUzXCIsZS50aXRsZTQ9XCJUaXRsZTRcIixlLnRpdGxlNT1cIlRpdGxlNVwiLGUucXVvdGU9XCJRdW90ZVwiLGUuY2FsbG91dD1cIkNhbGxvdXRcIixlLmRlZmF1bHQ9XCJEZWZhdWx0XCJ9KG98fCh0LkRvY3NCbG9ja1JpY2hUZXh0UHJvcGVydHlTdHlsZT1vPXt9KSl9LDMwNjooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuRG9jc0Jsb2NrVGV4dFByb3BlcnR5U3R5bGU9dm9pZCAwLGZ1bmN0aW9uKGUpe2UudGl0bGUxPVwiVGl0bGUxXCIsZS50aXRsZTI9XCJUaXRsZTJcIixlLnRpdGxlMz1cIlRpdGxlM1wiLGUudGl0bGU0PVwiVGl0bGU0XCIsZS50aXRsZTU9XCJUaXRsZTVcIixlLmRlZmF1bHQ9XCJEZWZhdWx0XCIsZS5kZWZhdWx0Qm9sZD1cIkRlZmF1bHRCb2xkXCIsZS5kZWZhdWx0U2VtaWJvbGQ9XCJEZWZhdWx0U2VtaWJvbGRcIixlLnNtYWxsPVwiU21hbGxcIixlLnNtYWxsQm9sZD1cIlNtYWxsQm9sZFwiLGUuc21hbGxTZW1pYm9sZD1cIlNtYWxsU2VtaWJvbGRcIixlLmN1c3RvbT1cIkN1c3RvbVwifShvfHwodC5Eb2NzQmxvY2tUZXh0UHJvcGVydHlTdHlsZT1vPXt9KSl9LDQwNjg6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkRvY3NFbnRpdHlHcm91cEJlaGF2aW9yPXZvaWQgMCxmdW5jdGlvbihlKXtlLmdyb3VwPVwiR3JvdXBcIixlLnRhYnM9XCJUYWJzXCJ9KG98fCh0LkRvY3NFbnRpdHlHcm91cEJlaGF2aW9yPW89e30pKX0sMTIzMzooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuRG9jc0VudGl0eVR5cGU9dm9pZCAwLGZ1bmN0aW9uKGUpe2UuZ3JvdXA9XCJHcm91cFwiLGUucGFnZT1cIlBhZ2VcIn0ob3x8KHQuRG9jc0VudGl0eVR5cGU9bz17fSkpfSw3OTcxOihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Eb2NzU2VjdGlvblR5cGU9dm9pZCAwLGZ1bmN0aW9uKGUpe2UucGxhaW49XCJQbGFpblwiLGUudGFicz1cIlRhYnNcIn0ob3x8KHQuRG9jc1NlY3Rpb25UeXBlPW89e30pKX0sNTEwMjooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuRG9jdW1lbnRhdGlvbkxlZ2FjeUNhbGxvdXRUeXBlPXZvaWQgMCxmdW5jdGlvbihlKXtlLmluZm89XCJJbmZvXCIsZS5zdWNjZXNzPVwiU3VjY2Vzc1wiLGUud2FybmluZz1cIldhcm5pbmdcIixlLmVycm9yPVwiRXJyb3JcIn0ob3x8KHQuRG9jdW1lbnRhdGlvbkxlZ2FjeUNhbGxvdXRUeXBlPW89e30pKX0sMjEyMzooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuRG9jdW1lbnRhdGlvbkxlZ2FjeUdyb3VwQmVoYXZpb3I9dm9pZCAwLGZ1bmN0aW9uKGUpe2UuZ3JvdXA9XCJHcm91cFwiLGUudGFicz1cIlRhYnNcIn0ob3x8KHQuRG9jdW1lbnRhdGlvbkxlZ2FjeUdyb3VwQmVoYXZpb3I9bz17fSkpfSw5ODk2OihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Eb2N1bWVudGF0aW9uTGVnYWN5SGVhZGluZ1R5cGU9dm9pZCAwLGZ1bmN0aW9uKGUpe2VbZS5oMT0xXT1cImgxXCIsZVtlLmgyPTJdPVwiaDJcIixlW2UuaDM9M109XCJoM1wifShvfHwodC5Eb2N1bWVudGF0aW9uTGVnYWN5SGVhZGluZ1R5cGU9bz17fSkpfSw3Mzc5OihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Eb2N1bWVudGF0aW9uTGVnYWN5SXRlbVR5cGU9dm9pZCAwLGZ1bmN0aW9uKGUpe2UuZ3JvdXA9XCJHcm91cFwiLGUucGFnZT1cIlBhZ2VcIn0ob3x8KHQuRG9jdW1lbnRhdGlvbkxlZ2FjeUl0ZW1UeXBlPW89e30pKX0sMTQyMzooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuRG9jdW1lbnRhdGlvbkxlZ2FjeVBhZ2VBc3NldFR5cGU9dm9pZCAwLGZ1bmN0aW9uKGUpe2UuaW1hZ2U9XCJpbWFnZVwiLGUuZmlnbWFGcmFtZT1cImZpZ21hRnJhbWVcIn0ob3x8KHQuRG9jdW1lbnRhdGlvbkxlZ2FjeVBhZ2VBc3NldFR5cGU9bz17fSkpfSwxNjAxOihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Eb2N1bWVudGF0aW9uTGVnYWN5UGFnZUJsb2NrVGhlbWVUeXBlPXZvaWQgMCxmdW5jdGlvbihlKXtlLm92ZXJyaWRlPVwiT3ZlcnJpZGVcIixlLmNvbXBhcmlzb249XCJDb21wYXJpc29uXCJ9KG98fCh0LkRvY3VtZW50YXRpb25MZWdhY3lQYWdlQmxvY2tUaGVtZVR5cGU9bz17fSkpfSwxODQ2OihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Eb2N1bWVudGF0aW9uTGVnYWN5UGFnZUJsb2NrVHlwZT12b2lkIDAsZnVuY3Rpb24oZSl7ZS50ZXh0PVwiVGV4dFwiLGUuaGVhZGluZz1cIkhlYWRpbmdcIixlLmNvZGU9XCJDb2RlXCIsZS51bm9yZGVyZWRMaXN0PVwiVW5vcmRlcmVkTGlzdFwiLGUub3JkZXJlZExpc3Q9XCJPcmRlcmVkTGlzdFwiLGUucXVvdGU9XCJRdW90ZVwiLGUuY2FsbG91dD1cIkNhbGxvdXRcIixlLmRpdmlkZXI9XCJEaXZpZGVyXCIsZS5pbWFnZT1cIkltYWdlXCIsZS50b2tlbj1cIlRva2VuXCIsZS50b2tlbkxpc3Q9XCJUb2tlbkxpc3RcIixlLnRva2VuR3JvdXA9XCJUb2tlbkdyb3VwXCIsZS5zaG9ydGN1dHM9XCJTaG9ydGN1dHNcIixlLmxpbms9XCJMaW5rXCIsZS5maWdtYUVtYmVkPVwiRmlnbWFFbWJlZFwiLGUueW91dHViZUVtYmVkPVwiWW91dHViZUVtYmVkXCIsZS5zdG9yeWJvb2tFbWJlZD1cIlN0b3J5Ym9va0VtYmVkXCIsZS5nZW5lcmljRW1iZWQ9XCJFbWJlZFwiLGUuZmlnbWFGcmFtZXM9XCJGaWdtYUZyYW1lc1wiLGUuY3VzdG9tPVwiQ3VzdG9tXCIsZS5yZW5kZXJDb2RlPVwiUmVuZGVyQ29kZVwiLGUuY29tcG9uZW50QXNzZXRzPVwiQ29tcG9uZW50QXNzZXRzXCIsZS5jb2x1bW49XCJDb2x1bW5cIixlLmNvbHVtbkl0ZW09XCJDb2x1bW5JdGVtXCIsZS50YWJzPVwiVGFic1wiLGUudGFiSXRlbT1cIlRhYkl0ZW1cIixlLnRhYmxlPVwiVGFibGVcIixlLnRhYmxlQ2VsbD1cIlRhYmxlQ2VsbFwiLGUudGFibGVSb3c9XCJUYWJsZVJvd1wifShvfHwodC5Eb2N1bWVudGF0aW9uTGVnYWN5UGFnZUJsb2NrVHlwZT1vPXt9KSl9LDEyNTU6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkZyYW1lQWxpZ25tZW50PXZvaWQgMCxmdW5jdGlvbihlKXtlLmZyYW1lSGVpZ2h0PVwiRnJhbWVIZWlnaHRcIixlLmNlbnRlcj1cIkNlbnRlclwifShvfHwodC5GcmFtZUFsaWdubWVudD1vPXt9KSl9LDM3MTg6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkZyYW1lTGF5b3V0PXZvaWQgMCxmdW5jdGlvbihlKXtlLmM4PVwiQzhcIixlLmM3PVwiQzdcIixlLmM2PVwiQzZcIixlLmM1PVwiQzVcIixlLmM0PVwiQzRcIixlLmMzPVwiQzNcIixlLmMyPVwiQzJcIixlLmMxPVwiQzFcIixlLmMxNzU9XCJDMV83NVwifShvfHwodC5GcmFtZUxheW91dD1vPXt9KSl9LDE6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkdyYWRpZW50VHlwZT12b2lkIDAsZnVuY3Rpb24oZSl7ZS5saW5lYXI9XCJMaW5lYXJcIixlLnJhZGlhbD1cIlJhZGlhbFwiLGUuYW5ndWxhcj1cIkFuZ3VsYXJcIn0ob3x8KHQuR3JhZGllbnRUeXBlPW89e30pKX0sOTM0OihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5JY29uU2V0PXZvaWQgMCxmdW5jdGlvbihlKXtlLmNoZWNrQ2lyY2xlPVwiQ2hlY2tDaXJjbGVcIixlLmNyb3NzQ2lyY2xlPVwiQ3Jvc3NDaXJjbGVcIixlLmFsZXJ0PVwiQWxlcnRcIn0ob3x8KHQuSWNvblNldD1vPXt9KSl9LDI2NzQ6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LlJpY2hUZXh0U3BhbkF0dHJpYnV0ZVR5cGU9dm9pZCAwLGZ1bmN0aW9uKGUpe2UuYm9sZD1cIkJvbGRcIixlLml0YWxpYz1cIkl0YWxpY1wiLGUubGluaz1cIkxpbmtcIixlLnN0cmlrZXRocm91Z2g9XCJTdHJpa2V0aHJvdWdoXCIsZS5jb2RlPVwiQ29kZVwifShvfHwodC5SaWNoVGV4dFNwYW5BdHRyaWJ1dGVUeXBlPW89e30pKX0sOTEyNTooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuU2hhZG93VHlwZT12b2lkIDAsZnVuY3Rpb24oZSl7ZS5kcm9wPVwiRHJvcFwiLGUuaW5uZXI9XCJJbm5lclwifShvfHwodC5TaGFkb3dUeXBlPW89e30pKX0sNDY1MjooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuU291cmNlVHlwZT12b2lkIDAsZnVuY3Rpb24oZSl7ZS5maWdtYT1cIkZpZ21hXCIsZS50b2tlblN0dWRpbz1cIlRva2VuU3R1ZGlvXCIsZS5maWdtYVZhcmlhYmxlc1BsdWdpbj1cIkZpZ21hVmFyaWFibGVzUGx1Z2luXCJ9KG98fCh0LlNvdXJjZVR5cGU9bz17fSkpfSw5MjI6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LlRleHRDYXNlPXZvaWQgMCxmdW5jdGlvbihlKXtlLm9yaWdpbmFsPVwiT3JpZ2luYWxcIixlLnVwcGVyPVwiVXBwZXJcIixlLmxvd2VyPVwiTG93ZXJcIixlLmNhbWVsPVwiQ2FtZWxcIixlLnNtYWxsQ2Fwcz1cIlNtYWxsQ2Fwc1wifShvfHwodC5UZXh0Q2FzZT1vPXt9KSl9LDcwNDA6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LlRleHREZWNvcmF0aW9uPXZvaWQgMCxmdW5jdGlvbihlKXtlLm9yaWdpbmFsPVwiTm9uZVwiLGUudW5kZXJsaW5lPVwiVW5kZXJsaW5lXCIsZS5zdHJpa2V0aHJvdWdoPVwiU3RyaWtldGhyb3VnaFwifShvfHwodC5UZXh0RGVjb3JhdGlvbj1vPXt9KSl9LDM3ODg6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkRUX1RPS0VOX1RZUEVTPXQudG9rZW5UeXBlSXNSZWZlcmVuY2FibGU9dC5SRUZFUkVOQ0FCTEVfVE9LRU5fVFlQRVM9dC5SRVBMQUNBQkxFX1RPS0VOX1RZUEVTPXQudG9rZW5UeXBlSXNOb25QdXJlPXQudG9rZW5UeXBlSXNQdXJlPXQuUFVSRV9UT0tFTl9UWVBFUz10LkFMTF9UT0tFTl9UWVBFUz10Lk1TX0RJTUVOU0lPTl9UT0tFTl9UWVBFUz10LlJBV19ESU1FTlNJT05fVE9LRU5fVFlQRVM9dC5ESU1FTlNJT05fVE9LRU5fVFlQRVM9dC5PUFRJT05fVE9LRU5fVFlQRVM9dC5TVFJJTkdfVE9LRU5fVFlQRVM9dC5Ub2tlblR5cGU9dm9pZCAwLGZ1bmN0aW9uKGUpe2UuY29sb3I9XCJDb2xvclwiLGUudHlwb2dyYXBoeT1cIlR5cG9ncmFwaHlcIixlLnNoYWRvdz1cIlNoYWRvd1wiLGUuYm9yZGVyPVwiQm9yZGVyXCIsZS5ncmFkaWVudD1cIkdyYWRpZW50XCIsZS5ibHVyPVwiQmx1clwiLGUucmFkaXVzPVwiQm9yZGVyUmFkaXVzXCIsZS5ib3JkZXJXaWR0aD1cIkJvcmRlcldpZHRoXCIsZS5kdXJhdGlvbj1cIkR1cmF0aW9uXCIsZS5mb250U2l6ZT1cIkZvbnRTaXplXCIsZS5kaW1lbnNpb249XCJEaW1lbnNpb25cIixlLmxldHRlclNwYWNpbmc9XCJMZXR0ZXJTcGFjaW5nXCIsZS5saW5lSGVpZ2h0PVwiTGluZUhlaWdodFwiLGUub3BhY2l0eT1cIk9wYWNpdHlcIixlLnBhcmFncmFwaFNwYWNpbmc9XCJQYXJhZ3JhcGhTcGFjaW5nXCIsZS5zaXplPVwiU2l6ZVwiLGUuc3BhY2U9XCJTcGFjZVwiLGUuekluZGV4PVwiWkluZGV4XCIsZS50ZXh0RGVjb3JhdGlvbj1cIlRleHREZWNvcmF0aW9uXCIsZS50ZXh0Q2FzZT1cIlRleHRDYXNlXCIsZS52aXNpYmlsaXR5PVwiVmlzaWJpbGl0eVwiLGUuZm9udEZhbWlseT1cIkZvbnRGYW1pbHlcIixlLmZvbnRXZWlnaHQ9XCJGb250V2VpZ2h0XCIsZS5zdHJpbmc9XCJTdHJpbmdcIixlLnByb2R1Y3RDb3B5PVwiUHJvZHVjdENvcHlcIn0ob3x8KHQuVG9rZW5UeXBlPW89e30pKSx0LlNUUklOR19UT0tFTl9UWVBFUz1bby5zdHJpbmcsby5wcm9kdWN0Q29weSxvLmZvbnRGYW1pbHksby5mb250V2VpZ2h0XSx0Lk9QVElPTl9UT0tFTl9UWVBFUz1bby50ZXh0Q2FzZSxvLnRleHREZWNvcmF0aW9uLG8udmlzaWJpbGl0eV0sdC5ESU1FTlNJT05fVE9LRU5fVFlQRVM9W28uZGltZW5zaW9uLG8uc2l6ZSxvLnNwYWNlLG8ub3BhY2l0eSxvLmZvbnRTaXplLG8ubGluZUhlaWdodCxvLmxldHRlclNwYWNpbmcsby5wYXJhZ3JhcGhTcGFjaW5nLG8uYm9yZGVyV2lkdGgsby5yYWRpdXMsby5kdXJhdGlvbixvLnpJbmRleF0sdC5SQVdfRElNRU5TSU9OX1RPS0VOX1RZUEVTPVtvLm9wYWNpdHksby56SW5kZXhdLHQuTVNfRElNRU5TSU9OX1RPS0VOX1RZUEVTPVtvLmR1cmF0aW9uXSx0LkFMTF9UT0tFTl9UWVBFUz1bLi4udC5ESU1FTlNJT05fVE9LRU5fVFlQRVMsLi4udC5TVFJJTkdfVE9LRU5fVFlQRVMsLi4udC5PUFRJT05fVE9LRU5fVFlQRVMsby5jb2xvcixvLmdyYWRpZW50LG8uYm9yZGVyLG8ucmFkaXVzLG8uc2hhZG93LG8udHlwb2dyYXBoeSxvLmJsdXJdLHQuUFVSRV9UT0tFTl9UWVBFUz1bLi4udC5ESU1FTlNJT05fVE9LRU5fVFlQRVMsLi4udC5TVFJJTkdfVE9LRU5fVFlQRVMsLi4udC5PUFRJT05fVE9LRU5fVFlQRVNdLHQudG9rZW5UeXBlSXNQdXJlPWU9PnQuUFVSRV9UT0tFTl9UWVBFUy5pbmNsdWRlcyhlKSx0LnRva2VuVHlwZUlzTm9uUHVyZT1lPT4hKDAsdC50b2tlblR5cGVJc1B1cmUpKGUpLHQuUkVQTEFDQUJMRV9UT0tFTl9UWVBFUz1bby5jb2xvciwuLi50LkRJTUVOU0lPTl9UT0tFTl9UWVBFUywuLi50LlNUUklOR19UT0tFTl9UWVBFUywuLi50Lk9QVElPTl9UT0tFTl9UWVBFU10sdC5SRUZFUkVOQ0FCTEVfVE9LRU5fVFlQRVM9W28uY29sb3IsLi4udC5ESU1FTlNJT05fVE9LRU5fVFlQRVMsby5mb250RmFtaWx5LG8uZm9udFdlaWdodCxvLnRleHRDYXNlLG8udGV4dERlY29yYXRpb25dLHQudG9rZW5UeXBlSXNSZWZlcmVuY2FibGU9ZT0+dC5SRUZFUkVOQ0FCTEVfVE9LRU5fVFlQRVMuaW5jbHVkZXMoZSksdC5EVF9UT0tFTl9UWVBFUz1bby5jb2xvcixvLnNoYWRvdyxvLmdyYWRpZW50LG8udHlwb2dyYXBoeSxvLmJvcmRlciwuLi50LkRJTUVOU0lPTl9UT0tFTl9UWVBFUyxvLmZvbnRGYW1pbHksby5mb250V2VpZ2h0LG8uc3RyaW5nLC4uLnQuT1BUSU9OX1RPS0VOX1RZUEVTXX0sODYwNzooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuTVNfVU5JVFM9dC5QWF9VTklUUz10LlJBV19VTklUUz10LkxJTkVfSEVJR0hUX1VOSVRTPXQuU0laRV9VTklUUz10LlVuaXQ9dm9pZCAwLGZ1bmN0aW9uKGUpe2UucGl4ZWxzPVwiUGl4ZWxzXCIsZS5wZXJjZW50PVwiUGVyY2VudFwiLGUucmVtPVwiUmVtXCIsZS5tcz1cIk1zXCIsZS5yYXc9XCJSYXdcIn0ob3x8KHQuVW5pdD1vPXt9KSksdC5TSVpFX1VOSVRTPVtvLnBpeGVscyxvLnBlcmNlbnQsby5yZW1dLHQuTElORV9IRUlHSFRfVU5JVFM9W28ucGl4ZWxzLG8ucGVyY2VudCxvLnJlbSxvLnJhd10sdC5SQVdfVU5JVFM9W28ucmF3XSx0LlBYX1VOSVRTPVtvLnBpeGVsc10sdC5NU19VTklUUz1bby5tc119LDk0Nzg6KGUsdCxvKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuY29udmVydFJlbW90ZVRvVXNlclJvbGU9dC5Vc2VyUm9sZT12b2lkIDA7Y29uc3Qgcj1vKDQzNzkpO3ZhciBuOyFmdW5jdGlvbihlKXtlLm93bmVyPVwiT3duZXJcIixlLmFkbWluPVwiQWRtaW5cIixlLmNyZWF0b3I9XCJDcmVhdG9yXCIsZS5jb250cmlidXRvcj1cIkNvbnRyaWJ1dG9yXCIsZS5iaWxsaW5nPVwiQmlsbGluZ1wiLGUudmlld2VyPVwiVmlld2VyXCJ9KG58fCh0LlVzZXJSb2xlPW49e30pKSx0LmNvbnZlcnRSZW1vdGVUb1VzZXJSb2xlPWU9Pntzd2l0Y2goZSl7Y2FzZVwiT3duZXJcIjpyZXR1cm4gbi5vd25lcjtjYXNlXCJBZG1pblwiOnJldHVybiBuLmFkbWluO2Nhc2VcIkNyZWF0b3JcIjpyZXR1cm4gbi5jcmVhdG9yO2Nhc2VcIkNvbnRyaWJ1dG9yXCI6cmV0dXJuIG4uY29udHJpYnV0b3I7Y2FzZVwiQmlsbGluZ1wiOnJldHVybiBuLmJpbGxpbmc7Y2FzZVwiVmlld2VyXCI6cmV0dXJuIG4udmlld2VyO2RlZmF1bHQ6dGhyb3cgci5TdXBlcm5vdmFFcnJvci5mcm9tTWVzc2FnZShgVW5rbm93biByb2xlOiAke2V9YCl9fX0sNjE0MTooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuVmlzaWJpbGl0eVR5cGU9dm9pZCAwLGZ1bmN0aW9uKGUpe2UudmlzaWJsZT1cIlZpc2libGVcIixlLmhpZGRlbj1cIkhpZGRlblwifShvfHwodC5WaXNpYmlsaXR5VHlwZT1vPXt9KSl9LDYyOTg6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LldvcmtzcGFjZU5QTVJlZ2lzdHJ5QXV0aFR5cGU9dm9pZCAwLGZ1bmN0aW9uKGUpe2UuYmFzaWM9XCJCYXNpY1wiLGUuYmVhcmVyPVwiQmVhcmVyXCJ9KG98fCh0LldvcmtzcGFjZU5QTVJlZ2lzdHJ5QXV0aFR5cGU9bz17fSkpfSw3OTY4OihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Xb3Jrc3BhY2VOUE1SZWdpc3RyeVR5cGU9dm9pZCAwLGZ1bmN0aW9uKGUpe2UubnBtSlM9XCJOUE1KU1wiLGUuZ2l0SHViPVwiR2l0SHViXCIsZS5henVyZURldk9wcz1cIkF6dXJlRGV2T3BzXCIsZS5hcnRpZmFjdG9yeT1cIkFydGlmYWN0b3J5XCIsZS5jdXN0b209XCJDdXN0b21cIn0ob3x8KHQuV29ya3NwYWNlTlBNUmVnaXN0cnlUeXBlPW89e30pKX0sNTUwMzooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuV29ya3NwYWNlU3Vic2NyaXB0aW9uUGxhbkludGVydmFsPXZvaWQgMCxmdW5jdGlvbihlKXtlLnllYXJseT1cInllYXJseVwiLGUubW9udGhseT1cIm1vbnRobHlcIn0ob3x8KHQuV29ya3NwYWNlU3Vic2NyaXB0aW9uUGxhbkludGVydmFsPW89e30pKX0sNDI5MDooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuV29ya3NwYWNlU3Vic2NyaXB0aW9uUHJvZHVjdENvZGU9dm9pZCAwLGZ1bmN0aW9uKGUpe2UuZnJlZT1cImZyZWVcIixlLnRlYW09XCJ0ZWFtXCIsZS50ZWFtVGVzdD1cInRlYW1fdGVzdFwiLGUuY29tcGFueT1cImNvbXBhbnlcIixlLmVudGVycHJpc2U9XCJlbnRlcnByaXNlXCJ9KG98fCh0LldvcmtzcGFjZVN1YnNjcmlwdGlvblByb2R1Y3RDb2RlPW89e30pKX0sMzYwNzooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuV29ya3NwYWNlU3Vic2NyaXB0aW9uU3RhdHVzPXZvaWQgMCxmdW5jdGlvbihlKXtlLmFjdGl2ZT1cImFjdGl2ZVwiLGUuZ3JhY2VQZXJpb2Q9XCJncmFjZVBlcmlvZFwiLGUuY2FuY2VsbGVkPVwiY2FuY2VsbGVkXCIsZS5zdXNwZW5kZWQ9XCJzdXNwZW5kZWRcIn0ob3x8KHQuV29ya3NwYWNlU3Vic2NyaXB0aW9uU3RhdHVzPW89e30pKX0sMjgwMjooZSx0KT0+e3ZhciBvLHI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5QdWxzYXJFeGVjdXRvcj10Lk91dHB1dEZpbGVUeXBlPXZvaWQgMCxmdW5jdGlvbihlKXtlLmNvcHlSZW1vdGVVcmw9XCJjb3B5UmVtb3RlVXJsXCIsZS50ZXh0PVwidGV4dFwiLGUuYmluYXJ5PVwiYmluYXJ5XCJ9KG98fCh0Lk91dHB1dEZpbGVUeXBlPW89e30pKSxmdW5jdGlvbihlKXtlLnN1cGVybm92YT1cInN1cGVybm92YVwiLGUubG9jYWw9XCJsb2NhbFwifShyfHwodC5QdWxzYXJFeGVjdXRvcj1yPXt9KSl9fSx0PXt9O2Z1bmN0aW9uIG8ocil7dmFyIG49dFtyXTtpZih2b2lkIDAhPT1uKXJldHVybiBuLmV4cG9ydHM7dmFyIGk9dFtyXT17ZXhwb3J0czp7fX07cmV0dXJuIGVbcl0oaSxpLmV4cG9ydHMsbyksaS5leHBvcnRzfXZhciByPXt9OygoKT0+e3ZhciBlPXI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksZS5Ub2tlblR5cGU9ZS5UZXh0RGVjb3JhdGlvbj1lLlRleHRDYXNlPWUuU2hhZG93VHlwZT1lLlJpY2hUZXh0U3BhbkF0dHJpYnV0ZVR5cGU9ZS5HcmFkaWVudFR5cGU9ZS5GcmFtZUxheW91dD1lLkZyYW1lQWxpZ25tZW50PWUuSWNvblNldD1lLlNvdXJjZVR5cGU9ZS5Eb2NzSW1hZ2VSZWZUeXBlPWUuRG9jc0xpbmtSZWZUeXBlPWUuRG9jc1NlY3Rpb25UeXBlPWUuRG9jc0VudGl0eVR5cGU9ZS5Eb2NzRW50aXR5R3JvdXBCZWhhdmlvcj1lLkRvY3NCbG9ja1RleHRQcm9wZXJ0eVN0eWxlPWUuRG9jc0Jsb2NrUmljaFRleHRQcm9wZXJ0eVN0eWxlPWUuRG9jc0Jsb2NrT3B0aW9uQ29sb3I9ZS5Eb2NzQmxvY2tPcHRpb25SZW5kZXJpbmdTdHlsZT1lLkRvY3NCbG9ja0l0ZW1WYXJpYW50TGF5b3V0V2lkdGg9ZS5Eb2NzQmxvY2tJdGVtVmFyaWFudExheW91dFR5cGU9ZS5Eb2NzQmxvY2tJdGVtUHJvcGVydHlUeXBlPWUuRG9jc0Jsb2NrSXRlbVByb3BlcnR5VGV4dFN0eWxlPWUuRG9jc0Jsb2NrSXRlbVByb3BlcnR5UmljaFRleHRTdHlsZT1lLkRvY3NCbG9ja0l0ZW1Qcm9wZXJ0eU9wdGlvblJlbmRlcmluZ1N0eWxlPWUuRG9jc0Jsb2NrSXRlbUVudGl0eVR5cGU9ZS5Eb2NzQmxvY2tJbWFnZVByb3BlcnR5QXNwZWN0UmF0aW89ZS5Eb2NzQmxvY2tCZWhhdmlvclNlbGVjdGlvblR5cGU9ZS5Eb2NzQmxvY2tCZWhhdmlvckRhdGFUeXBlPWUuRG9jdW1lbnRhdGlvbkxlZ2FjeVBhZ2VCbG9ja1Nob3J0Y3V0VHlwZT1lLkRvY3VtZW50YXRpb25MZWdhY3lQYWdlQmxvY2tUaGVtZVR5cGU9ZS5Eb2N1bWVudGF0aW9uTGVnYWN5UGFnZUJsb2NrVHlwZT1lLkRvY3VtZW50YXRpb25MZWdhY3lQYWdlQXNzZXRUeXBlPWUuRG9jdW1lbnRhdGlvbkxlZ2FjeUl0ZW1UeXBlPWUuRG9jdW1lbnRhdGlvbkxlZ2FjeUhlYWRpbmdUeXBlPWUuRG9jdW1lbnRhdGlvbkxlZ2FjeUdyb3VwQmVoYXZpb3I9ZS5Eb2N1bWVudGF0aW9uTGVnYWN5Q2FsbG91dFR5cGU9ZS5Cb3JkZXJTdHlsZT1lLkJvcmRlclBvc2l0aW9uPWUuQmx1clR5cGU9ZS5Bc3NldFNjYWxlVHlwZT1lLkFzc2V0U2NhbGU9ZS5Bc3NldEZvcm1hdD1lLkFsaWdubWVudD1lLkFMTF9UT0tFTl9UWVBFUz1lLkFMTF9CT1JERVJfU1RZTEVTPWUuQUxMX0JPUkRFUl9QT1NJVElPTlM9ZS5PUFRJT05fVE9LRU5fVFlQRVM9ZS5TVFJJTkdfVE9LRU5fVFlQRVM9ZS5ESU1FTlNJT05fVE9LRU5fVFlQRVM9dm9pZCAwLGUuUHVsc2FyRXhlY3V0b3I9ZS5PdXRwdXRGaWxlVHlwZT1lLkN1c3RvbURvbWFpblN0YXRlPWUuQ3VzdG9tRG9tYWluRXJyb3JDb2RlPWUuSW1wb3J0V2FybmluZ1R5cGU9ZS5Xb3Jrc3BhY2VOUE1SZWdpc3RyeVR5cGU9ZS5Xb3Jrc3BhY2VOUE1SZWdpc3RyeUF1dGhUeXBlPWUuV29ya3NwYWNlU3Vic2NyaXB0aW9uU3RhdHVzPWUuV29ya3NwYWNlU3Vic2NyaXB0aW9uUHJvZHVjdENvZGU9ZS5Xb3Jrc3BhY2VTdWJzY3JpcHRpb25QbGFuSW50ZXJ2YWw9ZS5WaXNpYmlsaXR5VHlwZT1lLlVzZXJSb2xlPWUuVW5pdD12b2lkIDA7dmFyIHQ9bygzNzg4KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIkRJTUVOU0lPTl9UT0tFTl9UWVBFU1wiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiB0LkRJTUVOU0lPTl9UT0tFTl9UWVBFU319KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIlNUUklOR19UT0tFTl9UWVBFU1wiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiB0LlNUUklOR19UT0tFTl9UWVBFU319KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIk9QVElPTl9UT0tFTl9UWVBFU1wiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiB0Lk9QVElPTl9UT0tFTl9UWVBFU319KTt2YXIgbj1vKDExNjApO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiQUxMX0JPUkRFUl9QT1NJVElPTlNcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbi5BTExfQk9SREVSX1BPU0lUSU9OU319KTt2YXIgaT1vKDQ1NDYpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiQUxMX0JPUkRFUl9TVFlMRVNcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gaS5BTExfQk9SREVSX1NUWUxFU319KTt2YXIgYT1vKDM3ODgpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiQUxMX1RPS0VOX1RZUEVTXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGEuQUxMX1RPS0VOX1RZUEVTfX0pO3ZhciBjPW8oNzQ3Nik7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJBbGlnbm1lbnRcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gYy5BbGlnbm1lbnR9fSk7dmFyIGw9byg4NzM4KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIkFzc2V0Rm9ybWF0XCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGwuQXNzZXRGb3JtYXR9fSk7dmFyIHU9byg5MTUpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiQXNzZXRTY2FsZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiB1LkFzc2V0U2NhbGV9fSk7dmFyIHM9byg4OTkpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiQXNzZXRTY2FsZVR5cGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcy5Bc3NldFNjYWxlVHlwZX19KTt2YXIgZD1vKDYxOTIpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiQmx1clR5cGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZC5CbHVyVHlwZX19KTt2YXIgcD1vKDExNjApO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiQm9yZGVyUG9zaXRpb25cIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcC5Cb3JkZXJQb3NpdGlvbn19KTt2YXIgeT1vKDQ1NDYpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiQm9yZGVyU3R5bGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4geS5Cb3JkZXJTdHlsZX19KTt2YXIgbT1vKDUxMDIpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiRG9jdW1lbnRhdGlvbkxlZ2FjeUNhbGxvdXRUeXBlXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG0uRG9jdW1lbnRhdGlvbkxlZ2FjeUNhbGxvdXRUeXBlfX0pO3ZhciBUPW8oMjEyMyk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJEb2N1bWVudGF0aW9uTGVnYWN5R3JvdXBCZWhhdmlvclwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBULkRvY3VtZW50YXRpb25MZWdhY3lHcm91cEJlaGF2aW9yfX0pO3ZhciB2PW8oOTg5Nik7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJEb2N1bWVudGF0aW9uTGVnYWN5SGVhZGluZ1R5cGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdi5Eb2N1bWVudGF0aW9uTGVnYWN5SGVhZGluZ1R5cGV9fSk7dmFyIGY9byg3Mzc5KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIkRvY3VtZW50YXRpb25MZWdhY3lJdGVtVHlwZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBmLkRvY3VtZW50YXRpb25MZWdhY3lJdGVtVHlwZX19KTt2YXIgZz1vKDE0MjMpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiRG9jdW1lbnRhdGlvbkxlZ2FjeVBhZ2VBc3NldFR5cGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZy5Eb2N1bWVudGF0aW9uTGVnYWN5UGFnZUFzc2V0VHlwZX19KTt2YXIgUD1vKDE4NDYpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiRG9jdW1lbnRhdGlvbkxlZ2FjeVBhZ2VCbG9ja1R5cGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gUC5Eb2N1bWVudGF0aW9uTGVnYWN5UGFnZUJsb2NrVHlwZX19KTt2YXIgYj1vKDE2MDEpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiRG9jdW1lbnRhdGlvbkxlZ2FjeVBhZ2VCbG9ja1RoZW1lVHlwZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBiLkRvY3VtZW50YXRpb25MZWdhY3lQYWdlQmxvY2tUaGVtZVR5cGV9fSk7dmFyIFM9bygyNjU3KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIkRvY3VtZW50YXRpb25MZWdhY3lQYWdlQmxvY2tTaG9ydGN1dFR5cGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gUy5Eb2N1bWVudGF0aW9uTGVnYWN5UGFnZUJsb2NrU2hvcnRjdXRUeXBlfX0pO3ZhciBPPW8oNTY1MSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJEb2NzQmxvY2tCZWhhdmlvckRhdGFUeXBlXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIE8uRG9jc0Jsb2NrQmVoYXZpb3JEYXRhVHlwZX19KTt2YXIgXz1vKDM3MzMpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiRG9jc0Jsb2NrQmVoYXZpb3JTZWxlY3Rpb25UeXBlXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIF8uRG9jc0Jsb2NrQmVoYXZpb3JTZWxlY3Rpb25UeXBlfX0pO3ZhciBEPW8oODg5MCk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJEb2NzQmxvY2tJbWFnZVByb3BlcnR5QXNwZWN0UmF0aW9cIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gRC5Eb2NzQmxvY2tJbWFnZVByb3BlcnR5QXNwZWN0UmF0aW99fSk7dmFyIEk9byg5Mzc3KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIkRvY3NCbG9ja0l0ZW1FbnRpdHlUeXBlXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEkuRG9jc0Jsb2NrSXRlbUVudGl0eVR5cGV9fSk7dmFyIEU9byg1ODgzKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIkRvY3NCbG9ja0l0ZW1Qcm9wZXJ0eU9wdGlvblJlbmRlcmluZ1N0eWxlXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEUuRG9jc0Jsb2NrSXRlbVByb3BlcnR5T3B0aW9uUmVuZGVyaW5nU3R5bGV9fSk7dmFyIGg9byg4MDYxKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIkRvY3NCbG9ja0l0ZW1Qcm9wZXJ0eVJpY2hUZXh0U3R5bGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gaC5Eb2NzQmxvY2tJdGVtUHJvcGVydHlSaWNoVGV4dFN0eWxlfX0pO3ZhciBrPW8oNzQ3OSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJEb2NzQmxvY2tJdGVtUHJvcGVydHlUZXh0U3R5bGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gay5Eb2NzQmxvY2tJdGVtUHJvcGVydHlUZXh0U3R5bGV9fSk7dmFyIE49byg2ODM5KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIkRvY3NCbG9ja0l0ZW1Qcm9wZXJ0eVR5cGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gTi5Eb2NzQmxvY2tJdGVtUHJvcGVydHlUeXBlfX0pO3ZhciBCPW8oODA5NSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJEb2NzQmxvY2tJdGVtVmFyaWFudExheW91dFR5cGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gQi5Eb2NzQmxvY2tJdGVtVmFyaWFudExheW91dFR5cGV9fSk7dmFyIEw9byg3MjkxKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIkRvY3NCbG9ja0l0ZW1WYXJpYW50TGF5b3V0V2lkdGhcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gTC5Eb2NzQmxvY2tJdGVtVmFyaWFudExheW91dFdpZHRofX0pO3ZhciBSPW8oNTk2Myk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJEb2NzQmxvY2tPcHRpb25SZW5kZXJpbmdTdHlsZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBSLkRvY3NCbG9ja09wdGlvblJlbmRlcmluZ1N0eWxlfX0pO3ZhciBqPW8oOTEzMyk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJEb2NzQmxvY2tPcHRpb25Db2xvclwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBqLkRvY3NCbG9ja09wdGlvbkNvbG9yfX0pO3ZhciBDPW8oNjY0NCk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJEb2NzQmxvY2tSaWNoVGV4dFByb3BlcnR5U3R5bGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gQy5Eb2NzQmxvY2tSaWNoVGV4dFByb3BlcnR5U3R5bGV9fSk7dmFyIE09bygzMDYpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiRG9jc0Jsb2NrVGV4dFByb3BlcnR5U3R5bGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gTS5Eb2NzQmxvY2tUZXh0UHJvcGVydHlTdHlsZX19KTt2YXIgeD1vKDQwNjgpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiRG9jc0VudGl0eUdyb3VwQmVoYXZpb3JcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4geC5Eb2NzRW50aXR5R3JvdXBCZWhhdmlvcn19KTt2YXIgQT1vKDEyMzMpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiRG9jc0VudGl0eVR5cGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gQS5Eb2NzRW50aXR5VHlwZX19KTt2YXIgRj1vKDc5NzEpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiRG9jc1NlY3Rpb25UeXBlXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEYuRG9jc1NlY3Rpb25UeXBlfX0pO3ZhciB3PW8oNTY3Myk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJEb2NzTGlua1JlZlR5cGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdy5Eb2NzTGlua1JlZlR5cGV9fSk7dmFyIFU9byg5OTMyKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIkRvY3NJbWFnZVJlZlR5cGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gVS5Eb2NzSW1hZ2VSZWZUeXBlfX0pO3ZhciBZPW8oNDY1Mik7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJTb3VyY2VUeXBlXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIFkuU291cmNlVHlwZX19KTt2YXIgVz1vKDkzNCk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJJY29uU2V0XCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIFcuSWNvblNldH19KTt2YXIgRz1vKDEyNTUpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiRnJhbWVBbGlnbm1lbnRcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gRy5GcmFtZUFsaWdubWVudH19KTt2YXIgSz1vKDM3MTgpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiRnJhbWVMYXlvdXRcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gSy5GcmFtZUxheW91dH19KTt2YXIgSD1vKDEpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiR3JhZGllbnRUeXBlXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEguR3JhZGllbnRUeXBlfX0pO3ZhciBWPW8oMjY3NCk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJSaWNoVGV4dFNwYW5BdHRyaWJ1dGVUeXBlXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIFYuUmljaFRleHRTcGFuQXR0cmlidXRlVHlwZX19KTt2YXIgJD1vKDkxMjUpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiU2hhZG93VHlwZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiAkLlNoYWRvd1R5cGV9fSk7dmFyIHE9byg5MjIpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiVGV4dENhc2VcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcS5UZXh0Q2FzZX19KTt2YXIgej1vKDcwNDApO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiVGV4dERlY29yYXRpb25cIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gei5UZXh0RGVjb3JhdGlvbn19KTt2YXIgSj1vKDM3ODgpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiVG9rZW5UeXBlXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEouVG9rZW5UeXBlfX0pO3ZhciBRPW8oODYwNyk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJVbml0XCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIFEuVW5pdH19KTt2YXIgWj1vKDk0NzgpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiVXNlclJvbGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gWi5Vc2VyUm9sZX19KTt2YXIgWD1vKDYxNDEpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiVmlzaWJpbGl0eVR5cGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gWC5WaXNpYmlsaXR5VHlwZX19KTt2YXIgZWU9byg1NTAzKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIldvcmtzcGFjZVN1YnNjcmlwdGlvblBsYW5JbnRlcnZhbFwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBlZS5Xb3Jrc3BhY2VTdWJzY3JpcHRpb25QbGFuSW50ZXJ2YWx9fSk7dmFyIHRlPW8oNDI5MCk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJXb3Jrc3BhY2VTdWJzY3JpcHRpb25Qcm9kdWN0Q29kZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiB0ZS5Xb3Jrc3BhY2VTdWJzY3JpcHRpb25Qcm9kdWN0Q29kZX19KTt2YXIgb2U9bygzNjA3KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIldvcmtzcGFjZVN1YnNjcmlwdGlvblN0YXR1c1wiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBvZS5Xb3Jrc3BhY2VTdWJzY3JpcHRpb25TdGF0dXN9fSk7dmFyIHJlPW8oNjI5OCk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJXb3Jrc3BhY2VOUE1SZWdpc3RyeUF1dGhUeXBlXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHJlLldvcmtzcGFjZU5QTVJlZ2lzdHJ5QXV0aFR5cGV9fSk7dmFyIG5lPW8oNzk2OCk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJXb3Jrc3BhY2VOUE1SZWdpc3RyeVR5cGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbmUuV29ya3NwYWNlTlBNUmVnaXN0cnlUeXBlfX0pO3ZhciBpZT1vKDgwNDIpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiSW1wb3J0V2FybmluZ1R5cGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gaWUuSW1wb3J0V2FybmluZ1R5cGV9fSk7dmFyIGFlPW8oNTY5NSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJDdXN0b21Eb21haW5FcnJvckNvZGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gYWUuQ3VzdG9tRG9tYWluRXJyb3JDb2RlfX0pO3ZhciBjZT1vKDc3MzcpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiQ3VzdG9tRG9tYWluU3RhdGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gY2UuQ3VzdG9tRG9tYWluU3RhdGV9fSk7dmFyIGxlPW8oMjgwMik7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJPdXRwdXRGaWxlVHlwZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBsZS5PdXRwdXRGaWxlVHlwZX19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIlB1bHNhckV4ZWN1dG9yXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGxlLlB1bHNhckV4ZWN1dG9yfX0pfSkoKTt2YXIgbj1leHBvcnRzO2Zvcih2YXIgaSBpbiByKW5baV09cltpXTtyLl9fZXNNb2R1bGUmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pfSkoKTsiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVG9rZW5OYW1lU3RydWN0dXJlID0gZXhwb3J0cy5Ub2tlblNvcnRPcmRlciA9IGV4cG9ydHMuRmlsZVN0cnVjdHVyZSA9IGV4cG9ydHMuVGhlbWVFeHBvcnRTdHlsZSA9IHZvaWQgMDtcbi8qKlxuICogTWFpbiBjb25maWd1cmF0aW9uIG9mIHRoZSBleHBvcnRlciAtIHR5cGUgaW50ZXJmYWNlLiBEZWZhdWx0IHZhbHVlcyBmb3IgaXQgY2FuIGJlIHNldCB0aHJvdWdoIGBjb25maWcuanNvbmAgYW5kIHVzZXJzIGNhbiBvdmVycmlkZSB0aGUgYmVoYXZpb3Igd2hlbiBjcmVhdGluZyB0aGUgcGlwZWxpbmVzLlxuICovXG52YXIgVGhlbWVFeHBvcnRTdHlsZTtcbihmdW5jdGlvbiAoVGhlbWVFeHBvcnRTdHlsZSkge1xuICAgIFRoZW1lRXhwb3J0U3R5bGVbXCJBcHBseURpcmVjdGx5XCJdID0gXCJhcHBseURpcmVjdGx5XCI7XG4gICAgVGhlbWVFeHBvcnRTdHlsZVtcIlNlcGFyYXRlRmlsZXNcIl0gPSBcInNlcGFyYXRlRmlsZXNcIjtcbiAgICBUaGVtZUV4cG9ydFN0eWxlW1wiTWVyZ2VkVGhlbWVcIl0gPSBcIm1lcmdlZFRoZW1lXCI7XG4gICAgVGhlbWVFeHBvcnRTdHlsZVtcIk5lc3RlZFRoZW1lc1wiXSA9IFwibmVzdGVkVGhlbWVzXCI7XG59KShUaGVtZUV4cG9ydFN0eWxlIHx8IChleHBvcnRzLlRoZW1lRXhwb3J0U3R5bGUgPSBUaGVtZUV4cG9ydFN0eWxlID0ge30pKTtcbnZhciBGaWxlU3RydWN0dXJlO1xuKGZ1bmN0aW9uIChGaWxlU3RydWN0dXJlKSB7XG4gICAgRmlsZVN0cnVjdHVyZVtcIlNlcGFyYXRlQnlUeXBlXCJdID0gXCJzZXBhcmF0ZUJ5VHlwZVwiO1xuICAgIEZpbGVTdHJ1Y3R1cmVbXCJTaW5nbGVGaWxlXCJdID0gXCJzaW5nbGVGaWxlXCI7XG59KShGaWxlU3RydWN0dXJlIHx8IChleHBvcnRzLkZpbGVTdHJ1Y3R1cmUgPSBGaWxlU3RydWN0dXJlID0ge30pKTtcbnZhciBUb2tlblNvcnRPcmRlcjtcbihmdW5jdGlvbiAoVG9rZW5Tb3J0T3JkZXIpIHtcbiAgICBUb2tlblNvcnRPcmRlcltcIkRlZmF1bHRcIl0gPSBcImRlZmF1bHRcIjtcbiAgICBUb2tlblNvcnRPcmRlcltcIkFscGhhYmV0aWNhbFwiXSA9IFwiYWxwaGFiZXRpY2FsXCI7XG59KShUb2tlblNvcnRPcmRlciB8fCAoZXhwb3J0cy5Ub2tlblNvcnRPcmRlciA9IFRva2VuU29ydE9yZGVyID0ge30pKTtcbnZhciBUb2tlbk5hbWVTdHJ1Y3R1cmU7XG4oZnVuY3Rpb24gKFRva2VuTmFtZVN0cnVjdHVyZSkge1xuICAgIFRva2VuTmFtZVN0cnVjdHVyZVtcIlBhdGhBbmROYW1lXCJdID0gXCJwYXRoQW5kTmFtZVwiO1xuICAgIFRva2VuTmFtZVN0cnVjdHVyZVtcIk5hbWVPbmx5XCJdID0gXCJuYW1lT25seVwiO1xuICAgIFRva2VuTmFtZVN0cnVjdHVyZVtcIkNvbGxlY3Rpb25QYXRoQW5kTmFtZVwiXSA9IFwiY29sbGVjdGlvblBhdGhBbmROYW1lXCI7XG59KShUb2tlbk5hbWVTdHJ1Y3R1cmUgfHwgKGV4cG9ydHMuVG9rZW5OYW1lU3RydWN0dXJlID0gVG9rZW5OYW1lU3RydWN0dXJlID0ge30pKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5ERUZBVUxUX1RPS0VOX1BSRUZJWEVTID0gZXhwb3J0cy5ERUZBVUxUX1NUWUxFX0ZJTEVfTkFNRVMgPSB2b2lkIDA7XG5leHBvcnRzLkRFRkFVTFRfU1RZTEVfRklMRV9OQU1FUyA9IHtcbiAgICBDb2xvcjogXCJjb2xvci5qc29uXCIsXG4gICAgVHlwb2dyYXBoeTogXCJ0eXBvZ3JhcGh5Lmpzb25cIixcbiAgICBEaW1lbnNpb246IFwiZGltZW5zaW9uLmpzb25cIixcbiAgICBTaXplOiBcInNpemUuanNvblwiLFxuICAgIFNwYWNlOiBcInNwYWNlLmpzb25cIixcbiAgICBPcGFjaXR5OiBcIm9wYWNpdHkuanNvblwiLFxuICAgIEZvbnRTaXplOiBcImZvbnQtc2l6ZS5qc29uXCIsXG4gICAgTGluZUhlaWdodDogXCJsaW5lLWhlaWdodC5qc29uXCIsXG4gICAgTGV0dGVyU3BhY2luZzogXCJsZXR0ZXItc3BhY2luZy5qc29uXCIsXG4gICAgUGFyYWdyYXBoU3BhY2luZzogXCJwYXJhZ3JhcGgtc3BhY2luZy5qc29uXCIsXG4gICAgQm9yZGVyV2lkdGg6IFwiYm9yZGVyLXdpZHRoLmpzb25cIixcbiAgICBCb3JkZXJSYWRpdXM6IFwiYm9yZGVyLXJhZGl1cy5qc29uXCIsXG4gICAgRHVyYXRpb246IFwiZHVyYXRpb24uanNvblwiLFxuICAgIFpJbmRleDogXCJ6LWluZGV4Lmpzb25cIixcbiAgICBTaGFkb3c6IFwic2hhZG93Lmpzb25cIixcbiAgICBCb3JkZXI6IFwiYm9yZGVyLmpzb25cIixcbiAgICBHcmFkaWVudDogXCJncmFkaWVudC5qc29uXCIsXG4gICAgU3RyaW5nOiBcInN0cmluZy5qc29uXCIsXG4gICAgUHJvZHVjdENvcHk6IFwicHJvZHVjdC1jb3B5Lmpzb25cIixcbiAgICBGb250RmFtaWx5OiBcImZvbnQtZmFtaWx5Lmpzb25cIixcbiAgICBGb250V2VpZ2h0OiBcImZvbnQtd2VpZ2h0Lmpzb25cIixcbiAgICBUZXh0Q2FzZTogXCJ0ZXh0LWNhc2UuanNvblwiLFxuICAgIFRleHREZWNvcmF0aW9uOiBcInRleHQtZGVjb3JhdGlvbi5qc29uXCIsXG4gICAgVmlzaWJpbGl0eTogXCJ2aXNpYmlsaXR5Lmpzb25cIixcbiAgICBCbHVyOiBcImJsdXIuanNvblwiXG59O1xuZXhwb3J0cy5ERUZBVUxUX1RPS0VOX1BSRUZJWEVTID0ge1xuICAgIENvbG9yOiBcImNvbG9yXCIsXG4gICAgVHlwb2dyYXBoeTogXCJ0eXBvZ3JhcGh5XCIsXG4gICAgRGltZW5zaW9uOiBcImRpbWVuc2lvblwiLFxuICAgIFNpemU6IFwic2l6ZVwiLFxuICAgIFNwYWNlOiBcInNwYWNlXCIsXG4gICAgT3BhY2l0eTogXCJvcGFjaXR5XCIsXG4gICAgRm9udFNpemU6IFwiZm9udFNpemVcIixcbiAgICBMaW5lSGVpZ2h0OiBcImxpbmVIZWlnaHRcIixcbiAgICBMZXR0ZXJTcGFjaW5nOiBcImxldHRlclNwYWNpbmdcIixcbiAgICBQYXJhZ3JhcGhTcGFjaW5nOiBcInBhcmFncmFwaFNwYWNpbmdcIixcbiAgICBCb3JkZXJXaWR0aDogXCJib3JkZXJXaWR0aFwiLFxuICAgIEJvcmRlclJhZGl1czogXCJib3JkZXJSYWRpdXNcIixcbiAgICBEdXJhdGlvbjogXCJkdXJhdGlvblwiLFxuICAgIFpJbmRleDogXCJ6SW5kZXhcIixcbiAgICBTaGFkb3c6IFwic2hhZG93XCIsXG4gICAgQm9yZGVyOiBcImJvcmRlclwiLFxuICAgIEdyYWRpZW50OiBcImdyYWRpZW50XCIsXG4gICAgU3RyaW5nOiBcInN0cmluZ1wiLFxuICAgIFByb2R1Y3RDb3B5OiBcInByb2R1Y3RDb3B5XCIsXG4gICAgRm9udEZhbWlseTogXCJmb250RmFtaWx5XCIsXG4gICAgRm9udFdlaWdodDogXCJmb250V2VpZ2h0XCIsXG4gICAgVGV4dENhc2U6IFwidGV4dENhc2VcIixcbiAgICBUZXh0RGVjb3JhdGlvbjogXCJ0ZXh0RGVjb3JhdGlvblwiLFxuICAgIFZpc2liaWxpdHk6IFwidmlzaWJpbGl0eVwiLFxuICAgIEJsdXI6IFwiYmx1clwiXG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldFRva2VuUHJlZml4ID0gZ2V0VG9rZW5QcmVmaXg7XG5leHBvcnRzLnRva2VuT2JqZWN0S2V5TmFtZSA9IHRva2VuT2JqZWN0S2V5TmFtZTtcbmV4cG9ydHMucmVzZXRUb2tlbk5hbWVUcmFja2luZyA9IHJlc2V0VG9rZW5OYW1lVHJhY2tpbmc7XG5leHBvcnRzLmNvbnZlcnRlZFRva2VuID0gY29udmVydGVkVG9rZW47XG5jb25zdCBleHBvcnRfdXRpbHNfMSA9IHJlcXVpcmUoXCJAc3VwZXJub3ZhaW8vZXhwb3J0LXV0aWxzXCIpO1xuY29uc3QgX18xID0gcmVxdWlyZShcIi4uXCIpO1xuY29uc3QgZGVmYXVsdHNfMSA9IHJlcXVpcmUoXCIuLi9jb25zdGFudHMvZGVmYXVsdHNcIik7XG5jb25zdCB2YWx1ZV9mb3JtYXR0ZXJfMSA9IHJlcXVpcmUoXCIuLi91dGlscy92YWx1ZS1mb3JtYXR0ZXJcIik7XG5jb25zdCB0b2tlbl9oaWVyYXJjaHlfMSA9IHJlcXVpcmUoXCIuLi91dGlscy90b2tlbi1oaWVyYXJjaHlcIik7XG5mdW5jdGlvbiBnZXRUb2tlblByZWZpeCh0b2tlblR5cGUsIGZvcmNlUmV0dXJuID0gZmFsc2UpIHtcbiAgICAvLyBSZXR1cm4gZW1wdHkgc3RyaW5nIGlmIHRva2VuIHR5cGUgcHJlZml4ZXMgYXJlIGRpc2FibGVkICh1bmxlc3MgZm9yY2VSZXR1cm4gaXMgdHJ1ZSlcbiAgICBpZiAoIV9fMS5leHBvcnRDb25maWd1cmF0aW9uLnVzZVRva2VuVHlwZVByZWZpeGVzICYmICFmb3JjZVJldHVybikge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIHJldHVybiBfXzEuZXhwb3J0Q29uZmlndXJhdGlvbi5jdXN0b21pemVUb2tlblByZWZpeGVzXG4gICAgICAgID8gX18xLmV4cG9ydENvbmZpZ3VyYXRpb24udG9rZW5QcmVmaXhlc1t0b2tlblR5cGVdLnRyaW0oKVxuICAgICAgICA6IGRlZmF1bHRzXzEuREVGQVVMVF9UT0tFTl9QUkVGSVhFU1t0b2tlblR5cGVdO1xufVxuZnVuY3Rpb24gdG9rZW5PYmplY3RLZXlOYW1lKHRva2VuLCB0b2tlbkdyb3VwcywgZm9yRXhwb3J0ID0gZmFsc2UsIGNvbGxlY3Rpb25zID0gW10pIHtcbiAgICAvLyBGaW5kIGNvbGxlY3Rpb24gaWYgbmVlZGVkXG4gICAgbGV0IGNvbGxlY3Rpb25OYW1lID0gbnVsbDtcbiAgICBpZiAoX18xLmV4cG9ydENvbmZpZ3VyYXRpb24udG9rZW5OYW1lU3RydWN0dXJlID09PSAnY29sbGVjdGlvblBhdGhBbmROYW1lJyAmJiB0b2tlbi5jb2xsZWN0aW9uSWQpIHtcbiAgICAgICAgY29uc3QgY29sbGVjdGlvbiA9IGNvbGxlY3Rpb25zLmZpbmQoYyA9PiBjLnBlcnNpc3RlbnRJZCA9PT0gdG9rZW4uY29sbGVjdGlvbklkKTtcbiAgICAgICAgY29sbGVjdGlvbk5hbWUgPSBjb2xsZWN0aW9uPy5uYW1lID8/IG51bGw7XG4gICAgfVxuICAgIC8vIEZvciBuYW1lT25seSBzdHJ1Y3R1cmUsIGRvbid0IHBhc3MgdGhlIHBhcmVudCBncm91cFxuICAgIGNvbnN0IHBhcmVudEdyb3VwID0gX18xLmV4cG9ydENvbmZpZ3VyYXRpb24udG9rZW5OYW1lU3RydWN0dXJlICE9PSAnbmFtZU9ubHknID9cbiAgICAgICAgdG9rZW5Hcm91cHMuZmluZCgoZ3JvdXApID0+IGdyb3VwLmlkID09PSB0b2tlbi5wYXJlbnRHcm91cElkKSA6XG4gICAgICAgIG51bGw7XG4gICAgLy8gR2V0IHRoZSBwcmVmaXggZm9yIHRoaXMgdG9rZW4gdHlwZVxuICAgIGNvbnN0IHByZWZpeCA9IGdldFRva2VuUHJlZml4KHRva2VuLnRva2VuVHlwZSk7XG4gICAgcmV0dXJuIGV4cG9ydF91dGlsc18xLk5hbWluZ0hlbHBlci5jb2RlU2FmZVZhcmlhYmxlTmFtZUZvclRva2VuKHRva2VuLCBfXzEuZXhwb3J0Q29uZmlndXJhdGlvbi50b2tlbk5hbWVTdHlsZSwgcGFyZW50R3JvdXAgPz8gbnVsbCwgW19fMS5leHBvcnRDb25maWd1cmF0aW9uLmdsb2JhbE5hbWVQcmVmaXgsIHByZWZpeCwgY29sbGVjdGlvbk5hbWVdLmZpbHRlcihCb29sZWFuKS5qb2luKCctJykpO1xufVxuLy8gVXNlIHRoZSBoaWVyYXJjaHktYmFzZWQgbmFtZSB0cmFja2luZyByZXNldFxuZnVuY3Rpb24gcmVzZXRUb2tlbk5hbWVUcmFja2luZygpIHtcbiAgICAoMCwgdG9rZW5faGllcmFyY2h5XzEucmVzZXROYW1lVHJhY2tpbmcpKCk7XG59XG5mdW5jdGlvbiBjb252ZXJ0ZWRUb2tlbih0b2tlbiwgbWFwcGVkVG9rZW5zLCB0b2tlbkdyb3VwcywgY29sbGVjdGlvbnMgPSBbXSkge1xuICAgIGNvbnN0IG5hbWUgPSB0b2tlbk9iamVjdEtleU5hbWUodG9rZW4sIHRva2VuR3JvdXBzLCBmYWxzZSwgY29sbGVjdGlvbnMpO1xuICAgIGNvbnN0IHZhbHVlID0gZXhwb3J0X3V0aWxzXzEuQ1NTSGVscGVyLnRva2VuVG9DU1ModG9rZW4sIG1hcHBlZFRva2Vucywge1xuICAgICAgICBhbGxvd1JlZmVyZW5jZXM6IF9fMS5leHBvcnRDb25maWd1cmF0aW9uLnVzZVJlZmVyZW5jZXMsXG4gICAgICAgIGRlY2ltYWxzOiBfXzEuZXhwb3J0Q29uZmlndXJhdGlvbi5jb2xvclByZWNpc2lvbixcbiAgICAgICAgY29sb3JGb3JtYXQ6IF9fMS5leHBvcnRDb25maWd1cmF0aW9uLmNvbG9yRm9ybWF0LFxuICAgICAgICBmb3JjZVJlbVVuaXQ6IF9fMS5leHBvcnRDb25maWd1cmF0aW9uLmZvcmNlUmVtVW5pdCxcbiAgICAgICAgcmVtQmFzZTogX18xLmV4cG9ydENvbmZpZ3VyYXRpb24ucmVtQmFzZSxcbiAgICAgICAgdG9rZW5Ub1ZhcmlhYmxlUmVmOiAodCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRva2VuT2JqZWN0S2V5TmFtZSh0LCB0b2tlbkdyb3VwcywgZmFsc2UsIGNvbGxlY3Rpb25zKTtcbiAgICAgICAgfSxcbiAgICB9KTtcbiAgICBjb25zdCBpbmRlbnRTdHJpbmcgPSBcIiBcIi5yZXBlYXQoX18xLmV4cG9ydENvbmZpZ3VyYXRpb24uaW5kZW50KTtcbiAgICBjb25zdCBmb3JtYXR0ZWRWYWx1ZSA9ICgwLCB2YWx1ZV9mb3JtYXR0ZXJfMS5mb3JtYXRUb2tlblZhbHVlKSh2YWx1ZSk7XG4gICAgaWYgKF9fMS5leHBvcnRDb25maWd1cmF0aW9uLnNob3dEZXNjcmlwdGlvbnMgJiYgdG9rZW4uZGVzY3JpcHRpb24pIHtcbiAgICAgICAgcmV0dXJuIGAke2luZGVudFN0cmluZ30vLyAke3Rva2VuLmRlc2NyaXB0aW9uLnRyaW0oKX1cXG4ke2luZGVudFN0cmluZ30ke25hbWV9OiAke2Zvcm1hdHRlZFZhbHVlfSxgO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGAke2luZGVudFN0cmluZ30ke25hbWV9OiAke2Zvcm1hdHRlZFZhbHVlfSxgO1xuICAgIH1cbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zdHlsZU91dHB1dEZpbGUgPSBzdHlsZU91dHB1dEZpbGU7XG5leHBvcnRzLmNvbWJpbmVkU3R5bGVPdXRwdXRGaWxlID0gY29tYmluZWRTdHlsZU91dHB1dEZpbGU7XG5jb25zdCBleHBvcnRfdXRpbHNfMSA9IHJlcXVpcmUoXCJAc3VwZXJub3ZhaW8vZXhwb3J0LXV0aWxzXCIpO1xuY29uc3QgX18xID0gcmVxdWlyZShcIi4uXCIpO1xuY29uc3QgdG9rZW5fMSA9IHJlcXVpcmUoXCIuLi9jb250ZW50L3Rva2VuXCIpO1xuY29uc3QgZGVmYXVsdHNfMSA9IHJlcXVpcmUoXCIuLi9jb25zdGFudHMvZGVmYXVsdHNcIik7XG5jb25zdCB0b2tlbl9oaWVyYXJjaHlfMSA9IHJlcXVpcmUoXCIuLi91dGlscy90b2tlbi1oaWVyYXJjaHlcIik7XG5jb25zdCBleHBvcnRfdXRpbHNfMiA9IHJlcXVpcmUoXCJAc3VwZXJub3ZhaW8vZXhwb3J0LXV0aWxzXCIpO1xuY29uc3QgY29uZmlnXzEgPSByZXF1aXJlKFwiLi4vLi4vY29uZmlnXCIpO1xuLyoqXG4gKiBDcmVhdGVzIGEgdmFsdWUgb2JqZWN0IGZvciBhIHRva2VuLCBlaXRoZXIgYXMgYSBzaW1wbGUgdmFsdWUgb3IgdGhlbWVkIHZhbHVlc1xuICovXG5mdW5jdGlvbiBjcmVhdGVUb2tlblZhbHVlKHZhbHVlLCB0b2tlbiwgdGhlbWUpIHtcbiAgICBjb25zdCBiYXNlVmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9bJ1wiXS9nLCAnJyk7XG4gICAgY29uc3QgZGVzY3JpcHRpb24gPSB0b2tlbi5kZXNjcmlwdGlvbiAmJiBfXzEuZXhwb3J0Q29uZmlndXJhdGlvbi5zaG93RGVzY3JpcHRpb25zXG4gICAgICAgID8geyBkZXNjcmlwdGlvbjogdG9rZW4uZGVzY3JpcHRpb24udHJpbSgpIH1cbiAgICAgICAgOiB7fTtcbiAgICAvLyBHZXQgdGhlIHRva2VuIHR5cGUsIGZvcmNpbmcgYSByZXR1cm4gdmFsdWUgZXZlbiB3aGVuIHByZWZpeGVzIGFyZSBkaXNhYmxlZFxuICAgIGNvbnN0IHRva2VuVHlwZSA9ICgwLCB0b2tlbl8xLmdldFRva2VuUHJlZml4KSh0b2tlbi50b2tlblR5cGUsIHRydWUpO1xuICAgIC8vIEZvciBuZXN0ZWQgdGhlbWVzIHN0eWxlLCBjcmVhdGUgYW4gb2JqZWN0IHdpdGggdGhlbWUtc3BlY2lmaWMgdmFsdWVzXG4gICAgaWYgKF9fMS5leHBvcnRDb25maWd1cmF0aW9uLmV4cG9ydFRoZW1lc0FzID09PSBjb25maWdfMS5UaGVtZUV4cG9ydFN0eWxlLk5lc3RlZFRoZW1lcykge1xuICAgICAgICBjb25zdCB2YWx1ZU9iamVjdCA9IHt9O1xuICAgICAgICAvLyBJbmNsdWRlIGJhc2UgdmFsdWUgb25seSB3aGVuIHByb2Nlc3NpbmcgYmFzZSB0b2tlbnMgKG5vIHRoZW1lKVxuICAgICAgICAvLyBUaGlzIGVuc3VyZXMgYmFzZSB2YWx1ZXMgb25seSBjb21lIGZyb20gdGhlIGJhc2UgZmlsZVxuICAgICAgICBpZiAoIXRoZW1lICYmIF9fMS5leHBvcnRDb25maWd1cmF0aW9uLmV4cG9ydEJhc2VWYWx1ZXMpIHtcbiAgICAgICAgICAgIHZhbHVlT2JqZWN0WydiYXNlJ10gPSB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IGJhc2VWYWx1ZSxcbiAgICAgICAgICAgICAgICB0eXBlOiB0b2tlblR5cGVcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgLy8gQWRkIHRoZW1lZCB2YWx1ZSBpZiB0aGVtZSBpcyBwcm92aWRlZFxuICAgICAgICBpZiAodGhlbWUpIHtcbiAgICAgICAgICAgIHZhbHVlT2JqZWN0W2V4cG9ydF91dGlsc18xLlRoZW1lSGVscGVyLmdldFRoZW1lSWRlbnRpZmllcih0aGVtZSwgZXhwb3J0X3V0aWxzXzEuU3RyaW5nQ2FzZS5rZWJhYkNhc2UpXSA9IHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogYmFzZVZhbHVlLFxuICAgICAgICAgICAgICAgIHR5cGU6IHRva2VuVHlwZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICAvLyBBZGQgZGVzY3JpcHRpb24gbGFzdFxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4udmFsdWVPYmplY3QsXG4gICAgICAgICAgICAuLi5kZXNjcmlwdGlvblxuICAgICAgICB9O1xuICAgIH1cbiAgICAvLyBEZWZhdWx0IGNhc2UgLSByZXR1cm4gc2ltcGxlIHZhbHVlIG9iamVjdCB3aXRoIHR5cGVcbiAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZTogYmFzZVZhbHVlLFxuICAgICAgICB0eXBlOiB0b2tlblR5cGUsXG4gICAgICAgIC4uLmRlc2NyaXB0aW9uXG4gICAgfTtcbn1cbi8qKlxuICogQ29yZSB0b2tlbiBwcm9jZXNzaW5nIGZ1bmN0aW9uIHRoYXQgaGFuZGxlcyB0aGUgdHJhbnNmb3JtYXRpb24gb2YgdG9rZW5zIGludG8gYSBzdHJ1Y3R1cmVkIG9iamVjdC5cbiAqIFRoaXMgZnVuY3Rpb24gZW5jYXBzdWxhdGVzIHRoZSBzaGFyZWQgbG9naWMgYmV0d2VlbiBzaW5nbGUtZmlsZSBhbmQgc2VwYXJhdGUtZmlsZSBvdXRwdXRzLlxuICpcbiAqIEZlYXR1cmVzOlxuICogLSBIYW5kbGVzIHRva2VuIG5hbWUgdHJhY2tpbmcgYW5kIHVuaXF1ZW5lc3NcbiAqIC0gUHJvY2Vzc2VzIHRva2VuIHZhbHVlcyBhbmQgcmVmZXJlbmNlc1xuICogLSBNYW5hZ2VzIHRva2VuIHNvcnRpbmdcbiAqIC0gQ3JlYXRlcyBoaWVyYXJjaGljYWwgb2JqZWN0IHN0cnVjdHVyZVxuICogLSBIYW5kbGVzIHRoZW1lLXNwZWNpZmljIHZhbHVlc1xuICogLSBJbmNsdWRlcyB0b2tlbiBkZXNjcmlwdGlvbnMgYW5kIGNvbW1lbnRzXG4gKiAtIEZvcm1hdHMgdmFsdWVzIGFjY29yZGluZyB0byBjb25maWd1cmF0aW9uXG4gKlxuICogQHBhcmFtIHRva2VucyAtIEFycmF5IG9mIHRva2VucyB0byBwcm9jZXNzXG4gKiBAcGFyYW0gdG9rZW5Hcm91cHMgLSBBcnJheSBvZiB0b2tlbiBncm91cHMgZm9yIG1haW50YWluaW5nIGhpZXJhcmNoeVxuICogQHBhcmFtIHRoZW1lIC0gT3B0aW9uYWwgdGhlbWUgY29uZmlndXJhdGlvbiBmb3IgdGhlbWVkIHRva2Vuc1xuICogQHBhcmFtIGNvbGxlY3Rpb25zIC0gQXJyYXkgb2YgZGVzaWduIHN5c3RlbSBjb2xsZWN0aW9ucyBmb3IgY29sbGVjdGlvbi1iYXNlZCBvcmdhbml6YXRpb25cbiAqIEBwYXJhbSBhbGxUb2tlbnMgLSBPcHRpb25hbCBhcnJheSBvZiBhbGwgYXZhaWxhYmxlIHRva2VucyBmb3IgcmVmZXJlbmNlIHJlc29sdXRpb25cbiAqIEByZXR1cm5zIFN0cnVjdHVyZWQgb2JqZWN0IGNvbnRhaW5pbmcgcHJvY2Vzc2VkIHRva2Vucywgb3IgbnVsbCBpZiBubyBvdXRwdXQgc2hvdWxkIGJlIGdlbmVyYXRlZFxuICovXG5mdW5jdGlvbiBwcm9jZXNzVG9rZW5zVG9PYmplY3QodG9rZW5zLCB0b2tlbkdyb3VwcywgdGhlbWUsIGNvbGxlY3Rpb25zID0gW10sIGFsbFRva2Vucykge1xuICAgIC8vIENsZWFyIGFueSBwcmV2aW91c2x5IGNhY2hlZCB0b2tlbiBuYW1lcyB0byBlbnN1cmUgY2xlYW4gZ2VuZXJhdGlvblxuICAgICgwLCB0b2tlbl8xLnJlc2V0VG9rZW5OYW1lVHJhY2tpbmcpKCk7XG4gICAgLy8gU2tpcCBnZW5lcmF0aW5nIGVtcHR5IGZpbGVzIHVubGVzcyBleHBsaWNpdGx5IGNvbmZpZ3VyZWQgdG8gZG8gc29cbiAgICBpZiAoIV9fMS5leHBvcnRDb25maWd1cmF0aW9uLmdlbmVyYXRlRW1wdHlGaWxlcyAmJiB0b2tlbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICAvLyBDcmVhdGUgYSBsb29rdXAgbWFwIGZvciBxdWljayB0b2tlbiByZWZlcmVuY2UgcmVzb2x1dGlvbiB1c2luZyBhbGwgdG9rZW5zXG4gICAgLy8gVGhpcyBlbnN1cmVzIHRoYXQgcmVmZXJlbmNlcyB0byB0b2tlbnMgb3V0c2lkZSB0aGUgY3VycmVudCBmaWx0ZXJlZCBzZXQgc3RpbGwgd29ya1xuICAgIGNvbnN0IG1hcHBlZFRva2VucyA9IG5ldyBNYXAoKGFsbFRva2VucyB8fCB0b2tlbnMpLm1hcCgodG9rZW4pID0+IFt0b2tlbi5pZCwgdG9rZW5dKSk7XG4gICAgLy8gU29ydCB0b2tlbnMgaWYgY29uZmlndXJlZFxuICAgIC8vIFRoaXMgY2FuIG1ha2UgaXQgZWFzaWVyIHRvIGZpbmQgdG9rZW5zIGluIHRoZSBnZW5lcmF0ZWQgZmlsZXNcbiAgICBsZXQgc29ydGVkVG9rZW5zID0gWy4uLnRva2Vuc107XG4gICAgaWYgKF9fMS5leHBvcnRDb25maWd1cmF0aW9uLnRva2VuU29ydE9yZGVyID09PSAnYWxwaGFiZXRpY2FsJykge1xuICAgICAgICBzb3J0ZWRUb2tlbnMuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICAgICAgY29uc3QgbmFtZUEgPSAoMCwgdG9rZW5fMS50b2tlbk9iamVjdEtleU5hbWUpKGEsIHRva2VuR3JvdXBzLCB0cnVlLCBjb2xsZWN0aW9ucyk7XG4gICAgICAgICAgICBjb25zdCBuYW1lQiA9ICgwLCB0b2tlbl8xLnRva2VuT2JqZWN0S2V5TmFtZSkoYiwgdG9rZW5Hcm91cHMsIHRydWUsIGNvbGxlY3Rpb25zKTtcbiAgICAgICAgICAgIHJldHVybiBuYW1lQS5sb2NhbGVDb21wYXJlKG5hbWVCKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8vIEluaXRpYWxpemUgdGhlIHJvb3Qgb2JqZWN0IHRoYXQgd2lsbCBjb250YWluIGFsbCBwcm9jZXNzZWQgdG9rZW5zXG4gICAgY29uc3QgdG9rZW5PYmplY3QgPSB7fTtcbiAgICAvLyBBZGQgZ2VuZXJhdGVkIGZpbGUgZGlzY2xhaW1lciBpZiBlbmFibGVkXG4gICAgLy8gVGhpcyBoZWxwcyB1c2VycyB1bmRlcnN0YW5kIHRoYXQgdGhlIGZpbGUgaXMgYXV0by1nZW5lcmF0ZWRcbiAgICBpZiAoX18xLmV4cG9ydENvbmZpZ3VyYXRpb24uc2hvd0dlbmVyYXRlZEZpbGVEaXNjbGFpbWVyKSB7XG4gICAgICAgIHRva2VuT2JqZWN0Ll9jb21tZW50ID0gX18xLmV4cG9ydENvbmZpZ3VyYXRpb24uZGlzY2xhaW1lcjtcbiAgICB9XG4gICAgLy8gUHJvY2VzcyBlYWNoIHRva2VuIGFuZCBidWlsZCB0aGUgaGllcmFyY2hpY2FsIHN0cnVjdHVyZVxuICAgIHNvcnRlZFRva2Vucy5mb3JFYWNoKHRva2VuID0+IHtcbiAgICAgICAgLy8gR2VuZXJhdGUgdGhlIHRva2VuJ3Mgb2JqZWN0IGtleSBuYW1lIGJhc2VkIG9uIGNvbmZpZ3VyYXRpb25cbiAgICAgICAgY29uc3QgbmFtZSA9ICgwLCB0b2tlbl8xLnRva2VuT2JqZWN0S2V5TmFtZSkodG9rZW4sIHRva2VuR3JvdXBzLCB0cnVlLCBjb2xsZWN0aW9ucyk7XG4gICAgICAgIC8vIENvbnZlcnQgdG9rZW4gdG8gQ1NTLWNvbXBhdGlibGUgdmFsdWUsIGhhbmRsaW5nIHJlZmVyZW5jZXMgYW5kIGZvcm1hdHRpbmdcbiAgICAgICAgY29uc3QgdmFsdWUgPSBleHBvcnRfdXRpbHNfMS5DU1NIZWxwZXIudG9rZW5Ub0NTUyh0b2tlbiwgbWFwcGVkVG9rZW5zLCB7XG4gICAgICAgICAgICBhbGxvd1JlZmVyZW5jZXM6IF9fMS5leHBvcnRDb25maWd1cmF0aW9uLnVzZVJlZmVyZW5jZXMsXG4gICAgICAgICAgICBkZWNpbWFsczogX18xLmV4cG9ydENvbmZpZ3VyYXRpb24uY29sb3JQcmVjaXNpb24sXG4gICAgICAgICAgICBjb2xvckZvcm1hdDogX18xLmV4cG9ydENvbmZpZ3VyYXRpb24uY29sb3JGb3JtYXQsXG4gICAgICAgICAgICBmb3JjZVJlbVVuaXQ6IF9fMS5leHBvcnRDb25maWd1cmF0aW9uLmZvcmNlUmVtVW5pdCxcbiAgICAgICAgICAgIHJlbUJhc2U6IF9fMS5leHBvcnRDb25maWd1cmF0aW9uLnJlbUJhc2UsXG4gICAgICAgICAgICB0b2tlblRvVmFyaWFibGVSZWY6ICh0KSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gQnVpbGQgdGhlIHJlZmVyZW5jZSBwYXRoIGJhc2VkIG9uIHRva2VuIHN0cnVjdHVyZSBjb25maWd1cmF0aW9uXG4gICAgICAgICAgICAgICAgY29uc3QgcHJlZml4ID0gKDAsIHRva2VuXzEuZ2V0VG9rZW5QcmVmaXgpKHQudG9rZW5UeXBlKTtcbiAgICAgICAgICAgICAgICBjb25zdCBwYXRoU2VnbWVudHMgPSAodC50b2tlblBhdGggfHwgW10pXG4gICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoc2VnbWVudCA9PiBzZWdtZW50ICYmIHNlZ21lbnQudHJpbSgpLmxlbmd0aCA+IDApXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoc2VnbWVudCA9PiBleHBvcnRfdXRpbHNfMi5OYW1pbmdIZWxwZXIuY29kZVNhZmVWYXJpYWJsZU5hbWUoc2VnbWVudCwgX18xLmV4cG9ydENvbmZpZ3VyYXRpb24udG9rZW5OYW1lU3R5bGUpKTtcbiAgICAgICAgICAgICAgICBjb25zdCB0b2tlbk5hbWUgPSAoMCwgdG9rZW5faGllcmFyY2h5XzEucHJvY2Vzc1Rva2VuTmFtZSkodCwgcGF0aFNlZ21lbnRzKTtcbiAgICAgICAgICAgICAgICAvLyBCdWlsZCBzZWdtZW50cyBhcnJheSBiYXNlZCBvbiBjb25maWd1cmF0aW9uXG4gICAgICAgICAgICAgICAgbGV0IHNlZ21lbnRzID0gW107XG4gICAgICAgICAgICAgICAgaWYgKHByZWZpeCkge1xuICAgICAgICAgICAgICAgICAgICBzZWdtZW50cy5wdXNoKHByZWZpeCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIEhhbmRsZSBkaWZmZXJlbnQgdG9rZW4gbmFtZSBzdHJ1Y3R1cmUgY29uZmlndXJhdGlvbnNcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9fMS5leHBvcnRDb25maWd1cmF0aW9uLnRva2VuTmFtZVN0cnVjdHVyZSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIGNvbmZpZ18xLlRva2VuTmFtZVN0cnVjdHVyZS5OYW1lT25seTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlZ21lbnRzLnB1c2godG9rZW5OYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIGNvbmZpZ18xLlRva2VuTmFtZVN0cnVjdHVyZS5Db2xsZWN0aW9uUGF0aEFuZE5hbWU6XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJbmNsdWRlIGNvbGxlY3Rpb24gbmFtZSBpbiB0aGUgcGF0aCBpZiBhdmFpbGFibGVcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0LmNvbGxlY3Rpb25JZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbGxlY3Rpb24gPSBjb2xsZWN0aW9ucy5maW5kKGMgPT4gYy5wZXJzaXN0ZW50SWQgPT09IHQuY29sbGVjdGlvbklkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29sbGVjdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb2xsZWN0aW9uU2VnbWVudCA9IGV4cG9ydF91dGlsc18yLk5hbWluZ0hlbHBlci5jb2RlU2FmZVZhcmlhYmxlTmFtZShjb2xsZWN0aW9uLm5hbWUsIF9fMS5leHBvcnRDb25maWd1cmF0aW9uLnRva2VuTmFtZVN0eWxlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VnbWVudHMucHVzaChjb2xsZWN0aW9uU2VnbWVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgc2VnbWVudHMucHVzaCguLi5wYXRoU2VnbWVudHMsIHRva2VuTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBjb25maWdfMS5Ub2tlbk5hbWVTdHJ1Y3R1cmUuUGF0aEFuZE5hbWU6XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWdtZW50cy5wdXNoKC4uLnBhdGhTZWdtZW50cywgdG9rZW5OYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBBZGQgZ2xvYmFsIHByZWZpeCBpZiBjb25maWd1cmVkXG4gICAgICAgICAgICAgICAgaWYgKF9fMS5leHBvcnRDb25maWd1cmF0aW9uLmdsb2JhbE5hbWVQcmVmaXgpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VnbWVudHMudW5zaGlmdChleHBvcnRfdXRpbHNfMi5OYW1pbmdIZWxwZXIuY29kZVNhZmVWYXJpYWJsZU5hbWUoX18xLmV4cG9ydENvbmZpZ3VyYXRpb24uZ2xvYmFsTmFtZVByZWZpeCwgX18xLmV4cG9ydENvbmZpZ3VyYXRpb24udG9rZW5OYW1lU3R5bGUpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGB7JHtzZWdtZW50cy5qb2luKCcuJyl9fWA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBDcmVhdGUgdGhlIGhpZXJhcmNoaWNhbCBvYmplY3Qgc3RydWN0dXJlIGZvciB0aGlzIHRva2VuXG4gICAgICAgIGNvbnN0IGhpZXJhcmNoaWNhbE9iamVjdCA9ICgwLCB0b2tlbl9oaWVyYXJjaHlfMS5jcmVhdGVIaWVyYXJjaGljYWxTdHJ1Y3R1cmUpKHRva2VuLnRva2VuUGF0aCB8fCBbXSwgdG9rZW4ubmFtZSwgY3JlYXRlVG9rZW5WYWx1ZSh2YWx1ZSwgdG9rZW4sIHRoZW1lKSwgdG9rZW4sIGNvbGxlY3Rpb25zKTtcbiAgICAgICAgLy8gTWVyZ2UgdGhlIHRva2VuJ3Mgb2JqZWN0IHN0cnVjdHVyZSBpbnRvIHRoZSBtYWluIG9iamVjdFxuICAgICAgICBPYmplY3QuYXNzaWduKHRva2VuT2JqZWN0LCAoMCwgdG9rZW5faGllcmFyY2h5XzEuZGVlcE1lcmdlKSh0b2tlbk9iamVjdCwgaGllcmFyY2hpY2FsT2JqZWN0KSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRva2VuT2JqZWN0O1xufVxuLyoqXG4gKiBHZW5lcmF0ZXMgYSBzdHlsZSBmaWxlIGZvciBhIHNwZWNpZmljIHRva2VuIHR5cGUgKGNvbG9yLmpzb24sIHR5cG9ncmFwaHkuanNvbiwgZXRjLikuXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgd2hlbiBmaWxlU3RydWN0dXJlIGlzIHNldCB0byAnc2VwYXJhdGVCeVR5cGUnLlxuICpcbiAqIEZlYXR1cmVzOlxuICogLSBHZW5lcmF0ZXMgc2VwYXJhdGUgZmlsZXMgZm9yIGVhY2ggdG9rZW4gdHlwZVxuICogLSBIYW5kbGVzIHRva2VuIGZpbHRlcmluZyBieSB0eXBlXG4gKiAtIFN1cHBvcnRzIHRoZW1pbmdcbiAqIC0gSW5jbHVkZXMgdG9rZW4gZGVzY3JpcHRpb25zIGFzIGNvbW1lbnRzXG4gKiAtIEZvcm1hdHMgdmFsdWVzIGFjY29yZGluZyB0byBjb25maWd1cmF0aW9uXG4gKlxuICogQHBhcmFtIHR5cGUgLSBUaGUgdHlwZSBvZiB0b2tlbnMgdG8gZ2VuZXJhdGUgKENvbG9yLCBUeXBvZ3JhcGh5LCBldGMuKVxuICogQHBhcmFtIHRva2VucyAtIEFycmF5IG9mIGFsbCB0b2tlbnNcbiAqIEBwYXJhbSB0b2tlbkdyb3VwcyAtIEFycmF5IG9mIHRva2VuIGdyb3VwcyBmb3IgbmFtZSBnZW5lcmF0aW9uXG4gKiBAcGFyYW0gdGhlbWVQYXRoIC0gUGF0aCBmb3IgdGhlbWVkIHRva2VucyAoZW1wdHkgZm9yIGJhc2UgdG9rZW5zKVxuICogQHBhcmFtIHRoZW1lIC0gVGhlbWUgY29uZmlndXJhdGlvbiB3aGVuIGdlbmVyYXRpbmcgdGhlbWVkIHRva2Vuc1xuICogQHBhcmFtIGNvbGxlY3Rpb25zIC0gQXJyYXkgb2YgZGVzaWduIHN5c3RlbSBjb2xsZWN0aW9uc1xuICogQHJldHVybnMgT3V0cHV0VGV4dEZpbGUgd2l0aCB0aGUgZ2VuZXJhdGVkIGNvbnRlbnQgb3IgbnVsbCBpZiBubyB0b2tlbnMgZXhpc3RcbiAqL1xuZnVuY3Rpb24gc3R5bGVPdXRwdXRGaWxlKHR5cGUsIHRva2VucywgdG9rZW5Hcm91cHMsIHRoZW1lUGF0aCA9ICcnLCB0aGVtZSwgY29sbGVjdGlvbnMgPSBbXSkge1xuICAgIC8vIFNraXAgZ2VuZXJhdGluZyBiYXNlIHRva2VuIGZpbGVzIHVubGVzczpcbiAgICAvLyAtIEJhc2UgdmFsdWVzIGFyZSBleHBsaWNpdGx5IGVuYWJsZWQgdmlhIGV4cG9ydEJhc2VWYWx1ZXMsIG9yXG4gICAgLy8gLSBXZSdyZSBnZW5lcmF0aW5nIHRoZW1lZCBmaWxlcyAodGhlbWVQYXRoIGlzIHByZXNlbnQpLCBvclxuICAgIC8vIC0gV2UncmUgdXNpbmcgbmVzdGVkIHRoZW1lcyBmb3JtYXRcbiAgICBpZiAoIV9fMS5leHBvcnRDb25maWd1cmF0aW9uLmV4cG9ydEJhc2VWYWx1ZXMgJiYgIXRoZW1lUGF0aCAmJlxuICAgICAgICBfXzEuZXhwb3J0Q29uZmlndXJhdGlvbi5leHBvcnRUaGVtZXNBcyAhPT0gY29uZmlnXzEuVGhlbWVFeHBvcnRTdHlsZS5OZXN0ZWRUaGVtZXMpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIC8vIEZpbHRlciB0byBvbmx5IGluY2x1ZGUgdG9rZW5zIG9mIHRoZSBzcGVjaWZpZWQgdHlwZSAoY29sb3IsIHNpemUsIGV0YylcbiAgICBsZXQgdG9rZW5zT2ZUeXBlID0gdG9rZW5zLmZpbHRlcigodG9rZW4pID0+IHRva2VuLnRva2VuVHlwZSA9PT0gdHlwZSk7XG4gICAgLy8gRm9yIHRoZW1lZCB0b2tlbiBmaWxlczpcbiAgICAvLyAtIEZpbHRlciB0byBvbmx5IGluY2x1ZGUgdG9rZW5zIHRoYXQgYXJlIG92ZXJyaWRkZW4gaW4gdGhpcyB0aGVtZVxuICAgIC8vIC0gU2tpcCBnZW5lcmF0aW5nIHRoZSBmaWxlIGlmIG5vIHRva2VucyBhcmUgdGhlbWVkICh3aGVuIGNvbmZpZ3VyZWQpXG4gICAgaWYgKHRoZW1lUGF0aCAmJiB0aGVtZSAmJiBfXzEuZXhwb3J0Q29uZmlndXJhdGlvbi5leHBvcnRPbmx5VGhlbWVkVG9rZW5zKSB7XG4gICAgICAgIHRva2Vuc09mVHlwZSA9IGV4cG9ydF91dGlsc18xLlRoZW1lSGVscGVyLmZpbHRlclRoZW1lZFRva2Vucyh0b2tlbnNPZlR5cGUsIHRoZW1lKTtcbiAgICAgICAgaWYgKHRva2Vuc09mVHlwZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIFByb2Nlc3MgdG9rZW5zIGludG8gYSBzdHJ1Y3R1cmVkIG9iamVjdFxuICAgIC8vIFBhc3MgdGhlIGZ1bGwgdG9rZW5zIGFycmF5IGZvciByZWZlcmVuY2UgcmVzb2x1dGlvblxuICAgIGNvbnN0IHRva2VuT2JqZWN0ID0gcHJvY2Vzc1Rva2Vuc1RvT2JqZWN0KHRva2Vuc09mVHlwZSwgdG9rZW5Hcm91cHMsIHRoZW1lLCBjb2xsZWN0aW9ucywgdG9rZW5zKTtcbiAgICBpZiAoIXRva2VuT2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICAvLyBHZW5lcmF0ZSB0aGUgZmluYWwgSlNPTiBjb250ZW50IHdpdGggcHJvcGVyIGluZGVudGF0aW9uXG4gICAgY29uc3QgY29udGVudCA9IEpTT04uc3RyaW5naWZ5KHRva2VuT2JqZWN0LCBudWxsLCBfXzEuZXhwb3J0Q29uZmlndXJhdGlvbi5pbmRlbnQpO1xuICAgIC8vIENyZWF0ZSBhbmQgcmV0dXJuIHRoZSBvdXRwdXQgZmlsZSB3aXRoIGFwcHJvcHJpYXRlIHBhdGggYW5kIG5hbWVcbiAgICByZXR1cm4gZXhwb3J0X3V0aWxzXzEuRmlsZUhlbHBlci5jcmVhdGVUZXh0RmlsZSh7XG4gICAgICAgIHJlbGF0aXZlUGF0aDogdGhlbWVQYXRoID8gYC4vJHt0aGVtZVBhdGh9YCA6IF9fMS5leHBvcnRDb25maWd1cmF0aW9uLmJhc2VTdHlsZUZpbGVQYXRoLFxuICAgICAgICBmaWxlTmFtZTogX18xLmV4cG9ydENvbmZpZ3VyYXRpb24uY3VzdG9taXplU3R5bGVGaWxlTmFtZXNcbiAgICAgICAgICAgID8gZXhwb3J0X3V0aWxzXzEuRmlsZU5hbWVIZWxwZXIuZW5zdXJlRmlsZUV4dGVuc2lvbihfXzEuZXhwb3J0Q29uZmlndXJhdGlvbi5zdHlsZUZpbGVOYW1lc1t0eXBlXSwgXCIuanNvblwiKVxuICAgICAgICAgICAgOiBkZWZhdWx0c18xLkRFRkFVTFRfU1RZTEVfRklMRV9OQU1FU1t0eXBlXSxcbiAgICAgICAgY29udGVudDogY29udGVudFxuICAgIH0pO1xufVxuLyoqXG4gKiBHZW5lcmF0ZXMgdGhlIGNvbnRlbnQgb2YgdGhlIGV4cG9ydGVkIHRva2VuIG9iamVjdC5cbiAqIFRoaXMgb2JqZWN0IHByb3ZpZGVzIGEgdHlwZS1zYWZlIHdheSB0byBhY2Nlc3MgdG9rZW4gdmFsdWVzIHRocm91Z2ggdGhlaXIgZ2VuZXJhdGVkIG5hbWVzLlxuICpcbiAqIEZlYXR1cmVzOlxuICogLSBNYWludGFpbnMgdG9rZW4gZ3JvdXBpbmcgc3RydWN0dXJlXG4gKiAtIEluY2x1ZGVzIHRva2VuIGRlc2NyaXB0aW9ucyBhcyBKU0RvYyBjb21tZW50c1xuICogLSBTdXBwb3J0cyBhbHBoYWJldGljYWwgc29ydGluZyB3aGVuIGNvbmZpZ3VyZWRcbiAqIC0gUHJvcGVybHkgaW5kZW50cyBhY2NvcmRpbmcgdG8gY29uZmlndXJhdGlvblxuICpcbiAqIEBwYXJhbSB0b2tlbnMgLSBBcnJheSBvZiB0b2tlbnMgdG8gaW5jbHVkZSBpbiB0aGUgb2JqZWN0XG4gKiBAcGFyYW0gdG9rZW5Hcm91cHMgLSBBcnJheSBvZiB0b2tlbiBncm91cHMgZm9yIG1haW50YWluaW5nIGhpZXJhcmNoeVxuICogQHJldHVybnMgRm9ybWF0dGVkIHN0cmluZyBjb250YWluaW5nIHRoZSBvYmplY3QncyBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIGdlbmVyYXRlVG9rZW5PYmplY3QodG9rZW5zLCB0b2tlbkdyb3Vwcykge1xuICAgIGNvbnN0IGluZGVudFN0cmluZyA9IGV4cG9ydF91dGlsc18xLkdlbmVyYWxIZWxwZXIuaW5kZW50KF9fMS5leHBvcnRDb25maWd1cmF0aW9uLmluZGVudCk7XG4gICAgLy8gQ3JlYXRlIGEgY29weSBvZiB0b2tlbnMgYXJyYXkgZm9yIHNvcnRpbmdcbiAgICBsZXQgc29ydGVkVG9rZW5zID0gWy4uLnRva2Vuc107XG4gICAgLy8gU29ydCB0b2tlbnMgYWxwaGFiZXRpY2FsbHkgaWYgY29uZmlndXJlZFxuICAgIC8vIFRoaXMgY2FuIG1ha2UgaXQgZWFzaWVyIHRvIGZpbmQgdG9rZW5zIGluIHRoZSBnZW5lcmF0ZWQgZmlsZXNcbiAgICBpZiAoX18xLmV4cG9ydENvbmZpZ3VyYXRpb24udG9rZW5Tb3J0T3JkZXIgPT09ICdhbHBoYWJldGljYWwnKSB7XG4gICAgICAgIHNvcnRlZFRva2Vucy5zb3J0KChhLCBiKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBuYW1lQSA9ICgwLCB0b2tlbl8xLnRva2VuT2JqZWN0S2V5TmFtZSkoYSwgdG9rZW5Hcm91cHMsIHRydWUpO1xuICAgICAgICAgICAgY29uc3QgbmFtZUIgPSAoMCwgdG9rZW5fMS50b2tlbk9iamVjdEtleU5hbWUpKGIsIHRva2VuR3JvdXBzLCB0cnVlKTtcbiAgICAgICAgICAgIHJldHVybiBuYW1lQS5sb2NhbGVDb21wYXJlKG5hbWVCKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8vIEdlbmVyYXRlIHRoZSBvYmplY3QgcHJvcGVydGllcywgaW5jbHVkaW5nIGRlc2NyaXB0aW9ucyBhcyBKU0RvYyBjb21tZW50c1xuICAgIHJldHVybiBzb3J0ZWRUb2tlbnMubWFwKHRva2VuID0+IHtcbiAgICAgICAgY29uc3QgbmFtZSA9ICgwLCB0b2tlbl8xLnRva2VuT2JqZWN0S2V5TmFtZSkodG9rZW4sIHRva2VuR3JvdXBzLCB0cnVlKTtcbiAgICAgICAgaWYgKHRva2VuLmRlc2NyaXB0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gYCR7aW5kZW50U3RyaW5nfS8qKiAke3Rva2VuLmRlc2NyaXB0aW9uLnRyaW0oKX0gKi9cXG4ke2luZGVudFN0cmluZ30ke25hbWV9LGA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGAke2luZGVudFN0cmluZ30ke25hbWV9LGA7XG4gICAgfSkuam9pbignXFxuJyk7XG59XG4vKipcbiAqIEdlbmVyYXRlcyBhIHNpbmdsZSBjb21iaW5lZCBKU09OIGZpbGUgY29udGFpbmluZyBhbGwgdG9rZW4gdHlwZXMuXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgd2hlbiBmaWxlU3RydWN0dXJlIGlzIHNldCB0byAnc2luZ2xlRmlsZScuXG4gKlxuICogRmVhdHVyZXM6XG4gKiAtIENvbWJpbmVzIGFsbCB0b2tlbiB0eXBlcyBpbnRvIGEgc2luZ2xlIGZpbGVcbiAqIC0gTWFpbnRhaW5zIHRva2VuIHR5cGUgZ3JvdXBpbmcgaW4gdGhlIG91dHB1dFxuICogLSBTdXBwb3J0cyB0aGVtaW5nXG4gKiAtIEluY2x1ZGVzIHRva2VuIGRlc2NyaXB0aW9uc1xuICogLSBQbGFjZXMgZmlsZXMgZGlyZWN0bHkgaW4gcm9vdCB3aXRoIHRoZW1lLWJhc2VkIG5hbWVzXG4gKlxuICogT3V0cHV0IHN0cnVjdHVyZSBleGFtcGxlczpcbiAqIC0gTm8gdGhlbWVzOiB0b2tlbnMuanNvblxuICogLSBTZXBhcmF0ZSB0aGVtZSBmaWxlczogdG9rZW5zLmpzb24sIHRva2Vucy5saWdodC5qc29uLCB0b2tlbnMuZGFyay5qc29uXG4gKiAtIE1lcmdlZCB0aGVtZXM6IHRva2Vucy5qc29uLCB0b2tlbnMudGhlbWVkLmpzb25cbiAqIC0gTmVzdGVkIHRoZW1lczogdG9rZW5zLmpzb24gKHdpdGggYWxsIHRoZW1lcyBuZXN0ZWQgaW5zaWRlKVxuICpcbiAqIEBwYXJhbSB0b2tlbnMgLSBBcnJheSBvZiBhbGwgdG9rZW5zXG4gKiBAcGFyYW0gdG9rZW5Hcm91cHMgLSBBcnJheSBvZiB0b2tlbiBncm91cHMgZm9yIGhpZXJhcmNoeVxuICogQHBhcmFtIHRoZW1lUGF0aCAtIE9wdGlvbmFsIHRoZW1lIHBhdGggZm9yIHRoZW1lZCBmaWxlc1xuICogQHBhcmFtIHRoZW1lIC0gT3B0aW9uYWwgdGhlbWUgY29uZmlndXJhdGlvblxuICogQHBhcmFtIGNvbGxlY3Rpb25zIC0gQXJyYXkgb2YgZGVzaWduIHN5c3RlbSBjb2xsZWN0aW9uc1xuICogQHJldHVybnMgT3V0cHV0VGV4dEZpbGUgd2l0aCB0aGUgY29tYmluZWQgY29udGVudCBvciBudWxsIGlmIG5vIG91dHB1dCBzaG91bGQgYmUgZ2VuZXJhdGVkXG4gKi9cbmZ1bmN0aW9uIGNvbWJpbmVkU3R5bGVPdXRwdXRGaWxlKHRva2VucywgdG9rZW5Hcm91cHMsIHRoZW1lUGF0aCA9ICcnLCB0aGVtZSwgY29sbGVjdGlvbnMgPSBbXSkge1xuICAgIC8vIFNraXAgZ2VuZXJhdGluZyBiYXNlIHRva2VuIGZpbGVzIHVubGVzczpcbiAgICAvLyAtIEJhc2UgdmFsdWVzIGFyZSBleHBsaWNpdGx5IGVuYWJsZWQgdmlhIGV4cG9ydEJhc2VWYWx1ZXMsIG9yXG4gICAgLy8gLSBXZSdyZSBnZW5lcmF0aW5nIHRoZW1lZCBmaWxlcyAodGhlbWVQYXRoIGlzIHByZXNlbnQpLCBvclxuICAgIC8vIC0gV2UncmUgdXNpbmcgbmVzdGVkIHRoZW1lcyBmb3JtYXRcbiAgICBpZiAoIV9fMS5leHBvcnRDb25maWd1cmF0aW9uLmV4cG9ydEJhc2VWYWx1ZXMgJiYgIXRoZW1lUGF0aCAmJlxuICAgICAgICBfXzEuZXhwb3J0Q29uZmlndXJhdGlvbi5leHBvcnRUaGVtZXNBcyAhPT0gY29uZmlnXzEuVGhlbWVFeHBvcnRTdHlsZS5OZXN0ZWRUaGVtZXMpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIC8vIFN0b3JlIG9yaWdpbmFsIHRva2VucyBmb3IgcmVmZXJlbmNlIHJlc29sdXRpb25cbiAgICBjb25zdCBvcmlnaW5hbFRva2VucyA9IFsuLi50b2tlbnNdO1xuICAgIC8vIEZvciB0aGVtZWQgdG9rZW4gZmlsZXM6XG4gICAgLy8gLSBGaWx0ZXIgdG8gb25seSBpbmNsdWRlIHRva2VucyB0aGF0IGFyZSBvdmVycmlkZGVuIGluIHRoaXMgdGhlbWVcbiAgICAvLyAtIFNraXAgZ2VuZXJhdGluZyB0aGUgZmlsZSBpZiBubyB0b2tlbnMgYXJlIHRoZW1lZCAod2hlbiBjb25maWd1cmVkKVxuICAgIGlmICh0aGVtZVBhdGggJiYgdGhlbWUgJiYgX18xLmV4cG9ydENvbmZpZ3VyYXRpb24uZXhwb3J0T25seVRoZW1lZFRva2Vucykge1xuICAgICAgICB0b2tlbnMgPSBleHBvcnRfdXRpbHNfMS5UaGVtZUhlbHBlci5maWx0ZXJUaGVtZWRUb2tlbnModG9rZW5zLCB0aGVtZSk7XG4gICAgICAgIGlmICh0b2tlbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBQcm9jZXNzIGFsbCB0b2tlbnMgaW50byBhIHNpbmdsZSBzdHJ1Y3R1cmVkIG9iamVjdFxuICAgIC8vIFBhc3MgdGhlIG9yaWdpbmFsIHRva2VucyBhcnJheSBmb3IgcmVmZXJlbmNlIHJlc29sdXRpb25cbiAgICBjb25zdCB0b2tlbk9iamVjdCA9IHByb2Nlc3NUb2tlbnNUb09iamVjdCh0b2tlbnMsIHRva2VuR3JvdXBzLCB0aGVtZSwgY29sbGVjdGlvbnMsIG9yaWdpbmFsVG9rZW5zKTtcbiAgICBpZiAoIXRva2VuT2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICAvLyBHZW5lcmF0ZSB0aGUgZmluYWwgSlNPTiBjb250ZW50IHdpdGggcHJvcGVyIGluZGVudGF0aW9uXG4gICAgY29uc3QgY29udGVudCA9IEpTT04uc3RyaW5naWZ5KHRva2VuT2JqZWN0LCBudWxsLCBfXzEuZXhwb3J0Q29uZmlndXJhdGlvbi5pbmRlbnQpO1xuICAgIC8vIEZvciBzaW5nbGUgZmlsZSBtb2RlLCB0aGVtZWQgZmlsZXMgZ28gZGlyZWN0bHkgaW4gcm9vdCB3aXRoIHRoZW1lLWJhc2VkIG5hbWVzXG4gICAgY29uc3QgZmlsZU5hbWUgPSB0aGVtZVBhdGggPyBgdG9rZW5zLiR7dGhlbWVQYXRofS5qc29uYCA6ICd0b2tlbnMuanNvbic7XG4gICAgY29uc3QgcmVsYXRpdmVQYXRoID0gJy4vJzsgLy8gUHV0IGZpbGVzIGRpcmVjdGx5IGluIHJvb3QgZm9sZGVyXG4gICAgLy8gQ3JlYXRlIGFuZCByZXR1cm4gdGhlIG91dHB1dCBmaWxlXG4gICAgcmV0dXJuIGV4cG9ydF91dGlsc18xLkZpbGVIZWxwZXIuY3JlYXRlVGV4dEZpbGUoe1xuICAgICAgICByZWxhdGl2ZVBhdGg6IHJlbGF0aXZlUGF0aCxcbiAgICAgICAgZmlsZU5hbWU6IGZpbGVOYW1lLFxuICAgICAgICBjb250ZW50OiBjb250ZW50XG4gICAgfSk7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZXhwb3J0Q29uZmlndXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IHNka19leHBvcnRlcnNfMSA9IHJlcXVpcmUoXCJAc3VwZXJub3ZhaW8vc2RrLWV4cG9ydGVyc1wiKTtcbmNvbnN0IGNvbmZpZ18xID0gcmVxdWlyZShcIi4uL2NvbmZpZ1wiKTtcbmNvbnN0IHN0eWxlX2ZpbGVfMSA9IHJlcXVpcmUoXCIuL2ZpbGVzL3N0eWxlLWZpbGVcIik7XG5jb25zdCBleHBvcnRfdXRpbHNfMSA9IHJlcXVpcmUoXCJAc3VwZXJub3ZhaW8vZXhwb3J0LXV0aWxzXCIpO1xuY29uc3QgdG9rZW5faGllcmFyY2h5XzEgPSByZXF1aXJlKFwiLi91dGlscy90b2tlbi1oaWVyYXJjaHlcIik7XG4vKiogRXhwb3J0ZXIgY29uZmlndXJhdGlvbiBmcm9tIHRoZSByZXNvbHZlZCBkZWZhdWx0IGNvbmZpZ3VyYXRpb24gYW5kIHVzZXIgb3ZlcnJpZGVzICovXG5leHBvcnRzLmV4cG9ydENvbmZpZ3VyYXRpb24gPSBQdWxzYXIuZXhwb3J0Q29uZmlnKCk7XG4vKipcbiAqIEZpbHRlcnMgb3V0IG51bGwgdmFsdWVzIGZyb20gYW4gYXJyYXkgb2Ygb3V0cHV0IGZpbGVzXG4gKiBAcGFyYW0gZmlsZXMgQXJyYXkgb2Ygb3V0cHV0IGZpbGVzIHRoYXQgbWF5IGNvbnRhaW4gbnVsbCB2YWx1ZXNcbiAqIEByZXR1cm5zIEFycmF5IG9mIG5vbi1udWxsIG91dHB1dCBmaWxlc1xuICovXG5mdW5jdGlvbiBwcm9jZXNzT3V0cHV0RmlsZXMoZmlsZXMpIHtcbiAgICByZXR1cm4gZmlsZXMuZmlsdGVyKChmaWxlKSA9PiBmaWxlICE9PSBudWxsKTtcbn1cbi8qKlxuICogTWFpbiBleHBvcnQgZnVuY3Rpb24gdGhhdCBnZW5lcmF0ZXMgQ1NTIGZpbGVzIGZyb20gZGVzaWduIHRva2Vuc1xuICpcbiAqIFRoaXMgZnVuY3Rpb24gaGFuZGxlczpcbiAqIC0gRmV0Y2hpbmcgdG9rZW5zIGFuZCB0b2tlbiBncm91cHMgZnJvbSB0aGUgZGVzaWduIHN5c3RlbVxuICogLSBGaWx0ZXJpbmcgdG9rZW5zIGJ5IGJyYW5kIGlmIHNwZWNpZmllZFxuICogLSBQcm9jZXNzaW5nIHRoZW1lcyBpbiBkaWZmZXJlbnQgbW9kZXMgKGRpcmVjdCwgc2VwYXJhdGUgZmlsZXMsIG9yIGNvbWJpbmVkKVxuICogLSBHZW5lcmF0aW5nIHN0eWxlIGZpbGVzIGZvciBlYWNoIHRva2VuIHR5cGVcbiAqXG4gKiBAcGFyYW0gc2RrIC0gU3VwZXJub3ZhIFNESyBpbnN0YW5jZVxuICogQHBhcmFtIGNvbnRleHQgLSBFeHBvcnQgY29udGV4dCBjb250YWluaW5nIGRlc2lnbiBzeXN0ZW0gaW5mb3JtYXRpb25cbiAqIEByZXR1cm5zIFByb21pc2UgcmVzb2x2aW5nIHRvIGFuIGFycmF5IG9mIG91dHB1dCBmaWxlc1xuICovXG5QdWxzYXIuZXhwb3J0KGFzeW5jIChzZGssIGNvbnRleHQpID0+IHtcbiAgICAvLyBGZXRjaCBkYXRhIGZyb20gZGVzaWduIHN5c3RlbSB0aGF0IGlzIGN1cnJlbnRseSBiZWluZyBleHBvcnRlZFxuICAgIGNvbnN0IHJlbW90ZVZlcnNpb25JZGVudGlmaWVyID0ge1xuICAgICAgICBkZXNpZ25TeXN0ZW1JZDogY29udGV4dC5kc0lkLFxuICAgICAgICB2ZXJzaW9uSWQ6IGNvbnRleHQudmVyc2lvbklkLFxuICAgIH07XG4gICAgLy8gRmV0Y2ggdG9rZW5zLCBncm91cHMgYW5kIGNvbGxlY3Rpb25zXG4gICAgbGV0IHRva2VucyA9IGF3YWl0IHNkay50b2tlbnMuZ2V0VG9rZW5zKHJlbW90ZVZlcnNpb25JZGVudGlmaWVyKTtcbiAgICBsZXQgdG9rZW5Hcm91cHMgPSBhd2FpdCBzZGsudG9rZW5zLmdldFRva2VuR3JvdXBzKHJlbW90ZVZlcnNpb25JZGVudGlmaWVyKTtcbiAgICBsZXQgdG9rZW5Db2xsZWN0aW9ucyA9IGF3YWl0IHNkay50b2tlbnMuZ2V0VG9rZW5Db2xsZWN0aW9ucyhyZW1vdGVWZXJzaW9uSWRlbnRpZmllcik7XG4gICAgLy8gRmlsdGVyIGJ5IGJyYW5kIGlmIHNwZWNpZmllZFxuICAgIGlmIChjb250ZXh0LmJyYW5kSWQpIHtcbiAgICAgICAgY29uc3QgYnJhbmRzID0gYXdhaXQgc2RrLmJyYW5kcy5nZXRCcmFuZHMocmVtb3RlVmVyc2lvbklkZW50aWZpZXIpO1xuICAgICAgICBjb25zdCBicmFuZCA9IGJyYW5kcy5maW5kKChicmFuZCkgPT4gYnJhbmQuaWQgPT09IGNvbnRleHQuYnJhbmRJZCB8fCBicmFuZC5pZEluVmVyc2lvbiA9PT0gY29udGV4dC5icmFuZElkKTtcbiAgICAgICAgaWYgKCFicmFuZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmFibGUgdG8gZmluZCBicmFuZCAke2NvbnRleHQuYnJhbmRJZH0uYCk7XG4gICAgICAgIH1cbiAgICAgICAgdG9rZW5zID0gdG9rZW5zLmZpbHRlcigodG9rZW4pID0+IHRva2VuLmJyYW5kSWQgPT09IGJyYW5kLmlkKTtcbiAgICAgICAgdG9rZW5Hcm91cHMgPSB0b2tlbkdyb3Vwcy5maWx0ZXIoKHRva2VuR3JvdXApID0+IHRva2VuR3JvdXAuYnJhbmRJZCA9PT0gYnJhbmQuaWQpO1xuICAgIH1cbiAgICAvLyBQcm9jZXNzIHRoZW1lcyBpZiBzcGVjaWZpZWRcbiAgICBpZiAoY29udGV4dC50aGVtZUlkcyAmJiBjb250ZXh0LnRoZW1lSWRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc3QgdGhlbWVzID0gYXdhaXQgc2RrLnRva2Vucy5nZXRUb2tlblRoZW1lcyhyZW1vdGVWZXJzaW9uSWRlbnRpZmllcik7XG4gICAgICAgIGNvbnN0IHRoZW1lc1RvQXBwbHkgPSBjb250ZXh0LnRoZW1lSWRzLm1hcCgodGhlbWVJZCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdGhlbWUgPSB0aGVtZXMuZmluZCgodGhlbWUpID0+IHRoZW1lLmlkID09PSB0aGVtZUlkIHx8IHRoZW1lLmlkSW5WZXJzaW9uID09PSB0aGVtZUlkKTtcbiAgICAgICAgICAgIGlmICghdGhlbWUpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuYWJsZSB0byBmaW5kIHRoZW1lICR7dGhlbWVJZH1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGVtZTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIFByb2Nlc3MgdGhlbWVzIGJhc2VkIG9uIHRoZSBzZWxlY3RlZCBleHBvcnQgc3R5bGVcbiAgICAgICAgc3dpdGNoIChleHBvcnRzLmV4cG9ydENvbmZpZ3VyYXRpb24uZXhwb3J0VGhlbWVzQXMpIHtcbiAgICAgICAgICAgIGNhc2UgY29uZmlnXzEuVGhlbWVFeHBvcnRTdHlsZS5OZXN0ZWRUaGVtZXM6XG4gICAgICAgICAgICAgICAgaWYgKGV4cG9ydHMuZXhwb3J0Q29uZmlndXJhdGlvbi5maWxlU3RydWN0dXJlID09PSBjb25maWdfMS5GaWxlU3RydWN0dXJlLlNpbmdsZUZpbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gRm9yIHNpbmdsZSBmaWxlIHN0cnVjdHVyZSwgd2UgZ2VuZXJhdGUgb25lIGNvbWJpbmVkIGZpbGUgdGhhdCBjb250YWlucyBhbGwgdG9rZW4gdHlwZXNcbiAgICAgICAgICAgICAgICAgICAgLy8gd2l0aCB0aGVpciBiYXNlIHZhbHVlcyBhbmQgdGhlbWUgdmFyaWF0aW9ucyBuZXN0ZWQgdW5kZXIgZWFjaCB0b2tlbi5cbiAgICAgICAgICAgICAgICAgICAgLy8gRXhhbXBsZSBvdXRwdXQgc3RydWN0dXJlOlxuICAgICAgICAgICAgICAgICAgICAvLyB7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgXCJjb2xvclwiOiB7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICBcInByaW1hcnlcIjoge1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICBcImJhc2VcIjogeyBcInZhbHVlXCI6IFwiIzAwMDAwMFwiLCBcInR5cGVcIjogXCJjb2xvclwiIH0sXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgIFwidGhlbWUtbGlnaHRcIjogeyBcInZhbHVlXCI6IFwiI0ZGRkZGRlwiLCBcInR5cGVcIjogXCJjb2xvclwiIH0sXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgIFwidGhlbWUtZGFya1wiOiB7IFwidmFsdWVcIjogXCIjMzMzMzMzXCIsIFwidHlwZVwiOiBcImNvbG9yXCIgfSxcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlByaW1hcnkgY29sb3JcIlxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyAgIH0sXG4gICAgICAgICAgICAgICAgICAgIC8vICAgXCJ0eXBvZ3JhcGh5XCI6IHsgLi4uIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgICAgICAgICAvLyBTdGVwIDE6IEdlbmVyYXRlIHRoZSBiYXNlIGZpbGUgd2l0aCBvcmlnaW5hbCB0b2tlbiB2YWx1ZXMgKGlmIGVuYWJsZWQpXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGJhc2VGaWxlID0gZXhwb3J0cy5leHBvcnRDb25maWd1cmF0aW9uLmV4cG9ydEJhc2VWYWx1ZXNcbiAgICAgICAgICAgICAgICAgICAgICAgID8gKDAsIHN0eWxlX2ZpbGVfMS5jb21iaW5lZFN0eWxlT3V0cHV0RmlsZSkodG9rZW5zLCB0b2tlbkdyb3VwcywgJycsIHVuZGVmaW5lZCwgdG9rZW5Db2xsZWN0aW9ucylcbiAgICAgICAgICAgICAgICAgICAgICAgIDogbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgLy8gU3RlcCAyOiBHZW5lcmF0ZSBhIHNlcGFyYXRlIGZpbGUgZm9yIGVhY2ggdGhlbWUncyB0b2tlbiB2YWx1ZXNcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGhlbWVGaWxlcyA9IHRoZW1lc1RvQXBwbHkubWFwKCh0aGVtZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQXBwbHkgdGhlIGN1cnJlbnQgdGhlbWUgdG8gYWxsIHRva2Vuc1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGhlbWVkVG9rZW5zID0gc2RrLnRva2Vucy5jb21wdXRlVG9rZW5zQnlBcHBseWluZ1RoZW1lcyh0b2tlbnMsIHRva2VucywgW3RoZW1lXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUZW1wb3JhcmlseSBkaXNhYmxlIGJhc2UgdmFsdWUgZXhwb3J0IHRvIHByZXZlbnQgZHVwbGljYXRlcyBpbiB0aGVtZWQgb3V0cHV0XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvcmlnaW5hbEV4cG9ydEJhc2VWYWx1ZXMgPSBleHBvcnRzLmV4cG9ydENvbmZpZ3VyYXRpb24uZXhwb3J0QmFzZVZhbHVlcztcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cG9ydHMuZXhwb3J0Q29uZmlndXJhdGlvbi5leHBvcnRCYXNlVmFsdWVzID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBHZW5lcmF0ZSB0aGUgdGhlbWVkIHZlcnNpb24gb2YgYWxsIHRva2Vuc1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZmlsZSA9ICgwLCBzdHlsZV9maWxlXzEuY29tYmluZWRTdHlsZU91dHB1dEZpbGUpKHRoZW1lZFRva2VucywgdG9rZW5Hcm91cHMsICcnLCB0aGVtZSwgdG9rZW5Db2xsZWN0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBSZXN0b3JlIHRoZSBvcmlnaW5hbCBiYXNlIHZhbHVlIGV4cG9ydCBzZXR0aW5nXG4gICAgICAgICAgICAgICAgICAgICAgICBleHBvcnRzLmV4cG9ydENvbmZpZ3VyYXRpb24uZXhwb3J0QmFzZVZhbHVlcyA9IG9yaWdpbmFsRXhwb3J0QmFzZVZhbHVlcztcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmaWxlO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgLy8gU3RlcCAzOiBNZXJnZSBhbGwgZ2VuZXJhdGVkIGZpbGVzIChiYXNlICsgdGhlbWVkKSBpbnRvIGEgc2luZ2xlIG91dHB1dFxuICAgICAgICAgICAgICAgICAgICAvLyBUaGUgbWVyZ2UgcHJlc2VydmVzIHRoZSBuZXN0ZWQgc3RydWN0dXJlIHdoaWxlIGNvbWJpbmluZyBiYXNlIGFuZCB0aGVtZWQgdmFsdWVzXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1lcmdlZEZpbGUgPSBbYmFzZUZpbGUsIC4uLnRoZW1lRmlsZXNdLnJlZHVjZSgobWVyZ2VkLCBmaWxlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWZpbGUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1lcmdlZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbWVyZ2VkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmaWxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRGVlcCBtZXJnZSBwcmVzZXJ2ZXMgdGhlIG5lc3RlZCBzdHJ1Y3R1cmUgYW5kIGNvbWJpbmVzIHRoZW1lIHZhcmlhdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1lcmdlZENvbnRlbnQgPSAoMCwgdG9rZW5faGllcmFyY2h5XzEuZGVlcE1lcmdlKShKU09OLnBhcnNlKG1lcmdlZC5jb250ZW50KSwgSlNPTi5wYXJzZShmaWxlLmNvbnRlbnQpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJldHVybiBhIG5ldyBmaWxlIHdpdGggbWVyZ2VkIGNvbnRlbnRcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uZmlsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBKU09OLnN0cmluZ2lmeShtZXJnZWRDb250ZW50LCBudWxsLCBleHBvcnRzLmV4cG9ydENvbmZpZ3VyYXRpb24uaW5kZW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfSwgbnVsbCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwcm9jZXNzT3V0cHV0RmlsZXMoW21lcmdlZEZpbGVdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gR2VuZXJhdGUgb25lIGZpbGUgcGVyIHRva2VuIHR5cGUgd2l0aCBhbGwgdGhlbWVzIG5lc3RlZCBpbnNpZGUgZWFjaCB0b2tlblxuICAgICAgICAgICAgICAgIC8vIEV4YW1wbGUgb3V0cHV0IGF0IHJvb3QgbGV2ZWw6XG4gICAgICAgICAgICAgICAgLy8g4pSc4pSA4pSAIGNvbG9yLmpzb25cbiAgICAgICAgICAgICAgICAvLyDilIIgICB7XG4gICAgICAgICAgICAgICAgLy8g4pSCICAgICBcInByaW1hcnlcIjoge1xuICAgICAgICAgICAgICAgIC8vIOKUgiAgICAgICBcImJhc2VcIjogeyBcInZhbHVlXCI6IFwiIzAwMDAwMFwiIH0sXG4gICAgICAgICAgICAgICAgLy8g4pSCICAgICAgIFwidGhlbWUtbGlnaHRcIjogeyBcInZhbHVlXCI6IFwiI0ZGRkZGRlwiIH0sXG4gICAgICAgICAgICAgICAgLy8g4pSCICAgICAgIFwidGhlbWUtZGFya1wiOiB7IFwidmFsdWVcIjogXCIjMzMzMzMzXCIgfSxcbiAgICAgICAgICAgICAgICAvLyDilIIgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlByaW1hcnkgY29sb3JcIlxuICAgICAgICAgICAgICAgIC8vIOKUgiAgICAgfVxuICAgICAgICAgICAgICAgIC8vIOKUgiAgIH1cbiAgICAgICAgICAgICAgICAvLyDilJzilIDilIAgdHlwb2dyYXBoeS5qc29uXG4gICAgICAgICAgICAgICAgLy8g4pSU4pSA4pSAIC4uLlxuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlT2JqZWN0RmlsZXMgPSBPYmplY3QudmFsdWVzKHNka19leHBvcnRlcnNfMS5Ub2tlblR5cGUpXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoKHR5cGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gRmlyc3QsIGNyZWF0ZSBhIGZpbGUgd2l0aCBiYXNlIHZhbHVlcyBpZiBlbmFibGVkXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGJhc2VGaWxlID0gZXhwb3J0cy5leHBvcnRDb25maWd1cmF0aW9uLmV4cG9ydEJhc2VWYWx1ZXNcbiAgICAgICAgICAgICAgICAgICAgICAgID8gKDAsIHN0eWxlX2ZpbGVfMS5zdHlsZU91dHB1dEZpbGUpKHR5cGUsIHRva2VucywgdG9rZW5Hcm91cHMsICcnLCB1bmRlZmluZWQsIHRva2VuQ29sbGVjdGlvbnMpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZW4gY3JlYXRlIGZpbGVzIGZvciBlYWNoIHRoZW1lXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRoZW1lRmlsZXMgPSB0aGVtZXNUb0FwcGx5Lm1hcCgodGhlbWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRoZW1lZFRva2VucyA9IHNkay50b2tlbnMuY29tcHV0ZVRva2Vuc0J5QXBwbHlpbmdUaGVtZXModG9rZW5zLCB0b2tlbnMsIFt0aGVtZV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gUGFzcyBmYWxzZSBmb3IgZXhwb3J0QmFzZVZhbHVlcyB0byBwcmV2ZW50IGluY2x1ZGluZyBiYXNlIHZhbHVlcyBpbiB0aGVtZSBmaWxlc1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3JpZ2luYWxFeHBvcnRCYXNlVmFsdWVzID0gZXhwb3J0cy5leHBvcnRDb25maWd1cmF0aW9uLmV4cG9ydEJhc2VWYWx1ZXM7XG4gICAgICAgICAgICAgICAgICAgICAgICBleHBvcnRzLmV4cG9ydENvbmZpZ3VyYXRpb24uZXhwb3J0QmFzZVZhbHVlcyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZmlsZSA9ICgwLCBzdHlsZV9maWxlXzEuc3R5bGVPdXRwdXRGaWxlKSh0eXBlLCB0aGVtZWRUb2tlbnMsIHRva2VuR3JvdXBzLCAnJywgdGhlbWUsIHRva2VuQ29sbGVjdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZXhwb3J0cy5leHBvcnRDb25maWd1cmF0aW9uLmV4cG9ydEJhc2VWYWx1ZXMgPSBvcmlnaW5hbEV4cG9ydEJhc2VWYWx1ZXM7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmlsZTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIE1lcmdlIGFsbCBmaWxlcywgc3RhcnRpbmcgd2l0aCB0aGUgYmFzZSBmaWxlXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbYmFzZUZpbGUsIC4uLnRoZW1lRmlsZXNdLnJlZHVjZSgobWVyZ2VkLCBmaWxlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWZpbGUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1lcmdlZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbWVyZ2VkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmaWxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWVyZ2UgdGhlIGNvbnRlbnRcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1lcmdlZENvbnRlbnQgPSAoMCwgdG9rZW5faGllcmFyY2h5XzEuZGVlcE1lcmdlKShKU09OLnBhcnNlKG1lcmdlZC5jb250ZW50KSwgSlNPTi5wYXJzZShmaWxlLmNvbnRlbnQpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJldHVybiBhIG5ldyBmaWxlIHdpdGggbWVyZ2VkIGNvbnRlbnRcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uZmlsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBKU09OLnN0cmluZ2lmeShtZXJnZWRDb250ZW50LCBudWxsLCBleHBvcnRzLmV4cG9ydENvbmZpZ3VyYXRpb24uaW5kZW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfSwgbnVsbCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb2Nlc3NPdXRwdXRGaWxlcyh2YWx1ZU9iamVjdEZpbGVzKTtcbiAgICAgICAgICAgIGNhc2UgY29uZmlnXzEuVGhlbWVFeHBvcnRTdHlsZS5TZXBhcmF0ZUZpbGVzOlxuICAgICAgICAgICAgICAgIGlmIChleHBvcnRzLmV4cG9ydENvbmZpZ3VyYXRpb24uZmlsZVN0cnVjdHVyZSA9PT0gY29uZmlnXzEuRmlsZVN0cnVjdHVyZS5TaW5nbGVGaWxlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEdlbmVyYXRlIG9uZSBjb21iaW5lZCBmaWxlIHBlciB0aGVtZVxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0aGVtZUZpbGVzID0gdGhlbWVzVG9BcHBseS5tYXAoKHRoZW1lKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0aGVtZWRUb2tlbnMgPSBzZGsudG9rZW5zLmNvbXB1dGVUb2tlbnNCeUFwcGx5aW5nVGhlbWVzKHRva2VucywgdG9rZW5zLCBbdGhlbWVdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRoZW1lUGF0aCA9IGV4cG9ydF91dGlsc18xLlRoZW1lSGVscGVyLmdldFRoZW1lSWRlbnRpZmllcih0aGVtZSwgZXhwb3J0X3V0aWxzXzEuU3RyaW5nQ2FzZS5jYW1lbENhc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICgwLCBzdHlsZV9maWxlXzEuY29tYmluZWRTdHlsZU91dHB1dEZpbGUpKHRoZW1lZFRva2VucywgdG9rZW5Hcm91cHMsIHRoZW1lUGF0aCwgdGhlbWUsIHRva2VuQ29sbGVjdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYmFzZUZpbGUgPSBleHBvcnRzLmV4cG9ydENvbmZpZ3VyYXRpb24uZXhwb3J0QmFzZVZhbHVlc1xuICAgICAgICAgICAgICAgICAgICAgICAgPyAoMCwgc3R5bGVfZmlsZV8xLmNvbWJpbmVkU3R5bGVPdXRwdXRGaWxlKSh0b2tlbnMsIHRva2VuR3JvdXBzLCAnJywgdW5kZWZpbmVkLCB0b2tlbkNvbGxlY3Rpb25zKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBudWxsO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJvY2Vzc091dHB1dEZpbGVzKFtiYXNlRmlsZSwgLi4udGhlbWVGaWxlc10pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBHZW5lcmF0ZSBzZXBhcmF0ZSBmaWxlcyBmb3IgZWFjaCB0aGVtZSBhbmQgdG9rZW4gdHlwZVxuICAgICAgICAgICAgICAgIC8vIENyZWF0ZXMgYSBkaXJlY3Rvcnkgc3RydWN0dXJlIGxpa2U6XG4gICAgICAgICAgICAgICAgLy8gYmFzZS9cbiAgICAgICAgICAgICAgICAvLyAgIOKUnOKUgOKUgCBjb2xvci5qc29uXG4gICAgICAgICAgICAgICAgLy8gICDilJTilIDilIAgdHlwb2dyYXBoeS5qc29uXG4gICAgICAgICAgICAgICAgLy8gbGlnaHQvXG4gICAgICAgICAgICAgICAgLy8gICDilJzilIDilIAgY29sb3IuanNvblxuICAgICAgICAgICAgICAgIC8vICAg4pSU4pSA4pSAIHR5cG9ncmFwaHkuanNvblxuICAgICAgICAgICAgICAgIC8vIGRhcmsvXG4gICAgICAgICAgICAgICAgLy8gICDilJzilIDilIAgY29sb3IuanNvblxuICAgICAgICAgICAgICAgIC8vICAg4pSU4pSA4pSAIHR5cG9ncmFwaHkuanNvblxuICAgICAgICAgICAgICAgIGNvbnN0IHRoZW1lRmlsZXMgPSB0aGVtZXNUb0FwcGx5LmZsYXRNYXAoKHRoZW1lKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRoZW1lZFRva2VucyA9IHNkay50b2tlbnMuY29tcHV0ZVRva2Vuc0J5QXBwbHlpbmdUaGVtZXModG9rZW5zLCB0b2tlbnMsIFt0aGVtZV0pO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0aGVtZVBhdGggPSBleHBvcnRfdXRpbHNfMS5UaGVtZUhlbHBlci5nZXRUaGVtZUlkZW50aWZpZXIodGhlbWUsIGV4cG9ydF91dGlsc18xLlN0cmluZ0Nhc2UuY2FtZWxDYXNlKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC52YWx1ZXMoc2RrX2V4cG9ydGVyc18xLlRva2VuVHlwZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoKHR5cGUpID0+ICgwLCBzdHlsZV9maWxlXzEuc3R5bGVPdXRwdXRGaWxlKSh0eXBlLCB0aGVtZWRUb2tlbnMsIHRva2VuR3JvdXBzLCB0aGVtZVBhdGgsIHRoZW1lLCB0b2tlbkNvbGxlY3Rpb25zKSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY29uc3QgYmFzZUZpbGVzID0gZXhwb3J0cy5leHBvcnRDb25maWd1cmF0aW9uLmV4cG9ydEJhc2VWYWx1ZXNcbiAgICAgICAgICAgICAgICAgICAgPyBPYmplY3QudmFsdWVzKHNka19leHBvcnRlcnNfMS5Ub2tlblR5cGUpXG4gICAgICAgICAgICAgICAgICAgICAgICAubWFwKCh0eXBlKSA9PiAoMCwgc3R5bGVfZmlsZV8xLnN0eWxlT3V0cHV0RmlsZSkodHlwZSwgdG9rZW5zLCB0b2tlbkdyb3VwcywgJycsIHVuZGVmaW5lZCwgdG9rZW5Db2xsZWN0aW9ucykpXG4gICAgICAgICAgICAgICAgICAgIDogW107XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb2Nlc3NPdXRwdXRGaWxlcyhbXG4gICAgICAgICAgICAgICAgICAgIC4uLmJhc2VGaWxlcyxcbiAgICAgICAgICAgICAgICAgICAgLi4udGhlbWVGaWxlc1xuICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgY2FzZSBjb25maWdfMS5UaGVtZUV4cG9ydFN0eWxlLk1lcmdlZFRoZW1lOlxuICAgICAgICAgICAgICAgIGlmIChleHBvcnRzLmV4cG9ydENvbmZpZ3VyYXRpb24uZmlsZVN0cnVjdHVyZSA9PT0gY29uZmlnXzEuRmlsZVN0cnVjdHVyZS5TaW5nbGVGaWxlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGJhc2VGaWxlID0gZXhwb3J0cy5leHBvcnRDb25maWd1cmF0aW9uLmV4cG9ydEJhc2VWYWx1ZXNcbiAgICAgICAgICAgICAgICAgICAgICAgID8gKDAsIHN0eWxlX2ZpbGVfMS5jb21iaW5lZFN0eWxlT3V0cHV0RmlsZSkodG9rZW5zLCB0b2tlbkdyb3VwcywgJycsIHVuZGVmaW5lZCwgdG9rZW5Db2xsZWN0aW9ucylcbiAgICAgICAgICAgICAgICAgICAgICAgIDogbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGhlbWVkVG9rZW5zID0gc2RrLnRva2Vucy5jb21wdXRlVG9rZW5zQnlBcHBseWluZ1RoZW1lcyh0b2tlbnMsIHRva2VucywgdGhlbWVzVG9BcHBseSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1lcmdlZFRoZW1lRmlsZSA9ICgwLCBzdHlsZV9maWxlXzEuY29tYmluZWRTdHlsZU91dHB1dEZpbGUpKHRoZW1lZFRva2VucywgdG9rZW5Hcm91cHMsICd0aGVtZWQnLCB0aGVtZXNUb0FwcGx5WzBdLCB0b2tlbkNvbGxlY3Rpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByb2Nlc3NPdXRwdXRGaWxlcyhbYmFzZUZpbGUsIG1lcmdlZFRoZW1lRmlsZV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBHZW5lcmF0ZSBvbmUgZmlsZSBwZXIgdG9rZW4gdHlwZSB3aXRoIGFsbCB0aGVtZXMgYXBwbGllZCB0b2dldGhlclxuICAgICAgICAgICAgICAgIC8vIFVzZWZ1bCB3aGVuIHRoZW1lcyBzaG91bGQgYmUgbWVyZ2VkIGluIGEgc3BlY2lmaWMgb3JkZXJcbiAgICAgICAgICAgICAgICAvLyBDcmVhdGVzIGEgZGlyZWN0b3J5IHN0cnVjdHVyZSBsaWtlOlxuICAgICAgICAgICAgICAgIC8vIGJhc2UvICAgICAgICAgICAgICAoaWYgZXhwb3J0QmFzZVZhbHVlcyBpcyB0cnVlKVxuICAgICAgICAgICAgICAgIC8vICAg4pSc4pSA4pSAIGNvbG9yLmpzb25cbiAgICAgICAgICAgICAgICAvLyAgIOKUlOKUgOKUgCB0eXBvZ3JhcGh5Lmpzb25cbiAgICAgICAgICAgICAgICAvLyB0aGVtZWQvXG4gICAgICAgICAgICAgICAgLy8gICDilJzilIDilIAgY29sb3IuanNvbiAgIChjb250YWlucyB2YWx1ZXMgYWZ0ZXIgYXBwbHlpbmcgYWxsIHRoZW1lcylcbiAgICAgICAgICAgICAgICAvLyAgIOKUlOKUgOKUgCB0eXBvZ3JhcGh5Lmpzb25cbiAgICAgICAgICAgICAgICBjb25zdCBiYXNlVG9rZW5GaWxlcyA9IGV4cG9ydHMuZXhwb3J0Q29uZmlndXJhdGlvbi5leHBvcnRCYXNlVmFsdWVzXG4gICAgICAgICAgICAgICAgICAgID8gT2JqZWN0LnZhbHVlcyhzZGtfZXhwb3J0ZXJzXzEuVG9rZW5UeXBlKVxuICAgICAgICAgICAgICAgICAgICAgICAgLm1hcCgodHlwZSkgPT4gKDAsIHN0eWxlX2ZpbGVfMS5zdHlsZU91dHB1dEZpbGUpKHR5cGUsIHRva2VucywgdG9rZW5Hcm91cHMsICcnLCB1bmRlZmluZWQsIHRva2VuQ29sbGVjdGlvbnMpKVxuICAgICAgICAgICAgICAgICAgICA6IFtdO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRoZW1lZFRva2VucyA9IHNkay50b2tlbnMuY29tcHV0ZVRva2Vuc0J5QXBwbHlpbmdUaGVtZXModG9rZW5zLCB0b2tlbnMsIHRoZW1lc1RvQXBwbHkpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG1lcmdlZFRoZW1lRmlsZXMgPSBPYmplY3QudmFsdWVzKHNka19leHBvcnRlcnNfMS5Ub2tlblR5cGUpXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoKHR5cGUpID0+ICgwLCBzdHlsZV9maWxlXzEuc3R5bGVPdXRwdXRGaWxlKSh0eXBlLCB0aGVtZWRUb2tlbnMsIHRva2VuR3JvdXBzLCAndGhlbWVkJywgdGhlbWVzVG9BcHBseVswXSwgdG9rZW5Db2xsZWN0aW9ucykpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG1lcmdlZEZpbGVzID0gW1xuICAgICAgICAgICAgICAgICAgICAuLi5iYXNlVG9rZW5GaWxlcyxcbiAgICAgICAgICAgICAgICAgICAgLi4ubWVyZ2VkVGhlbWVGaWxlc1xuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb2Nlc3NPdXRwdXRGaWxlcyhtZXJnZWRGaWxlcyk7XG4gICAgICAgICAgICBjYXNlIGNvbmZpZ18xLlRoZW1lRXhwb3J0U3R5bGUuQXBwbHlEaXJlY3RseTpcbiAgICAgICAgICAgICAgICAvLyBBcHBseSB0aGVtZSB2YWx1ZXMgZGlyZWN0bHkgdG8gdG9rZW5zLCByZXBsYWNpbmcgYmFzZSB2YWx1ZXNcbiAgICAgICAgICAgICAgICAvLyBHZW5lcmF0ZXMgb25lIHNldCBvZiBmaWxlcyBhdCByb290IGxldmVsOlxuICAgICAgICAgICAgICAgIC8vIOKUnOKUgOKUgCBjb2xvci5qc29uICAgICAoY29udGFpbnMgdGhlbWVkIHZhbHVlcylcbiAgICAgICAgICAgICAgICAvLyDilJzilIDilIAgdHlwb2dyYXBoeS5qc29uXG4gICAgICAgICAgICAgICAgLy8g4pSU4pSA4pSAIC4uLlxuICAgICAgICAgICAgICAgIHRva2VucyA9IHNkay50b2tlbnMuY29tcHV0ZVRva2Vuc0J5QXBwbHlpbmdUaGVtZXModG9rZW5zLCB0b2tlbnMsIHRoZW1lc1RvQXBwbHkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIERlZmF1bHQgY2FzZTogR2VuZXJhdGUgZmlsZXMgd2l0aG91dCB0aGVtZXNcbiAgICBpZiAoZXhwb3J0cy5leHBvcnRDb25maWd1cmF0aW9uLmZpbGVTdHJ1Y3R1cmUgPT09IGNvbmZpZ18xLkZpbGVTdHJ1Y3R1cmUuU2luZ2xlRmlsZSkge1xuICAgICAgICBjb25zdCBkZWZhdWx0RmlsZSA9IGV4cG9ydHMuZXhwb3J0Q29uZmlndXJhdGlvbi5leHBvcnRCYXNlVmFsdWVzXG4gICAgICAgICAgICA/ICgwLCBzdHlsZV9maWxlXzEuY29tYmluZWRTdHlsZU91dHB1dEZpbGUpKHRva2VucywgdG9rZW5Hcm91cHMsICcnLCB1bmRlZmluZWQsIHRva2VuQ29sbGVjdGlvbnMpXG4gICAgICAgICAgICA6IG51bGw7XG4gICAgICAgIHJldHVybiBwcm9jZXNzT3V0cHV0RmlsZXMoW2RlZmF1bHRGaWxlXSk7XG4gICAgfVxuICAgIGNvbnN0IGRlZmF1bHRGaWxlcyA9IGV4cG9ydHMuZXhwb3J0Q29uZmlndXJhdGlvbi5leHBvcnRCYXNlVmFsdWVzXG4gICAgICAgID8gT2JqZWN0LnZhbHVlcyhzZGtfZXhwb3J0ZXJzXzEuVG9rZW5UeXBlKVxuICAgICAgICAgICAgLm1hcCgodHlwZSkgPT4gKDAsIHN0eWxlX2ZpbGVfMS5zdHlsZU91dHB1dEZpbGUpKHR5cGUsIHRva2VucywgdG9rZW5Hcm91cHMsICcnLCB1bmRlZmluZWQsIHRva2VuQ29sbGVjdGlvbnMpKVxuICAgICAgICA6IFtdO1xuICAgIHJldHVybiBwcm9jZXNzT3V0cHV0RmlsZXMoZGVmYXVsdEZpbGVzKTtcbn0pO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnJlc2V0TmFtZVRyYWNraW5nID0gcmVzZXROYW1lVHJhY2tpbmc7XG5leHBvcnRzLnByb2Nlc3NUb2tlbk5hbWUgPSBwcm9jZXNzVG9rZW5OYW1lO1xuZXhwb3J0cy5jcmVhdGVIaWVyYXJjaGljYWxTdHJ1Y3R1cmUgPSBjcmVhdGVIaWVyYXJjaGljYWxTdHJ1Y3R1cmU7XG5leHBvcnRzLmRlZXBNZXJnZSA9IGRlZXBNZXJnZTtcbmNvbnN0IGV4cG9ydF91dGlsc18xID0gcmVxdWlyZShcIkBzdXBlcm5vdmFpby9leHBvcnQtdXRpbHNcIik7XG5jb25zdCBfXzEgPSByZXF1aXJlKFwiLi5cIik7XG5jb25zdCB0b2tlbl8xID0gcmVxdWlyZShcIi4uL2NvbnRlbnQvdG9rZW5cIik7XG4vLyBDcmVhdGUgYSBzaW5nbGUgaW5zdGFuY2Ugb2YgdGhlIHRyYWNrZXIgZm9yIGNvbnNpc3RlbnQgbmFtZSBnZW5lcmF0aW9uXG5jb25zdCB0b2tlbk5hbWVUcmFja2VyID0gbmV3IGV4cG9ydF91dGlsc18xLlRva2VuTmFtZVRyYWNrZXIoKTtcbi8qKlxuICogUmVzZXQgdGhlIG5hbWUgdHJhY2tpbmcgYmV0d2VlbiBmaWxlIGdlbmVyYXRpb25zXG4gKi9cbmZ1bmN0aW9uIHJlc2V0TmFtZVRyYWNraW5nKCkge1xuICAgIHRva2VuTmFtZVRyYWNrZXIucmVzZXQoKTtcbn1cbi8qKlxuICogUHJvY2Vzc2VzIGEgdG9rZW4gbmFtZSBhY2NvcmRpbmcgdG8gb3VyIHJ1bGVzIHVzaW5nIFRva2VuTmFtZVRyYWNrZXJcbiAqL1xuZnVuY3Rpb24gcHJvY2Vzc1Rva2VuTmFtZSh0b2tlbiwgcGF0aCA9IFtdLCBjb2xsZWN0aW9ucyA9IFtdKSB7XG4gICAgLy8gR2V0IG5hbWUgZnJvbSBUb2tlbk5hbWVUcmFja2VyXG4gICAgbGV0IHRva2VuTmFtZSA9IHRva2VuTmFtZVRyYWNrZXIuZ2V0U2ltcGxlVG9rZW5OYW1lKHRva2VuLCBfXzEuZXhwb3J0Q29uZmlndXJhdGlvbi50b2tlbk5hbWVTdHlsZSwgZmFsc2UsIHBhdGgpO1xuICAgIC8vIFJlbW92ZSBsZWFkaW5nIHVuZGVyc2NvcmUgZnJvbSBhbnkgdG9rZW4gbmFtZVxuICAgIGlmICh0b2tlbk5hbWUuc3RhcnRzV2l0aCgnXycpKSB7XG4gICAgICAgIHRva2VuTmFtZSA9IHRva2VuTmFtZS5zbGljZSgxKTtcbiAgICB9XG4gICAgcmV0dXJuIHRva2VuTmFtZTtcbn1cbi8qKlxuICogQ29udmVydHMgYSB0b2tlbidzIGZ1bGwgcGF0aCBhbmQgbmFtZSBpbnRvIGEgaGllcmFyY2hpY2FsIG9iamVjdCBzdHJ1Y3R1cmVcbiAqIEZpcnN0IGxldmVsIGlzIGFsd2F5cyB0aGUgdHlwZSBwcmVmaXggKGUuZy4gJ2NvbG9yJylcbiAqIE1pZGRsZSBsZXZlbHMgY29tZSBmcm9tIHBhdGggc2VnbWVudHNcbiAqIExhc3QgbGV2ZWwgaXMgdGhlIHRva2VuIG5hbWVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSGllcmFyY2hpY2FsU3RydWN0dXJlKHBhdGgsIG5hbWUsIHZhbHVlLCB0b2tlbiwgY29sbGVjdGlvbnMgPSBbXSkge1xuICAgIC8vIEdldCBjb2xsZWN0aW9uIG5hbWUgaWYgbmVlZGVkIGZvciBjb2xsZWN0aW9uLWJhc2VkIHRva2VuIG9yZ2FuaXphdGlvblxuICAgIGxldCBjb2xsZWN0aW9uU2VnbWVudCA9IG51bGw7XG4gICAgaWYgKF9fMS5leHBvcnRDb25maWd1cmF0aW9uLnRva2VuTmFtZVN0cnVjdHVyZSA9PT0gJ2NvbGxlY3Rpb25QYXRoQW5kTmFtZScgJiYgdG9rZW4uY29sbGVjdGlvbklkKSB7XG4gICAgICAgIGNvbnN0IGNvbGxlY3Rpb24gPSBjb2xsZWN0aW9ucy5maW5kKGMgPT4gYy5wZXJzaXN0ZW50SWQgPT09IHRva2VuLmNvbGxlY3Rpb25JZCk7XG4gICAgICAgIGNvbGxlY3Rpb25TZWdtZW50ID0gY29sbGVjdGlvbj8ubmFtZSA/PyBudWxsO1xuICAgIH1cbiAgICAvLyBGaXJzdCBsZXZlbCBpcyBhbHdheXMgdGhlIHR5cGUgcHJlZml4IChlLmcuLCAnY29sb3InLCAndHlwb2dyYXBoeScpXG4gICAgY29uc3QgcHJlZml4ID0gZXhwb3J0X3V0aWxzXzEuTmFtaW5nSGVscGVyLmNvZGVTYWZlVmFyaWFibGVOYW1lKCgwLCB0b2tlbl8xLmdldFRva2VuUHJlZml4KSh0b2tlbi50b2tlblR5cGUpLCBfXzEuZXhwb3J0Q29uZmlndXJhdGlvbi50b2tlbk5hbWVTdHlsZSk7XG4gICAgLy8gQnVpbGQgdGhlIGluaXRpYWwgc2VnbWVudHMgYXJyYXkgd2l0aCBnbG9iYWwgcHJlZml4IChpZiBhbnkpIGFuZCB0eXBlIHByZWZpeFxuICAgIGNvbnN0IHNlZ21lbnRzID0gW1xuICAgICAgICAuLi4oX18xLmV4cG9ydENvbmZpZ3VyYXRpb24uZ2xvYmFsTmFtZVByZWZpeCA/XG4gICAgICAgICAgICBbZXhwb3J0X3V0aWxzXzEuTmFtaW5nSGVscGVyLmNvZGVTYWZlVmFyaWFibGVOYW1lKF9fMS5leHBvcnRDb25maWd1cmF0aW9uLmdsb2JhbE5hbWVQcmVmaXgsIF9fMS5leHBvcnRDb25maWd1cmF0aW9uLnRva2VuTmFtZVN0eWxlKV0gOlxuICAgICAgICAgICAgW10pLFxuICAgICAgICAuLi4ocHJlZml4ID8gW3ByZWZpeF0gOiBbXSlcbiAgICBdO1xuICAgIC8vIEFkZCBjb2xsZWN0aW9uIHRvIHRoZSBvdXRwdXQgcGF0aCBpZiBwcmVzZW50XG4gICAgaWYgKGNvbGxlY3Rpb25TZWdtZW50KSB7XG4gICAgICAgIHNlZ21lbnRzLnB1c2goZXhwb3J0X3V0aWxzXzEuTmFtaW5nSGVscGVyLmNvZGVTYWZlVmFyaWFibGVOYW1lKGNvbGxlY3Rpb25TZWdtZW50LCBfXzEuZXhwb3J0Q29uZmlndXJhdGlvbi50b2tlbk5hbWVTdHlsZSkpO1xuICAgIH1cbiAgICAvLyBDcmVhdGUgcGF0aCBzZWdtZW50cyBhcnJheSBmb3IgbmFtZSB1bmlxdWVuZXNzIGNoZWNraW5nXG4gICAgLy8gV2UgaW5jbHVkZSB0aGUgY29sbGVjdGlvbiBuYW1lIGhlcmUgc28gdG9rZW5zIHdpdGggdGhlIHNhbWUgcGF0aCBpbiBkaWZmZXJlbnQgY29sbGVjdGlvbnNcbiAgICAvLyBkb24ndCBnZXQgdHJlYXRlZCBhcyBkdXBsaWNhdGVzXG4gICAgY29uc3QgcGF0aFNlZ21lbnRzID0gW1xuICAgICAgICAvLyBDb2xsZWN0aW9uIG5hbWUgKGlmIGFueSkgYmVjb21lcyBwYXJ0IG9mIHRoZSB1bmlxdWVuZXNzIGNoZWNrXG4gICAgICAgIC4uLihjb2xsZWN0aW9uU2VnbWVudCA/IFtjb2xsZWN0aW9uU2VnbWVudF0gOiBbXSksXG4gICAgICAgIC8vIFJlZ3VsYXIgcGF0aCBzZWdtZW50cyBhcmUgaW5jbHVkZWQgdW5sZXNzIG5hbWVPbmx5IHN0cnVjdHVyZSBpcyBzZWxlY3RlZFxuICAgICAgICAuLi4oX18xLmV4cG9ydENvbmZpZ3VyYXRpb24udG9rZW5OYW1lU3RydWN0dXJlICE9PSAnbmFtZU9ubHknXG4gICAgICAgICAgICA/IChwYXRoIHx8IFtdKVxuICAgICAgICAgICAgICAgIC5maWx0ZXIoc2VnbWVudCA9PiBzZWdtZW50ICYmIHNlZ21lbnQudHJpbSgpLmxlbmd0aCA+IDApXG4gICAgICAgICAgICAgICAgLm1hcChzZWdtZW50ID0+IGV4cG9ydF91dGlsc18xLk5hbWluZ0hlbHBlci5jb2RlU2FmZVZhcmlhYmxlTmFtZShzZWdtZW50LCBfXzEuZXhwb3J0Q29uZmlndXJhdGlvbi50b2tlbk5hbWVTdHlsZSkpXG4gICAgICAgICAgICA6IFtdKVxuICAgIF07XG4gICAgLy8gQWRkIHBhdGggc2VnbWVudHMgdG8gdGhlIG91dHB1dCBzdHJ1Y3R1cmVcbiAgICAvLyBXZSBkb24ndCBpbmNsdWRlIGNvbGxlY3Rpb24gaGVyZSBzaW5jZSBpdCB3YXMgYWxyZWFkeSBhZGRlZCBhYm92ZVxuICAgIGlmIChfXzEuZXhwb3J0Q29uZmlndXJhdGlvbi50b2tlbk5hbWVTdHJ1Y3R1cmUgIT09ICduYW1lT25seScpIHtcbiAgICAgICAgc2VnbWVudHMucHVzaCguLi4ocGF0aCB8fCBbXSlcbiAgICAgICAgICAgIC5maWx0ZXIoc2VnbWVudCA9PiBzZWdtZW50ICYmIHNlZ21lbnQudHJpbSgpLmxlbmd0aCA+IDApXG4gICAgICAgICAgICAubWFwKHNlZ21lbnQgPT4gZXhwb3J0X3V0aWxzXzEuTmFtaW5nSGVscGVyLmNvZGVTYWZlVmFyaWFibGVOYW1lKHNlZ21lbnQsIF9fMS5leHBvcnRDb25maWd1cmF0aW9uLnRva2VuTmFtZVN0eWxlKSkpO1xuICAgIH1cbiAgICAvLyBHZW5lcmF0ZSBhIHVuaXF1ZSB0b2tlbiBuYW1lIHRoYXQgY29uc2lkZXJzIHRoZSBjb2xsZWN0aW9uIGNvbnRleHRcbiAgICAvLyBUaGlzIGVuc3VyZXMgd2Ugb25seSBhZGQgbnVtYmVyaW5nIChfMSwgXzIpIHdoZW4gdGhlcmUgYXJlIGFjdHVhbCBjb25mbGljdHNcbiAgICAvLyB3aXRoaW4gdGhlIHNhbWUgY29sbGVjdGlvbiBwYXRoXG4gICAgY29uc3QgdG9rZW5OYW1lID0gdG9rZW5OYW1lVHJhY2tlci5nZXRTaW1wbGVUb2tlbk5hbWUodG9rZW4sIF9fMS5leHBvcnRDb25maWd1cmF0aW9uLnRva2VuTmFtZVN0eWxlLCBmYWxzZSwgcGF0aFNlZ21lbnRzKTtcbiAgICAvLyBBZGQgdGhlIHVuaXF1ZSB0b2tlbiBuYW1lIGFzIHRoZSBmaW5hbCBzZWdtZW50LCByZW1vdmluZyBhbnkgbGVhZGluZyB1bmRlcnNjb3JlXG4gICAgc2VnbWVudHMucHVzaCh0b2tlbk5hbWUucmVwbGFjZSgvXl8vLCAnJykpO1xuICAgIC8vIEJ1aWxkIHRoZSBuZXN0ZWQgb2JqZWN0IHN0cnVjdHVyZSBmcm9tIHRoZSBzZWdtZW50c1xuICAgIHJldHVybiBzZWdtZW50cy5yZWR1Y2VSaWdodCgobmVzdGVkVmFsdWUsIHNlZ21lbnQpID0+ICh7XG4gICAgICAgIFtzZWdtZW50XTogbmVzdGVkVmFsdWVcbiAgICB9KSwgdmFsdWUpO1xufVxuLyoqXG4gKiBEZWVwbHkgbWVyZ2VzIG9iamVjdHMgdG9nZXRoZXIsIGVuc3VyaW5nIGRlc2NyaXB0aW9ucyBhcHBlYXIgYWZ0ZXIgYWxsIG90aGVyIHByb3BlcnRpZXNcbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGhhbmRsZXMgYSBzcGVjaWFsIGNhc2UgZm9yIHRva2VuIGRlc2NyaXB0aW9uczpcbiAqIDEuIEV4dHJhY3RzIGRlc2NyaXB0aW9ucyBmcm9tIGJvdGggb2JqZWN0cyBiZWluZyBtZXJnZWRcbiAqIDIuIFJlbW92ZXMgdGhlbSB0ZW1wb3JhcmlseSB0byBwcmV2ZW50IHRoZW0gZnJvbSBiZWluZyBtZXJnZWQgaW4gdGhlIG1pZGRsZVxuICogMy4gTWVyZ2VzIGFsbCBvdGhlciBwcm9wZXJ0aWVzICh0aGVtZXMsIHZhbHVlcywgZXRjLilcbiAqIDQuIEFkZHMgdGhlIGRlc2NyaXB0aW9uIGJhY2sgYXQgdGhlIHZlcnkgZW5kXG4gKlxuICogVGhpcyBlbnN1cmVzIHRoZSBvdXRwdXQgZm9ybWF0IGlzIGNvbnNpc3RlbnQ6XG4gKiB7XG4gKiAgIGJhc2U6IHsgdmFsdWU6IFwiLi4uXCIgfSxcbiAqICAgdGhlbWUtbGlnaHQ6IHsgdmFsdWU6IFwiLi4uXCIgfSxcbiAqICAgdGhlbWUtZGFyazogeyB2YWx1ZTogXCIuLi5cIiB9LFxuICogICBkZXNjcmlwdGlvbjogXCIuLi5cIiAgLy8gQWx3YXlzIGxhc3RcbiAqIH1cbiAqXG4gKiBAcGFyYW0gdGFyZ2V0IFRhcmdldCBvYmplY3QgdG8gbWVyZ2UgaW50b1xuICogQHBhcmFtIHNvdXJjZSBTb3VyY2Ugb2JqZWN0IHRvIG1lcmdlIGZyb21cbiAqIEByZXR1cm5zIE1lcmdlZCBvYmplY3Qgd2l0aCBkZXNjcmlwdGlvbiBhdCB0aGUgZW5kXG4gKi9cbmZ1bmN0aW9uIGRlZXBNZXJnZSh0YXJnZXQsIHNvdXJjZSkge1xuICAgIGlmICghdGFyZ2V0KVxuICAgICAgICByZXR1cm4gc291cmNlO1xuICAgIGlmICghc291cmNlKVxuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIGNvbnN0IG91dHB1dCA9IHsgLi4udGFyZ2V0IH07XG4gICAgLy8gR2V0IGRlc2NyaXB0aW9uIGZyb20gZWl0aGVyIG9iamVjdCAoaWYgaXQgZXhpc3RzKVxuICAgIGNvbnN0IGRlc2NyaXB0aW9uID0gc291cmNlLmRlc2NyaXB0aW9uIHx8IHRhcmdldC5kZXNjcmlwdGlvbjtcbiAgICBkZWxldGUgb3V0cHV0LmRlc2NyaXB0aW9uO1xuICAgIGRlbGV0ZSBzb3VyY2UuZGVzY3JpcHRpb247XG4gICAgLy8gTWVyZ2UgZXZlcnl0aGluZyBleGNlcHQgZGVzY3JpcHRpb25cbiAgICBPYmplY3Qua2V5cyhzb3VyY2UpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgaWYgKHNvdXJjZVtrZXldICYmIHR5cGVvZiBzb3VyY2Vba2V5XSA9PT0gJ29iamVjdCcgJiYgIUFycmF5LmlzQXJyYXkoc291cmNlW2tleV0pKSB7XG4gICAgICAgICAgICBpZiAoIShrZXkgaW4gdGFyZ2V0KSkge1xuICAgICAgICAgICAgICAgIG91dHB1dFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBvdXRwdXRba2V5XSA9IGRlZXBNZXJnZSh0YXJnZXRba2V5XSwgc291cmNlW2tleV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb3V0cHV0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIC8vIEFkZCBkZXNjcmlwdGlvbiBiYWNrIGF0IHRoZSBlbmQgaWYgaXQgZXhpc3RzXG4gICAgaWYgKGRlc2NyaXB0aW9uKSB7XG4gICAgICAgIG91dHB1dC5kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uO1xuICAgIH1cbiAgICByZXR1cm4gb3V0cHV0O1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmZvcm1hdFRva2VuVmFsdWUgPSBmb3JtYXRUb2tlblZhbHVlO1xuLyoqXG4gKiBGb3JtYXRzIGEgdmFsdWUgZm9yIFN0eWxlIERpY3Rpb25hcnkgSlNPTiBvdXRwdXRcbiAqIFJldHVybnMgYW4gb2JqZWN0IHdpdGggYSB2YWx1ZSBwcm9wZXJ0eSBhcyByZXF1aXJlZCBieSBTdHlsZSBEaWN0aW9uYXJ5XG4gKi9cbmZ1bmN0aW9uIGZvcm1hdFRva2VuVmFsdWUodmFsdWUpIHtcbiAgICAvLyBSZW1vdmUgYW55IHRlbXBsYXRlIGxpdGVyYWwgc3ludGF4XG4gICAgaWYgKHZhbHVlLnN0YXJ0c1dpdGgoJyR7JykgJiYgdmFsdWUuZW5kc1dpdGgoJ30nKSkge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlLnNsaWNlKDIsIC0xKTtcbiAgICB9XG4gICAgLy8gUmVtb3ZlIHF1b3RlcyBhcm91bmQgdmFsdWVzXG4gICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9bJ1wiXS9nLCAnJyk7XG4gICAgLy8gUmV0dXJuIHRoZSB2YWx1ZSBwcm9wZXJ0eSBvYmplY3RcbiAgICByZXR1cm4gYHsgXCJ2YWx1ZVwiOiBcIiR7dmFsdWV9XCIgfWA7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ29sb3JGb3JtYXQgPSB2b2lkIDA7XG52YXIgQ29sb3JGb3JtYXQ7XG4oZnVuY3Rpb24gKENvbG9yRm9ybWF0KSB7XG4gICAgLyoqIEV4YW1wbGU6IHJnYigyNTUsIDAsIDApICovXG4gICAgQ29sb3JGb3JtYXRbXCJyZ2JcIl0gPSBcInJnYlwiO1xuICAgIC8qKiBFeGFtcGxlOiByZ2JhKDI1NSwgMCwgMCwgMSkgKi9cbiAgICBDb2xvckZvcm1hdFtcInJnYmFcIl0gPSBcInJnYmFcIjtcbiAgICAvKiogQXV0b21hdGljYWxseSBjaG9vc2UgYmV0d2VlbiByZ2IoKSBhbmQgcmdiYSgpICovXG4gICAgQ29sb3JGb3JtYXRbXCJzbWFydFJnYmFcIl0gPSBcInNtYXJ0UmdiYVwiO1xuICAgIC8qKiBIRVggLSBmZmZmZmYgKi9cbiAgICBDb2xvckZvcm1hdFtcImhleDZcIl0gPSBcImhleDZcIjtcbiAgICAvKiogSEVYQSAtIGZmZmZmZjAwICovXG4gICAgQ29sb3JGb3JtYXRbXCJoZXg4XCJdID0gXCJoZXg4XCI7XG4gICAgLyoqIEFuZHJvaWQvQ29tcG9zZSBBUkdCIGludCDigJMgZS5nLiBDb2xvcigweDAwRkZGRkZGKSAqL1xuICAgIENvbG9yRm9ybWF0W1wiYXJnYkludFwiXSA9IFwiYXJnYkludFwiO1xuICAgIC8qKiBFeGFtcGxlOiAjZmYwMDAwICovXG4gICAgQ29sb3JGb3JtYXRbXCJoYXNoSGV4NlwiXSA9IFwiaGFzaEhleDZcIjtcbiAgICAvKiogRXhhbXBsZTogI2ZmMDAwMGZmICovXG4gICAgQ29sb3JGb3JtYXRbXCJoYXNoSGV4OFwiXSA9IFwiaGFzaEhleDhcIjtcbiAgICAvKiogQXV0b21hdGljYWxseSBjaG9vc2UgYmV0d2VlbiAjUlJHR0JCIGFuZCAjUlJHR0JCQUEgKi9cbiAgICBDb2xvckZvcm1hdFtcInNtYXJ0SGFzaEhleFwiXSA9IFwic21hcnRIYXNoSGV4XCI7XG4gICAgLyoqIFNlbGVjdHMgYmV0d2VlbiBoZXggYW5kIGhleGEgbW9kZXMgYmFzZWQgb24gbm9uLW9wYXF1ZSBhbHBoYSAqL1xuICAgIENvbG9yRm9ybWF0W1wic21hcnRIZXhcIl0gPSBcInNtYXJ0SGV4XCI7XG4gICAgLyoqIEV4YW1wbGU6IGhzbCgwLCAxMDAlLCA1MCUpICovXG4gICAgQ29sb3JGb3JtYXRbXCJoc2xcIl0gPSBcImhzbFwiO1xuICAgIC8qKiBFeGFtcGxlOiBoc2xhKDAsIDEwMCUsIDUwJSwgMSkgKi9cbiAgICBDb2xvckZvcm1hdFtcImhzbGFcIl0gPSBcImhzbGFcIjtcbiAgICAvKiogQXV0b21hdGljYWxseSBjaG9vc2UgYmV0d2VlbiBoc2woKSBhbmQgaHNsYSgpICovXG4gICAgQ29sb3JGb3JtYXRbXCJzbWFydEhzbGFcIl0gPSBcInNtYXJ0SHNsYVwiO1xuICAgIC8qKiBpT1MgVUlDb2xvciBjcmVhdGVkIGFzIFVJQ29sb3IocmdiOiAweDAwMDAwMCkud2l0aEFscGhhQ29tcG9uZW50KDAuNSkuIEFscGhhIGNvbXBvbmVudCB3aWxsIGJlIG9tbWl0ZWQgaWYgZnVsbHkgb3BhcXVlICovXG4gICAgQ29sb3JGb3JtYXRbXCJzbWFydFVJQ29sb3JcIl0gPSBcInNtYXJ0VUlDb2xvclwiO1xuICAgIC8qKiBFeGFtcGxlOiBva2xjaCgwLjYgMC4xNSAzMCkgKi9cbiAgICBDb2xvckZvcm1hdFtcIm9rbGNoXCJdID0gXCJva2xjaFwiO1xuICAgIC8qKiBFeGFtcGxlOiBva2xjaCgwLjYgMC4xNSAzMCAvIDEpICovXG4gICAgQ29sb3JGb3JtYXRbXCJva2xjaGFcIl0gPSBcIm9rbGNoYVwiO1xuICAgIC8qKiBBdXRvbWF0aWNhbGx5IGNob29zZSBiZXR3ZWVuIG9rbGNoKCkgYW5kIG9rbGNoKCkgd2l0aCBhbHBoYSAqL1xuICAgIENvbG9yRm9ybWF0W1wic21hcnRPa2xjaFwiXSA9IFwic21hcnRPa2xjaFwiO1xufSkoQ29sb3JGb3JtYXQgfHwgKGV4cG9ydHMuQ29sb3JGb3JtYXQgPSBDb2xvckZvcm1hdCA9IHt9KSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU3RyaW5nQ2FzZSA9IHZvaWQgMDtcbi8qKlxuICogRW51bSByZXByZXNlbnRpbmcgZGlmZmVyZW50IHN0cmluZyBjYXNlIGZvcm1hdHMgdXNlZCBmb3IgbmFtaW5nIHRva2VucyBhbmQgdmFyaWFibGVzXG4gKiBFeGFtcGxlcyBhcmUgc2hvd24gZm9yIHRoZSBpbnB1dDogXCJoZWxsbyB3b3JsZCBleGFtcGxlIDEyM1wiXG4gKi9cbnZhciBTdHJpbmdDYXNlO1xuKGZ1bmN0aW9uIChTdHJpbmdDYXNlKSB7XG4gICAgLyoqIEV4YW1wbGU6IFwiaGVsbG9Xb3JsZEV4YW1wbGUxMjNcIiAqL1xuICAgIFN0cmluZ0Nhc2VbXCJjYW1lbENhc2VcIl0gPSBcImNhbWVsQ2FzZVwiO1xuICAgIC8qKiBFeGFtcGxlOiBcIkhlbGxvIFdvcmxkIEV4YW1wbGUgMTIzXCIgKi9cbiAgICBTdHJpbmdDYXNlW1wiY2FwaXRhbENhc2VcIl0gPSBcImNhcGl0YWxDYXNlXCI7XG4gICAgLyoqIEV4YW1wbGU6IFwiSEVMTE9fV09STERfRVhBTVBMRV8xMjNcIiAqL1xuICAgIFN0cmluZ0Nhc2VbXCJjb25zdGFudENhc2VcIl0gPSBcImNvbnN0YW50Q2FzZVwiO1xuICAgIC8qKiBFeGFtcGxlOiBcImhlbGxvLndvcmxkLmV4YW1wbGUuMTIzXCIgKi9cbiAgICBTdHJpbmdDYXNlW1wiZG90Q2FzZVwiXSA9IFwiZG90Q2FzZVwiO1xuICAgIC8qKiBFeGFtcGxlOiBcIkhlbGxvLVdvcmxkLUV4YW1wbGUtMTIzXCIgKi9cbiAgICBTdHJpbmdDYXNlW1widHJhaW5DYXNlXCJdID0gXCJ0cmFpbkNhc2VcIjtcbiAgICAvKiogRXhhbXBsZTogXCJoZWxsbyB3b3JsZCBleGFtcGxlIDEyM1wiICovXG4gICAgU3RyaW5nQ2FzZVtcIm5vQ2FzZVwiXSA9IFwibm9DYXNlXCI7XG4gICAgLyoqIEV4YW1wbGU6IFwiaGVsbG8td29ybGQtZXhhbXBsZS0xMjNcIiAqL1xuICAgIFN0cmluZ0Nhc2VbXCJrZWJhYkNhc2VcIl0gPSBcImtlYmFiQ2FzZVwiO1xuICAgIC8qKiBFeGFtcGxlOiBcIkhlbGxvV29ybGRFeGFtcGxlMTIzXCIgKi9cbiAgICBTdHJpbmdDYXNlW1wicGFzY2FsQ2FzZVwiXSA9IFwicGFzY2FsQ2FzZVwiO1xuICAgIC8qKiBFeGFtcGxlOiBcImhlbGxvL3dvcmxkL2V4YW1wbGUvMTIzXCIgKi9cbiAgICBTdHJpbmdDYXNlW1wicGF0aENhc2VcIl0gPSBcInBhdGhDYXNlXCI7XG4gICAgLyoqIEV4YW1wbGU6IFwiSGVsbG8gd29ybGQgZXhhbXBsZSAxMjNcIiAqL1xuICAgIFN0cmluZ0Nhc2VbXCJzZW50ZW5jZUNhc2VcIl0gPSBcInNlbnRlbmNlQ2FzZVwiO1xuICAgIC8qKiBFeGFtcGxlOiBcImhlbGxvX3dvcmxkX2V4YW1wbGVfMTIzXCIgKi9cbiAgICBTdHJpbmdDYXNlW1wic25ha2VDYXNlXCJdID0gXCJzbmFrZUNhc2VcIjtcbiAgICAvKiogRXhhbXBsZTogXCJoZWxsb3dvcmxkZXhhbXBsZTEyM1wiICovXG4gICAgU3RyaW5nQ2FzZVtcImZsYXRDYXNlXCJdID0gXCJmbGF0Q2FzZVwiO1xufSkoU3RyaW5nQ2FzZSB8fCAoZXhwb3J0cy5TdHJpbmdDYXNlID0gU3RyaW5nQ2FzZSA9IHt9KSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ1NTSGVscGVyID0gdm9pZCAwO1xuY29uc3Qgc2RrX2V4cG9ydGVyc18xID0gcmVxdWlyZShcIkBzdXBlcm5vdmFpby9zZGstZXhwb3J0ZXJzXCIpO1xuY29uc3QgVG9rZW5IZWxwZXJfMSA9IHJlcXVpcmUoXCIuL1Rva2VuSGVscGVyXCIpO1xuY29uc3QgQ29sb3JIZWxwZXJfMSA9IHJlcXVpcmUoXCIuL0NvbG9ySGVscGVyXCIpO1xuLyoqIEEgdXRpbGl0eSBjbGFzcyB0byBoZWxwIHdpdGggdHJhbnNmb3JtYXRpb24gb2YgdG9rZW5zIGFuZCBTdXBlcm5vdmEgdG9rZW4tbGlrZSB2YWx1ZXMgdG8gdmFyaW91cyBmb3JtYXRzICovXG5jbGFzcyBDU1NIZWxwZXIge1xuICAgIC8qKlxuICAgICAqIEhlbHBlciBmdW5jdGlvbiB0byBoYW5kbGUgY29sb3Igd2l0aCBjdXN0b20gb3BhY2l0eSwgdXNpbmcgUkdCIHV0aWxpdGllcyB3aGVuIGF2YWlsYWJsZVxuICAgICAqL1xuICAgIHN0YXRpYyBoYW5kbGVDb2xvcldpdGhDdXN0b21PcGFjaXR5KGNvbG9yLCBjdXN0b21PcGFjaXR5LCBhbGxUb2tlbnMsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKGN1c3RvbU9wYWNpdHkgJiYgY29sb3IucmVmZXJlbmNlZFRva2VuSWQpIHtcbiAgICAgICAgICAgIC8vIElmIHdlIGhhdmUgY3VzdG9tIG9wYWNpdHkgYW5kIHJlZmVyZW5jZSBhIGNvbG9yIHRva2VuLCB0cnkgdG8gdXNlIFJHQiB1dGlsaXR5XG4gICAgICAgICAgICBjb25zdCByZWZlcmVuY2VkQ29sb3JUb2tlbiA9IGFsbFRva2Vucy5nZXQoY29sb3IucmVmZXJlbmNlZFRva2VuSWQpO1xuICAgICAgICAgICAgaWYgKHJlZmVyZW5jZWRDb2xvclRva2VuICYmIHJlZmVyZW5jZWRDb2xvclRva2VuLnRva2VuVHlwZSA9PT0gc2RrX2V4cG9ydGVyc18xLlRva2VuVHlwZS5jb2xvcikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJnYlZhcmlhYmxlTmFtZSA9IG9wdGlvbnMudG9rZW5Ub1ZhcmlhYmxlUmVmKHJlZmVyZW5jZWRDb2xvclRva2VuLCB7IG5lZWRzUmdiOiB0cnVlIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBgcmdiYSgke3JnYlZhcmlhYmxlTmFtZX0sICR7Q29sb3JIZWxwZXJfMS5Db2xvckhlbHBlci5yb3VuZFRvRGVjaW1hbHMoY3VzdG9tT3BhY2l0eS5tZWFzdXJlLCBvcHRpb25zLmRlY2ltYWxzKX0pYDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBGYWxsYmFjayB0byBub3JtYWwgY29sb3IgcHJvY2Vzc2luZ1xuICAgICAgICByZXR1cm4gdGhpcy5jb2xvclRva2VuVmFsdWVUb0NTUyh7XG4gICAgICAgICAgICAuLi5jb2xvcixcbiAgICAgICAgICAgIC4uLihjdXN0b21PcGFjaXR5ICYmIHsgb3BhY2l0eTogY3VzdG9tT3BhY2l0eSB9KVxuICAgICAgICB9LCBhbGxUb2tlbnMsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBzdGF0aWMgdG9rZW5Ub0NTUyh0b2tlbiwgYWxsVG9rZW5zLCBvcHRpb25zKSB7XG4gICAgICAgIC8qKiBVc2Ugc3Vicm91dGluZXMgdG8gY29udmVydCBzcGVjaWZpYyB0b2tlbiB0eXBlcyB0byBkaWZmZXJlbnQgY3NzIHJlcHJlc2VudGF0aW9ucy4gTWFueSB0b2tlbnMgYXJlIG9mIHRoZSBzYW1lIHR5cGUgKi9cbiAgICAgICAgbGV0IGNzc1ZhbHVlO1xuICAgICAgICBzd2l0Y2ggKHRva2VuLnRva2VuVHlwZSkge1xuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuVG9rZW5UeXBlLmNvbG9yOlxuICAgICAgICAgICAgICAgIGNzc1ZhbHVlID0gdGhpcy5jb2xvclRva2VuVmFsdWVUb0NTUyh0b2tlbi52YWx1ZSwgYWxsVG9rZW5zLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2Ugc2RrX2V4cG9ydGVyc18xLlRva2VuVHlwZS5ib3JkZXI6XG4gICAgICAgICAgICAgICAgY3NzVmFsdWUgPSB0aGlzLmJvcmRlclRva2VuVmFsdWVUb0NTUyh0b2tlbi52YWx1ZSwgYWxsVG9rZW5zLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2Ugc2RrX2V4cG9ydGVyc18xLlRva2VuVHlwZS5ncmFkaWVudDpcbiAgICAgICAgICAgICAgICBjc3NWYWx1ZSA9IHRoaXMuZ3JhZGllbnRUb2tlblZhbHVlVG9DU1ModG9rZW4udmFsdWUsIGFsbFRva2Vucywgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5Ub2tlblR5cGUuZGltZW5zaW9uOlxuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuVG9rZW5UeXBlLnNpemU6XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5Ub2tlblR5cGUuc3BhY2U6XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5Ub2tlblR5cGUub3BhY2l0eTpcbiAgICAgICAgICAgIGNhc2Ugc2RrX2V4cG9ydGVyc18xLlRva2VuVHlwZS5mb250U2l6ZTpcbiAgICAgICAgICAgIGNhc2Ugc2RrX2V4cG9ydGVyc18xLlRva2VuVHlwZS5saW5lSGVpZ2h0OlxuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuVG9rZW5UeXBlLmxldHRlclNwYWNpbmc6XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5Ub2tlblR5cGUucGFyYWdyYXBoU3BhY2luZzpcbiAgICAgICAgICAgIGNhc2Ugc2RrX2V4cG9ydGVyc18xLlRva2VuVHlwZS5ib3JkZXJXaWR0aDpcbiAgICAgICAgICAgIGNhc2Ugc2RrX2V4cG9ydGVyc18xLlRva2VuVHlwZS5yYWRpdXM6XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5Ub2tlblR5cGUuZHVyYXRpb246XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5Ub2tlblR5cGUuekluZGV4OlxuICAgICAgICAgICAgICAgIGNzc1ZhbHVlID0gdGhpcy5kaW1lbnNpb25Ub2tlblZhbHVlVG9DU1ModG9rZW4udmFsdWUsIGFsbFRva2Vucywgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5Ub2tlblR5cGUuc2hhZG93OlxuICAgICAgICAgICAgICAgIGNzc1ZhbHVlID0gdGhpcy5zaGFkb3dUb2tlblZhbHVlVG9DU1ModG9rZW4udmFsdWUsIGFsbFRva2Vucywgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5Ub2tlblR5cGUuZm9udFdlaWdodDpcbiAgICAgICAgICAgICAgICBjc3NWYWx1ZSA9IHRoaXMuZm9udFdlaWdodFRva2VuVmFsdWVUb0NTUyh0b2tlbi52YWx1ZSwgYWxsVG9rZW5zLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2Ugc2RrX2V4cG9ydGVyc18xLlRva2VuVHlwZS5mb250RmFtaWx5OlxuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuVG9rZW5UeXBlLnByb2R1Y3RDb3B5OlxuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuVG9rZW5UeXBlLnN0cmluZzpcbiAgICAgICAgICAgICAgICBjc3NWYWx1ZSA9IHRoaXMuc3RyaW5nVG9rZW5WYWx1ZVRvQ1NTKHRva2VuLnZhbHVlLCBhbGxUb2tlbnMsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuVG9rZW5UeXBlLnRleHRDYXNlOlxuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuVG9rZW5UeXBlLnRleHREZWNvcmF0aW9uOlxuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuVG9rZW5UeXBlLnZpc2liaWxpdHk6XG4gICAgICAgICAgICAgICAgY3NzVmFsdWUgPSB0aGlzLm9wdGlvblRva2VuVmFsdWVUb0NTUyh0b2tlbi52YWx1ZSwgYWxsVG9rZW5zLCBvcHRpb25zLCB0b2tlbi50b2tlblR5cGUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuVG9rZW5UeXBlLmJsdXI6XG4gICAgICAgICAgICAgICAgY3NzVmFsdWUgPSB0aGlzLmJsdXJUb2tlblZhbHVlVG9DU1ModG9rZW4udmFsdWUsIGFsbFRva2Vucywgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5Ub2tlblR5cGUudHlwb2dyYXBoeTpcbiAgICAgICAgICAgICAgICBjc3NWYWx1ZSA9IHRoaXMudHlwb2dyYXBoeVRva2VuVmFsdWVUb0NTUyh0b2tlbi52YWx1ZSwgYWxsVG9rZW5zLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IHNka19leHBvcnRlcnNfMS5VbnJlYWNoYWJsZUNhc2VFcnJvcih0b2tlbi50b2tlblR5cGUsICdVbnN1cHBvcnRlZCB0b2tlbiB0eXBlIGZvciB0cmFuc2Zvcm1hdGlvbiB0byBDU1M6Jyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQWxsb3cgdmFsdWUgdHJhbnNmb3JtYXRpb24gaWYgdHJhbnNmb3JtZXIgZXhpc3RzXG4gICAgICAgIGlmIChvcHRpb25zLnZhbHVlVHJhbnNmb3JtZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IHRyYW5zZm9ybWVkVmFsdWUgPSBvcHRpb25zLnZhbHVlVHJhbnNmb3JtZXIoY3NzVmFsdWUsIHRva2VuKTtcbiAgICAgICAgICAgIGlmICh0cmFuc2Zvcm1lZFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJhbnNmb3JtZWRWYWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY3NzVmFsdWU7XG4gICAgfVxuICAgIHN0YXRpYyBjb2xvclRva2VuVmFsdWVUb0NTUyhjb2xvciwgYWxsVG9rZW5zLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBDb2xvckhlbHBlcl8xLkNvbG9ySGVscGVyLmZvcm1hdHRlZENvbG9yT3JWYXJpYWJsZU5hbWUoY29sb3IsIGFsbFRva2Vucywgb3B0aW9ucyk7XG4gICAgfVxuICAgIHN0YXRpYyBib3JkZXJUb2tlblZhbHVlVG9DU1MoYm9yZGVyLCBhbGxUb2tlbnMsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgcmVmZXJlbmNlID0gKDAsIFRva2VuSGVscGVyXzEuc3VyZU9wdGlvbmFsUmVmZXJlbmNlKShib3JkZXIucmVmZXJlbmNlZFRva2VuSWQsIGFsbFRva2Vucywgb3B0aW9ucy5hbGxvd1JlZmVyZW5jZXMpO1xuICAgICAgICBpZiAocmVmZXJlbmNlKSB7XG4gICAgICAgICAgICByZXR1cm4gb3B0aW9ucy50b2tlblRvVmFyaWFibGVSZWYocmVmZXJlbmNlKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBIYW5kbGUgY29sb3Igd2l0aCBjdXN0b20gb3BhY2l0eSB1c2luZyBoZWxwZXIgZnVuY3Rpb25cbiAgICAgICAgY29uc3QgY29sb3JWYWx1ZSA9IHRoaXMuaGFuZGxlQ29sb3JXaXRoQ3VzdG9tT3BhY2l0eShib3JkZXIuY29sb3IsIGJvcmRlci5jb2xvci5vcGFjaXR5LCBhbGxUb2tlbnMsIG9wdGlvbnMpO1xuICAgICAgICBjb25zdCBkYXRhID0ge1xuICAgICAgICAgICAgd2lkdGg6IHRoaXMuZGltZW5zaW9uVG9rZW5WYWx1ZVRvQ1NTKGJvcmRlci53aWR0aCwgYWxsVG9rZW5zLCBvcHRpb25zKSxcbiAgICAgICAgICAgIHN0eWxlOiB0aGlzLmJvcmRlclN0eWxlVG9DU1MoYm9yZGVyLnN0eWxlKSxcbiAgICAgICAgICAgIGNvbG9yOiBjb2xvclZhbHVlLFxuICAgICAgICAgICAgcG9zaXRpb246IHRoaXMuYm9yZGVyUG9zaXRpb25Ub0NTUyhib3JkZXIucG9zaXRpb24pIC8vIE5vdCB1c2VkIGZvciBub3dcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGAke2RhdGEud2lkdGh9ICR7ZGF0YS5zdHlsZX0gJHtkYXRhLmNvbG9yfWA7XG4gICAgfVxuICAgIHN0YXRpYyBncmFkaWVudFRva2VuVmFsdWVUb0NTUyhncmFkaWVudHMsIGFsbFRva2Vucywgb3B0aW9ucykge1xuICAgICAgICAvLyBFeHBvcnQgZWFjaCBsYXllciBvZiB0aGUgZ3JhZGllbnQgc2VwYXJhdGVseSwgdGhlbiBqb2luIHRoZSBDU1MgYmFja2dyb3VuZFxuICAgICAgICByZXR1cm4gZ3JhZGllbnRzLm1hcCgoZ3JhZGllbnQpID0+IHRoaXMuZ3JhZGllbnRMYXllclRvQ1NTKGdyYWRpZW50LCBhbGxUb2tlbnMsIG9wdGlvbnMpKS5qb2luKCcsICcpO1xuICAgIH1cbiAgICAvKiogQ29udmVydHMgZ3JhZGllbnQgdG9rZW4gdmFsdWUgdG8gY3NzIGRlZmluaXRpb24gKi9cbiAgICBzdGF0aWMgZ3JhZGllbnRMYXllclRvQ1NTKHZhbHVlLCBhbGxUb2tlbnMsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgcmVmZXJlbmNlID0gKDAsIFRva2VuSGVscGVyXzEuc3VyZU9wdGlvbmFsUmVmZXJlbmNlKSh2YWx1ZS5yZWZlcmVuY2VkVG9rZW5JZCwgYWxsVG9rZW5zLCBvcHRpb25zLmFsbG93UmVmZXJlbmNlcyk7XG4gICAgICAgIGlmIChyZWZlcmVuY2UpIHtcbiAgICAgICAgICAgIHJldHVybiBvcHRpb25zLnRva2VuVG9WYXJpYWJsZVJlZihyZWZlcmVuY2UpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRlbHRhWCA9IENvbG9ySGVscGVyXzEuQ29sb3JIZWxwZXIucm91bmRUb0RlY2ltYWxzKHZhbHVlLnRvLngsIG9wdGlvbnMuZGVjaW1hbHMpIC1cbiAgICAgICAgICAgIENvbG9ySGVscGVyXzEuQ29sb3JIZWxwZXIucm91bmRUb0RlY2ltYWxzKHZhbHVlLmZyb20ueCwgb3B0aW9ucy5kZWNpbWFscyk7XG4gICAgICAgIGNvbnN0IGRlbHRhWSA9IENvbG9ySGVscGVyXzEuQ29sb3JIZWxwZXIucm91bmRUb0RlY2ltYWxzKHZhbHVlLnRvLnksIG9wdGlvbnMuZGVjaW1hbHMpIC1cbiAgICAgICAgICAgIENvbG9ySGVscGVyXzEuQ29sb3JIZWxwZXIucm91bmRUb0RlY2ltYWxzKHZhbHVlLmZyb20ueSwgb3B0aW9ucy5kZWNpbWFscyk7XG4gICAgICAgIGNvbnN0IHJhZCA9IE1hdGguYXRhbjIoZGVsdGFZLCBkZWx0YVgpO1xuICAgICAgICBjb25zdCBkZWcgPSByYWQgKiAoMTgwIC8gTWF0aC5QSSk7XG4gICAgICAgIGNvbnN0IGdldEFuZ2xlID0gKCkgPT4ge1xuICAgICAgICAgICAgaWYgKGRlbHRhWCA+PSAwICYmIGRlbHRhWSA+IDApIHtcbiAgICAgICAgICAgICAgICAvLyB0b3AgdG8gYm90dG9tIGlzIDkwZGVnIGJ1dCBzaG91bGQgYmUgMTgwZGVnXG4gICAgICAgICAgICAgICAgcmV0dXJuIDkwICsgZGVnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRlbHRhWCA+IDAgJiYgZGVsdGFZIDw9IDApIHtcbiAgICAgICAgICAgICAgICAvLyBsZWZ0IHRvIHJpZ2h0IGlzIDBkZWcgYnV0IHNob3VsZCBiZSA5MGRlZ1xuICAgICAgICAgICAgICAgIHJldHVybiA5MCArIGRlZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkZWx0YVggPD0gMCAmJiBkZWx0YVkgPCAwKSB7XG4gICAgICAgICAgICAgICAgLy8gYm90dG9tIHRvIHRvcCBpcyAtOTBkZWcgYnV0IHNob3VsZCBiZSAwZGVnXG4gICAgICAgICAgICAgICAgcmV0dXJuIDkwICsgZGVnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gcmlnaHQgdG8gbGVmdCBpcyAxODBkZWcgYnV0IHNob3VsZCBiZSAtOTBkZWdcbiAgICAgICAgICAgIHJldHVybiBkZWcgLSAyNzA7XG4gICAgICAgIH07XG4gICAgICAgIGxldCBncmFkaWVudFR5cGUgPSAnJztcbiAgICAgICAgc3dpdGNoICh2YWx1ZS50eXBlKSB7XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5HcmFkaWVudFR5cGUubGluZWFyOlxuICAgICAgICAgICAgICAgIGdyYWRpZW50VHlwZSA9IGBsaW5lYXItZ3JhZGllbnQoJHtnZXRBbmdsZSgpfWRlZywgYDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2Ugc2RrX2V4cG9ydGVyc18xLkdyYWRpZW50VHlwZS5yYWRpYWw6XG4gICAgICAgICAgICAgICAgZ3JhZGllbnRUeXBlID0gJ3JhZGlhbC1ncmFkaWVudChjaXJjbGUsICc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5HcmFkaWVudFR5cGUuYW5ndWxhcjpcbiAgICAgICAgICAgICAgICBncmFkaWVudFR5cGUgPSAnY29uaWMtZ3JhZGllbnQoJztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgZ3JhZGllbnRUeXBlID0gYGxpbmVhci1ncmFkaWVudCgke2dldEFuZ2xlKCl9ZGVnLCBgO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIC8vIEV4YW1wbGU6IHJhZGlhbC1ncmFkaWVudChjaXJjbGUsIHJnYmEoNjMsOTQsMjUxLDEpIDAlLCByZ2JhKDI1Miw3MCwxMDcsMSkgMTAwJSk7XG4gICAgICAgIGNvbnN0IHN0b3BzID0gdmFsdWUuc3RvcHNcbiAgICAgICAgICAgIC5tYXAoKHN0b3ApID0+IHtcbiAgICAgICAgICAgIC8vIEhhbmRsZSBjb2xvciB3aXRoIGN1c3RvbSBvcGFjaXR5IHVzaW5nIGhlbHBlciBmdW5jdGlvblxuICAgICAgICAgICAgY29uc3QgY29sb3JWYWx1ZSA9IHRoaXMuaGFuZGxlQ29sb3JXaXRoQ3VzdG9tT3BhY2l0eShzdG9wLmNvbG9yLCBzdG9wLmNvbG9yLm9wYWNpdHksIGFsbFRva2Vucywgb3B0aW9ucyk7XG4gICAgICAgICAgICByZXR1cm4gYCR7Y29sb3JWYWx1ZX0gJHtDb2xvckhlbHBlcl8xLkNvbG9ySGVscGVyLnJvdW5kVG9EZWNpbWFscyhzdG9wLnBvc2l0aW9uICogMTAwLCBvcHRpb25zLmRlY2ltYWxzKX0lYDtcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5qb2luKCcsICcpO1xuICAgICAgICByZXR1cm4gYCR7Z3JhZGllbnRUeXBlfSR7c3RvcHN9KWA7XG4gICAgfVxuICAgIHN0YXRpYyBkaW1lbnNpb25Ub2tlblZhbHVlVG9DU1MoZGltZW5zaW9uLCBhbGxUb2tlbnMsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgcmVmZXJlbmNlID0gKDAsIFRva2VuSGVscGVyXzEuc3VyZU9wdGlvbmFsUmVmZXJlbmNlKShkaW1lbnNpb24ucmVmZXJlbmNlZFRva2VuSWQsIGFsbFRva2Vucywgb3B0aW9ucy5hbGxvd1JlZmVyZW5jZXMpO1xuICAgICAgICBpZiAocmVmZXJlbmNlKSB7XG4gICAgICAgICAgICByZXR1cm4gb3B0aW9ucy50b2tlblRvVmFyaWFibGVSZWYocmVmZXJlbmNlKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBIYW5kbGUgdW5pdCBjb252ZXJzaW9uIGlmIG5lZWRlZFxuICAgICAgICBpZiAob3B0aW9ucy5mb3JjZVJlbVVuaXQgJiYgZGltZW5zaW9uLnVuaXQgPT09IHNka19leHBvcnRlcnNfMS5Vbml0LnBpeGVscykge1xuICAgICAgICAgICAgY29uc3QgcmVtQmFzZSA9IG9wdGlvbnMucmVtQmFzZSB8fCAxNjtcbiAgICAgICAgICAgIGNvbnN0IHJlbVZhbHVlID0gZGltZW5zaW9uLm1lYXN1cmUgLyByZW1CYXNlO1xuICAgICAgICAgICAgcmV0dXJuIGAke0NvbG9ySGVscGVyXzEuQ29sb3JIZWxwZXIucm91bmRUb0RlY2ltYWxzKHJlbVZhbHVlLCBvcHRpb25zLmRlY2ltYWxzKX1yZW1gO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBgJHtDb2xvckhlbHBlcl8xLkNvbG9ySGVscGVyLnJvdW5kVG9EZWNpbWFscyhkaW1lbnNpb24ubWVhc3VyZSwgb3B0aW9ucy5kZWNpbWFscyl9JHt0aGlzLnVuaXRUb0NTUyhkaW1lbnNpb24udW5pdCl9YDtcbiAgICB9XG4gICAgc3RhdGljIHNoYWRvd1Rva2VuVmFsdWVUb0NTUyhzaGFkb3dzLCBhbGxUb2tlbnMsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHNoYWRvd3MubWFwKChsYXllcikgPT4gdGhpcy5zaGFkb3dMYXllclRvQ1NTKGxheWVyLCBhbGxUb2tlbnMsIG9wdGlvbnMpKS5qb2luKCcsICcpO1xuICAgIH1cbiAgICBzdGF0aWMgc2hhZG93TGF5ZXJUb0NTUyh2YWx1ZSwgYWxsVG9rZW5zLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHJlZmVyZW5jZSA9ICgwLCBUb2tlbkhlbHBlcl8xLnN1cmVPcHRpb25hbFJlZmVyZW5jZSkodmFsdWUucmVmZXJlbmNlZFRva2VuSWQsIGFsbFRva2Vucywgb3B0aW9ucy5hbGxvd1JlZmVyZW5jZXMpO1xuICAgICAgICBpZiAocmVmZXJlbmNlKSB7XG4gICAgICAgICAgICByZXR1cm4gb3B0aW9ucy50b2tlblRvVmFyaWFibGVSZWYocmVmZXJlbmNlKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBDb252ZXJ0IHBpeGVsIHZhbHVlcyB0byByZW0gaWYgbmVlZGVkXG4gICAgICAgIGNvbnN0IGNvbnZlcnRUb1JlbSA9IChweCkgPT4ge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuZm9yY2VSZW1Vbml0KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVtQmFzZSA9IG9wdGlvbnMucmVtQmFzZSB8fCAxNjtcbiAgICAgICAgICAgICAgICBjb25zdCByZW1WYWx1ZSA9IHB4IC8gcmVtQmFzZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYCR7Q29sb3JIZWxwZXJfMS5Db2xvckhlbHBlci5yb3VuZFRvRGVjaW1hbHMocmVtVmFsdWUsIG9wdGlvbnMuZGVjaW1hbHMpfXJlbWA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYCR7cHh9cHhgO1xuICAgICAgICB9O1xuICAgICAgICAvLyBIYW5kbGUgY29sb3Igd2l0aCBjdXN0b20gb3BhY2l0eSB1c2luZyBoZWxwZXIgZnVuY3Rpb25cbiAgICAgICAgY29uc3QgY29sb3JWYWx1ZSA9IHRoaXMuaGFuZGxlQ29sb3JXaXRoQ3VzdG9tT3BhY2l0eSh2YWx1ZS5jb2xvciwgdmFsdWUub3BhY2l0eSwgYWxsVG9rZW5zLCBvcHRpb25zKTtcbiAgICAgICAgcmV0dXJuIGAke3ZhbHVlLnR5cGUgPT09IHNka19leHBvcnRlcnNfMS5TaGFkb3dUeXBlLmlubmVyID8gJ2luc2V0ICcgOiAnJ30ke2NvbnZlcnRUb1JlbSh2YWx1ZS54KX0gJHtjb252ZXJ0VG9SZW0odmFsdWUueSl9ICR7Y29udmVydFRvUmVtKHZhbHVlLnJhZGl1cyl9ICR7Y29udmVydFRvUmVtKHZhbHVlLnNwcmVhZCl9ICR7Y29sb3JWYWx1ZX1gO1xuICAgIH1cbiAgICBzdGF0aWMgZm9udFdlaWdodFRva2VuVmFsdWVUb0NTUyh2YWx1ZSwgYWxsVG9rZW5zLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHJlZmVyZW5jZSA9ICgwLCBUb2tlbkhlbHBlcl8xLnN1cmVPcHRpb25hbFJlZmVyZW5jZSkodmFsdWUucmVmZXJlbmNlZFRva2VuSWQsIGFsbFRva2Vucywgb3B0aW9ucy5hbGxvd1JlZmVyZW5jZXMpO1xuICAgICAgICBpZiAocmVmZXJlbmNlKSB7XG4gICAgICAgICAgICByZXR1cm4gb3B0aW9ucy50b2tlblRvVmFyaWFibGVSZWYocmVmZXJlbmNlKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBDb252ZXJ0IHRleHQgd2VpZ2h0cyB0byBudW1lcmljYWwgdmFsdWVzXG4gICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRXZWlnaHQgPSAoMCwgVG9rZW5IZWxwZXJfMS5ub3JtYWxpemVUZXh0V2VpZ2h0KSh2YWx1ZS50ZXh0KTtcbiAgICAgICAgcmV0dXJuIGAke25vcm1hbGl6ZWRXZWlnaHR9YDtcbiAgICB9XG4gICAgc3RhdGljIHN0cmluZ1Rva2VuVmFsdWVUb0NTUyh2YWx1ZSwgYWxsVG9rZW5zLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHJlZmVyZW5jZSA9ICgwLCBUb2tlbkhlbHBlcl8xLnN1cmVPcHRpb25hbFJlZmVyZW5jZSkodmFsdWUucmVmZXJlbmNlZFRva2VuSWQsIGFsbFRva2Vucywgb3B0aW9ucy5hbGxvd1JlZmVyZW5jZXMpO1xuICAgICAgICBpZiAocmVmZXJlbmNlKSB7XG4gICAgICAgICAgICByZXR1cm4gb3B0aW9ucy50b2tlblRvVmFyaWFibGVSZWYocmVmZXJlbmNlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYFwiJHt2YWx1ZS50ZXh0fVwiYDtcbiAgICB9XG4gICAgc3RhdGljIG9wdGlvblRva2VuVmFsdWVUb0NTUyhvcHRpb24sIGFsbFRva2Vucywgb3B0aW9ucywgdG9rZW5UeXBlKSB7XG4gICAgICAgIGNvbnN0IHJlZmVyZW5jZSA9ICgwLCBUb2tlbkhlbHBlcl8xLnN1cmVPcHRpb25hbFJlZmVyZW5jZSkob3B0aW9uLnJlZmVyZW5jZWRUb2tlbklkLCBhbGxUb2tlbnMsIG9wdGlvbnMuYWxsb3dSZWZlcmVuY2VzKTtcbiAgICAgICAgaWYgKHJlZmVyZW5jZSkge1xuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMudG9rZW5Ub1ZhcmlhYmxlUmVmKHJlZmVyZW5jZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRva2VuVHlwZSA9PT0gc2RrX2V4cG9ydGVyc18xLlRva2VuVHlwZS50ZXh0Q2FzZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudGV4dENhc2VUb0NTUyhvcHRpb24udmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0b2tlblR5cGUgPT09IHNka19leHBvcnRlcnNfMS5Ub2tlblR5cGUudGV4dERlY29yYXRpb24pIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRleHREZWNvcmF0aW9uVG9DU1Mob3B0aW9uLnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBWaXNpYmlsaXR5IHZhbHVlcyBhcmUgc3VwcG9ydGVkIGluIENTUyBhcyBpcyBvdXIgZGF0YSBtb2RlbFxuICAgICAgICByZXR1cm4gb3B0aW9uLnZhbHVlLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuICAgIHN0YXRpYyBibHVyVG9rZW5WYWx1ZVRvQ1NTKGJsdXIsIGFsbFRva2Vucywgb3B0aW9ucykge1xuICAgICAgICBjb25zdCByZWZlcmVuY2UgPSAoMCwgVG9rZW5IZWxwZXJfMS5zdXJlT3B0aW9uYWxSZWZlcmVuY2UpKGJsdXIucmVmZXJlbmNlZFRva2VuSWQsIGFsbFRva2Vucywgb3B0aW9ucy5hbGxvd1JlZmVyZW5jZXMpO1xuICAgICAgICBpZiAocmVmZXJlbmNlKSB7XG4gICAgICAgICAgICByZXR1cm4gb3B0aW9ucy50b2tlblRvVmFyaWFibGVSZWYocmVmZXJlbmNlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYGJsdXIoJHt0aGlzLmRpbWVuc2lvblRva2VuVmFsdWVUb0NTUyhibHVyLnJhZGl1cywgYWxsVG9rZW5zLCBvcHRpb25zKX0pYDtcbiAgICB9XG4gICAgc3RhdGljIHR5cG9ncmFwaHlUb2tlblZhbHVlVG9DU1ModHlwb2dyYXBoeSwgYWxsVG9rZW5zLCBvcHRpb25zKSB7XG4gICAgICAgIC8vIFJlZmVyZW5jZSBmdWxsIHR5cG9ncmFwaHkgdG9rZW4gaWYgc2V0XG4gICAgICAgIGNvbnN0IHJlZmVyZW5jZSA9ICgwLCBUb2tlbkhlbHBlcl8xLnN1cmVPcHRpb25hbFJlZmVyZW5jZSkodHlwb2dyYXBoeS5yZWZlcmVuY2VkVG9rZW5JZCwgYWxsVG9rZW5zLCBvcHRpb25zLmFsbG93UmVmZXJlbmNlcyk7XG4gICAgICAgIGlmIChyZWZlcmVuY2UpIHtcbiAgICAgICAgICAgIHJldHVybiBvcHRpb25zLnRva2VuVG9WYXJpYWJsZVJlZihyZWZlcmVuY2UpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlc29sdmUgcGFydGlhbCByZWZlcmVuY2VzXG4gICAgICAgIGNvbnN0IGZvbnRGYW1pbHlSZWZlcmVuY2UgPSAoMCwgVG9rZW5IZWxwZXJfMS5zdXJlT3B0aW9uYWxSZWZlcmVuY2UpKHR5cG9ncmFwaHkuZm9udEZhbWlseS5yZWZlcmVuY2VkVG9rZW5JZCwgYWxsVG9rZW5zLCBvcHRpb25zLmFsbG93UmVmZXJlbmNlcyk7XG4gICAgICAgIGNvbnN0IGZvbnRXZWlnaHRSZWZlcmVuY2UgPSAoMCwgVG9rZW5IZWxwZXJfMS5zdXJlT3B0aW9uYWxSZWZlcmVuY2UpKHR5cG9ncmFwaHkuZm9udFdlaWdodC5yZWZlcmVuY2VkVG9rZW5JZCwgYWxsVG9rZW5zLCBvcHRpb25zLmFsbG93UmVmZXJlbmNlcyk7XG4gICAgICAgIGNvbnN0IGRlY29yYXRpb25SZWZlcmVuY2UgPSAoMCwgVG9rZW5IZWxwZXJfMS5zdXJlT3B0aW9uYWxSZWZlcmVuY2UpKHR5cG9ncmFwaHkudGV4dERlY29yYXRpb24ucmVmZXJlbmNlZFRva2VuSWQsIGFsbFRva2Vucywgb3B0aW9ucy5hbGxvd1JlZmVyZW5jZXMpO1xuICAgICAgICBjb25zdCBjYXNlUmVmZXJlbmNlID0gKDAsIFRva2VuSGVscGVyXzEuc3VyZU9wdGlvbmFsUmVmZXJlbmNlKSh0eXBvZ3JhcGh5LnRleHRDYXNlLnJlZmVyZW5jZWRUb2tlbklkLCBhbGxUb2tlbnMsIG9wdGlvbnMuYWxsb3dSZWZlcmVuY2VzKTtcbiAgICAgICAgY29uc3QgZGF0YSA9IHtcbiAgICAgICAgICAgIGZvbnRGYW1pbHk6IGZvbnRGYW1pbHlSZWZlcmVuY2UgPyBvcHRpb25zLnRva2VuVG9WYXJpYWJsZVJlZihmb250RmFtaWx5UmVmZXJlbmNlKSA6IHR5cG9ncmFwaHkuZm9udEZhbWlseS50ZXh0LFxuICAgICAgICAgICAgZm9udFdlaWdodDogZm9udFdlaWdodFJlZmVyZW5jZVxuICAgICAgICAgICAgICAgID8gb3B0aW9ucy50b2tlblRvVmFyaWFibGVSZWYoZm9udFdlaWdodFJlZmVyZW5jZSlcbiAgICAgICAgICAgICAgICA6ICgwLCBUb2tlbkhlbHBlcl8xLm5vcm1hbGl6ZVRleHRXZWlnaHQpKHR5cG9ncmFwaHkuZm9udFdlaWdodC50ZXh0KSxcbiAgICAgICAgICAgIHRleHREZWNvcmF0aW9uOiBkZWNvcmF0aW9uUmVmZXJlbmNlXG4gICAgICAgICAgICAgICAgPyBvcHRpb25zLnRva2VuVG9WYXJpYWJsZVJlZihkZWNvcmF0aW9uUmVmZXJlbmNlKVxuICAgICAgICAgICAgICAgIDogdHlwb2dyYXBoeS50ZXh0RGVjb3JhdGlvbi52YWx1ZSA9PT0gc2RrX2V4cG9ydGVyc18xLlRleHREZWNvcmF0aW9uLm9yaWdpbmFsXG4gICAgICAgICAgICAgICAgICAgID8gdGhpcy50ZXh0RGVjb3JhdGlvblRvQ1NTKHR5cG9ncmFwaHkudGV4dERlY29yYXRpb24udmFsdWUpXG4gICAgICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgdGV4dENhc2U6IGNhc2VSZWZlcmVuY2VcbiAgICAgICAgICAgICAgICA/IG9wdGlvbnMudG9rZW5Ub1ZhcmlhYmxlUmVmKGNhc2VSZWZlcmVuY2UpXG4gICAgICAgICAgICAgICAgOiB0eXBvZ3JhcGh5LnRleHRDYXNlLnZhbHVlID09PSBzZGtfZXhwb3J0ZXJzXzEuVGV4dENhc2Uub3JpZ2luYWxcbiAgICAgICAgICAgICAgICAgICAgPyB0aGlzLnRleHRDYXNlVG9DU1ModHlwb2dyYXBoeS50ZXh0Q2FzZS52YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBjYXBzOiB0eXBvZ3JhcGh5LnRleHRDYXNlLnZhbHVlID09PSBzZGtfZXhwb3J0ZXJzXzEuVGV4dENhc2Uuc21hbGxDYXBzLFxuICAgICAgICAgICAgZm9udFNpemU6IHRoaXMuZGltZW5zaW9uVG9rZW5WYWx1ZVRvQ1NTKHR5cG9ncmFwaHkuZm9udFNpemUsIGFsbFRva2Vucywgb3B0aW9ucyksXG4gICAgICAgICAgICBsaW5lSGVpZ2h0OiB0eXBvZ3JhcGh5LmxpbmVIZWlnaHRcbiAgICAgICAgICAgICAgICA/IHRoaXMuZGltZW5zaW9uVG9rZW5WYWx1ZVRvQ1NTKHR5cG9ncmFwaHkubGluZUhlaWdodCwgYWxsVG9rZW5zLCBvcHRpb25zKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkXG4gICAgICAgIH07XG4gICAgICAgIC8vIEZvcm1hbCBDU1MgZGVmaW5pdGlvbjogZm9udC1zdHlsZSwgZm9udC12YXJpYW50LCBmb250LXdlaWdodCwgZm9udC1zdHJldGNoLCBmb250LXNpemUsIGxpbmUtaGVpZ2h0LCBhbmQgZm9udC1mYW1pbHkuXG4gICAgICAgIC8vIEV4YW1wbGU6IHNtYWxsLWNhcHMgYm9sZCAyNHB4LzFyZW0gXCJXaW5nZGluZ3NcIlxuICAgICAgICBjb25zdCBmcmFnbWVudENhcHMgPSBkYXRhLmNhcHMgPyAnc21hbGwtY2FwcyAnIDogJyc7XG4gICAgICAgIGNvbnN0IGZyYWdtZW50V2VpZ2h0ID0gZGF0YS5mb250V2VpZ2h0O1xuICAgICAgICBjb25zdCBmcmFnbWVudFNpemUgPSBkYXRhLmZvbnRTaXplO1xuICAgICAgICBjb25zdCBmcmFnbWVudExpbmVIZWlnaHQgPSBkYXRhLmxpbmVIZWlnaHQ7XG4gICAgICAgIGNvbnN0IGZyYWdtZW50U2l6ZUFuZExpbmVIZWlnaHQgPSBkYXRhLmxpbmVIZWlnaHQgPyBgJHtmcmFnbWVudFNpemV9LyR7ZnJhZ21lbnRMaW5lSGVpZ2h0fWAgOiBmcmFnbWVudFNpemU7XG4gICAgICAgIGNvbnN0IGZyYWdtZW50RmFtaWx5ID0gZm9udEZhbWlseVJlZmVyZW5jZSA/IGRhdGEuZm9udEZhbWlseSA6IGBcXFwiJHtkYXRhLmZvbnRGYW1pbHl9XFxcImA7XG4gICAgICAgIHJldHVybiBgJHtmcmFnbWVudENhcHN9JHtmcmFnbWVudFdlaWdodH0gJHtmcmFnbWVudFNpemVBbmRMaW5lSGVpZ2h0fSAke2ZyYWdtZW50RmFtaWx5fWA7XG4gICAgfVxuICAgIHN0YXRpYyBib3JkZXJTdHlsZVRvQ1NTKGJvcmRlclN0eWxlKSB7XG4gICAgICAgIHN3aXRjaCAoYm9yZGVyU3R5bGUpIHtcbiAgICAgICAgICAgIGNhc2Ugc2RrX2V4cG9ydGVyc18xLkJvcmRlclN0eWxlLmRhc2hlZDpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2Rhc2hlZCc7XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5Cb3JkZXJTdHlsZS5kb3R0ZWQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdkb3R0ZWQnO1xuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuQm9yZGVyU3R5bGUuc29saWQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdzb2xpZCc7XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5Cb3JkZXJTdHlsZS5ncm9vdmU6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdncm9vdmUnO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3NvbGlkJztcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGF0aWMgYm9yZGVyUG9zaXRpb25Ub0NTUyhib3JkZXJQb3NpdGlvbikge1xuICAgICAgICBzd2l0Y2ggKGJvcmRlclBvc2l0aW9uKSB7XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5Cb3JkZXJQb3NpdGlvbi5jZW50ZXI6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdjZW50ZXInO1xuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuQm9yZGVyUG9zaXRpb24uaW5zaWRlOlxuICAgICAgICAgICAgICAgIHJldHVybiAnaW5zaWRlJztcbiAgICAgICAgICAgIGNhc2Ugc2RrX2V4cG9ydGVyc18xLkJvcmRlclBvc2l0aW9uLm91dHNpZGU6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdvdXRzaWRlJztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdvdXRzaWRlJztcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGF0aWMgdW5pdFRvQ1NTKHVuaXQpIHtcbiAgICAgICAgc3dpdGNoICh1bml0KSB7XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5Vbml0LnBlcmNlbnQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuICclJztcbiAgICAgICAgICAgIGNhc2Ugc2RrX2V4cG9ydGVyc18xLlVuaXQucGl4ZWxzOlxuICAgICAgICAgICAgICAgIHJldHVybiAncHgnO1xuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuVW5pdC5yZW06XG4gICAgICAgICAgICAgICAgcmV0dXJuICdyZW0nO1xuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuVW5pdC5yYXc6XG4gICAgICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuVW5pdC5tczpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ21zJztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdweCc7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3RhdGljIHRleHRDYXNlVG9DU1ModGV4dENhc2UpIHtcbiAgICAgICAgc3dpdGNoICh0ZXh0Q2FzZSkge1xuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuVGV4dENhc2Uub3JpZ2luYWw6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdub25lJztcbiAgICAgICAgICAgIGNhc2Ugc2RrX2V4cG9ydGVyc18xLlRleHRDYXNlLnVwcGVyOlxuICAgICAgICAgICAgICAgIHJldHVybiAndXBwZXJjYXNlJztcbiAgICAgICAgICAgIGNhc2Ugc2RrX2V4cG9ydGVyc18xLlRleHRDYXNlLmxvd2VyOlxuICAgICAgICAgICAgICAgIHJldHVybiAnbG93ZXJjYXNlJztcbiAgICAgICAgICAgIGNhc2Ugc2RrX2V4cG9ydGVyc18xLlRleHRDYXNlLmNhbWVsOlxuICAgICAgICAgICAgICAgIHJldHVybiAnY2FwaXRhbGl6ZSc7XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5UZXh0Q2FzZS5zbWFsbENhcHM6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdzbWFsbC1jYXBzJztcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGF0aWMgdGV4dERlY29yYXRpb25Ub0NTUyh0ZXh0RGVjb3JhdGlvbikge1xuICAgICAgICBzd2l0Y2ggKHRleHREZWNvcmF0aW9uKSB7XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5UZXh0RGVjb3JhdGlvbi5vcmlnaW5hbDpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ25vbmUnO1xuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuVGV4dERlY29yYXRpb24udW5kZXJsaW5lOlxuICAgICAgICAgICAgICAgIHJldHVybiAndW5kZXJsaW5lJztcbiAgICAgICAgICAgIGNhc2Ugc2RrX2V4cG9ydGVyc18xLlRleHREZWNvcmF0aW9uLnN0cmlrZXRocm91Z2g6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdsaW5lLXRocm91Z2gnO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5DU1NIZWxwZXIgPSBDU1NIZWxwZXI7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ29sb3JIZWxwZXIgPSB2b2lkIDA7XG5jb25zdCBDb2xvckZvcm1hdF8xID0gcmVxdWlyZShcIi4uL2VudW1zL0NvbG9yRm9ybWF0XCIpO1xuY29uc3QgVG9rZW5IZWxwZXJfMSA9IHJlcXVpcmUoXCIuL1Rva2VuSGVscGVyXCIpO1xuLyoqIEEgdXRpbGl0eSBjbGFzcyB0byBoZWxwIHdpdGggdHJhbnNmb3JtYXRpb24gb2YgY29sb3JzIHRvIHZhcmlvdXMgZm9ybWF0cyAqL1xuY2xhc3MgQ29sb3JIZWxwZXIge1xuICAgIC8qKlxuICAgICAqIEJlaGF2ZXMgbGlrZSBhIG5vcm1hbCBjb2xvciBmb3JtYXR0ZXIuIEhvd2V2ZXIsIGlmIHRoZSBjb2xvciBpcyByZWZlcmVuY2UsIGl0IHJldHVybnMgdGhlIHZhcmlhYmxlIG5hbWUgaW5zdGVhZCBvZiB0aGUgZm9ybWF0dGVkIGNvbG9yLlxuICAgICAqIFByZWNpc2UgYmVoYXZpb3IgaXMgYXMgZm9sbG93czpcbiAgICAgKiAtIElmIHRoZSBjb2xvciBpcyBmdWxsIHJlZmVyZW5jZSwgcmV0dXJucyB0aGUgdmFyaWFibGUgbmFtZVxuICAgICAqIC0gSWYgdGhlIGNvbG9yIGlzIHBhcnRpYWwgcmVmZXJlbmNlLCByZXR1cm5zIHRoZSBmb3JtYXR0ZWQgY29sb3Igd2l0aCByZWZlcmVuY2VzIHdoZXJlIHBvc3NpYmxlIGFuZCByYXcgdmFsdWVzIHdoZXJlIG5vdFxuICAgICAqIC0gT25seSBzdXBwb3J0ZWQgcGFydGlhbCByZWZlcmVuY2UgZm9ybWF0cyBhcmUgcmdiLCByZ2JhLCBzbWFydFJnYlxuICAgICAqIC0gVmFyaWFibGUgbmFtZXMgYXJlIGdlbmVyYXRlZCBieSB0aGUgcHJvdmlkZWQgZnVuY3Rpb25zXG4gICAgICovXG4gICAgc3RhdGljIGZvcm1hdHRlZENvbG9yT3JWYXJpYWJsZU5hbWUoY29sb3IsIGFsbFRva2Vucywgb3B0aW9ucykge1xuICAgICAgICBsZXQgZnVsbFJlZmVyZW5jZU5hbWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIGxldCBjb2xvclJlZmVyZW5jZU5hbWUgPSBudWxsO1xuICAgICAgICBsZXQgb3BhY2l0eVJlZmVyZW5jZU5hbWUgPSBudWxsO1xuICAgICAgICAvLyBDaGVjayByZWZlcmVuY2VzIGZpcnN0XG4gICAgICAgIGNvbnN0IGZ1bGxUb2tlbiA9ICgwLCBUb2tlbkhlbHBlcl8xLnN1cmVPcHRpb25hbFJlZmVyZW5jZSkoY29sb3IucmVmZXJlbmNlZFRva2VuSWQsIGFsbFRva2Vucywgb3B0aW9ucy5hbGxvd1JlZmVyZW5jZXMpO1xuICAgICAgICBpZiAoZnVsbFRva2VuKSB7XG4gICAgICAgICAgICBmdWxsUmVmZXJlbmNlTmFtZSA9IG9wdGlvbnMudG9rZW5Ub1ZhcmlhYmxlUmVmKGZ1bGxUb2tlbik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBjb2xvclRva2VuID0gKDAsIFRva2VuSGVscGVyXzEuc3VyZU9wdGlvbmFsUmVmZXJlbmNlKShjb2xvci5jb2xvci5yZWZlcmVuY2VkVG9rZW5JZCwgYWxsVG9rZW5zLCBvcHRpb25zLmFsbG93UmVmZXJlbmNlcyk7XG4gICAgICAgICAgICBpZiAoY29sb3JUb2tlbikge1xuICAgICAgICAgICAgICAgIGNvbG9yUmVmZXJlbmNlTmFtZSA9IG9wdGlvbnMudG9rZW5Ub1ZhcmlhYmxlUmVmKGNvbG9yVG9rZW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgb3BhY2l0eVRva2VuID0gKDAsIFRva2VuSGVscGVyXzEuc3VyZU9wdGlvbmFsUmVmZXJlbmNlKShjb2xvci5vcGFjaXR5LnJlZmVyZW5jZWRUb2tlbklkLCBhbGxUb2tlbnMsIG9wdGlvbnMuYWxsb3dSZWZlcmVuY2VzKTtcbiAgICAgICAgICAgIGlmIChvcGFjaXR5VG9rZW4pIHtcbiAgICAgICAgICAgICAgICBvcGFjaXR5UmVmZXJlbmNlTmFtZSA9IG9wdGlvbnMudG9rZW5Ub1ZhcmlhYmxlUmVmKG9wYWNpdHlUb2tlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgdGhlIGZ1bGwgdmFsdWUgaXMgcmVmZXJlbmNlLCByZXR1cm4gdGhlIHZhcmlhYmxlIG5hbWVcbiAgICAgICAgaWYgKGZ1bGxSZWZlcmVuY2VOYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVsbFJlZmVyZW5jZU5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgdGhlcmUgYXJlIG5vIHJlZmVyZW5jZXMsIGZvcm1hdCB0aGUgY29sb3IgcmF3XG4gICAgICAgIGlmICghZnVsbFJlZmVyZW5jZU5hbWUgJiYgIWNvbG9yUmVmZXJlbmNlTmFtZSAmJiAhb3BhY2l0eVJlZmVyZW5jZU5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZvcm1hdHRlZENvbG9yKGNvbG9yLCBvcHRpb25zLmNvbG9yRm9ybWF0LCBvcHRpb25zLmRlY2ltYWxzKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiB0aGVyZSBhcmUgcGFydGlhbCByZWZlcmVuY2VzLCB3ZSdsbCB1c2UgdGhlIHJlZmVyZW5jZXMgd2hlcmUgcG9zc2libGUgYW5kIHJldHVybiB0aGUgcmF3IGZvcm1hdCBmb3IgdGhlIHJlc3RcbiAgICAgICAgc3dpdGNoIChvcHRpb25zLmNvbG9yRm9ybWF0KSB7XG4gICAgICAgICAgICBjYXNlIENvbG9yRm9ybWF0XzEuQ29sb3JGb3JtYXQucmdiOlxuICAgICAgICAgICAgY2FzZSBDb2xvckZvcm1hdF8xLkNvbG9yRm9ybWF0LnJnYmE6XG4gICAgICAgICAgICBjYXNlIENvbG9yRm9ybWF0XzEuQ29sb3JGb3JtYXQuc21hcnRSZ2JhOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbG9yVG9SZ2Iob3B0aW9ucy5jb2xvckZvcm1hdCwgdGhpcy5ub3JtYWxpemVkSW50Q29sb3IoY29sb3IpLCBjb2xvci5vcGFjaXR5Lm1lYXN1cmUsIG9wdGlvbnMuZGVjaW1hbHMsIGNvbG9yUmVmZXJlbmNlTmFtZSwgb3BhY2l0eVJlZmVyZW5jZU5hbWUpO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5mb3JtYXR0ZWRDb2xvcihjb2xvciwgb3B0aW9ucy5jb2xvckZvcm1hdCwgb3B0aW9ucy5kZWNpbWFscyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogRm9ybWF0cyBTdXBlcm5vdmEgY29sb3IgdG9rZW4gdmFsdWUgdG8gYSBzdHJpbmcgYmFzZWQgb24gdGhlIHNlbGVjdGVkIGZvcm1hdC4gRm9yIGZyYWN0aW9uYWwgZm9ybWF0cywgdGhlIG51bWJlciBvZiBkZWNpbWFscyBjYW4gYmUgc3BlY2lmaWVkLlxuICAgICAqL1xuICAgIHN0YXRpYyBmb3JtYXR0ZWRDb2xvcihjb2xvciwgZm9ybWF0LCBkZWNpbWFscyA9IDMpIHtcbiAgICAgICAgc3dpdGNoIChmb3JtYXQpIHtcbiAgICAgICAgICAgIGNhc2UgQ29sb3JGb3JtYXRfMS5Db2xvckZvcm1hdC5oZXg2OlxuICAgICAgICAgICAgY2FzZSBDb2xvckZvcm1hdF8xLkNvbG9yRm9ybWF0LmhleDg6XG4gICAgICAgICAgICBjYXNlIENvbG9yRm9ybWF0XzEuQ29sb3JGb3JtYXQuaGFzaEhleDY6XG4gICAgICAgICAgICBjYXNlIENvbG9yRm9ybWF0XzEuQ29sb3JGb3JtYXQuaGFzaEhleDg6XG4gICAgICAgICAgICBjYXNlIENvbG9yRm9ybWF0XzEuQ29sb3JGb3JtYXQuc21hcnRIZXg6XG4gICAgICAgICAgICBjYXNlIENvbG9yRm9ybWF0XzEuQ29sb3JGb3JtYXQuc21hcnRIYXNoSGV4OlxuICAgICAgICAgICAgY2FzZSBDb2xvckZvcm1hdF8xLkNvbG9yRm9ybWF0LmFyZ2JJbnQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29sb3JUb0hleChmb3JtYXQsIHRoaXMubm9ybWFsaXplZEludENvbG9yKGNvbG9yKSwgY29sb3Iub3BhY2l0eS5tZWFzdXJlKTtcbiAgICAgICAgICAgIGNhc2UgQ29sb3JGb3JtYXRfMS5Db2xvckZvcm1hdC5yZ2I6XG4gICAgICAgICAgICBjYXNlIENvbG9yRm9ybWF0XzEuQ29sb3JGb3JtYXQucmdiYTpcbiAgICAgICAgICAgIGNhc2UgQ29sb3JGb3JtYXRfMS5Db2xvckZvcm1hdC5zbWFydFJnYmE6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29sb3JUb1JnYihmb3JtYXQsIHRoaXMubm9ybWFsaXplZEludENvbG9yKGNvbG9yKSwgY29sb3Iub3BhY2l0eS5tZWFzdXJlLCBkZWNpbWFscywgbnVsbCwgbnVsbCk7XG4gICAgICAgICAgICBjYXNlIENvbG9yRm9ybWF0XzEuQ29sb3JGb3JtYXQuaHNsOlxuICAgICAgICAgICAgY2FzZSBDb2xvckZvcm1hdF8xLkNvbG9yRm9ybWF0LmhzbGE6XG4gICAgICAgICAgICBjYXNlIENvbG9yRm9ybWF0XzEuQ29sb3JGb3JtYXQuc21hcnRIc2xhOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbG9yVG9Ic2woZm9ybWF0LCB0aGlzLm5vcm1hbGl6ZWRGcmFjdGlvbmFsQ29sb3IoY29sb3IpLCBjb2xvci5vcGFjaXR5Lm1lYXN1cmUsIGRlY2ltYWxzKTtcbiAgICAgICAgICAgIGNhc2UgQ29sb3JGb3JtYXRfMS5Db2xvckZvcm1hdC5zbWFydFVJQ29sb3I6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29sb3JUb1VJQ29sb3IodGhpcy5ub3JtYWxpemVkSW50Q29sb3IoY29sb3IpLCBjb2xvci5vcGFjaXR5Lm1lYXN1cmUsIGRlY2ltYWxzKTtcbiAgICAgICAgICAgIGNhc2UgQ29sb3JGb3JtYXRfMS5Db2xvckZvcm1hdC5va2xjaDpcbiAgICAgICAgICAgIGNhc2UgQ29sb3JGb3JtYXRfMS5Db2xvckZvcm1hdC5va2xjaGE6XG4gICAgICAgICAgICBjYXNlIENvbG9yRm9ybWF0XzEuQ29sb3JGb3JtYXQuc21hcnRPa2xjaDpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb2xvclRvT2tsY2goZm9ybWF0LCB0aGlzLm5vcm1hbGl6ZWRJbnRDb2xvcihjb2xvciksIGNvbG9yLm9wYWNpdHkubWVhc3VyZSwgZGVjaW1hbHMpO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb2xvclRvSGV4KENvbG9yRm9ybWF0XzEuQ29sb3JGb3JtYXQuc21hcnRIYXNoSGV4LCB0aGlzLm5vcm1hbGl6ZWRJbnRDb2xvcihjb2xvciksIGNvbG9yLm9wYWNpdHkubWVhc3VyZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gQ29udmVydCBjb2xvciB0byByZ2JcbiAgICBzdGF0aWMgY29sb3JUb1JnYihmb3JtYXQsIGNvbG9yLCBhbHBoYSwgZGVjaW1hbHMsIGNvbG9yUmVmUmVwbGFjZSwgb3BhY2l0eVJlZlJlcGxhY2UpIHtcbiAgICAgICAgbGV0IHJlc3VsdGluZ1JnYjtcbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gQ29sb3JGb3JtYXRfMS5Db2xvckZvcm1hdC5yZ2JhIHx8IChmb3JtYXQgPT09IENvbG9yRm9ybWF0XzEuQ29sb3JGb3JtYXQuc21hcnRSZ2JhICYmIGFscGhhIDwgMSkpIHtcbiAgICAgICAgICAgIHJlc3VsdGluZ1JnYiA9IGByZ2JhKCR7Y29sb3JSZWZSZXBsYWNlID8gY29sb3JSZWZSZXBsYWNlIDogYCR7Y29sb3Iucn0sICR7Y29sb3IuZ30sICR7Y29sb3IuYn1gfSwgJHtvcGFjaXR5UmVmUmVwbGFjZSA/IG9wYWNpdHlSZWZSZXBsYWNlIDogdGhpcy5yb3VuZFRvRGVjaW1hbHMoYWxwaGEsIGRlY2ltYWxzKX0pYDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdGluZ1JnYiA9IGByZ2IoJHtjb2xvclJlZlJlcGxhY2UgPyBjb2xvclJlZlJlcGxhY2UgOiBgJHtjb2xvci5yfSwgJHtjb2xvci5nfSwgJHtjb2xvci5ifWB9KWA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdGluZ1JnYjtcbiAgICB9XG4gICAgLy8gQ29udmVydCBjb2xvciB0byBoZXhcbiAgICBzdGF0aWMgY29sb3JUb0hleChmb3JtYXQsIGNvbG9yLCBhbHBoYSkge1xuICAgICAgICAvLyBBbHdheXMgbmVlZCBoZXg2XG4gICAgICAgIGxldCByZXN1bHRpbmdIZXggPSBgJHt0aGlzLnBIZXgoY29sb3Iucil9JHt0aGlzLnBIZXgoY29sb3IuZyl9JHt0aGlzLnBIZXgoY29sb3IuYil9YDtcbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gQ29sb3JGb3JtYXRfMS5Db2xvckZvcm1hdC5oZXg4IHx8XG4gICAgICAgICAgICBmb3JtYXQgPT09IENvbG9yRm9ybWF0XzEuQ29sb3JGb3JtYXQuaGFzaEhleDggfHxcbiAgICAgICAgICAgIChmb3JtYXQgPT09IENvbG9yRm9ybWF0XzEuQ29sb3JGb3JtYXQuc21hcnRIZXggJiYgYWxwaGEgPCAxKSB8fFxuICAgICAgICAgICAgKGZvcm1hdCA9PT0gQ29sb3JGb3JtYXRfMS5Db2xvckZvcm1hdC5zbWFydEhhc2hIZXggJiYgYWxwaGEgPCAxKSkge1xuICAgICAgICAgICAgLy8gQWRkIGFscGhhIGZvciA4LWZvcm1hdCB0byB0aGUgZW5kXG4gICAgICAgICAgICByZXN1bHRpbmdIZXggKz0gYCR7dGhpcy5wSGV4KE1hdGgucm91bmQoYWxwaGEgKiAyNTUpKX1gO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmb3JtYXQgPT09IENvbG9yRm9ybWF0XzEuQ29sb3JGb3JtYXQuYXJnYkludCkge1xuICAgICAgICAgICAgLy8gRm9ybWF0IGFzIEFSR0IgaW50IOKAkyBlLmcuIENvbG9yKDB4MDBGRkZGRkYpXG4gICAgICAgICAgICByZXN1bHRpbmdIZXggPSBgQ29sb3IoMHgke3RoaXMucEhleChNYXRoLnJvdW5kKGFscGhhICogMjU1KSl9JHtyZXN1bHRpbmdIZXh9KWA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gQ29sb3JGb3JtYXRfMS5Db2xvckZvcm1hdC5oYXNoSGV4NiB8fCBmb3JtYXQgPT09IENvbG9yRm9ybWF0XzEuQ29sb3JGb3JtYXQuaGFzaEhleDggfHwgZm9ybWF0ID09PSBDb2xvckZvcm1hdF8xLkNvbG9yRm9ybWF0LnNtYXJ0SGFzaEhleCkge1xuICAgICAgICAgICAgLy8gQWRkIGhhc2ggZm9yIGhhc2gtZm9ybWF0XG4gICAgICAgICAgICByZXN1bHRpbmdIZXggPSBgIyR7cmVzdWx0aW5nSGV4fWA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdGluZ0hleDtcbiAgICB9XG4gICAgLy8gQ29udmVydCBjb2xvciB0byBIU0xcbiAgICBzdGF0aWMgY29sb3JUb0hzbChmb3JtYXQsIGNvbG9yLCBhbHBoYSwgZGVjaW1hbHMpIHtcbiAgICAgICAgLy8gQ2FsY3VsYXRlIEhTTCB2YWx1ZXNcbiAgICAgICAgY29uc3QgbWF4ID0gTWF0aC5tYXgoY29sb3IuciwgY29sb3IuZywgY29sb3IuYik7XG4gICAgICAgIGNvbnN0IG1pbiA9IE1hdGgubWluKGNvbG9yLnIsIGNvbG9yLmcsIGNvbG9yLmIpO1xuICAgICAgICBsZXQgaCA9IDA7XG4gICAgICAgIGxldCBzID0gMDtcbiAgICAgICAgbGV0IGwgPSAobWF4ICsgbWluKSAvIDI7XG4gICAgICAgIGlmIChtYXggPT09IG1pbikge1xuICAgICAgICAgICAgaCA9IHMgPSAwOyAvLyBhY2hyb21hdGljXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBkZWx0YSA9IG1heCAtIG1pbjtcbiAgICAgICAgICAgIHMgPSBsID4gMC41ID8gZGVsdGEgLyAoMiAtIG1heCAtIG1pbikgOiBkZWx0YSAvIChtYXggKyBtaW4pO1xuICAgICAgICAgICAgc3dpdGNoIChtYXgpIHtcbiAgICAgICAgICAgICAgICBjYXNlIGNvbG9yLnI6XG4gICAgICAgICAgICAgICAgICAgIGggPSAoY29sb3IuZyAtIGNvbG9yLmIpIC8gZGVsdGEgKyAoY29sb3IuZyA8IGNvbG9yLmIgPyA2IDogMCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgY29sb3IuZzpcbiAgICAgICAgICAgICAgICAgICAgaCA9IChjb2xvci5iIC0gY29sb3IucikgLyBkZWx0YSArIDI7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgY29sb3IuYjpcbiAgICAgICAgICAgICAgICAgICAgaCA9IChjb2xvci5yIC0gY29sb3IuZykgLyBkZWx0YSArIDQ7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaCAvPSA2O1xuICAgICAgICB9XG4gICAgICAgIGxldCByZXN1bHRpbmdIc2w7XG4gICAgICAgIGlmIChmb3JtYXQgPT09IENvbG9yRm9ybWF0XzEuQ29sb3JGb3JtYXQuaHNsYSB8fCAoZm9ybWF0ID09PSBDb2xvckZvcm1hdF8xLkNvbG9yRm9ybWF0LnNtYXJ0SHNsYSAmJiBhbHBoYSA8IDEpKSB7XG4gICAgICAgICAgICByZXN1bHRpbmdIc2wgPSBgaHNsYSgke01hdGgucm91bmQoaCAqIDM2MCl9JSwgJHtNYXRoLnJvdW5kKHMgKiAxMDApfSUsICR7TWF0aC5yb3VuZChsICogMTAwKX0lLCAke3RoaXMucm91bmRUb0RlY2ltYWxzKGFscGhhLCBkZWNpbWFscyl9KWA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXN1bHRpbmdIc2wgPSBgaHNsKCR7TWF0aC5yb3VuZChoICogMzYwKX0lLCAke01hdGgucm91bmQocyAqIDEwMCl9JSwgJHtNYXRoLnJvdW5kKGwgKiAxMDApfSUpYDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0aW5nSHNsO1xuICAgIH1cbiAgICAvLyBDb252ZXJ0IGNvbG9yIHRvIFVJQ29sb3IgdXNpbmcgYmFzZSBjb25zdHJ1Y3RvclxuICAgIHN0YXRpYyBjb2xvclRvVUlDb2xvcihjb2xvciwgYWxwaGEsIGRlY2ltYWxzID0gMykge1xuICAgICAgICBsZXQgcmVzdWx0aW5nVUlDb2xvciA9IGBVSUNvbG9yKHJnYjogMHgke3RoaXMucEhleChjb2xvci5yKX0ke3RoaXMucEhleChjb2xvci5nKX0ke3RoaXMucEhleChjb2xvci5iKX0pYDtcbiAgICAgICAgaWYgKGFscGhhIDwgMSkge1xuICAgICAgICAgICAgcmVzdWx0aW5nVUlDb2xvciArPSBgLndpdGhBbHBoYUNvbXBvbmVudCgke2FscGhhfSlgO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHRpbmdVSUNvbG9yO1xuICAgIH1cbiAgICAvLyBDb252ZXJ0IGNvbG9yIHRvIG5vcm1hbGl6ZWQgMC0yNTUgZm9ybWF0XG4gICAgc3RhdGljIG5vcm1hbGl6ZWRJbnRDb2xvcihjb2xvcikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcjogTWF0aC5yb3VuZChjb2xvci5jb2xvci5yKSxcbiAgICAgICAgICAgIGc6IE1hdGgucm91bmQoY29sb3IuY29sb3IuZyksXG4gICAgICAgICAgICBiOiBNYXRoLnJvdW5kKGNvbG9yLmNvbG9yLmIpXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8vIENvbnZlcnQgY29sb3IgdG8gbm9ybWFsaXplZCAwLTEgZm9ybWF0XG4gICAgc3RhdGljIG5vcm1hbGl6ZWRGcmFjdGlvbmFsQ29sb3IoY29sb3IsIGRlY2ltYWxzID0gMykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcjogdGhpcy5yb3VuZFRvRGVjaW1hbHMoY29sb3IuY29sb3IuciAvIDI1NSwgZGVjaW1hbHMpLFxuICAgICAgICAgICAgZzogQ29sb3JIZWxwZXIucm91bmRUb0RlY2ltYWxzKGNvbG9yLmNvbG9yLmcgLyAyNTUsIGRlY2ltYWxzKSxcbiAgICAgICAgICAgIGI6IENvbG9ySGVscGVyLnJvdW5kVG9EZWNpbWFscyhjb2xvci5jb2xvci5iIC8gMjU1LCBkZWNpbWFscylcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLy8gUm91bmQgaGFsZiBhd2F5IGZyb20gemVybyB0byBhIHNwZWNpZmljIG51bWJlciBvZiBkZWNpbWFsc1xuICAgIHN0YXRpYyByb3VuZFRvRGVjaW1hbHModmFsdWUsIGRlY2ltYWxzLCBmb3JjZVRyYWlsaW5nWmVybyA9IGZhbHNlKSB7XG4gICAgICAgIGNvbnN0IG11bHRpcGxpZXIgPSBNYXRoLnBvdygxMCwgZGVjaW1hbHMpO1xuICAgICAgICBjb25zdCByb3VuZGVkID0gTWF0aC5yb3VuZCh2YWx1ZSAqIG11bHRpcGxpZXIpIC8gbXVsdGlwbGllcjtcbiAgICAgICAgaWYgKGZvcmNlVHJhaWxpbmdaZXJvKSB7XG4gICAgICAgICAgICAvLyBDb252ZXJ0IHRvIHN0cmluZyB3aXRoIGZpeGVkIGRlY2ltYWxzIGFuZCBwYXJzZSBiYWNrIHRvIG51bWJlclxuICAgICAgICAgICAgcmV0dXJuIE51bWJlcihyb3VuZGVkLnRvRml4ZWQoZGVjaW1hbHMpKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBDb252ZXJ0IHRvIHN0cmluZyBhbmQgcGFyc2UgYmFjayB0byBudW1iZXIgdG8gcmVtb3ZlIHVubmVjZXNzYXJ5IHRyYWlsaW5nIHplcm9lc1xuICAgICAgICByZXR1cm4gcGFyc2VGbG9hdChyb3VuZGVkLnRvRml4ZWQoZGVjaW1hbHMpKTtcbiAgICB9XG4gICAgLy8gUmV0dXJuIGhleCB2YWx1ZSB3aXRoIGxlYWRpbmcgemVybyBpZiBoZXggaXMgc2luZ2xlIGRpZ2l0XG4gICAgc3RhdGljIHBIZXgodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlLnRvU3RyaW5nKDE2KS5wYWRTdGFydCgyLCBcIjBcIik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbnZlcnQgY29sb3IgdG8gT0tMQ0ggZm9ybWF0XG4gICAgICogSGFuZGxlcyB0aHJlZSBmb3JtYXRzOlxuICAgICAqIC0gb2tsY2g6IEFsd2F5cyB3aXRob3V0IGFscGhhXG4gICAgICogLSBva2xjaGE6IEFsd2F5cyB3aXRoIGFscGhhXG4gICAgICogLSBzbWFydE9rbGNoOiBXaXRoIGFscGhhIG9ubHkgd2hlbiBhbHBoYSA8IDFcbiAgICAgKi9cbiAgICBzdGF0aWMgY29sb3JUb09rbGNoKGZvcm1hdCwgY29sb3IsIGFscGhhLCBkZWNpbWFscykge1xuICAgICAgICAvLyBDb252ZXJ0IFJHQiB0byBPS0xDSFxuICAgICAgICBjb25zdCB7IGwsIGMsIGggfSA9IHRoaXMucmdiVG9Pa2xjaChjb2xvci5yLCBjb2xvci5nLCBjb2xvci5iKTtcbiAgICAgICAgLy8gRm9ybWF0IHRoZSBvdXRwdXQgc3RyaW5nIGJhc2VkIG9uIGZvcm1hdCBhbmQgYWxwaGFcbiAgICAgICAgc3dpdGNoIChmb3JtYXQpIHtcbiAgICAgICAgICAgIGNhc2UgQ29sb3JGb3JtYXRfMS5Db2xvckZvcm1hdC5va2xjaGE6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGBva2xjaCgke2x9JSAke2N9ICR7aH0gLyAke3RoaXMucm91bmRUb0RlY2ltYWxzKGFscGhhICogMTAwLCBkZWNpbWFscyl9JSlgO1xuICAgICAgICAgICAgY2FzZSBDb2xvckZvcm1hdF8xLkNvbG9yRm9ybWF0LnNtYXJ0T2tsY2g6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFscGhhIDwgMVxuICAgICAgICAgICAgICAgICAgICA/IGBva2xjaCgke2x9JSAke2N9ICR7aH0gLyAke3RoaXMucm91bmRUb0RlY2ltYWxzKGFscGhhICogMTAwLCBkZWNpbWFscyl9JSlgXG4gICAgICAgICAgICAgICAgICAgIDogYG9rbGNoKCR7bH0lICR7Y30gJHtofSlgO1xuICAgICAgICAgICAgY2FzZSBDb2xvckZvcm1hdF8xLkNvbG9yRm9ybWF0Lm9rbGNoOlxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gYG9rbGNoKCR7bH0lICR7Y30gJHtofSlgO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbnZlcnQgUkdCICgwLTI1NSkgdG8gT0tMQ0hcbiAgICAgKiBSZXR1cm5zIGxpZ2h0bmVzcyAoMC0xMDApLCBjaHJvbWEgKDAtMC40KSwgYW5kIGh1ZSAoMC0zNjApXG4gICAgICovXG4gICAgc3RhdGljIHJnYlRvT2tsY2gociwgZywgYikge1xuICAgICAgICAvLyBGaXJzdCBjb252ZXJ0IFJHQiAoMC0yNTUpIHRvIGxpbmVhciBSR0IgKDAtMSlcbiAgICAgICAgY29uc3QgbHIgPSB0aGlzLnNSR0J0b0xpbmVhcihyIC8gMjU1KTtcbiAgICAgICAgY29uc3QgbGcgPSB0aGlzLnNSR0J0b0xpbmVhcihnIC8gMjU1KTtcbiAgICAgICAgY29uc3QgbGIgPSB0aGlzLnNSR0J0b0xpbmVhcihiIC8gMjU1KTtcbiAgICAgICAgLy8gQ29udmVydCB0byBYWVogdXNpbmcgRDY1IGlsbHVtaW5hbnRcbiAgICAgICAgY29uc3QgeCA9IDAuNDEyNDU2NCAqIGxyICsgMC4zNTc1NzYxICogbGcgKyAwLjE4MDQzNzUgKiBsYjtcbiAgICAgICAgY29uc3QgeSA9IDAuMjEyNjcyOSAqIGxyICsgMC43MTUxNTIyICogbGcgKyAwLjA3MjE3NSAqIGxiO1xuICAgICAgICBjb25zdCB6ID0gMC4wMTkzMzM5ICogbHIgKyAwLjExOTE5MiAqIGxnICsgMC45NTAzMDQxICogbGI7XG4gICAgICAgIC8vIENvbnZlcnQgdG8gTE1TXG4gICAgICAgIGNvbnN0IGxtc19sID0gMC44MTg5MzMwMTAxICogeCArIDAuMzYxODY2NzQyNCAqIHkgLSAwLjEyODg1OTcxMzcgKiB6O1xuICAgICAgICBjb25zdCBsbXNfbSA9IDAuMDMyOTg0NTQzNiAqIHggKyAwLjkyOTMxMTg3MTUgKiB5ICsgMC4wMzYxNDU2Mzg3ICogejtcbiAgICAgICAgY29uc3QgbG1zX3MgPSAwLjA0ODIwMDMwMTggKiB4ICsgMC4yNjQzNjYyNjkxICogeSArIDAuNjMzODUxNzA3ICogejtcbiAgICAgICAgLy8gTm9uLWxpbmVhciBjb21wcmVzc2lvblxuICAgICAgICBjb25zdCBscCA9IE1hdGguY2JydChsbXNfbCk7XG4gICAgICAgIGNvbnN0IG1wID0gTWF0aC5jYnJ0KGxtc19tKTtcbiAgICAgICAgY29uc3Qgc3AgPSBNYXRoLmNicnQobG1zX3MpO1xuICAgICAgICAvLyBDb252ZXJ0IHRvIExhYidcbiAgICAgICAgY29uc3QgTCA9IDAuMjEwNDU0MjU1MyAqIGxwICsgMC43OTM2MTc3ODUgKiBtcCAtIDAuMDA0MDcyMDQ2OCAqIHNwO1xuICAgICAgICBjb25zdCBsYWJfYSA9IDEuOTc3OTk4NDk1MSAqIGxwIC0gMi40Mjg1OTIyMDUgKiBtcCArIDAuNDUwNTkzNzA5OSAqIHNwO1xuICAgICAgICBjb25zdCBsYWJfYiA9IDAuMDI1OTA0MDM3MSAqIGxwICsgMC43ODI3NzE3NjYyICogbXAgLSAwLjgwODY3NTc2NiAqIHNwO1xuICAgICAgICAvLyBDb252ZXJ0IHRvIExDSFxuICAgICAgICBjb25zdCBDID0gTWF0aC5zcXJ0KGxhYl9hICogbGFiX2EgKyBsYWJfYiAqIGxhYl9iKTtcbiAgICAgICAgbGV0IGggPSAoTWF0aC5hdGFuMihsYWJfYiwgbGFiX2EpICogMTgwKSAvIE1hdGguUEk7XG4gICAgICAgIC8vIE5vcm1hbGl6ZSBodWUgdG8gMC0zNjBcbiAgICAgICAgaWYgKGggPCAwKSB7XG4gICAgICAgICAgICBoICs9IDM2MDtcbiAgICAgICAgfVxuICAgICAgICAvLyBDb252ZXJ0IEwgdG8gcGVyY2VudGFnZSBhbmQgcm91bmQgdmFsdWVzXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsOiB0aGlzLnJvdW5kVG9EZWNpbWFscyhMICogMTAwLCAyKSxcbiAgICAgICAgICAgIGM6IHRoaXMucm91bmRUb0RlY2ltYWxzKEMsIDMsIHRydWUpLFxuICAgICAgICAgICAgaDogdGhpcy5yb3VuZFRvRGVjaW1hbHMoaCwgMilcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29udmVydCBzUkdCIHRvIGxpbmVhciBSR0JcbiAgICAgKi9cbiAgICBzdGF0aWMgc1JHQnRvTGluZWFyKHgpIHtcbiAgICAgICAgcmV0dXJuIHggPD0gMC4wNDA0NSA/IHggLyAxMi45MiA6IE1hdGgucG93KCh4ICsgMC4wNTUpIC8gMS4wNTUsIDIuNCk7XG4gICAgfVxufVxuZXhwb3J0cy5Db2xvckhlbHBlciA9IENvbG9ySGVscGVyO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkZpbGVIZWxwZXIgPSB2b2lkIDA7XG5jb25zdCBzZGtfZXhwb3J0ZXJzXzEgPSByZXF1aXJlKFwiQHN1cGVybm92YWlvL3Nkay1leHBvcnRlcnNcIik7XG4vKiogQSB1dGlsaXR5IGNsYXNzIHRvIGhlbHAgd2l0aCBjcmVhdGlvbiBvZiBmaWxlcyBmb3IgU3VwZXJub3ZhIGV4cG9ydCByb3V0aW5lcyAqL1xuY2xhc3MgRmlsZUhlbHBlciB7XG4gICAgLyoqIENyZWF0ZXMgYSBuZXcgZmlsZSB0aGF0IHdpbGwgY29weSBpdHMgY29udGVudCBmcm9tIGEgcmVtb3RlIFVSTCB0byBhIHNwZWNpZmllZCBkZXN0aW5hdGlvbiAocGF0aCArIG5hbWUpICovXG4gICAgc3RhdGljIGNyZWF0ZUNvcHlSZW1vdGVGaWxlKHsgcmVsYXRpdmVQYXRoLCBmaWxlTmFtZSwgdXJsIH0pIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHBhdGg6IHJlbGF0aXZlUGF0aCxcbiAgICAgICAgICAgIG5hbWU6IGZpbGVOYW1lLFxuICAgICAgICAgICAgdHlwZTogc2RrX2V4cG9ydGVyc18xLk91dHB1dEZpbGVUeXBlLmNvcHlSZW1vdGVVcmwsXG4gICAgICAgICAgICB1cmw6IHVybFxuICAgICAgICB9O1xuICAgIH1cbiAgICAvKiogQ3JlYXRlcyBhIG5ldyBmaWxlIHRoYXQgd3JpdGUgaXRzIGNvbnRlbnQgdG8gYSBzcGVjaWZpZWQgZGVzdGluYXRpb24gKHBhdGggKyBuYW1lKSAqL1xuICAgIHN0YXRpYyBjcmVhdGVUZXh0RmlsZSh7IHJlbGF0aXZlUGF0aCwgZmlsZU5hbWUsIGNvbnRlbnQgfSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcGF0aDogcmVsYXRpdmVQYXRoLFxuICAgICAgICAgICAgbmFtZTogZmlsZU5hbWUsXG4gICAgICAgICAgICB0eXBlOiBzZGtfZXhwb3J0ZXJzXzEuT3V0cHV0RmlsZVR5cGUudGV4dCxcbiAgICAgICAgICAgIGNvbnRlbnQ6IGNvbnRlbnRcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLyoqIENyZWF0ZXMgYSBuZXcgZmlsZSB0aGF0IHdyaXRlIGl0cyBjb250ZW50IHRvIGEgc3BlY2lmaWVkIGRlc3RpbmF0aW9uIChwYXRoICsgbmFtZSkgKi9cbiAgICBzdGF0aWMgY3JlYXRlQmluYXJ5RmlsZSh7IHJlbGF0aXZlUGF0aCwgZmlsZU5hbWUsIGRhdGEgfSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcGF0aDogcmVsYXRpdmVQYXRoLFxuICAgICAgICAgICAgbmFtZTogZmlsZU5hbWUsXG4gICAgICAgICAgICB0eXBlOiBzZGtfZXhwb3J0ZXJzXzEuT3V0cHV0RmlsZVR5cGUuYmluYXJ5LFxuICAgICAgICAgICAgZGF0YTogZGF0YVxuICAgICAgICB9O1xuICAgIH1cbn1cbmV4cG9ydHMuRmlsZUhlbHBlciA9IEZpbGVIZWxwZXI7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRmlsZU5hbWVIZWxwZXIgPSB2b2lkIDA7XG5jb25zdCBTdHJpbmdDYXNlXzEgPSByZXF1aXJlKFwiLi4vZW51bXMvU3RyaW5nQ2FzZVwiKTtcbmNvbnN0IE5hbWluZ0hlbHBlcl8xID0gcmVxdWlyZShcIi4vTmFtaW5nSGVscGVyXCIpO1xuY2xhc3MgRmlsZU5hbWVIZWxwZXIge1xuICAgIC8qKlxuICAgICAqIEVuc3VyZXMgYSBmaWxlbmFtZSBoYXMgdGhlIGNvcnJlY3QgZXh0ZW5zaW9uXG4gICAgICovXG4gICAgc3RhdGljIGVuc3VyZUZpbGVFeHRlbnNpb24oZmlsZU5hbWUsIGV4dGVuc2lvbikge1xuICAgICAgICAvLyBFbnN1cmUgZXh0ZW5zaW9uIHN0YXJ0cyB3aXRoIGEgZG90XG4gICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRFeHRlbnNpb24gPSBleHRlbnNpb24uc3RhcnRzV2l0aChcIi5cIikgPyBleHRlbnNpb24gOiBgLiR7ZXh0ZW5zaW9ufWA7XG4gICAgICAgIGlmICghZmlsZU5hbWUudG9Mb3dlckNhc2UoKS5lbmRzV2l0aChub3JtYWxpemVkRXh0ZW5zaW9uLnRvTG93ZXJDYXNlKCkpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmlsZU5hbWUgKyBub3JtYWxpemVkRXh0ZW5zaW9uO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmaWxlTmFtZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVwbGFjZXMgZmlsZSBleHRlbnNpb25cbiAgICAgKi9cbiAgICBzdGF0aWMgcmVwbGFjZUZpbGVFeHRlbnNpb24oZmlsZU5hbWUsIG9sZEV4dCwgbmV3RXh0KSB7XG4gICAgICAgIC8vIEVuc3VyZSBleHRlbnNpb25zIHN0YXJ0IHdpdGggYSBkb3RcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZE9sZEV4dCA9IG9sZEV4dC5zdGFydHNXaXRoKFwiLlwiKSA/IG9sZEV4dCA6IGAuJHtvbGRFeHR9YDtcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZE5ld0V4dCA9IG5ld0V4dC5zdGFydHNXaXRoKFwiLlwiKSA/IG5ld0V4dCA6IGAuJHtuZXdFeHR9YDtcbiAgICAgICAgcmV0dXJuIGZpbGVOYW1lLnJlcGxhY2UobmV3IFJlZ0V4cChgJHtub3JtYWxpemVkT2xkRXh0fSRgKSwgbm9ybWFsaXplZE5ld0V4dCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGRlZmF1bHQgc3R5bGUgZmlsZSBuYW1lIGZvciBhIHRva2VuIHR5cGVcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0RGVmYXVsdFN0eWxlRmlsZU5hbWUodHlwZSwgZXh0ZW5zaW9uID0gXCIuY3NzXCIsIHN0cmluZ0Nhc2UgPSBTdHJpbmdDYXNlXzEuU3RyaW5nQ2FzZS5rZWJhYkNhc2UpIHtcbiAgICAgICAgY29uc3QgYmFzZU5hbWVzID0ge1xuICAgICAgICAgICAgQ29sb3I6IFwiY29sb3JcIixcbiAgICAgICAgICAgIFR5cG9ncmFwaHk6IFwidHlwb2dyYXBoeVwiLFxuICAgICAgICAgICAgRGltZW5zaW9uOiBcImRpbWVuc2lvblwiLFxuICAgICAgICAgICAgU2l6ZTogXCJzaXplXCIsXG4gICAgICAgICAgICBTcGFjZTogXCJzcGFjZVwiLFxuICAgICAgICAgICAgT3BhY2l0eTogXCJvcGFjaXR5XCIsXG4gICAgICAgICAgICBGb250U2l6ZTogXCJmb250LXNpemVcIixcbiAgICAgICAgICAgIExpbmVIZWlnaHQ6IFwibGluZS1oZWlnaHRcIixcbiAgICAgICAgICAgIExldHRlclNwYWNpbmc6IFwibGV0dGVyLXNwYWNpbmdcIixcbiAgICAgICAgICAgIFBhcmFncmFwaFNwYWNpbmc6IFwicGFyYWdyYXBoLXNwYWNpbmdcIixcbiAgICAgICAgICAgIEJvcmRlcldpZHRoOiBcImJvcmRlci13aWR0aFwiLFxuICAgICAgICAgICAgQm9yZGVyUmFkaXVzOiBcImJvcmRlci1yYWRpdXNcIixcbiAgICAgICAgICAgIER1cmF0aW9uOiBcImR1cmF0aW9uXCIsXG4gICAgICAgICAgICBaSW5kZXg6IFwiei1pbmRleFwiLFxuICAgICAgICAgICAgU2hhZG93OiBcInNoYWRvd1wiLFxuICAgICAgICAgICAgQm9yZGVyOiBcImJvcmRlclwiLFxuICAgICAgICAgICAgR3JhZGllbnQ6IFwiZ3JhZGllbnRcIixcbiAgICAgICAgICAgIFN0cmluZzogXCJzdHJpbmdcIixcbiAgICAgICAgICAgIFByb2R1Y3RDb3B5OiBcInByb2R1Y3QtY29weVwiLFxuICAgICAgICAgICAgRm9udEZhbWlseTogXCJmb250LWZhbWlseVwiLFxuICAgICAgICAgICAgRm9udFdlaWdodDogXCJmb250LXdlaWdodFwiLFxuICAgICAgICAgICAgVGV4dENhc2U6IFwidGV4dC1jYXNlXCIsXG4gICAgICAgICAgICBUZXh0RGVjb3JhdGlvbjogXCJ0ZXh0LWRlY29yYXRpb25cIixcbiAgICAgICAgICAgIFZpc2liaWxpdHk6IFwidmlzaWJpbGl0eVwiLFxuICAgICAgICAgICAgQmx1cjogXCJibHVyXCJcbiAgICAgICAgfTtcbiAgICAgICAgLy8gRW5zdXJlIHRoZSBleHRlbnNpb24gc3RhcnRzIHdpdGggYSBkb3RcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZEV4dGVuc2lvbiA9IGV4dGVuc2lvbi5zdGFydHNXaXRoKFwiLlwiKSA/IGV4dGVuc2lvbiA6IGAuJHtleHRlbnNpb259YDtcbiAgICAgICAgcmV0dXJuIE5hbWluZ0hlbHBlcl8xLk5hbWluZ0hlbHBlci5jb2RlU2FmZVZhcmlhYmxlTmFtZShiYXNlTmFtZXNbdHlwZV0sIHN0cmluZ0Nhc2UpICsgbm9ybWFsaXplZEV4dGVuc2lvbjtcbiAgICB9XG59XG5leHBvcnRzLkZpbGVOYW1lSGVscGVyID0gRmlsZU5hbWVIZWxwZXI7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuR2VuZXJhbEhlbHBlciA9IHZvaWQgMDtcbmNsYXNzIEdlbmVyYWxIZWxwZXIge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gaW5kZW50YXRpb24gc3RyaW5nIGJhc2VkIG9uIHRoZSBudW1iZXIgb2YgbGV2ZWxzIGFuZCB0eXBlXG4gICAgICogQHBhcmFtIHNwYWNlcyAtIE51bWJlciBvZiBzcGFjZXMgcGVyIGxldmVsIChkZWZhdWx0OiAyKVxuICAgICAqIEByZXR1cm5zIEluZGVudGF0aW9uIHN0cmluZ1xuICAgICAqL1xuICAgIHN0YXRpYyBpbmRlbnQoc3BhY2VzID0gMikge1xuICAgICAgICByZXR1cm4gJyAnLnJlcGVhdChNYXRoLm1heCgwLCBzcGFjZXMpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRm9ybWF0cyBhIGRpc2NsYWltZXIgdGV4dCBpbnRvIGEgSlNEb2MgY29tbWVudCBibG9ja1xuICAgICAqIEBwYXJhbSBkaXNjbGFpbWVyIC0gVGhlIGRpc2NsYWltZXIgdGV4dCB0byBmb3JtYXRcbiAgICAgKiBAcGFyYW0gY29udGVudCAtIFRoZSBjb250ZW50IHRvIGFwcGVuZCBhZnRlciB0aGUgZGlzY2xhaW1lclxuICAgICAqIEByZXR1cm5zIEZvcm1hdHRlZCBzdHJpbmcgd2l0aCBkaXNjbGFpbWVyIGNvbW1lbnQgYW5kIGNvbnRlbnRcbiAgICAgKi9cbiAgICBzdGF0aWMgYWRkRGlzY2xhaW1lcihkaXNjbGFpbWVyLCBjb250ZW50KSB7XG4gICAgICAgIGlmICghZGlzY2xhaW1lcikge1xuICAgICAgICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZm9ybWF0dGVkRGlzY2xhaW1lciA9IGRpc2NsYWltZXIucmVwbGFjZSgvXFxuL2csICdcXG4gKiAnKTtcbiAgICAgICAgcmV0dXJuIGAvKipcXG4gKiAke2Zvcm1hdHRlZERpc2NsYWltZXJ9IFxcbiAqL1xcblxcbiR7Y29udGVudH1gO1xuICAgIH1cbn1cbmV4cG9ydHMuR2VuZXJhbEhlbHBlciA9IEdlbmVyYWxIZWxwZXI7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuS290bGluSGVscGVyID0gZXhwb3J0cy5JbXBvcnRDb2xsZWN0b3IgPSBleHBvcnRzLkltcG9ydEZsYWcgPSB2b2lkIDA7XG5jb25zdCBzZGtfZXhwb3J0ZXJzXzEgPSByZXF1aXJlKFwiQHN1cGVybm92YWlvL3Nkay1leHBvcnRlcnNcIik7XG5jb25zdCBDb2xvckhlbHBlcl8xID0gcmVxdWlyZShcIi4vQ29sb3JIZWxwZXJcIik7XG5jb25zdCBUb2tlbkhlbHBlcl8xID0gcmVxdWlyZShcIi4vVG9rZW5IZWxwZXJcIik7XG5jb25zdCBHZW5lcmFsSGVscGVyXzEgPSByZXF1aXJlKFwiLi9HZW5lcmFsSGVscGVyXCIpO1xuY29uc3QgTmFtaW5nSGVscGVyXzEgPSByZXF1aXJlKFwiLi9OYW1pbmdIZWxwZXJcIik7XG5jb25zdCBTdHJpbmdDYXNlXzEgPSByZXF1aXJlKFwiLi4vZW51bXMvU3RyaW5nQ2FzZVwiKTtcbmNvbnN0IENvbG9yRm9ybWF0XzEgPSByZXF1aXJlKFwiLi4vZW51bXMvQ29sb3JGb3JtYXRcIik7XG4vLyAtLS0gLS0tIC0tLSAtLS0gLS0tIC0tLSAtLS0gLS0tIC0tLSAtLS0gLS0tIC0tLSAtLS0gLS0tIC0tLSAtLS0gLS0tIC0tLSAtLS0gLS0tIC0tLSAtLS0gLS0tIC0tLSAtLS0gLS0tIC0tLVxuLy8gTUFSSzogLSBJbXBvcnRzICYgZmxhZyBlbnVtXG52YXIgSW1wb3J0RmxhZztcbihmdW5jdGlvbiAoSW1wb3J0RmxhZykge1xuICAgIEltcG9ydEZsYWdbSW1wb3J0RmxhZ1tcIkNvbG9yXCJdID0gMF0gPSBcIkNvbG9yXCI7XG4gICAgSW1wb3J0RmxhZ1tJbXBvcnRGbGFnW1wiRHBcIl0gPSAxXSA9IFwiRHBcIjtcbiAgICBJbXBvcnRGbGFnW0ltcG9ydEZsYWdbXCJTcFwiXSA9IDJdID0gXCJTcFwiO1xuICAgIEltcG9ydEZsYWdbSW1wb3J0RmxhZ1tcIkVtXCJdID0gM10gPSBcIkVtXCI7XG4gICAgSW1wb3J0RmxhZ1tJbXBvcnRGbGFnW1wiT2Zmc2V0XCJdID0gNF0gPSBcIk9mZnNldFwiO1xuICAgIEltcG9ydEZsYWdbSW1wb3J0RmxhZ1tcIkJydXNoXCJdID0gNV0gPSBcIkJydXNoXCI7XG4gICAgSW1wb3J0RmxhZ1tJbXBvcnRGbGFnW1wiVGlsZU1vZGVcIl0gPSA2XSA9IFwiVGlsZU1vZGVcIjtcbiAgICBJbXBvcnRGbGFnW0ltcG9ydEZsYWdbXCJTaGFkb3dcIl0gPSA3XSA9IFwiU2hhZG93XCI7XG4gICAgSW1wb3J0RmxhZ1tJbXBvcnRGbGFnW1wiQm9yZGVyU3Ryb2tlXCJdID0gOF0gPSBcIkJvcmRlclN0cm9rZVwiO1xuICAgIEltcG9ydEZsYWdbSW1wb3J0RmxhZ1tcIk1vZGlmaWVyXCJdID0gOV0gPSBcIk1vZGlmaWVyXCI7XG4gICAgSW1wb3J0RmxhZ1tJbXBvcnRGbGFnW1wiQmx1clwiXSA9IDEwXSA9IFwiQmx1clwiO1xuICAgIEltcG9ydEZsYWdbSW1wb3J0RmxhZ1tcIkZvbnRcIl0gPSAxMV0gPSBcIkZvbnRcIjtcbiAgICBJbXBvcnRGbGFnW0ltcG9ydEZsYWdbXCJGb250RmFtaWx5XCJdID0gMTJdID0gXCJGb250RmFtaWx5XCI7XG4gICAgSW1wb3J0RmxhZ1tJbXBvcnRGbGFnW1wiRm9udFdlaWdodFwiXSA9IDEzXSA9IFwiRm9udFdlaWdodFwiO1xuICAgIEltcG9ydEZsYWdbSW1wb3J0RmxhZ1tcIlRleHREZWNvcmF0aW9uXCJdID0gMTRdID0gXCJUZXh0RGVjb3JhdGlvblwiO1xuICAgIEltcG9ydEZsYWdbSW1wb3J0RmxhZ1tcIlRleHRTdHlsZVwiXSA9IDE1XSA9IFwiVGV4dFN0eWxlXCI7XG4gICAgSW1wb3J0RmxhZ1tJbXBvcnRGbGFnW1wiUlwiXSA9IDE2XSA9IFwiUlwiO1xufSkoSW1wb3J0RmxhZyB8fCAoZXhwb3J0cy5JbXBvcnRGbGFnID0gSW1wb3J0RmxhZyA9IHt9KSk7XG4vKiogQ29sbGVjdCBmbGFncyB3aGlsZSBnZW5lcmF0aW5nIGxpdGVyYWxzLCB0dXJuIGludG8gaW1wb3J0cyBhdCB0aGUgZW5kICovXG5jbGFzcyBJbXBvcnRDb2xsZWN0b3Ige1xuICAgIGNvbnN0cnVjdG9yKHJQYWNrYWdlTmFtZSkge1xuICAgICAgICB0aGlzLnJQYWNrYWdlTmFtZSA9IHJQYWNrYWdlTmFtZTtcbiAgICAgICAgdGhpcy5pbXBvcnRGbGFncyA9IG5ldyBTZXQoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWFya3MgYSBzcGVjaWZpYyBmZWF0dXJlIHRvIGJlIGltcG9ydGVkLlxuICAgICAqIEBwYXJhbSBmbGFnc1xuICAgICAqL1xuICAgIHVzZSguLi5mbGFncykge1xuICAgICAgICBmbGFncy5mb3JFYWNoKCh4KSA9PiB0aGlzLmltcG9ydEZsYWdzLmFkZCh4KSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE91dHB1dCBhIGxpc3Qgb2YgYWxsIHNvcnRlZCBpbXBvcnQgbGl0ZXJhbHMgbmVlZGVkIGZvciB0aGUgc3BlY2lmaWVkIHRva2Vucy5cbiAgICAgKi9cbiAgICBhbGxJbXBvcnRzKCkge1xuICAgICAgICBjb25zdCBpbXBvcnRMaXN0ID0gW107XG4gICAgICAgIGlmICh0aGlzLnJQYWNrYWdlTmFtZSAmJiB0aGlzLmltcG9ydEZsYWdzLmhhcyhJbXBvcnRGbGFnLlIpKSB7XG4gICAgICAgICAgICBpbXBvcnRMaXN0LnB1c2goYGltcG9ydCAke3RoaXMuclBhY2thZ2VOYW1lfS5SYCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaW1wb3J0RmxhZ3MuaGFzKEltcG9ydEZsYWcuQ29sb3IpKVxuICAgICAgICAgICAgaW1wb3J0TGlzdC5wdXNoKFwiaW1wb3J0IGFuZHJvaWR4LmNvbXBvc2UudWkuZ3JhcGhpY3MuQ29sb3JcIik7XG4gICAgICAgIGlmICh0aGlzLmltcG9ydEZsYWdzLmhhcyhJbXBvcnRGbGFnLkRwKSlcbiAgICAgICAgICAgIGltcG9ydExpc3QucHVzaChcImltcG9ydCBhbmRyb2lkeC5jb21wb3NlLnVpLnVuaXQuZHBcIik7XG4gICAgICAgIGlmICh0aGlzLmltcG9ydEZsYWdzLmhhcyhJbXBvcnRGbGFnLlNwKSlcbiAgICAgICAgICAgIGltcG9ydExpc3QucHVzaChcImltcG9ydCBhbmRyb2lkeC5jb21wb3NlLnVpLnVuaXQuc3BcIik7XG4gICAgICAgIGlmICh0aGlzLmltcG9ydEZsYWdzLmhhcyhJbXBvcnRGbGFnLkVtKSlcbiAgICAgICAgICAgIGltcG9ydExpc3QucHVzaChcImltcG9ydCBhbmRyb2lkeC5jb21wb3NlLnVpLnVuaXQuZW1cIik7XG4gICAgICAgIGlmICh0aGlzLmltcG9ydEZsYWdzLmhhcyhJbXBvcnRGbGFnLk9mZnNldCkpXG4gICAgICAgICAgICBpbXBvcnRMaXN0LnB1c2goXCJpbXBvcnQgYW5kcm9pZHguY29tcG9zZS51aS5nZW9tZXRyeS5PZmZzZXRcIik7XG4gICAgICAgIGlmICh0aGlzLmltcG9ydEZsYWdzLmhhcyhJbXBvcnRGbGFnLkJydXNoKSlcbiAgICAgICAgICAgIGltcG9ydExpc3QucHVzaChcImltcG9ydCBhbmRyb2lkeC5jb21wb3NlLnVpLmdyYXBoaWNzLkJydXNoXCIpO1xuICAgICAgICBpZiAodGhpcy5pbXBvcnRGbGFncy5oYXMoSW1wb3J0RmxhZy5UaWxlTW9kZSkpXG4gICAgICAgICAgICBpbXBvcnRMaXN0LnB1c2goXCJpbXBvcnQgYW5kcm9pZHguY29tcG9zZS51aS5ncmFwaGljcy5UaWxlTW9kZVwiKTtcbiAgICAgICAgaWYgKHRoaXMuaW1wb3J0RmxhZ3MuaGFzKEltcG9ydEZsYWcuU2hhZG93KSlcbiAgICAgICAgICAgIGltcG9ydExpc3QucHVzaChcImltcG9ydCBhbmRyb2lkeC5jb21wb3NlLnVpLmdyYXBoaWNzLlNoYWRvd1wiKTtcbiAgICAgICAgaWYgKHRoaXMuaW1wb3J0RmxhZ3MuaGFzKEltcG9ydEZsYWcuQm9yZGVyU3Ryb2tlKSlcbiAgICAgICAgICAgIGltcG9ydExpc3QucHVzaChcImltcG9ydCBhbmRyb2lkeC5jb21wb3NlLmZvdW5kYXRpb24uQm9yZGVyU3Ryb2tlXCIpO1xuICAgICAgICBpZiAodGhpcy5pbXBvcnRGbGFncy5oYXMoSW1wb3J0RmxhZy5Nb2RpZmllcikpIHtcbiAgICAgICAgICAgIGltcG9ydExpc3QucHVzaChcImltcG9ydCBhbmRyb2lkeC5jb21wb3NlLnVpLk1vZGlmaWVyXCIpO1xuICAgICAgICAgICAgaWYgKHRoaXMuaW1wb3J0RmxhZ3MuaGFzKEltcG9ydEZsYWcuQmx1cikpXG4gICAgICAgICAgICAgICAgaW1wb3J0TGlzdC5wdXNoKFwiaW1wb3J0IGFuZHJvaWR4LmNvbXBvc2UudWkuZHJhdy5ibHVyXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmltcG9ydEZsYWdzLmhhcyhJbXBvcnRGbGFnLkZvbnRGYW1pbHkpKVxuICAgICAgICAgICAgaW1wb3J0TGlzdC5wdXNoKFwiaW1wb3J0IGFuZHJvaWR4LmNvbXBvc2UudWkudGV4dC5mb250LkZvbnRGYW1pbHlcIik7XG4gICAgICAgIGlmICh0aGlzLmltcG9ydEZsYWdzLmhhcyhJbXBvcnRGbGFnLkZvbnQpKVxuICAgICAgICAgICAgaW1wb3J0TGlzdC5wdXNoKFwiaW1wb3J0IGFuZHJvaWR4LmNvbXBvc2UudWkudGV4dC5mb250LkZvbnRcIik7XG4gICAgICAgIGlmICh0aGlzLmltcG9ydEZsYWdzLmhhcyhJbXBvcnRGbGFnLkZvbnRXZWlnaHQpKVxuICAgICAgICAgICAgaW1wb3J0TGlzdC5wdXNoKFwiaW1wb3J0IGFuZHJvaWR4LmNvbXBvc2UudWkudGV4dC5mb250LkZvbnRXZWlnaHRcIik7XG4gICAgICAgIGlmICh0aGlzLmltcG9ydEZsYWdzLmhhcyhJbXBvcnRGbGFnLlRleHREZWNvcmF0aW9uKSlcbiAgICAgICAgICAgIGltcG9ydExpc3QucHVzaChcImltcG9ydCBhbmRyb2lkeC5jb21wb3NlLnVpLnRleHQuc3R5bGUuVGV4dERlY29yYXRpb25cIik7XG4gICAgICAgIGlmICh0aGlzLmltcG9ydEZsYWdzLmhhcyhJbXBvcnRGbGFnLlRleHRTdHlsZSkpXG4gICAgICAgICAgICBpbXBvcnRMaXN0LnB1c2goXCJpbXBvcnQgYW5kcm9pZHguY29tcG9zZS51aS50ZXh0LlRleHRTdHlsZVwiKTtcbiAgICAgICAgcmV0dXJuIGltcG9ydExpc3Quc29ydCgpO1xuICAgIH1cbn1cbmV4cG9ydHMuSW1wb3J0Q29sbGVjdG9yID0gSW1wb3J0Q29sbGVjdG9yO1xuLyoqXG4gKiBBIHV0aWxpdHkgY2xhc3MgZm9yIHdvcmtpbmcgd2l0aCBLb3RsaW4gY29kZSBnZW5lcmF0aW9uIGZvciB2YXJpb3VzIHRva2VuIHR5cGVzLlxuICogVGhpcyBjbGFzcyBwcm92aWRlcyBtZXRob2RzIHRvIHRyYW5zZm9ybSBkZXNpZ24gdG9rZW5zIChlLmcuLCBjb2xvcnMsIGJvcmRlcnMsIGdyYWRpZW50cywgc2hhZG93cykgaW50byBLb3RsaW4gcmVwcmVzZW50YXRpb25zLlxuICovXG5jbGFzcyBLb3RsaW5IZWxwZXIge1xuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGEgZ2l2ZW4gdG9rZW4gdG8gaXRzIEtvdGxpbiBzdHJpbmcgcmVwcmVzZW50YXRpb24gYmFzZWQgb24gaXRzIHR5cGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdG9rZW4gLSBUaGUgdG9rZW4gdG8gYmUgY29udmVydGVkLlxuICAgICAqIEBwYXJhbSBhbGxUb2tlbnMgLSBBIG1hcCBvZiBhbGwgdG9rZW5zLCB1c2VkIGZvciByZWZlcmVuY2UgZHVyaW5nIGNvbnZlcnNpb24uXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBUaGUgb3B0aW9ucyB1c2VkIHRvIGN1c3RvbWl6ZSB0aGUgdG9rZW4gY29udmVyc2lvbiBwcm9jZXNzLlxuICAgICAqIEBwYXJhbSBpbXBvcnRDb2xsZWN0b3IgLSBBbiBvYmplY3QgcmVzcG9uc2libGUgZm9yIG1hbmFnaW5nIGFuZCBjb2xsZWN0aW5nIGltcG9ydHMgbmVlZGVkIGZvciB0aGUgS290bGluIHJlcHJlc2VudGF0aW9uLlxuICAgICAqIEByZXR1cm4gVGhlIEtvdGxpbiBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIGdpdmVuIHRva2VuLlxuICAgICAqL1xuICAgIHN0YXRpYyB0b2tlblZhbHVlKHRva2VuLCBhbGxUb2tlbnMsIG9wdGlvbnMsIGltcG9ydENvbGxlY3Rvcikge1xuICAgICAgICAvKiogVXNlIHN1YnJvdXRpbmVzIHRvIGNvbnZlcnQgc3BlY2lmaWMgdG9rZW4gdHlwZXMgdG8gZGlmZmVyZW50IHJlcHJlc2VudGF0aW9ucy4gTWFueSB0b2tlbnMgYXJlIG9mIHRoZSBzYW1lIHR5cGUgKi9cbiAgICAgICAgbGV0IHZhbHVlO1xuICAgICAgICBzd2l0Y2ggKHRva2VuLnRva2VuVHlwZSkge1xuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuVG9rZW5UeXBlLmNvbG9yOlxuICAgICAgICAgICAgICAgIHZhbHVlID0gdGhpcy5jb2xvclRva2VuVmFsdWVUb0tvdGxpbih0b2tlbi52YWx1ZSwgYWxsVG9rZW5zLCBvcHRpb25zLCBpbXBvcnRDb2xsZWN0b3IpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuVG9rZW5UeXBlLmJvcmRlcjpcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHRoaXMuYm9yZGVyVG9rZW5WYWx1ZVRvS290bGluKHRva2VuLnZhbHVlLCBhbGxUb2tlbnMsIG9wdGlvbnMsIGltcG9ydENvbGxlY3Rvcik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5Ub2tlblR5cGUuZ3JhZGllbnQ6XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB0aGlzLmdyYWRpZW50VG9rZW5WYWx1ZVRvS290bGluKHRva2VuLnZhbHVlLCBhbGxUb2tlbnMsIG9wdGlvbnMsIGltcG9ydENvbGxlY3Rvcik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5Ub2tlblR5cGUuZm9udFNpemU6XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5Ub2tlblR5cGUubGluZUhlaWdodDpcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHRoaXMudGV4dFVuaXRUb2tlblZhbHVlVG9Lb3RsaW4odG9rZW4udmFsdWUsIGFsbFRva2Vucywgb3B0aW9ucywgaW1wb3J0Q29sbGVjdG9yKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2Ugc2RrX2V4cG9ydGVyc18xLlRva2VuVHlwZS5sZXR0ZXJTcGFjaW5nOlxuICAgICAgICAgICAgICAgIHZhbHVlID0gdGhpcy5sZXR0ZXJTcGFjaW5nVG9rZW5WYWx1ZVRvS290bGluKHRva2VuLnZhbHVlLCBhbGxUb2tlbnMsIG9wdGlvbnMsIGltcG9ydENvbGxlY3Rvcik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5Ub2tlblR5cGUuZGltZW5zaW9uOlxuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuVG9rZW5UeXBlLnNpemU6XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5Ub2tlblR5cGUuc3BhY2U6XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5Ub2tlblR5cGUub3BhY2l0eTpcbiAgICAgICAgICAgIGNhc2Ugc2RrX2V4cG9ydGVyc18xLlRva2VuVHlwZS5wYXJhZ3JhcGhTcGFjaW5nOlxuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuVG9rZW5UeXBlLmJvcmRlcldpZHRoOlxuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuVG9rZW5UeXBlLnJhZGl1czpcbiAgICAgICAgICAgIGNhc2Ugc2RrX2V4cG9ydGVyc18xLlRva2VuVHlwZS5kdXJhdGlvbjpcbiAgICAgICAgICAgIGNhc2Ugc2RrX2V4cG9ydGVyc18xLlRva2VuVHlwZS56SW5kZXg6XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB0aGlzLmRpbWVuc2lvblRva2VuVmFsdWVUb0tvdGxpbih0b2tlbi52YWx1ZSwgYWxsVG9rZW5zLCBvcHRpb25zLCBpbXBvcnRDb2xsZWN0b3IpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuVG9rZW5UeXBlLnNoYWRvdzpcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHRoaXMuc2hhZG93VG9rZW5WYWx1ZVRvS290bGluKHRva2VuLnZhbHVlLCBhbGxUb2tlbnMsIG9wdGlvbnMsIGltcG9ydENvbGxlY3Rvcik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5Ub2tlblR5cGUuZm9udFdlaWdodDpcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHRoaXMuZm9udFdlaWdodFRva2VuVmFsdWVUb0tvdGxpbih0b2tlbi52YWx1ZSwgYWxsVG9rZW5zLCBvcHRpb25zLCBpbXBvcnRDb2xsZWN0b3IpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuVG9rZW5UeXBlLmZvbnRGYW1pbHk6XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB0aGlzLmZvbnRGYW1pbHlUb2tlblZhbHVlVG9Lb3RsaW4odG9rZW4udmFsdWUsIGFsbFRva2Vucywgb3B0aW9ucywgaW1wb3J0Q29sbGVjdG9yKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2Ugc2RrX2V4cG9ydGVyc18xLlRva2VuVHlwZS5wcm9kdWN0Q29weTpcbiAgICAgICAgICAgIGNhc2Ugc2RrX2V4cG9ydGVyc18xLlRva2VuVHlwZS5zdHJpbmc6XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB0aGlzLnN0cmluZ1Rva2VuVmFsdWVUb0tvdGxpbih0b2tlbi52YWx1ZSwgYWxsVG9rZW5zLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2Ugc2RrX2V4cG9ydGVyc18xLlRva2VuVHlwZS50ZXh0Q2FzZTpcbiAgICAgICAgICAgIGNhc2Ugc2RrX2V4cG9ydGVyc18xLlRva2VuVHlwZS50ZXh0RGVjb3JhdGlvbjpcbiAgICAgICAgICAgIGNhc2Ugc2RrX2V4cG9ydGVyc18xLlRva2VuVHlwZS52aXNpYmlsaXR5OlxuICAgICAgICAgICAgICAgIHZhbHVlID0gdGhpcy5vcHRpb25Ub2tlblZhbHVlVG9Lb3RsaW4odG9rZW4udmFsdWUsIGFsbFRva2Vucywgb3B0aW9ucywgdG9rZW4udG9rZW5UeXBlLCBpbXBvcnRDb2xsZWN0b3IpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuVG9rZW5UeXBlLmJsdXI6XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB0aGlzLmJsdXJUb2tlblZhbHVlVG9Lb3RsaW4odG9rZW4udmFsdWUsIGFsbFRva2Vucywgb3B0aW9ucywgaW1wb3J0Q29sbGVjdG9yKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2Ugc2RrX2V4cG9ydGVyc18xLlRva2VuVHlwZS50eXBvZ3JhcGh5OlxuICAgICAgICAgICAgICAgIHZhbHVlID0gdGhpcy50eXBvZ3JhcGh5VG9rZW5WYWx1ZVRvS290bGluKHRva2VuLnZhbHVlLCBhbGxUb2tlbnMsIG9wdGlvbnMsIGltcG9ydENvbGxlY3Rvcik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBzZGtfZXhwb3J0ZXJzXzEuVW5yZWFjaGFibGVDYXNlRXJyb3IodG9rZW4udG9rZW5UeXBlLCBcIlVuc3VwcG9ydGVkIHRva2VuIHR5cGUgZm9yIHRyYW5zZm9ybWF0aW9uOlwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIHN0YXRpYyBjb2xvclRva2VuVmFsdWVUb0tvdGxpbihjb2xvciwgYWxsVG9rZW5zLCBvcHRpb25zLCBpbXBvcnRDb2xsZWN0b3IpIHtcbiAgICAgICAgaW1wb3J0Q29sbGVjdG9yLnVzZShJbXBvcnRGbGFnLkNvbG9yKTtcbiAgICAgICAgY29uc3QgY29sb3JPcHRpb25zID0ge1xuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIGNvbG9yRm9ybWF0OiBDb2xvckZvcm1hdF8xLkNvbG9yRm9ybWF0LmFyZ2JJbnRcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIENvbG9ySGVscGVyXzEuQ29sb3JIZWxwZXIuZm9ybWF0dGVkQ29sb3JPclZhcmlhYmxlTmFtZShjb2xvciwgYWxsVG9rZW5zLCBjb2xvck9wdGlvbnMpO1xuICAgIH1cbiAgICBzdGF0aWMgYm9yZGVyVG9rZW5WYWx1ZVRvS290bGluKGJvcmRlciwgYWxsVG9rZW5zLCBvcHRpb25zLCBpbXBvcnRDb2xsZWN0b3IpIHtcbiAgICAgICAgY29uc3QgcmVmZXJlbmNlID0gKDAsIFRva2VuSGVscGVyXzEuc3VyZU9wdGlvbmFsUmVmZXJlbmNlKShib3JkZXIucmVmZXJlbmNlZFRva2VuSWQsIGFsbFRva2Vucywgb3B0aW9ucy5hbGxvd1JlZmVyZW5jZXMpO1xuICAgICAgICBpZiAocmVmZXJlbmNlKSB7XG4gICAgICAgICAgICByZXR1cm4gb3B0aW9ucy50b2tlblRvVmFyaWFibGVSZWYocmVmZXJlbmNlKTtcbiAgICAgICAgfVxuICAgICAgICBpbXBvcnRDb2xsZWN0b3IudXNlKEltcG9ydEZsYWcuQm9yZGVyU3Ryb2tlKTtcbiAgICAgICAgY29uc3Qgd2lkdGhMaXQgPSB0aGlzLmRpbWVuc2lvblRva2VuVmFsdWVUb0tvdGxpbihib3JkZXIud2lkdGgsIGFsbFRva2Vucywgb3B0aW9ucywgaW1wb3J0Q29sbGVjdG9yKTtcbiAgICAgICAgY29uc3QgY29sb3JMaXQgPSB0aGlzLmNvbG9yVG9rZW5WYWx1ZVRvS290bGluKGJvcmRlci5jb2xvciwgYWxsVG9rZW5zLCBvcHRpb25zLCBpbXBvcnRDb2xsZWN0b3IpO1xuICAgICAgICByZXR1cm4gYEJvcmRlclN0cm9rZSgke3dpZHRoTGl0fSwgJHtjb2xvckxpdH0pYDtcbiAgICB9XG4gICAgc3RhdGljIGdyYWRpZW50VG9rZW5WYWx1ZVRvS290bGluKGdyYWRpZW50cywgYWxsVG9rZW5zLCBvcHRpb25zLCBpbXBvcnRDb2xsZWN0b3IpIHtcbiAgICAgICAgLy8gQ29tcG9zZSBjYW4gZHJhdyBvbmx5IG9uZSBCcnVzaCBwZXIgc2hhcGU7IGV4cG9ydCBhbGwgbGF5ZXJzIGFueXdheSxcbiAgICAgICAgLy8gc28gY2FsbGVycyBtYXkgb3ZlcmxheSB0aGVtIG1hbnVhbGx5XG4gICAgICAgIGNvbnN0IGxheWVycyA9IGdyYWRpZW50cy5tYXAoKGcpID0+IHRoaXMuZ3JhZGllbnRMYXllclRvS290bGluKGcsIGFsbFRva2Vucywgb3B0aW9ucywgaW1wb3J0Q29sbGVjdG9yKSk7XG4gICAgICAgIHJldHVybiBsYXllcnMubGVuZ3RoID09PSAxID8gbGF5ZXJzWzBdIDogYGxpc3RPZigke2xheWVycy5qb2luKFwiLCBcIil9KWA7XG4gICAgfVxuICAgIC8qKiBDb252ZXJ0cyBvbmUgZ3JhZGllbnQgbGF5ZXIgdG8gYSBCcnVzaCBsaXRlcmFsICovXG4gICAgc3RhdGljIGdyYWRpZW50TGF5ZXJUb0tvdGxpbih2YWx1ZSwgYWxsVG9rZW5zLCBvcHRpb25zLCBpbXBvcnRDb2xsZWN0b3IpIHtcbiAgICAgICAgY29uc3QgcmVmZXJlbmNlID0gKDAsIFRva2VuSGVscGVyXzEuc3VyZU9wdGlvbmFsUmVmZXJlbmNlKSh2YWx1ZS5yZWZlcmVuY2VkVG9rZW5JZCwgYWxsVG9rZW5zLCBvcHRpb25zLmFsbG93UmVmZXJlbmNlcyk7XG4gICAgICAgIGlmIChyZWZlcmVuY2UpIHtcbiAgICAgICAgICAgIHJldHVybiBvcHRpb25zLnRva2VuVG9WYXJpYWJsZVJlZihyZWZlcmVuY2UpO1xuICAgICAgICB9XG4gICAgICAgIGltcG9ydENvbGxlY3Rvci51c2UoSW1wb3J0RmxhZy5CcnVzaCwgSW1wb3J0RmxhZy5PZmZzZXQpO1xuICAgICAgICAvLyBCdWlsZHMgXCI8cG9zPmYgdG8gPGNvbG9yTGl0PlwiIHBhaXJzIGZvciB2YXItYXJnIG92ZXJsb2FkXG4gICAgICAgIGNvbnN0IHN0b3BQYWlycyA9IHZhbHVlLnN0b3BzXG4gICAgICAgICAgICAubWFwKChzKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBwb3MgPSBDb2xvckhlbHBlcl8xLkNvbG9ySGVscGVyLnJvdW5kVG9EZWNpbWFscyhzLnBvc2l0aW9uLCBvcHRpb25zLmRlY2ltYWxzKSArIFwiZlwiO1xuICAgICAgICAgICAgY29uc3QgY29sID0gdGhpcy5jb2xvclRva2VuVmFsdWVUb0tvdGxpbihzLmNvbG9yLCBhbGxUb2tlbnMsIG9wdGlvbnMsIGltcG9ydENvbGxlY3Rvcik7XG4gICAgICAgICAgICByZXR1cm4gYCR7cG9zfSB0byAke2NvbH1gO1xuICAgICAgICB9KVxuICAgICAgICAgICAgLmpvaW4oXCIsIFwiKTtcbiAgICAgICAgY29uc3QgaW5kZW50ID0gR2VuZXJhbEhlbHBlcl8xLkdlbmVyYWxIZWxwZXIuaW5kZW50KG9wdGlvbnMuaW5kZW50KTtcbiAgICAgICAgc3dpdGNoICh2YWx1ZS50eXBlKSB7XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5HcmFkaWVudFR5cGUucmFkaWFsOiB7XG4gICAgICAgICAgICAgICAgaW1wb3J0Q29sbGVjdG9yLnVzZShJbXBvcnRGbGFnLlRpbGVNb2RlKTtcbiAgICAgICAgICAgICAgICBjb25zdCBjZW50ZXJYID0gKCh2YWx1ZS5mcm9tLnggKyB2YWx1ZS50by54KSAvIDIpLnRvRml4ZWQoMik7XG4gICAgICAgICAgICAgICAgY29uc3QgY2VudGVyWSA9ICgodmFsdWUuZnJvbS55ICsgdmFsdWUudG8ueSkgLyAyKS50b0ZpeGVkKDIpO1xuICAgICAgICAgICAgICAgIHJldHVybiAoYEJydXNoLnJhZGlhbEdyYWRpZW50KFxcbmAgK1xuICAgICAgICAgICAgICAgICAgICBgJHtpbmRlbnR9JHtpbmRlbnR9JHtzdG9wUGFpcnN9LFxcbmAgK1xuICAgICAgICAgICAgICAgICAgICBgJHtpbmRlbnR9JHtpbmRlbnR9Y2VudGVyID0gT2Zmc2V0KCR7Y2VudGVyWH1mLCAke2NlbnRlcll9ZiksXFxuYCArXG4gICAgICAgICAgICAgICAgICAgIGAke2luZGVudH0ke2luZGVudH1yYWRpdXMgPSAwLjVmLFxcbmAgK1xuICAgICAgICAgICAgICAgICAgICBgJHtpbmRlbnR9JHtpbmRlbnR9dGlsZU1vZGUgPSBUaWxlTW9kZS5DbGFtcFxcbmAgK1xuICAgICAgICAgICAgICAgICAgICBgJHtpbmRlbnR9KWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuR3JhZGllbnRUeXBlLmFuZ3VsYXI6IC8vIHN3ZWVwXG4gICAgICAgICAgICAgICAgcmV0dXJuIChgQnJ1c2guc3dlZXBHcmFkaWVudChcXG5gICtcbiAgICAgICAgICAgICAgICAgICAgYCR7aW5kZW50fSR7aW5kZW50fSR7c3RvcFBhaXJzfSxcXG5gICtcbiAgICAgICAgICAgICAgICAgICAgYCR7aW5kZW50fSR7aW5kZW50fWNlbnRlciA9IE9mZnNldCgwLjVmLCAwLjVmKVxcbmAgK1xuICAgICAgICAgICAgICAgICAgICBgJHtpbmRlbnR9KWApO1xuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuR3JhZGllbnRUeXBlLmxpbmVhcjpcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIChgQnJ1c2gubGluZWFyR3JhZGllbnQoXFxuYCArXG4gICAgICAgICAgICAgICAgICAgIGAke2luZGVudH0ke2luZGVudH0ke3N0b3BQYWlyc30sXFxuYCArXG4gICAgICAgICAgICAgICAgICAgIGAke2luZGVudH0ke2luZGVudH1zdGFydCA9IE9mZnNldCgke3ZhbHVlLmZyb20ueH1mLCAke3ZhbHVlLmZyb20ueX1mKSxcXG5gICtcbiAgICAgICAgICAgICAgICAgICAgYCR7aW5kZW50fSR7aW5kZW50fWVuZCA9IE9mZnNldCgke3ZhbHVlLnRvLnh9ZiwgJHt2YWx1ZS50by55fWYpXFxuYCArXG4gICAgICAgICAgICAgICAgICAgIGAke2luZGVudH0pYCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3RhdGljIHNoYWRvd1Rva2VuVmFsdWVUb0tvdGxpbihzaGFkb3dzLCBhbGxUb2tlbnMsIG9wdGlvbnMsIGltcG9ydENvbGxlY3Rvcikge1xuICAgICAgICBjb25zdCBsYXllcnMgPSBzaGFkb3dzLm1hcCgocykgPT4gdGhpcy5zaGFkb3dMYXllclRvS290bGluKHMsIGFsbFRva2Vucywgb3B0aW9ucywgaW1wb3J0Q29sbGVjdG9yKSk7XG4gICAgICAgIGNvbnN0IGluZGVudFN0cmluZyA9IEdlbmVyYWxIZWxwZXJfMS5HZW5lcmFsSGVscGVyLmluZGVudChvcHRpb25zLmluZGVudCk7XG4gICAgICAgIC8vIENvbXBvc2UgY2FuIGRyYXcgb25seSBvbmUgc2hhZG93IHBlciBzaGFwZTsgZXhwb3J0IGFsbCBsYXllcnMgYW55d2F5LFxuICAgICAgICAvLyBzbyBjYWxsZXJzIG1heSBvdmVybGF5IHRoZW0gbWFudWFsbHlcbiAgICAgICAgcmV0dXJuIGxheWVycy5sZW5ndGggPT09IDFcbiAgICAgICAgICAgID8gbGF5ZXJzWzBdXG4gICAgICAgICAgICA6IGBsaXN0T2YoXFxuYCArIGAke2xheWVycy5tYXAoKGwpID0+IGAke2luZGVudFN0cmluZ30ke2luZGVudFN0cmluZ30ke2x9YCkuam9pbihcIixcXG5cIil9YCArIGBcXG4ke2luZGVudFN0cmluZ30pYDtcbiAgICB9XG4gICAgc3RhdGljIHNoYWRvd0xheWVyVG9Lb3RsaW4odmFsdWUsIGFsbFRva2Vucywgb3B0aW9ucywgaW1wb3J0Q29sbGVjdG9yKSB7XG4gICAgICAgIGNvbnN0IHJlZmVyZW5jZSA9ICgwLCBUb2tlbkhlbHBlcl8xLnN1cmVPcHRpb25hbFJlZmVyZW5jZSkodmFsdWUucmVmZXJlbmNlZFRva2VuSWQsIGFsbFRva2Vucywgb3B0aW9ucy5hbGxvd1JlZmVyZW5jZXMpO1xuICAgICAgICBpZiAocmVmZXJlbmNlKSB7XG4gICAgICAgICAgICByZXR1cm4gb3B0aW9ucy50b2tlblRvVmFyaWFibGVSZWYocmVmZXJlbmNlKTtcbiAgICAgICAgfVxuICAgICAgICBpbXBvcnRDb2xsZWN0b3IudXNlKEltcG9ydEZsYWcuU2hhZG93LCBJbXBvcnRGbGFnLk9mZnNldCk7XG4gICAgICAgIGNvbnN0IGNvbG9yTGl0ID0gdGhpcy5jb2xvclRva2VuVmFsdWVUb0tvdGxpbih7IC4uLnZhbHVlLmNvbG9yLCAuLi4odmFsdWUub3BhY2l0eSAmJiB7IG9wYWNpdHk6IHZhbHVlLm9wYWNpdHkgfSkgfSwgYWxsVG9rZW5zLCBvcHRpb25zLCBpbXBvcnRDb2xsZWN0b3IpO1xuICAgICAgICAvLyBVbnN1cHBvcnRlZCBpbiBDb21wb3NlIGFuZCB0aGVyZWZvcmUgaWdub3JlZDogc3ByZWFkLCBpbm5lci1zaGFkb3dcbiAgICAgICAgY29uc3Qgb2Zmc2V0WCA9IENvbG9ySGVscGVyXzEuQ29sb3JIZWxwZXIucm91bmRUb0RlY2ltYWxzKHZhbHVlLngsIG9wdGlvbnMuZGVjaW1hbHMpO1xuICAgICAgICBjb25zdCBvZmZzZXRZID0gQ29sb3JIZWxwZXJfMS5Db2xvckhlbHBlci5yb3VuZFRvRGVjaW1hbHModmFsdWUueSwgb3B0aW9ucy5kZWNpbWFscyk7XG4gICAgICAgIGNvbnN0IGJsdXIgPSBDb2xvckhlbHBlcl8xLkNvbG9ySGVscGVyLnJvdW5kVG9EZWNpbWFscyh2YWx1ZS5yYWRpdXMsIG9wdGlvbnMuZGVjaW1hbHMpO1xuICAgICAgICByZXR1cm4gYFNoYWRvdyhjb2xvciA9ICR7Y29sb3JMaXR9LCBvZmZzZXQgPSBPZmZzZXQoJHtvZmZzZXRYfWYsICR7b2Zmc2V0WX1mKSwgYmx1clJhZGl1cyA9ICR7Ymx1cn1mKWA7XG4gICAgfVxuICAgIHN0YXRpYyBkaW1lbnNpb25Ub2tlblZhbHVlVG9Lb3RsaW4oZGltZW5zaW9uLCBhbGxUb2tlbnMsIG9wdGlvbnMsIGltcG9ydENvbGxlY3Rvcikge1xuICAgICAgICBjb25zdCByZWZlcmVuY2UgPSAoMCwgVG9rZW5IZWxwZXJfMS5zdXJlT3B0aW9uYWxSZWZlcmVuY2UpKGRpbWVuc2lvbi5yZWZlcmVuY2VkVG9rZW5JZCwgYWxsVG9rZW5zLCBvcHRpb25zLmFsbG93UmVmZXJlbmNlcyk7XG4gICAgICAgIGlmIChyZWZlcmVuY2UpIHtcbiAgICAgICAgICAgIHJldHVybiBvcHRpb25zLnRva2VuVG9WYXJpYWJsZVJlZihyZWZlcmVuY2UpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJvdW5kZWQgPSBDb2xvckhlbHBlcl8xLkNvbG9ySGVscGVyLnJvdW5kVG9EZWNpbWFscyhkaW1lbnNpb24ubWVhc3VyZSwgb3B0aW9ucy5kZWNpbWFscyk7XG4gICAgICAgIC8vIFBlcmNlbnQgcmVxdWlyZXMgc2NhbGluZyB0byAwLTEgZm9yIEtvdGxpbiBmbG9hdFxuICAgICAgICBpZiAoZGltZW5zaW9uLnVuaXQgPT09IHNka19leHBvcnRlcnNfMS5Vbml0LnBlcmNlbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IGZyYWN0aW9uID0gK3JvdW5kZWQgLyAxMDA7XG4gICAgICAgICAgICByZXR1cm4gYCR7ZnJhY3Rpb259ZmA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGAke3JvdW5kZWR9JHt0aGlzLnVuaXRUb0tvdGxpbihkaW1lbnNpb24udW5pdCwgaW1wb3J0Q29sbGVjdG9yKX1gO1xuICAgIH1cbiAgICAvKiogQWx3YXlzIG91dHB1dCBhIENvbXBvc2UgVGV4dFVuaXQgdmFsdWUgKHNwIG9yIGVtKSBmb3IgdHlwb2dyYXBoeSB0b2tlbnMgKi9cbiAgICBzdGF0aWMgdGV4dFVuaXRUb2tlblZhbHVlVG9Lb3RsaW4oZGltZW5zaW9uLCBhbGxUb2tlbnMsIG9wdGlvbnMsIGltcG9ydENvbGxlY3RvciwgdXNlRW1Gb3JQZXJjZW50ID0gZmFsc2UpIHtcbiAgICAgICAgY29uc3QgcmVmZXJlbmNlID0gKDAsIFRva2VuSGVscGVyXzEuc3VyZU9wdGlvbmFsUmVmZXJlbmNlKShkaW1lbnNpb24ucmVmZXJlbmNlZFRva2VuSWQsIGFsbFRva2Vucywgb3B0aW9ucy5hbGxvd1JlZmVyZW5jZXMpO1xuICAgICAgICBpZiAocmVmZXJlbmNlKSB7XG4gICAgICAgICAgICByZXR1cm4gb3B0aW9ucy50b2tlblRvVmFyaWFibGVSZWYocmVmZXJlbmNlKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByb3VuZGVkID0gQ29sb3JIZWxwZXJfMS5Db2xvckhlbHBlci5yb3VuZFRvRGVjaW1hbHMoZGltZW5zaW9uLm1lYXN1cmUsIG9wdGlvbnMuZGVjaW1hbHMpO1xuICAgICAgICBpZiAoZGltZW5zaW9uLnVuaXQgPT09IHNka19leHBvcnRlcnNfMS5Vbml0LnBlcmNlbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IGZyYWN0aW9uID0gK3JvdW5kZWQgLyAxMDA7XG4gICAgICAgICAgICBpbXBvcnRDb2xsZWN0b3IudXNlKHVzZUVtRm9yUGVyY2VudCA/IEltcG9ydEZsYWcuRW0gOiBJbXBvcnRGbGFnLlNwKTtcbiAgICAgICAgICAgIHJldHVybiBgJHtmcmFjdGlvbn0ke3VzZUVtRm9yUGVyY2VudCA/IFwiLmVtXCIgOiBcIi5zcFwifWA7XG4gICAgICAgIH1cbiAgICAgICAgaW1wb3J0Q29sbGVjdG9yLnVzZShJbXBvcnRGbGFnLlNwKTtcbiAgICAgICAgcmV0dXJuIGAke3JvdW5kZWR9LnNwYDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29udmVydHMgbGV0dGVyLXNwYWNpbmcgdG9rZW5zIHRvIENvbXBvc2UgVGV4dFVuaXQuXG4gICAgICogUGVyY2VudGFnZSB2YWx1ZXMgY29ycmVzcG9uZCB0byBlbSB1bml0cywgaGVuY2UgdGhlIGZpbmFsIGB0cnVlYCBmbGFnLlxuICAgICAqL1xuICAgIHN0YXRpYyBsZXR0ZXJTcGFjaW5nVG9rZW5WYWx1ZVRvS290bGluKGRpbWVuc2lvbiwgYWxsVG9rZW5zLCBvcHRpb25zLCBpbXBvcnRDb2xsZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGV4dFVuaXRUb2tlblZhbHVlVG9Lb3RsaW4oZGltZW5zaW9uLCBhbGxUb2tlbnMsIG9wdGlvbnMsIGltcG9ydENvbGxlY3RvciwgdHJ1ZSk7XG4gICAgfVxuICAgIC8qKiBNYXBzIFN1cGVybm92YSB1bml0cyB0byBLb3RsaW4gLyBDb21wb3NlIGV4dGVuc2lvbiBzdWZmaXhlcyAqL1xuICAgIHN0YXRpYyB1bml0VG9Lb3RsaW4odW5pdCwgaW1wb3J0Q29sbGVjdG9yKSB7XG4gICAgICAgIHN3aXRjaCAodW5pdCkge1xuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuVW5pdC5wZXJjZW50OlxuICAgICAgICAgICAgICAgIC8vIEZsb2F0IGxpdGVyYWwgKDAuNWYpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiZlwiO1xuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuVW5pdC5waXhlbHM6XG4gICAgICAgICAgICAgICAgLy8gZGVuc2l0eeKAkWluZGVwZW5kZW50IHBpeGVsc1xuICAgICAgICAgICAgICAgIGltcG9ydENvbGxlY3Rvci51c2UoSW1wb3J0RmxhZy5EcCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiLmRwXCI7XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5Vbml0LnJlbTpcbiAgICAgICAgICAgICAgICAvLyBzY2FsZeKAkWluZGVwZW5kZW50IHBpeGVscyBmb3IgdHlwb2dyYXBoeVxuICAgICAgICAgICAgICAgIGltcG9ydENvbGxlY3Rvci51c2UoSW1wb3J0RmxhZy5TcCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiLnNwXCI7XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5Vbml0Lm1zOlxuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuVW5pdC5yYXc6XG4gICAgICAgICAgICAgICAgLy8gcGxhaW4gbnVtYmVyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGltcG9ydENvbGxlY3Rvci51c2UoSW1wb3J0RmxhZy5EcCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiLmRwXCI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3RhdGljIHN0cmluZ1Rva2VuVmFsdWVUb0tvdGxpbih2YWx1ZSwgYWxsVG9rZW5zLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHJlZmVyZW5jZSA9ICgwLCBUb2tlbkhlbHBlcl8xLnN1cmVPcHRpb25hbFJlZmVyZW5jZSkodmFsdWUucmVmZXJlbmNlZFRva2VuSWQsIGFsbFRva2Vucywgb3B0aW9ucy5hbGxvd1JlZmVyZW5jZXMpO1xuICAgICAgICBpZiAocmVmZXJlbmNlKSB7XG4gICAgICAgICAgICByZXR1cm4gb3B0aW9ucy50b2tlblRvVmFyaWFibGVSZWYocmVmZXJlbmNlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYFwiJHt2YWx1ZS50ZXh0fVwiYDtcbiAgICB9XG4gICAgc3RhdGljIG9wdGlvblRva2VuVmFsdWVUb0tvdGxpbihvcHRpb24sIGFsbFRva2Vucywgb3B0aW9ucywgdG9rZW5UeXBlLCBpbXBvcnRDb2xsZWN0b3IpIHtcbiAgICAgICAgY29uc3QgcmVmZXJlbmNlID0gKDAsIFRva2VuSGVscGVyXzEuc3VyZU9wdGlvbmFsUmVmZXJlbmNlKShvcHRpb24ucmVmZXJlbmNlZFRva2VuSWQsIGFsbFRva2Vucywgb3B0aW9ucy5hbGxvd1JlZmVyZW5jZXMpO1xuICAgICAgICBpZiAocmVmZXJlbmNlKSB7XG4gICAgICAgICAgICByZXR1cm4gb3B0aW9ucy50b2tlblRvVmFyaWFibGVSZWYocmVmZXJlbmNlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodG9rZW5UeXBlID09PSBzZGtfZXhwb3J0ZXJzXzEuVG9rZW5UeXBlLnRleHRDYXNlKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy50ZXh0Q2FzZVRvS290bGluKG9wdGlvbi52YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRva2VuVHlwZSA9PT0gc2RrX2V4cG9ydGVyc18xLlRva2VuVHlwZS50ZXh0RGVjb3JhdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudGV4dERlY29yYXRpb25Ub0tvdGxpbihvcHRpb24udmFsdWUsIGltcG9ydENvbGxlY3Rvcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMudmlzaWJpbGl0eVRvS290bGluKG9wdGlvbi52YWx1ZSk7XG4gICAgfVxuICAgIHN0YXRpYyB0ZXh0Q2FzZVRvS290bGluKHRleHRDYXNlKSB7XG4gICAgICAgIC8vIENvbXBvc2UgaGFzIG5vIGJ1aWx0LWluIGVudW0geWV0LCBzbyBleHBvcnQgYXMgYSBzdHJpbmcgY29uc3RhbnRcbiAgICAgICAgc3dpdGNoICh0ZXh0Q2FzZSkge1xuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuVGV4dENhc2Uub3JpZ2luYWw6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGBcIm5vbmVcImA7XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5UZXh0Q2FzZS51cHBlcjpcbiAgICAgICAgICAgICAgICByZXR1cm4gYFwidXBwZXJjYXNlXCJgO1xuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuVGV4dENhc2UubG93ZXI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGBcImxvd2VyY2FzZVwiYDtcbiAgICAgICAgICAgIGNhc2Ugc2RrX2V4cG9ydGVyc18xLlRleHRDYXNlLmNhbWVsOlxuICAgICAgICAgICAgICAgIHJldHVybiBgXCJjYXBpdGFsaXplXCJgO1xuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuVGV4dENhc2Uuc21hbGxDYXBzOlxuICAgICAgICAgICAgICAgIHJldHVybiBgXCJzbWFsbENhcHNcImA7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3RhdGljIHRleHREZWNvcmF0aW9uVG9Lb3RsaW4odGV4dERlY29yYXRpb24sIGltcG9ydENvbGxlY3Rvcikge1xuICAgICAgICBpbXBvcnRDb2xsZWN0b3IudXNlKEltcG9ydEZsYWcuVGV4dERlY29yYXRpb24pO1xuICAgICAgICAvLyBNYXAgZGlyZWN0bHkgb250byBhbmRyb2lkeC5jb21wb3NlLnVpLnRleHQuVGV4dERlY29yYXRpb25cbiAgICAgICAgc3dpdGNoICh0ZXh0RGVjb3JhdGlvbikge1xuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuVGV4dERlY29yYXRpb24ub3JpZ2luYWw6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiVGV4dERlY29yYXRpb24uTm9uZVwiO1xuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuVGV4dERlY29yYXRpb24udW5kZXJsaW5lOlxuICAgICAgICAgICAgICAgIHJldHVybiBcIlRleHREZWNvcmF0aW9uLlVuZGVybGluZVwiO1xuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuVGV4dERlY29yYXRpb24uc3RyaWtldGhyb3VnaDpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJUZXh0RGVjb3JhdGlvbi5MaW5lVGhyb3VnaFwiO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN0YXRpYyB2aXNpYmlsaXR5VG9Lb3RsaW4odmlzaWJpbGl0eSkge1xuICAgICAgICByZXR1cm4gdmlzaWJpbGl0eSA9PT0gc2RrX2V4cG9ydGVyc18xLlZpc2liaWxpdHlUeXBlLnZpc2libGUgPyBcInRydWVcIiA6IFwiZmFsc2VcIjtcbiAgICB9XG4gICAgc3RhdGljIGJsdXJUb2tlblZhbHVlVG9Lb3RsaW4oYmx1ciwgYWxsVG9rZW5zLCBvcHRpb25zLCBpbXBvcnRDb2xsZWN0b3IpIHtcbiAgICAgICAgY29uc3QgcmVmZXJlbmNlID0gKDAsIFRva2VuSGVscGVyXzEuc3VyZU9wdGlvbmFsUmVmZXJlbmNlKShibHVyLnJlZmVyZW5jZWRUb2tlbklkLCBhbGxUb2tlbnMsIG9wdGlvbnMuYWxsb3dSZWZlcmVuY2VzKTtcbiAgICAgICAgaWYgKHJlZmVyZW5jZSkge1xuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMudG9rZW5Ub1ZhcmlhYmxlUmVmKHJlZmVyZW5jZSk7XG4gICAgICAgIH1cbiAgICAgICAgaW1wb3J0Q29sbGVjdG9yLnVzZShJbXBvcnRGbGFnLk1vZGlmaWVyLCBJbXBvcnRGbGFnLkJsdXIpO1xuICAgICAgICByZXR1cm4gYE1vZGlmaWVyLmJsdXIoJHt0aGlzLmRpbWVuc2lvblRva2VuVmFsdWVUb0tvdGxpbihibHVyLnJhZGl1cywgYWxsVG9rZW5zLCBvcHRpb25zLCBpbXBvcnRDb2xsZWN0b3IpfSlgO1xuICAgIH1cbiAgICBzdGF0aWMgZm9udFdlaWdodFRva2VuVmFsdWVUb0tvdGxpbih2YWx1ZSwgYWxsVG9rZW5zLCBvcHRpb25zLCBpbXBvcnRDb2xsZWN0b3IpIHtcbiAgICAgICAgY29uc3QgcmVmZXJlbmNlID0gKDAsIFRva2VuSGVscGVyXzEuc3VyZU9wdGlvbmFsUmVmZXJlbmNlKSh2YWx1ZS5yZWZlcmVuY2VkVG9rZW5JZCwgYWxsVG9rZW5zLCBvcHRpb25zLmFsbG93UmVmZXJlbmNlcyk7XG4gICAgICAgIGlmIChyZWZlcmVuY2UpIHtcbiAgICAgICAgICAgIHJldHVybiBvcHRpb25zLnRva2VuVG9WYXJpYWJsZVJlZihyZWZlcmVuY2UpO1xuICAgICAgICB9XG4gICAgICAgIC8vIENvbnZlcnQgdGV4dCB3ZWlnaHRzIHRvIG51bWVyaWNhbCB2YWx1ZXNcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZFdlaWdodCA9ICgwLCBUb2tlbkhlbHBlcl8xLm5vcm1hbGl6ZVRleHRXZWlnaHQpKHZhbHVlLnRleHQpO1xuICAgICAgICByZXR1cm4gdGhpcy5mb250V2VpZ2h0SW50VG9Lb3RsaW4obm9ybWFsaXplZFdlaWdodCwgaW1wb3J0Q29sbGVjdG9yKTtcbiAgICB9XG4gICAgc3RhdGljIGZvbnRXZWlnaHRJbnRUb0tvdGxpbih3ZWlnaHQsIGltcG9ydENvbGxlY3Rvcikge1xuICAgICAgICBpbXBvcnRDb2xsZWN0b3IudXNlKEltcG9ydEZsYWcuRm9udFdlaWdodCk7XG4gICAgICAgIHN3aXRjaCAod2VpZ2h0KSB7XG4gICAgICAgICAgICBjYXNlIDEwMDpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJGb250V2VpZ2h0LlRoaW5cIjtcbiAgICAgICAgICAgIGNhc2UgMjAwOlxuICAgICAgICAgICAgICAgIHJldHVybiBcIkZvbnRXZWlnaHQuRXh0cmFMaWdodFwiO1xuICAgICAgICAgICAgY2FzZSAzMDA6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiRm9udFdlaWdodC5MaWdodFwiO1xuICAgICAgICAgICAgY2FzZSA0MDA6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiRm9udFdlaWdodC5Ob3JtYWxcIjtcbiAgICAgICAgICAgIGNhc2UgNTAwOlxuICAgICAgICAgICAgICAgIHJldHVybiBcIkZvbnRXZWlnaHQuTWVkaXVtXCI7XG4gICAgICAgICAgICBjYXNlIDYwMDpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJGb250V2VpZ2h0LlNlbWlCb2xkXCI7XG4gICAgICAgICAgICBjYXNlIDcwMDpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJGb250V2VpZ2h0LkJvbGRcIjtcbiAgICAgICAgICAgIGNhc2UgODAwOlxuICAgICAgICAgICAgICAgIHJldHVybiBcIkZvbnRXZWlnaHQuRXh0cmFCb2xkXCI7XG4gICAgICAgICAgICBjYXNlIDkwMDpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJGb250V2VpZ2h0LkJsYWNrXCI7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIC8vIFVuY29tbW9uIGN1c3RvbSB3ZWlnaHRcbiAgICAgICAgICAgICAgICByZXR1cm4gYEZvbnRXZWlnaHQoJHt3ZWlnaHR9KWA7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3RhdGljIGZvbnRGYW1pbHlUb2tlblZhbHVlVG9Lb3RsaW4odmFsdWUsIGFsbFRva2Vucywgb3B0aW9ucywgaW1wb3J0Q29sbGVjdG9yKSB7XG4gICAgICAgIGNvbnN0IHJlZmVyZW5jZSA9ICgwLCBUb2tlbkhlbHBlcl8xLnN1cmVPcHRpb25hbFJlZmVyZW5jZSkodmFsdWUucmVmZXJlbmNlZFRva2VuSWQsIGFsbFRva2Vucywgb3B0aW9ucy5hbGxvd1JlZmVyZW5jZXMpO1xuICAgICAgICBpZiAocmVmZXJlbmNlKSB7XG4gICAgICAgICAgICByZXR1cm4gb3B0aW9ucy50b2tlblRvVmFyaWFibGVSZWYocmVmZXJlbmNlKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBNYXAgZm9udCBuYW1lcyB0byBBbmRyb2lkIGZvbnQgcmVzb3VyY2VzIHVzaW5nIHNuYWtlX2Nhc2VcbiAgICAgICAgaW1wb3J0Q29sbGVjdG9yLnVzZShJbXBvcnRGbGFnLkZvbnRGYW1pbHksIEltcG9ydEZsYWcuRm9udCwgSW1wb3J0RmxhZy5SKTtcbiAgICAgICAgY29uc3QgcmVzTmFtZSA9IE5hbWluZ0hlbHBlcl8xLk5hbWluZ0hlbHBlci5jb2RlU2FmZVZhcmlhYmxlTmFtZSh2YWx1ZS50ZXh0LCBTdHJpbmdDYXNlXzEuU3RyaW5nQ2FzZS5zbmFrZUNhc2UpO1xuICAgICAgICByZXR1cm4gYEZvbnRGYW1pbHkoRm9udChSLmZvbnQuJHtyZXNOYW1lfSkpYDtcbiAgICB9XG4gICAgc3RhdGljIHR5cG9ncmFwaHlUb2tlblZhbHVlVG9Lb3RsaW4odHlwb2dyYXBoeSwgYWxsVG9rZW5zLCBvcHRpb25zLCBpbXBvcnRDb2xsZWN0b3IpIHtcbiAgICAgICAgLy8gUmVmZXJlbmNlIGZ1bGwgdHlwb2dyYXBoeSB0b2tlbiBpZiBzZXRcbiAgICAgICAgY29uc3QgcmVmZXJlbmNlID0gKDAsIFRva2VuSGVscGVyXzEuc3VyZU9wdGlvbmFsUmVmZXJlbmNlKSh0eXBvZ3JhcGh5LnJlZmVyZW5jZWRUb2tlbklkLCBhbGxUb2tlbnMsIG9wdGlvbnMuYWxsb3dSZWZlcmVuY2VzKTtcbiAgICAgICAgaWYgKHJlZmVyZW5jZSkge1xuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMudG9rZW5Ub1ZhcmlhYmxlUmVmKHJlZmVyZW5jZSk7XG4gICAgICAgIH1cbiAgICAgICAgaW1wb3J0Q29sbGVjdG9yLnVzZShJbXBvcnRGbGFnLlRleHRTdHlsZSwgSW1wb3J0RmxhZy5UZXh0RGVjb3JhdGlvbik7XG4gICAgICAgIC8vIFJlc29sdmUgcGFydGlhbCByZWZlcmVuY2VzXG4gICAgICAgIGNvbnN0IGZvbnRGYW1pbHlSZWYgPSAoMCwgVG9rZW5IZWxwZXJfMS5zdXJlT3B0aW9uYWxSZWZlcmVuY2UpKHR5cG9ncmFwaHkuZm9udEZhbWlseS5yZWZlcmVuY2VkVG9rZW5JZCwgYWxsVG9rZW5zLCBvcHRpb25zLmFsbG93UmVmZXJlbmNlcyk7XG4gICAgICAgIGNvbnN0IGZvbnRXZWlnaHRSZWYgPSAoMCwgVG9rZW5IZWxwZXJfMS5zdXJlT3B0aW9uYWxSZWZlcmVuY2UpKHR5cG9ncmFwaHkuZm9udFdlaWdodC5yZWZlcmVuY2VkVG9rZW5JZCwgYWxsVG9rZW5zLCBvcHRpb25zLmFsbG93UmVmZXJlbmNlcyk7XG4gICAgICAgIGNvbnN0IGRlY29yYXRpb25SZWYgPSAoMCwgVG9rZW5IZWxwZXJfMS5zdXJlT3B0aW9uYWxSZWZlcmVuY2UpKHR5cG9ncmFwaHkudGV4dERlY29yYXRpb24ucmVmZXJlbmNlZFRva2VuSWQsIGFsbFRva2Vucywgb3B0aW9ucy5hbGxvd1JlZmVyZW5jZXMpO1xuICAgICAgICAvLyBDYWxjdWxhdGUgbGl0ZXJhbHNcbiAgICAgICAgY29uc3QgZm9udEZhbWlseUxpdCA9IGZvbnRGYW1pbHlSZWZcbiAgICAgICAgICAgID8gb3B0aW9ucy50b2tlblRvVmFyaWFibGVSZWYoZm9udEZhbWlseVJlZilcbiAgICAgICAgICAgIDogdGhpcy5mb250RmFtaWx5VG9rZW5WYWx1ZVRvS290bGluKHR5cG9ncmFwaHkuZm9udEZhbWlseSwgYWxsVG9rZW5zLCBvcHRpb25zLCBpbXBvcnRDb2xsZWN0b3IpO1xuICAgICAgICBjb25zdCBmb250V2VpZ2h0TGl0ID0gZm9udFdlaWdodFJlZlxuICAgICAgICAgICAgPyBvcHRpb25zLnRva2VuVG9WYXJpYWJsZVJlZihmb250V2VpZ2h0UmVmKVxuICAgICAgICAgICAgOiB0aGlzLmZvbnRXZWlnaHRJbnRUb0tvdGxpbigoMCwgVG9rZW5IZWxwZXJfMS5ub3JtYWxpemVUZXh0V2VpZ2h0KSh0eXBvZ3JhcGh5LmZvbnRXZWlnaHQudGV4dCksIGltcG9ydENvbGxlY3Rvcik7XG4gICAgICAgIGNvbnN0IHRleHREZWNvcmF0aW9uTGl0ID0gZGVjb3JhdGlvblJlZlxuICAgICAgICAgICAgPyBvcHRpb25zLnRva2VuVG9WYXJpYWJsZVJlZihkZWNvcmF0aW9uUmVmKVxuICAgICAgICAgICAgOiB0eXBvZ3JhcGh5LnRleHREZWNvcmF0aW9uLnZhbHVlID09PSBzZGtfZXhwb3J0ZXJzXzEuVGV4dERlY29yYXRpb24ub3JpZ2luYWxcbiAgICAgICAgICAgICAgICA/IFwiVGV4dERlY29yYXRpb24uTm9uZVwiXG4gICAgICAgICAgICAgICAgOiB0aGlzLnRleHREZWNvcmF0aW9uVG9Lb3RsaW4odHlwb2dyYXBoeS50ZXh0RGVjb3JhdGlvbi52YWx1ZSwgaW1wb3J0Q29sbGVjdG9yKTtcbiAgICAgICAgY29uc3QgZm9udFNpemVMaXQgPSB0aGlzLnRleHRVbml0VG9rZW5WYWx1ZVRvS290bGluKHR5cG9ncmFwaHkuZm9udFNpemUsIGFsbFRva2Vucywgb3B0aW9ucywgaW1wb3J0Q29sbGVjdG9yKTtcbiAgICAgICAgY29uc3QgbGluZUhlaWdodExpdCA9IHR5cG9ncmFwaHkubGluZUhlaWdodFxuICAgICAgICAgICAgPyB0aGlzLnRleHRVbml0VG9rZW5WYWx1ZVRvS290bGluKHR5cG9ncmFwaHkubGluZUhlaWdodCwgYWxsVG9rZW5zLCBvcHRpb25zLCBpbXBvcnRDb2xsZWN0b3IpXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgY29uc3QgbGV0dGVyU3BhY2luZ0xpdCA9IHR5cG9ncmFwaHkubGV0dGVyU3BhY2luZ1xuICAgICAgICAgICAgPyB0aGlzLmxldHRlclNwYWNpbmdUb2tlblZhbHVlVG9Lb3RsaW4odHlwb2dyYXBoeS5sZXR0ZXJTcGFjaW5nLCBhbGxUb2tlbnMsIG9wdGlvbnMsIGltcG9ydENvbGxlY3RvcilcbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICAvLyBBc3NlbWJsZSBUZXh0U3R5bGUgbGl0ZXJhbFxuICAgICAgICBjb25zdCBwYXJ0cyA9IFtcbiAgICAgICAgICAgIGBmb250RmFtaWx5ID0gJHtmb250RmFtaWx5TGl0fWAsXG4gICAgICAgICAgICBgZm9udFdlaWdodCA9ICR7Zm9udFdlaWdodExpdH1gLFxuICAgICAgICAgICAgYGZvbnRTaXplID0gJHtmb250U2l6ZUxpdH1gXG4gICAgICAgIF07XG4gICAgICAgIGlmIChsaW5lSGVpZ2h0TGl0KVxuICAgICAgICAgICAgcGFydHMucHVzaChgbGluZUhlaWdodCA9ICR7bGluZUhlaWdodExpdH1gKTtcbiAgICAgICAgaWYgKGxldHRlclNwYWNpbmdMaXQpXG4gICAgICAgICAgICBwYXJ0cy5wdXNoKGBsZXR0ZXJTcGFjaW5nID0gJHtsZXR0ZXJTcGFjaW5nTGl0fWApO1xuICAgICAgICBpZiAodGV4dERlY29yYXRpb25MaXQpXG4gICAgICAgICAgICBwYXJ0cy5wdXNoKGB0ZXh0RGVjb3JhdGlvbiA9ICR7dGV4dERlY29yYXRpb25MaXR9YCk7XG4gICAgICAgIGNvbnN0IGluZGVudFN0cmluZyA9IEdlbmVyYWxIZWxwZXJfMS5HZW5lcmFsSGVscGVyLmluZGVudChvcHRpb25zLmluZGVudCk7XG4gICAgICAgIC8vIEpvaW4gd2l0aCBjb21tYXMgYW5kIGluZGVudHNcbiAgICAgICAgY29uc3QgYm9keSA9IHBhcnRzLm1hcCgocCkgPT4gYCR7aW5kZW50U3RyaW5nfSR7aW5kZW50U3RyaW5nfSR7cH1gKS5qb2luKFwiLFxcblwiKTtcbiAgICAgICAgcmV0dXJuIGBUZXh0U3R5bGUoXFxuJHtib2R5fVxcbiR7aW5kZW50U3RyaW5nfSlgO1xuICAgIH1cbn1cbmV4cG9ydHMuS290bGluSGVscGVyID0gS290bGluSGVscGVyO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk5hbWluZ0hlbHBlciA9IHZvaWQgMDtcbmNvbnN0IFN0cmluZ0Nhc2VfMSA9IHJlcXVpcmUoXCIuLi9lbnVtcy9TdHJpbmdDYXNlXCIpO1xuY29uc3QgY2hhbmdlX2Nhc2VfMSA9IHJlcXVpcmUoXCJjaGFuZ2UtY2FzZVwiKTtcbmNsYXNzIE5hbWluZ0hlbHBlciB7XG4gICAgLyoqXG4gICAgICogSGVscGVyIG1ldGhvZCB0byBhcHBseSBmaW5kL3JlcGxhY2UgcGF0dGVybnMgdG8gYSBzdHJpbmdcbiAgICAgKiBAcGFyYW0gdGV4dCBUaGUgdGV4dCB0byBhcHBseSByZXBsYWNlbWVudHMgdG9cbiAgICAgKiBAcGFyYW0gZmluZFJlcGxhY2UgUmVjb3JkIG9mIGZpbmQvcmVwbGFjZSBwYXR0ZXJuc1xuICAgICAqIEByZXR1cm5zIFRoZSB0ZXh0IHdpdGggYWxsIHJlcGxhY2VtZW50cyBhcHBsaWVkXG4gICAgICovXG4gICAgc3RhdGljIGFwcGx5RmluZFJlcGxhY2UodGV4dCwgZmluZFJlcGxhY2UpIHtcbiAgICAgICAgaWYgKCFmaW5kUmVwbGFjZSlcbiAgICAgICAgICAgIHJldHVybiB0ZXh0O1xuICAgICAgICAvLyBTb3J0IGZpbmQgcGF0dGVybnMgYnkgbGVuZ3RoIChsb25nZXN0IGZpcnN0KSB0byBoYW5kbGUgb3ZlcmxhcHBpbmcgcGF0dGVybnNcbiAgICAgICAgY29uc3Qgc29ydGVkUGF0dGVybnMgPSBPYmplY3QuZW50cmllcyhmaW5kUmVwbGFjZSlcbiAgICAgICAgICAgIC5zb3J0KChbYV0sIFtiXSkgPT4gYi5sZW5ndGggLSBhLmxlbmd0aCk7XG4gICAgICAgIGxldCByZXN1bHQgPSB0ZXh0O1xuICAgICAgICBmb3IgKGNvbnN0IFtmaW5kLCByZXBsYWNlXSBvZiBzb3J0ZWRQYXR0ZXJucykge1xuICAgICAgICAgICAgLy8gRXNjYXBlIHNwZWNpYWwgcmVnZXggY2hhcmFjdGVycyB0byBlbnN1cmUgdGhleSdyZSB0cmVhdGVkIGFzIGxpdGVyYWwgY2hhcmFjdGVyc1xuICAgICAgICAgICAgY29uc3QgZXNjYXBlZEZpbmQgPSBmaW5kLnJlcGxhY2UoL1suKis/XiR7fSgpfFtcXF1cXFxcXS9nLCAnXFxcXCQmJyk7XG4gICAgICAgICAgICAvLyBDcmVhdGUgYSByZWdleCBwYXR0ZXJuIHRoYXQgbWF0Y2hlcyB0aGUgd29yZCBpbiB0d28gd2F5czpcbiAgICAgICAgICAgIC8vIDEuIFVzaW5nIHN0YW5kYXJkIHdvcmQgYm91bmRhcmllcyAoXFxiKSAtIG1hdGNoZXMgdHJhbnNpdGlvbnMgYmV0d2VlbiB3b3JkL25vbi13b3JkIGNoYXJzXG4gICAgICAgICAgICAvLyAyLiBVc2luZyBsb29rYWhlYWQvbG9va2JlaGluZCB0byBtYXRjaCBhdCBzdHJpbmcgYm91bmRhcmllcyBvciBiZXR3ZWVuIHNwYWNlc1xuICAgICAgICAgICAgLy8gICAgVGhpcyBoYW5kbGVzIGNhc2VzIHdoZXJlIFxcYiBhbG9uZSBtaWdodCBub3Qgd29yayBjb3JyZWN0bHlcbiAgICAgICAgICAgIGNvbnN0IHBhdHRlcm4gPSBuZXcgUmVnRXhwKFxuICAgICAgICAgICAgLy8gUGFydCAxOiBNYXRjaCB3aXRoIHN0YW5kYXJkIHdvcmQgYm91bmRhcmllc1xuICAgICAgICAgICAgYFxcXFxiJHtlc2NhcGVkRmluZH1cXFxcYnxgICtcbiAgICAgICAgICAgICAgICAvLyBQYXJ0IDI6IE1hdGNoIGF0IHN0YXJ0IG9mIHN0cmluZyBvciBhZnRlciBzcGFjZSBBTkQgYmVmb3JlIGVuZCBvZiBzdHJpbmcgb3Igc3BhY2VcbiAgICAgICAgICAgICAgICBgKD88PV58XFxcXHMpJHtlc2NhcGVkRmluZH0oPz1cXFxcc3wkKWAsICdnaScgLy8gZzogZ2xvYmFsIChtYXRjaCBhbGwgb2NjdXJyZW5jZXMpLCBpOiBjYXNlLWluc2Vuc2l0aXZlXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgLy8gUmVwbGFjZSBhbGwgb2NjdXJyZW5jZXMgd2l0aCB0aGUgcmVwbGFjZW1lbnQgc3RyaW5nXG4gICAgICAgICAgICByZXN1bHQgPSByZXN1bHQucmVwbGFjZShwYXR0ZXJuLCByZXBsYWNlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBzdGF0aWMgY29kZVNhZmVWYXJpYWJsZU5hbWVGb3JUb2tlbih0b2tlbiwgZm9ybWF0LCBwYXJlbnQsIHByZWZpeCwgZmluZFJlcGxhY2UsIHJlbW92ZUR1cGxpY2F0ZUZyYWdtZW50cyA9IHRydWUpIHtcbiAgICAgICAgLy8gQ3JlYXRlIGFycmF5IHdpdGggYWxsIHBhdGggc2VnbWVudHMgYW5kIHRva2VuIG5hbWUgYXQgdGhlIGVuZFxuICAgICAgICBsZXQgZnJhZ21lbnRzID0gW107XG4gICAgICAgIC8vIEFkZCBwYXJlbnQgcGF0aCBhbmQgbmFtZVxuICAgICAgICBpZiAocGFyZW50KSB7XG4gICAgICAgICAgICBmcmFnbWVudHMucHVzaCguLi5wYXJlbnQucGF0aCk7XG4gICAgICAgICAgICBpZiAoIXBhcmVudC5pc1Jvb3QpIHtcbiAgICAgICAgICAgICAgICBmcmFnbWVudHMucHVzaChwYXJlbnQubmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gU3RlcCAyOiBIYW5kbGUgdG9rZW4gbmFtZSBpbnRlbGxpZ2VudGx5IHRvIGF2b2lkIHdvcmQtbGV2ZWwgZHVwbGljYXRpb25cbiAgICAgICAgLy8gRm9yIGV4YW1wbGUsIGlmIHRoZSBwYXRoIGVuZHMgd2l0aCBcIlJlZFwiIGFuZCB0b2tlbiBuYW1lIGlzIFwiUmVkIDUwMFwiLFxuICAgICAgICAvLyB3ZSBvbmx5IHdhbnQgdG8gYWRkIFwiNTAwXCIgdG8gYXZvaWQgXCJSZWQgUmVkIDUwMFwiXG4gICAgICAgIGNvbnN0IHRva2VuTmFtZVBhcnRzID0gdG9rZW4ubmFtZS5zcGxpdCgvW1xccy1fXSsvKTtcbiAgICAgICAgLy8gVGhpcyBjaGVja3MgaWYgdGhlIGZpcnN0IHdvcmQgb2YgdG9rZW4gbmFtZSBtYXRjaGVzIHRoZSBsYXN0IGZyYWdtZW50IChjYXNlIGluc2Vuc2l0aXZlKVxuICAgICAgICAvLyBhbmQgaWYgc28sIG9ubHkgYWRkcyB0aGUgcmVtYWluaW5nIHBhcnRzIG9mIHRoZSB0b2tlbiBuYW1lXG4gICAgICAgIGlmIChmcmFnbWVudHMubGVuZ3RoID4gMCAmJiB0b2tlbk5hbWVQYXJ0cy5sZW5ndGggPiAxICYmXG4gICAgICAgICAgICB0b2tlbk5hbWVQYXJ0c1swXS50b0xvd2VyQ2FzZSgpID09PSBmcmFnbWVudHNbZnJhZ21lbnRzLmxlbmd0aCAtIDFdLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgICAgIGZyYWdtZW50cy5wdXNoKHRva2VuTmFtZVBhcnRzLnNsaWNlKDEpLmpvaW4oJyAnKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBmcmFnbWVudHMucHVzaCh0b2tlbi5uYW1lKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTdGVwIDM6IEFwcGx5IGZpbmQvcmVwbGFjZSB0byBwYXRoIGFuZCBuYW1lIGZyYWdtZW50cyBvbmx5IChub3QgcHJlZml4KVxuICAgICAgICAvLyBUaGlzIGFsbG93cyBmb3IgY3VzdG9tIHRleHQgcmVwbGFjZW1lbnRzIGluIHRoZSB2YXJpYWJsZSBuYW1lXG4gICAgICAgIGlmIChmaW5kUmVwbGFjZSkge1xuICAgICAgICAgICAgLy8gSm9pbiBwYXRoIGFuZCBuYW1lIGZvciBmaW5kL3JlcGxhY2UgcHJvY2Vzc2luZ1xuICAgICAgICAgICAgbGV0IHBhdGhBbmROYW1lID0gZnJhZ21lbnRzLmpvaW4oJyAnKTtcbiAgICAgICAgICAgIC8vIEFwcGx5IGZpbmQvcmVwbGFjZSB1c2luZyB0aGUgaGVscGVyIG1ldGhvZFxuICAgICAgICAgICAgcGF0aEFuZE5hbWUgPSBOYW1pbmdIZWxwZXIuYXBwbHlGaW5kUmVwbGFjZShwYXRoQW5kTmFtZSwgZmluZFJlcGxhY2UpO1xuICAgICAgICAgICAgLy8gU3BsaXQgYmFjayBpbnRvIGZyYWdtZW50cyBhbmQgY2xlYW4gdXBcbiAgICAgICAgICAgIGZyYWdtZW50cyA9IHBhdGhBbmROYW1lXG4gICAgICAgICAgICAgICAgLnNwbGl0KC9cXHMrLylcbiAgICAgICAgICAgICAgICAuZmlsdGVyKGYgPT4gZi5sZW5ndGggPiAwKVxuICAgICAgICAgICAgICAgIC5tYXAoZiA9PiBmLnRyaW0oKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU3RlcCA0OiBBZGQgcHJlZml4IGFmdGVyIGZpbmQvcmVwbGFjZSAocHJlZml4IHNob3VsZCBub3QgYmUgYWZmZWN0ZWQgYnkgZmluZC9yZXBsYWNlKVxuICAgICAgICBpZiAocHJlZml4ICYmIHByZWZpeC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBmcmFnbWVudHMudW5zaGlmdChwcmVmaXgpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFN0ZXAgNTogQXBwbHkgY2FzZSBmb3JtYXR0aW5nIHRvIHRoZSBmaW5hbCBmcmFnbWVudHNcbiAgICAgICAgcmV0dXJuIE5hbWluZ0hlbHBlci5jb2RlU2FmZVZhcmlhYmxlTmFtZShmcmFnbWVudHMsIGZvcm1hdCwgdW5kZWZpbmVkLCByZW1vdmVEdXBsaWNhdGVGcmFnbWVudHMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUcmFuc2Zvcm1zIG5hbWUgaW50byBzcGVjaWZpYyBjYXNlIGZyb20gcHJvdmlkZWQgcGF0aCBmcmFnbWVudHMuIFdpbGwgYWxzbyBzbWFydGx5IHNwbGl0IGZyYWdtZW50cyBpbnRvIHN1YmZyYWdtZW50cyAtXG4gICAgICogaWYgdGhleSBjb250YWluIHNwYWNlcywgY2FzZSBjaGFuZ2VzIGZyb20gb25lIGxldHRlciB0byBhbm90aGVyIGFuZCBzbyBvbi5cbiAgICAgKlxuICAgICAqIEFsc28gZml4ZXMgYWRkaXRpb25hbCBwcm9ibGVtcywgbGlrZSB0aGUgZmFjdCB0aGF0IHZhcmlhYmxlIG5hbWUgY2FuJ3Qgc3RhcnQgd2l0aCBudW1iZXJzIC0gdmFyaWFibGUgd2lsbCBiZSBwcmVmaXhlZCB3aXRoIFwiX1wiIGluIHRoYXQgY2FzZVxuICAgICAqL1xuICAgIHN0YXRpYyBjb2RlU2FmZVZhcmlhYmxlTmFtZShmcmFnbWVudHMsIGZvcm1hdCwgZmluZFJlcGxhY2UsIHJlbW92ZUR1cGxpY2F0ZUZyYWdtZW50cyA9IGZhbHNlKSB7XG4gICAgICAgIC8vIENvbnZlcnQgZnJhZ21lbnRzIHRvIGEgc2luZ2xlIHNlbnRlbmNlIGZvciBwcm9jZXNzaW5nXG4gICAgICAgIGxldCBzZW50ZW5jZSA9IHR5cGVvZiBmcmFnbWVudHMgPT09ICdzdHJpbmcnID8gZnJhZ21lbnRzIDogZnJhZ21lbnRzLmpvaW4oJyAnKTtcbiAgICAgICAgLy8gQXBwbHkgZmluZC9yZXBsYWNlIGlmIHByb3ZpZGVkIHVzaW5nIHRoZSBoZWxwZXIgbWV0aG9kXG4gICAgICAgIHNlbnRlbmNlID0gTmFtaW5nSGVscGVyLmFwcGx5RmluZFJlcGxhY2Uoc2VudGVuY2UsIGZpbmRSZXBsYWNlKTtcbiAgICAgICAgLy8gT25seSBhbGxvdyBsZXR0ZXJzLCBkaWdpdHMsIHVuZGVyc2NvcmUgYW5kIGh5cGhlblxuICAgICAgICBzZW50ZW5jZSA9IHNlbnRlbmNlLnJlcGxhY2VBbGwoL1teYS16QS1aMC05Xy1dL2csICdfJyk7XG4gICAgICAgIC8vIFJlbW92ZSBkdXBsaWNhdGVzIGlmIHJlcXVlc3RlZFxuICAgICAgICBpZiAocmVtb3ZlRHVwbGljYXRlRnJhZ21lbnRzKSB7XG4gICAgICAgICAgICAvLyBGaXJzdCBjb252ZXJ0IHRvIGtlYmFiQ2FzZSBmb3Igbm9ybWFsaXphdGlvblxuICAgICAgICAgICAgY29uc3Qgbm9ybWFsaXplZFN0cmluZyA9ICgwLCBjaGFuZ2VfY2FzZV8xLmtlYmFiQ2FzZSkoc2VudGVuY2UpO1xuICAgICAgICAgICAgLy8gU3BsaXQgYnkgXCItXCIgdG8gZ2V0IG5ldyBmcmFnbWVudHNcbiAgICAgICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRGcmFnbWVudHMgPSBub3JtYWxpemVkU3RyaW5nLnNwbGl0KCctJykuZmlsdGVyKGYgPT4gZi5sZW5ndGggPiAwKTtcbiAgICAgICAgICAgIC8vIFJlbW92ZSBkdXBsaWNhdGVzIGZyb20gbm9ybWFsaXplZCBmcmFnbWVudHNcbiAgICAgICAgICAgIGNvbnN0IHVuaXF1ZUZyYWdtZW50cyA9IG5vcm1hbGl6ZWRGcmFnbWVudHMuZmlsdGVyKChmcmFnbWVudCwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICAvLyBLZWVwIGlmIGl0J3MgZmlyc3QgZWxlbWVudCBvciBkaWZmZXJlbnQgZnJvbSBwcmV2aW91c1xuICAgICAgICAgICAgICAgIHJldHVybiBpbmRleCA9PT0gMCB8fCBmcmFnbWVudCAhPT0gbm9ybWFsaXplZEZyYWdtZW50c1tpbmRleCAtIDFdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyBKb2luIGJhY2sgaW50byBhIHNlbnRlbmNlXG4gICAgICAgICAgICBzZW50ZW5jZSA9IHVuaXF1ZUZyYWdtZW50cy5qb2luKCcgJyk7XG4gICAgICAgIH1cbiAgICAgICAgc3dpdGNoIChmb3JtYXQpIHtcbiAgICAgICAgICAgIGNhc2UgU3RyaW5nQ2FzZV8xLlN0cmluZ0Nhc2UuY2FtZWxDYXNlOlxuICAgICAgICAgICAgICAgIHNlbnRlbmNlID0gKDAsIGNoYW5nZV9jYXNlXzEuY2FtZWxDYXNlKShzZW50ZW5jZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFN0cmluZ0Nhc2VfMS5TdHJpbmdDYXNlLmNhcGl0YWxDYXNlOlxuICAgICAgICAgICAgICAgIHNlbnRlbmNlID0gKDAsIGNoYW5nZV9jYXNlXzEuY2FwaXRhbENhc2UpKHNlbnRlbmNlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgU3RyaW5nQ2FzZV8xLlN0cmluZ0Nhc2UuY29uc3RhbnRDYXNlOlxuICAgICAgICAgICAgICAgIHNlbnRlbmNlID0gKDAsIGNoYW5nZV9jYXNlXzEuY29uc3RhbnRDYXNlKShzZW50ZW5jZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFN0cmluZ0Nhc2VfMS5TdHJpbmdDYXNlLmRvdENhc2U6XG4gICAgICAgICAgICAgICAgc2VudGVuY2UgPSAoMCwgY2hhbmdlX2Nhc2VfMS5kb3RDYXNlKShzZW50ZW5jZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFN0cmluZ0Nhc2VfMS5TdHJpbmdDYXNlLnRyYWluQ2FzZTpcbiAgICAgICAgICAgICAgICBzZW50ZW5jZSA9ICgwLCBjaGFuZ2VfY2FzZV8xLnRyYWluQ2FzZSkoc2VudGVuY2UpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBTdHJpbmdDYXNlXzEuU3RyaW5nQ2FzZS5ub0Nhc2U6XG4gICAgICAgICAgICAgICAgc2VudGVuY2UgPSAoMCwgY2hhbmdlX2Nhc2VfMS5ub0Nhc2UpKHNlbnRlbmNlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgU3RyaW5nQ2FzZV8xLlN0cmluZ0Nhc2Uua2ViYWJDYXNlOlxuICAgICAgICAgICAgICAgIHNlbnRlbmNlID0gKDAsIGNoYW5nZV9jYXNlXzEua2ViYWJDYXNlKShzZW50ZW5jZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFN0cmluZ0Nhc2VfMS5TdHJpbmdDYXNlLnBhc2NhbENhc2U6XG4gICAgICAgICAgICAgICAgc2VudGVuY2UgPSAoMCwgY2hhbmdlX2Nhc2VfMS5wYXNjYWxDYXNlKShzZW50ZW5jZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFN0cmluZ0Nhc2VfMS5TdHJpbmdDYXNlLnBhdGhDYXNlOlxuICAgICAgICAgICAgICAgIHNlbnRlbmNlID0gKDAsIGNoYW5nZV9jYXNlXzEucGF0aENhc2UpKHNlbnRlbmNlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgU3RyaW5nQ2FzZV8xLlN0cmluZ0Nhc2Uuc2VudGVuY2VDYXNlOlxuICAgICAgICAgICAgICAgIHNlbnRlbmNlID0gKDAsIGNoYW5nZV9jYXNlXzEuc2VudGVuY2VDYXNlKShzZW50ZW5jZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFN0cmluZ0Nhc2VfMS5TdHJpbmdDYXNlLnNuYWtlQ2FzZTpcbiAgICAgICAgICAgICAgICBzZW50ZW5jZSA9ICgwLCBjaGFuZ2VfY2FzZV8xLnNuYWtlQ2FzZSkoc2VudGVuY2UpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBTdHJpbmdDYXNlXzEuU3RyaW5nQ2FzZS5mbGF0Q2FzZTpcbiAgICAgICAgICAgICAgICBzZW50ZW5jZSA9ICgwLCBjaGFuZ2VfY2FzZV8xLmNhbWVsQ2FzZSkoc2VudGVuY2UpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlbW92ZSBhbGwgdW5kZXJzY29yZXMgaWYgZm9ybWF0IGlzIG5vdCBzbmFrZV9jYXNlLCBzaW5jZSB0aGUgbGlicmFyeSBoYXMgdW5pbnRlbmRlZCBiZWhhdmlvciB3aXRoIG51bWJlcmljIHZhbHVlcyBpbiB0aGlzIGNhc2VcbiAgICAgICAgaWYgKGZvcm1hdCAhPT0gU3RyaW5nQ2FzZV8xLlN0cmluZ0Nhc2Uuc25ha2VDYXNlICYmIGZvcm1hdCAhPT0gU3RyaW5nQ2FzZV8xLlN0cmluZ0Nhc2UuY29uc3RhbnRDYXNlKSB7XG4gICAgICAgICAgICBzZW50ZW5jZSA9IHNlbnRlbmNlLnJlcGxhY2VBbGwoJ18nLCAnJyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgdmFyaWFibGUgc3RhcnRzIHdpdGggYW55dGhpbmcgYnV0IGxldHRlciwgYWRkIFwiX1wiIGluIGZyb250IG9mIGl0XG4gICAgICAgIGlmIChzZW50ZW5jZS5tYXRjaCgvXlteYS16QS1aXS8pKSB7XG4gICAgICAgICAgICBzZW50ZW5jZSA9ICdfJyArIHNlbnRlbmNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZW50ZW5jZTtcbiAgICB9XG4gICAgLyoqIENvbnZlcnQgYW55IHN0cmluZyB0byBDU1MgdmFyaWFibGUgcmVmZXJlbmNlICovXG4gICAgc3RhdGljIG5hbWVBc0NTU1ZhclJlZmVyZW5jZShuYW1lKSB7XG4gICAgICAgIHJldHVybiBgdmFyKC0tJHtuYW1lfSlgO1xuICAgIH1cbiAgICAvKiogQ29udmVydCBhbnkgc3RyaW5nIHRvIENTUyB2YXJpYWJsZSBkZWNsYXJhdGlvbiAqL1xuICAgIHN0YXRpYyBuYW1lQXNDU1NWYXJEZWNsYXJhdGlvbihuYW1lKSB7XG4gICAgICAgIHJldHVybiBgLS0ke25hbWV9YDtcbiAgICB9XG59XG5leHBvcnRzLk5hbWluZ0hlbHBlciA9IE5hbWluZ0hlbHBlcjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5UaGVtZUhlbHBlciA9IHZvaWQgMDtcbmNvbnN0IE5hbWluZ0hlbHBlcl8xID0gcmVxdWlyZShcIi4vTmFtaW5nSGVscGVyXCIpO1xuY29uc3QgU3RyaW5nQ2FzZV8xID0gcmVxdWlyZShcIi4uL2VudW1zL1N0cmluZ0Nhc2VcIik7XG5jbGFzcyBUaGVtZUhlbHBlciB7XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIHRva2VuIHR5cGUgaGFzIGFueSB0aGVtZWQgdG9rZW5zIGluIGdpdmVuIHRoZW1lXG4gICAgICogQHBhcmFtIHRva2VucyAtIEFsbCB0b2tlbnNcbiAgICAgKiBAcGFyYW0gdHlwZSAtIFRva2VuIHR5cGUgdG8gY2hlY2tcbiAgICAgKiBAcGFyYW0gdGhlbWUgLSBUaGVtZSB0byBjaGVjayBhZ2FpbnN0XG4gICAgICogQHJldHVybnMgVHJ1ZSBpZiB0aGUgdHlwZSBoYXMgYW55IHRoZW1lZCB0b2tlbnNcbiAgICAgKi9cbiAgICBzdGF0aWMgaGFzVGhlbWVkVG9rZW5zKHRva2VucywgdHlwZSwgdGhlbWUpIHtcbiAgICAgICAgY29uc3QgdG9rZW5zT2ZUeXBlID0gdG9rZW5zLmZpbHRlcigodG9rZW4pID0+IHRva2VuLnRva2VuVHlwZSA9PT0gdHlwZSk7XG4gICAgICAgIGNvbnN0IG92ZXJyaWRkZW5Ub2tlbklkcyA9IG5ldyBTZXQodGhlbWUub3ZlcnJpZGRlblRva2Vucy5tYXAodCA9PiB0LmlkKSk7XG4gICAgICAgIHJldHVybiB0b2tlbnNPZlR5cGUuc29tZSh0b2tlbiA9PiBvdmVycmlkZGVuVG9rZW5JZHMuaGFzKHRva2VuLmlkKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZpbHRlcnMgdG9rZW5zIHRvIG9ubHkgaW5jbHVkZSB0aG9zZSB0aGF0IGFyZSB0aGVtZWRcbiAgICAgKiBAcGFyYW0gdG9rZW5zIC0gVG9rZW5zIHRvIGZpbHRlclxuICAgICAqIEBwYXJhbSB0aGVtZSAtIFRoZW1lIHRvIGNoZWNrIGFnYWluc3RcbiAgICAgKiBAcmV0dXJucyBGaWx0ZXJlZCBhcnJheSBvZiB0b2tlbnMgdGhhdCBoYXZlIHRoZW1lIG92ZXJyaWRlc1xuICAgICAqL1xuICAgIHN0YXRpYyBmaWx0ZXJUaGVtZWRUb2tlbnModG9rZW5zLCB0aGVtZSkge1xuICAgICAgICBjb25zdCBvdmVycmlkZGVuVG9rZW5JZHMgPSBuZXcgU2V0KHRoZW1lLm92ZXJyaWRkZW5Ub2tlbnMubWFwKHQgPT4gdC5pZCkpO1xuICAgICAgICByZXR1cm4gdG9rZW5zLmZpbHRlcih0b2tlbiA9PiBvdmVycmlkZGVuVG9rZW5JZHMuaGFzKHRva2VuLmlkKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlbWUgaWRlbnRpZmllciBmb3IgZmlsZSBvcmdhbml6YXRpb25cbiAgICAgKiBAcGFyYW0gdGhlbWUgLSBUaGVtZSBvYmplY3Qgb3Igc3RyaW5nXG4gICAgICogQHBhcmFtIHN0cmluZ0Nhc2UgLSBDYXNlIHN0eWxlIHRvIGFwcGx5IHRvIHRoZSBpZGVudGlmaWVyIChkZWZhdWx0cyB0byBrZWJhYkNhc2UpXG4gICAgICogQHJldHVybnMgTm9ybWFsaXplZCB0aGVtZSBpZGVudGlmaWVyIGluIHNwZWNpZmllZCBjYXNlXG4gICAgICovXG4gICAgc3RhdGljIGdldFRoZW1lSWRlbnRpZmllcih0aGVtZSwgc3RyaW5nQ2FzZSA9IFN0cmluZ0Nhc2VfMS5TdHJpbmdDYXNlLmtlYmFiQ2FzZSkge1xuICAgICAgICBpZiAodHlwZW9mIHRoZW1lID09PSAnc3RyaW5nJylcbiAgICAgICAgICAgIHJldHVybiB0aGVtZTtcbiAgICAgICAgY29uc3QgaWRlbnRpZmllciA9IHRoZW1lLmNvZGVOYW1lIHx8IHRoZW1lLm5hbWU7XG4gICAgICAgIHJldHVybiBOYW1pbmdIZWxwZXJfMS5OYW1pbmdIZWxwZXIuY29kZVNhZmVWYXJpYWJsZU5hbWUoaWRlbnRpZmllciwgc3RyaW5nQ2FzZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgZGlzcGxheSBuYW1lIGZvciB0aGVtZVxuICAgICAqIEBwYXJhbSB0aGVtZSAtIFRoZW1lIG9iamVjdCBvciBzdHJpbmdcbiAgICAgKiBAcmV0dXJucyBUaGVtZSBkaXNwbGF5IG5hbWVcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0VGhlbWVOYW1lKHRoZW1lKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhlbWUgPT09ICdzdHJpbmcnKVxuICAgICAgICAgICAgcmV0dXJuIHRoZW1lO1xuICAgICAgICBjb25zdCBpZGVudGlmaWVyID0gdGhlbWUuY29kZU5hbWUgfHwgdGhlbWUubmFtZTtcbiAgICAgICAgcmV0dXJuIE5hbWluZ0hlbHBlcl8xLk5hbWluZ0hlbHBlci5jb2RlU2FmZVZhcmlhYmxlTmFtZShpZGVudGlmaWVyLCBTdHJpbmdDYXNlXzEuU3RyaW5nQ2FzZS5jYXBpdGFsQ2FzZSk7XG4gICAgfVxufVxuZXhwb3J0cy5UaGVtZUhlbHBlciA9IFRoZW1lSGVscGVyO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnN1cmVPcHRpb25hbFJlZmVyZW5jZSA9IHN1cmVPcHRpb25hbFJlZmVyZW5jZTtcbmV4cG9ydHMubm9ybWFsaXplVGV4dFdlaWdodCA9IG5vcm1hbGl6ZVRleHRXZWlnaHQ7XG4vKiogRmluZHMgcmVmZXJlbmNlIGFuZCBtYWtlcyBzdXJlIGl0IGV4aXN0cyBpZiByZWZlcmVuY2Ugd2FzIHByb3ZpZGVkLiBJZiBudWxsIHdhcyBwcm92aWRlZCwgbnVsbCBpcyBvbiB0aGUgb3V0cHV0IGFzIHdlbGwgdG8gbWFrZSBzZWVraW5nIG91dHNpZGUgZmV3IGxpbmVzIHNtYWxsZXIgKi9cbmZ1bmN0aW9uIHN1cmVPcHRpb25hbFJlZmVyZW5jZShyZWZlcmVuY2VJZCwgYWxsVG9rZW5zLCBhbGxvd1JlZmVyZW5jZXMgPSB0cnVlKSB7XG4gICAgaWYgKCFyZWZlcmVuY2VJZCB8fCAhYWxsb3dSZWZlcmVuY2VzKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjb25zdCB0b2tlbiA9IGFsbFRva2Vucy5nZXQocmVmZXJlbmNlSWQpO1xuICAgIGlmICghdG9rZW4pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUcnlpbmcgdG8gcmV0cmlldmUgdW5rbm93biByZWZlcmVuY2VkIHRva2VuICR7cmVmZXJlbmNlSWR9YCk7XG4gICAgfVxuICAgIHJldHVybiB0b2tlbjtcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZVRleHRXZWlnaHQod2VpZ2h0KSB7XG4gICAgLy8gQ29udmVydCB0byBsb3dlcmNhc2UgZm9yIGNhc2UtaW5zZW5zaXRpdmUgY29tcGFyaXNvblxuICAgIGNvbnN0IG5vcm1hbGl6ZWRUZXh0ID0gd2VpZ2h0LnRvTG93ZXJDYXNlKCkudHJpbSgpO1xuICAgIC8vIEZpcnN0LCBjaGVjayBpZiBpdCdzIGFscmVhZHkgYSB2YWxpZCBudW1iZXJcbiAgICBjb25zdCBudW1lcmljV2VpZ2h0ID0gcGFyc2VJbnQobm9ybWFsaXplZFRleHQpO1xuICAgIGlmICghaXNOYU4obnVtZXJpY1dlaWdodCkpIHtcbiAgICAgICAgcmV0dXJuIG51bWVyaWNXZWlnaHQ7XG4gICAgfVxuICAgIC8vIE1hcCBjb21tb24gd2VpZ2h0IG5hbWVzIHRvIHRoZWlyIG51bWVyaWMgdmFsdWVzXG4gICAgc3dpdGNoIChub3JtYWxpemVkVGV4dCkge1xuICAgICAgICBjYXNlIFwidGhpblwiOlxuICAgICAgICAgICAgcmV0dXJuIDEwMDtcbiAgICAgICAgY2FzZSBcImhhaXJsaW5lXCI6XG4gICAgICAgICAgICByZXR1cm4gMTAwO1xuICAgICAgICBjYXNlIFwiZXh0cmEgbGlnaHRcIjpcbiAgICAgICAgY2FzZSBcImV4dHJhbGlnaHRcIjpcbiAgICAgICAgY2FzZSBcInVsdHJhIGxpZ2h0XCI6XG4gICAgICAgIGNhc2UgXCJ1bHRyYWxpZ2h0XCI6XG4gICAgICAgICAgICByZXR1cm4gMjAwO1xuICAgICAgICBjYXNlIFwibGlnaHRcIjpcbiAgICAgICAgICAgIHJldHVybiAzMDA7XG4gICAgICAgIGNhc2UgXCJub3JtYWxcIjpcbiAgICAgICAgY2FzZSBcInJlZ3VsYXJcIjpcbiAgICAgICAgY2FzZSBcImJvb2tcIjpcbiAgICAgICAgICAgIHJldHVybiA0MDA7XG4gICAgICAgIGNhc2UgXCJtZWRpdW1cIjpcbiAgICAgICAgICAgIHJldHVybiA1MDA7XG4gICAgICAgIGNhc2UgXCJzZW1pIGJvbGRcIjpcbiAgICAgICAgY2FzZSBcInNlbWlib2xkXCI6XG4gICAgICAgIGNhc2UgXCJkZW1pIGJvbGRcIjpcbiAgICAgICAgY2FzZSBcImRlbWlib2xkXCI6XG4gICAgICAgICAgICByZXR1cm4gNjAwO1xuICAgICAgICBjYXNlIFwiYm9sZFwiOlxuICAgICAgICAgICAgcmV0dXJuIDcwMDtcbiAgICAgICAgY2FzZSBcImV4dHJhIGJvbGRcIjpcbiAgICAgICAgY2FzZSBcImV4dHJhYm9sZFwiOlxuICAgICAgICBjYXNlIFwidWx0cmEgYm9sZFwiOlxuICAgICAgICBjYXNlIFwidWx0cmFib2xkXCI6XG4gICAgICAgICAgICByZXR1cm4gODAwO1xuICAgICAgICBjYXNlIFwiYmxhY2tcIjpcbiAgICAgICAgY2FzZSBcImhlYXZ5XCI6XG4gICAgICAgICAgICByZXR1cm4gOTAwO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgLy8gRGVmYXVsdCB0byBub3JtYWwgd2VpZ2h0ICg0MDApIGlmIHRoZSB2YWx1ZSBpcyBub3QgcmVjb2duaXplZFxuICAgICAgICAgICAgcmV0dXJuIDQwMDtcbiAgICB9XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVG9rZW5OYW1lVHJhY2tlciA9IHZvaWQgMDtcbmNvbnN0IE5hbWluZ0hlbHBlcl8xID0gcmVxdWlyZShcIi4vTmFtaW5nSGVscGVyXCIpO1xuLyoqXG4gKiBUcmFja3MgYW5kIGdlbmVyYXRlcyB1bmlxdWUgbmFtZXMgZm9yIGRlc2lnbiB0b2tlbnMgd2hpbGUgbWFpbnRhaW5pbmcgY29uc2lzdGVuY3lcbiAqIGFjcm9zcyBtdWx0aXBsZSByZWZlcmVuY2VzIHRvIHRoZSBzYW1lIHRva2VuLiBUaGlzIGVuc3VyZXMgdGhhdCBlYWNoIHRva2VuIGdldHNcbiAqIGEgdW5pcXVlLCBjb2RlLXNhZmUgbmFtZSB0aGF0IGNhbiBiZSB1c2VkIGluIGdlbmVyYXRlZCBjb2RlLlxuICovXG5jbGFzcyBUb2tlbk5hbWVUcmFja2VyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgLyoqIE1hcHMgdG9rZW4gSURzIHRvIHRoZWlyIGdlbmVyYXRlZCB1bmlxdWUgbmFtZXMgKi9cbiAgICAgICAgdGhpcy50b2tlbk5hbWVNYXAgPSBuZXcgTWFwKCk7IC8vIHRva2VuLmlkIC0+IGdlbmVyYXRlZCBuYW1lXG4gICAgICAgIC8qKiBNYXBzIGdlbmVyYXRlZCBuYW1lcyBiYWNrIHRvIHRva2VuIElEcyB0byBjaGVjayBmb3IgbmFtaW5nIGNvbmZsaWN0cyAqL1xuICAgICAgICB0aGlzLm5hbWVUb1Rva2VuTWFwID0gbmV3IE1hcCgpOyAvLyBnZW5lcmF0ZWQgbmFtZSAtPiB0b2tlbi5pZFxuICAgICAgICAvKiogTWFwcyBoaWVyYXJjaHkgbGV2ZWwgKyBuYW1lIHRvIHRva2VuIElEcyAqL1xuICAgICAgICB0aGlzLmhpZXJhcmNoeU5hbWVNYXAgPSBuZXcgTWFwKCk7IC8vIFwicGF0aC9uYW1lXCIgLT4gU2V0IG9mIHRva2VuIElEc1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDbGVhcnMgYWxsIHN0b3JlZCB0b2tlbiBuYW1lIG1hcHBpbmdzLCBlZmZlY3RpdmVseSByZXNldHRpbmcgdGhlIHRyYWNrZXIgc3RhdGUuXG4gICAgICovXG4gICAgcmVzZXQoKSB7XG4gICAgICAgIHRoaXMudG9rZW5OYW1lTWFwLmNsZWFyKCk7XG4gICAgICAgIHRoaXMubmFtZVRvVG9rZW5NYXAuY2xlYXIoKTtcbiAgICAgICAgdGhpcy5oaWVyYXJjaHlOYW1lTWFwLmNsZWFyKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgYSBjbGVhbiwgdW5pcXVlIG5hbWUgZm9yIGEgdG9rZW4gd2l0aG91dCBhbnkgZ3JvdXAgcHJlZml4ZXMuXG4gICAgICogVXNlZCBmb3IgaGllcmFyY2hpY2FsIHN0cnVjdHVyZXMgd2hlcmUgdGhlIHBhdGggaGFuZGxlcyBncm91cGluZy5cbiAgICAgKi9cbiAgICBnZXRTaW1wbGVUb2tlbk5hbWUodG9rZW4sIGZvcm1hdCwgZm9yRXhwb3J0ID0gZmFsc2UsIHBhdGggPSBbXSAvLyBBZGQgcGF0aCBwYXJhbWV0ZXIgdG8gY2hlY2sgaGllcmFyY2h5IGxldmVsXG4gICAgKSB7XG4gICAgICAgIC8vIENyZWF0ZSBhIHVuaXF1ZSBrZXkgZm9yIHRoaXMgaGllcmFyY2h5IGxldmVsXG4gICAgICAgIGNvbnN0IGhpZXJhcmNoeUtleSA9IHBhdGguam9pbihcIi9cIik7XG4gICAgICAgIGNvbnN0IGhpZXJhcmNoeUZ1bGxLZXkgPSBgJHtoaWVyYXJjaHlLZXl9LyR7dG9rZW4ubmFtZX1gO1xuICAgICAgICAvLyBJZiB3ZSdyZSBsb29raW5nIHVwIGEgbmFtZSBmb3IgcmVmZXJlbmNlIGFuZCBpdCB3YXMgYWxyZWFkeSBnZW5lcmF0ZWQsIHVzZSB0aGF0XG4gICAgICAgIGlmICghZm9yRXhwb3J0ICYmIHRoaXMudG9rZW5OYW1lTWFwLmhhcyh0b2tlbi5pZCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRva2VuTmFtZU1hcC5nZXQodG9rZW4uaWQpO1xuICAgICAgICB9XG4gICAgICAgIC8vIEdldCB0aGUgYmFzZSBuYW1lIHdpdGhvdXQgYW55IHByZWZpeGVzXG4gICAgICAgIGxldCBuYW1lID0gTmFtaW5nSGVscGVyXzEuTmFtaW5nSGVscGVyLmNvZGVTYWZlVmFyaWFibGVOYW1lKHRva2VuLm5hbWUsIGZvcm1hdCk7XG4gICAgICAgIC8vIEdldCBvciBjcmVhdGUgdGhlIHNldCBvZiB0b2tlbiBJRHMgZm9yIHRoaXMgaGllcmFyY2h5IGxldmVsIGFuZCBuYW1lXG4gICAgICAgIGlmICghdGhpcy5oaWVyYXJjaHlOYW1lTWFwLmhhcyhoaWVyYXJjaHlGdWxsS2V5KSkge1xuICAgICAgICAgICAgdGhpcy5oaWVyYXJjaHlOYW1lTWFwLnNldChoaWVyYXJjaHlGdWxsS2V5LCBuZXcgU2V0KCkpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRva2Vuc0F0TGV2ZWwgPSB0aGlzLmhpZXJhcmNoeU5hbWVNYXAuZ2V0KGhpZXJhcmNoeUZ1bGxLZXkpO1xuICAgICAgICAvLyBPbmx5IGFkZCBzdWZmaXggaWYgdGhlcmUncyBhbm90aGVyIHRva2VuIHdpdGggdGhlIHNhbWUgbmFtZSBhdCB0aGUgc2FtZSBsZXZlbFxuICAgICAgICBpZiAodG9rZW5zQXRMZXZlbC5zaXplID4gMCAmJiAhdG9rZW5zQXRMZXZlbC5oYXModG9rZW4uaWQpKSB7XG4gICAgICAgICAgICBuYW1lID0gYCR7bmFtZX1fJHt0b2tlbnNBdExldmVsLnNpemV9YDtcbiAgICAgICAgfVxuICAgICAgICAvLyBUcmFjayB0aGUgdG9rZW4gYXQgdGhpcyBoaWVyYXJjaHkgbGV2ZWxcbiAgICAgICAgdG9rZW5zQXRMZXZlbC5hZGQodG9rZW4uaWQpO1xuICAgICAgICAvLyBUcmFjayB0aGUgbmFtZSBpZiBub3QgZm9yIGV4cG9ydFxuICAgICAgICBpZiAoIWZvckV4cG9ydCkge1xuICAgICAgICAgICAgdGhpcy50b2tlbk5hbWVNYXAuc2V0KHRva2VuLmlkLCBuYW1lKTtcbiAgICAgICAgICAgIHRoaXMubmFtZVRvVG9rZW5NYXAuc2V0KG5hbWUsIHRva2VuLmlkKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmFtZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2VuZXJhdGVzIG9yIHJldHJpZXZlcyBhIHVuaXF1ZSwgY29kZS1zYWZlIG5hbWUgZm9yIGEgZ2l2ZW4gdG9rZW4uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdG9rZW4gLSBUaGUgZGVzaWduIHRva2VuIHRoYXQgbmVlZHMgYSBuYW1lXG4gICAgICogQHBhcmFtIHRva2VuR3JvdXBzIC0gQXJyYXkgb2YgYWxsIHRva2VuIGdyb3VwcywgdXNlZCB0byBmaW5kIHRoZSB0b2tlbidzIHBhcmVudCBncm91cFxuICAgICAqIEBwYXJhbSBmb3JtYXQgLSBUaGUgZGVzaXJlZCBjYXNlIGZvcm1hdCBmb3IgdGhlIGdlbmVyYXRlZCBuYW1lIChlLmcuLCBjYW1lbENhc2UsIHNuYWtlX2Nhc2UpXG4gICAgICogQHBhcmFtIHByZWZpeCAtIE9wdGlvbmFsIHByZWZpeCB0byBhZGQgdG8gdGhlIGdlbmVyYXRlZCBuYW1lXG4gICAgICogQHBhcmFtIHVuaXF1ZVN1ZmZpeCAtIFN1ZmZpeCB0aGF0IHdpbGwgYmUgYWRkZWQgdG8gbmFtZXMgdG8gbWFrZSB0aGVtIHVuaXF1ZSAoaWYgbmVjZXNzYXJ5KVxuICAgICAqIEBwYXJhbSBmb3JFeHBvcnQgLSBJZiB0cnVlLCBnZW5lcmF0ZXMgYSBuZXcgbmFtZSB3aXRob3V0IHN0b3JpbmcgaXQuIElmIGZhbHNlLCBzdG9yZXMgYW5kIHJldXNlcyBuYW1lc1xuICAgICAqIEByZXR1cm5zIEEgdW5pcXVlLCBjb2RlLXNhZmUgbmFtZSBmb3IgdGhlIHRva2VuXG4gICAgICovXG4gICAgZ2V0VG9rZW5OYW1lKHRva2VuLCB0b2tlbkdyb3VwcywgZm9ybWF0LCBwcmVmaXgsIGZvckV4cG9ydCA9IGZhbHNlLCB1bmlxdWVTdWZmaXggPSBcIl9jb3B5X1wiKSB7XG4gICAgICAgIC8vIElmIHdlJ3JlIGxvb2tpbmcgdXAgYSBuYW1lIGZvciByZWZlcmVuY2UgYW5kIGl0IHdhcyBhbHJlYWR5IGdlbmVyYXRlZCwgdXNlIHRoYXRcbiAgICAgICAgaWYgKCFmb3JFeHBvcnQgJiYgdGhpcy50b2tlbk5hbWVNYXAuaGFzKHRva2VuLmlkKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudG9rZW5OYW1lTWFwLmdldCh0b2tlbi5pZCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGFyZW50ID0gdG9rZW5Hcm91cHMuZmluZCgoZ3JvdXApID0+IGdyb3VwLmlkID09PSB0b2tlbi5wYXJlbnRHcm91cElkKTtcbiAgICAgICAgLy8gR2V0IHRoZSBiYXNlIG5hbWVcbiAgICAgICAgbGV0IG5hbWUgPSBOYW1pbmdIZWxwZXJfMS5OYW1pbmdIZWxwZXIuY29kZVNhZmVWYXJpYWJsZU5hbWVGb3JUb2tlbih0b2tlbiwgZm9ybWF0LCBwYXJlbnQsIHByZWZpeCk7XG4gICAgICAgIGxldCBjb3VudGVyID0gMTtcbiAgICAgICAgLy8gSWYgbmFtZSBpcyB0YWtlbiBieSBhIGRpZmZlcmVudCB0b2tlbiwgYWRkIGEgc3VmZml4XG4gICAgICAgIHdoaWxlICh0aGlzLm5hbWVUb1Rva2VuTWFwLmhhcyhuYW1lKSAmJiB0aGlzLm5hbWVUb1Rva2VuTWFwLmdldChuYW1lKSAhPT0gdG9rZW4uaWQpIHtcbiAgICAgICAgICAgIG5hbWUgPSBgJHtuYW1lfSR7dW5pcXVlU3VmZml4fSR7Y291bnRlcisrfWA7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVHJhY2sgdGhlIG5hbWUgaWYgbm90IGZvciBleHBvcnRcbiAgICAgICAgaWYgKCFmb3JFeHBvcnQpIHtcbiAgICAgICAgICAgIHRoaXMudG9rZW5OYW1lTWFwLnNldCh0b2tlbi5pZCwgbmFtZSk7XG4gICAgICAgICAgICB0aGlzLm5hbWVUb1Rva2VuTWFwLnNldChuYW1lLCB0b2tlbi5pZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5hbWU7XG4gICAgfVxufVxuZXhwb3J0cy5Ub2tlbk5hbWVUcmFja2VyID0gVG9rZW5OYW1lVHJhY2tlcjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Xcml0ZVRva2VuUHJvcFN0b3JlID0gdm9pZCAwO1xuY29uc3QgTmFtaW5nSGVscGVyXzEgPSByZXF1aXJlKFwiLi9OYW1pbmdIZWxwZXJcIik7XG5jb25zdCBTdHJpbmdDYXNlXzEgPSByZXF1aXJlKFwiLi4vZW51bXMvU3RyaW5nQ2FzZVwiKTtcbi8qKlxuICogQ2xhc3MgcmVzcG9uc2libGUgZm9yIHN0b3JpbmcgYW5kIHVwZGF0aW5nIHRva2VuIHByb3BlcnRpZXMgaW4gU3VwZXJub3ZhLlxuICovXG5jbGFzcyBXcml0ZVRva2VuUHJvcFN0b3JlIHtcbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgc3RvcmUgd2l0aCBuZWNlc3NhcnkgZGVwZW5kZW5jaWVzLlxuICAgICAqIEBwYXJhbSBzZGsgLSBUaGUgU3VwZXJub3ZhIFNESyBpbnN0YW5jZS5cbiAgICAgKiBAcGFyYW0gdGFyZ2V0IC0gVGhlIHJlbW90ZSB2ZXJzaW9uIGlkZW50aWZpZXIgdG8gd3JpdGUgdG8uXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2RrLCB0YXJnZXQpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFN0b3JlcyB0b2tlbiBwcm9wZXJ0eSB2YWx1ZXMgdG8gYmUgd3JpdHRlbi5cbiAgICAgICAgICogT3V0ZXIgTWFwOiBwcm9wZXJ0eSBuYW1lIC0+IElubmVyIE1hcDogdG9rZW4gLT4gdmFsdWUuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnRva2VuUHJvcGVydHlXcml0ZU1hcCA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy5zZGsgPSBzZGs7XG4gICAgICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTdG9yZXMgYSB2YWx1ZSBmb3IgYSBzcGVjaWZpYyB0b2tlbiBhbmQgcHJvcGVydHkgbmFtZSB0byBiZSB3cml0dGVuIGxhdGVyLlxuICAgICAqIEBwYXJhbSB0b2tlbiAtIFRoZSB0b2tlbiB0byBhc3NvY2lhdGUgdGhlIHZhbHVlIHdpdGguXG4gICAgICogQHBhcmFtIHByb3BlcnR5TmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBwcm9wZXJ0eS5cbiAgICAgKiBAcGFyYW0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gc3RvcmUuXG4gICAgICovXG4gICAgc3RvcmVWYWx1ZUZvclRva2VuUHJvcGVydHkodG9rZW4sIHByb3BlcnR5TmFtZSwgdmFsdWUpIHtcbiAgICAgICAgLy8gR2V0IG9yIGluaXRpYWxpemUgdGhlIG1hcCBmb3IgdGhpcyBwcm9wZXJ0eSBuYW1lXG4gICAgICAgIGxldCB0b2tlbk1hcCA9IHRoaXMudG9rZW5Qcm9wZXJ0eVdyaXRlTWFwLmdldChwcm9wZXJ0eU5hbWUpO1xuICAgICAgICBpZiAoIXRva2VuTWFwKSB7XG4gICAgICAgICAgICB0b2tlbk1hcCA9IG5ldyBNYXAoKTtcbiAgICAgICAgICAgIHRoaXMudG9rZW5Qcm9wZXJ0eVdyaXRlTWFwLnNldChwcm9wZXJ0eU5hbWUsIHRva2VuTWFwKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBBc3NvY2lhdGUgdGhlIHZhbHVlIHdpdGggdGhlIHRva2VuXG4gICAgICAgIHRva2VuTWFwLnNldCh0b2tlbiwgdmFsdWUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIGFsbCBzdG9yZWQgdG9rZW4gcHJvcGVydGllcyBpbiB0aGUgZXh0ZXJuYWwgc3lzdGVtLlxuICAgICAqIEZldGNoZXMgZXhpc3RpbmcgcHJvcGVydGllcyBvbmNlIGFuZCBjcmVhdGVzIG1pc3Npbmcgb25lcyBlZmZpY2llbnRseS5cbiAgICAgKi9cbiAgICBhc3luYyBiYXRjaFVwZGF0ZVN0b3JlZFRva2VuUHJvcGVydGllcygpIHtcbiAgICAgICAgLy8gRXhpdCBlYXJseSBpZiB0aGVyZSBhcmUgbm8gcHJvcGVydGllcyB0byB1cGRhdGVcbiAgICAgICAgaWYgKHRoaXMudG9rZW5Qcm9wZXJ0eVdyaXRlTWFwLnNpemUgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBGZXRjaCBhbGwgZXhpc3RpbmcgcHJvcGVydGllcyBvbmNlIGFuZCBtYXAgdGhlbSBieSBuYW1lIGZvciBxdWljayBsb29rdXBcbiAgICAgICAgbGV0IHByb3BlcnRpZXMgPSBhd2FpdCB0aGlzLnNkay50b2tlbnMuZ2V0VG9rZW5Qcm9wZXJ0aWVzKHRoaXMudGFyZ2V0KTtcbiAgICAgICAgLy8gUHJvY2VzcyBlYWNoIHByb3BlcnR5IGFuZCBpdHMgYXNzb2NpYXRlZCB0b2tlbi12YWx1ZSBwYWlyc1xuICAgICAgICBmb3IgKGNvbnN0IFtwcm9wZXJ0eU5hbWUsIHRva2VuTWFwXSBvZiB0aGlzLnRva2VuUHJvcGVydHlXcml0ZU1hcCkge1xuICAgICAgICAgICAgbGV0IHByb3BlcnR5ID0gcHJvcGVydGllcy5maW5kKChwcm9wKSA9PiBwcm9wLm5hbWUgPT09IHByb3BlcnR5TmFtZSk7XG4gICAgICAgICAgICAvLyBDcmVhdGUgdGhlIHByb3BlcnR5IGlmIGl0IGRvZXNu4oCZdCBleGlzdFxuICAgICAgICAgICAgaWYgKCFwcm9wZXJ0eSkge1xuICAgICAgICAgICAgICAgIHZvaWQgKGF3YWl0IHRoaXMuc2RrLnRva2Vucy5jcmVhdGVUb2tlblByb3BlcnR5KHRoaXMudGFyZ2V0LCB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiR2VuZXJpY1wiLCAvLyBVc2luZyBcIkdlbmVyaWNcIiAoYS5rLmEuIGZvcm1hdHRlZCBcIkNvZGVcIiBpbiBTdXBlcm5vdmEgVUkpIGluc3RlYWQgb2YgYSBwdXJlIFwiVGV4dFwiIHByb3BlcnR5XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IHByb3BlcnR5TmFtZSxcbiAgICAgICAgICAgICAgICAgICAgY29kZU5hbWU6IE5hbWluZ0hlbHBlcl8xLk5hbWluZ0hlbHBlci5jb2RlU2FmZVZhcmlhYmxlTmFtZShbcHJvcGVydHlOYW1lXSwgU3RyaW5nQ2FzZV8xLlN0cmluZ0Nhc2UuY2FtZWxDYXNlKSxcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uV2lkdGg6IDIwMCxcbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiVmFyaWFibGUgbmFtZSB0byB1c2UgaW4gY29kZVwiLFxuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzID0gYXdhaXQgdGhpcy5zZGsudG9rZW5zLmdldFRva2VuUHJvcGVydGllcyh0aGlzLnRhcmdldCk7XG4gICAgICAgICAgICAgICAgcHJvcGVydHkgPSBwcm9wZXJ0aWVzLmZpbmQoKHByb3ApID0+IHByb3AubmFtZSA9PT0gcHJvcGVydHlOYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghcHJvcGVydHkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byByZXRyaWV2ZSBvciBjcmVhdGUgcHJvcGVydHkgJHtwcm9wZXJ0eU5hbWV9LmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gVXBkYXRlIGVhY2ggdG9rZW7igJlzIHByb3BlcnR5IHZhbHVlXG4gICAgICAgICAgICBjb25zdCBwYXlsb2FkID0gQXJyYXkuZnJvbSh0b2tlbk1hcCkubWFwKChbdG9rZW4sIHZhbHVlVG9Xcml0ZV0pID0+ICh7XG4gICAgICAgICAgICAgICAgZGVmaW5pdGlvbklkOiBwcm9wZXJ0eS5pZCxcbiAgICAgICAgICAgICAgICB0YXJnZXRFbGVtZW50SWQ6IHRva2VuLmlkLFxuICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZVRvV3JpdGUsXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnNkay5idWxrT3BlcmF0aW9ucy51cGRhdGVFbGVtZW50UHJvcGVydGllcyh0aGlzLnRhcmdldCwgcGF5bG9hZCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogV3JpdGVzIHRva2VuIHByb3BlcnRpZXMgdG8gdGhlIHNwZWNpZmllZCBwcm9wZXJ0eSBuYW1lIHVzaW5nIHRoZSBwcm92aWRlZCB2YWx1ZSBnZW5lcmF0b3IuXG4gICAgICogQHBhcmFtIHByb3BlcnR5TmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBwcm9wZXJ0eSB0byB3cml0ZSB0by5cbiAgICAgKiBAcGFyYW0gdG9rZW5zIC0gVGhlIGxpc3Qgb2YgdG9rZW5zIHRvIHVwZGF0ZS5cbiAgICAgKiBAcGFyYW0gdmFsdWVHZW5lcmF0b3IgLSBBIGZ1bmN0aW9uIHRoYXQgZ2VuZXJhdGVzIHRoZSBwcm9wZXJ0eSB2YWx1ZSAodXN1YWxseSBuYW1lKSBmb3IgZWFjaCB0b2tlbi5cbiAgICAgKi9cbiAgICBhc3luYyB3cml0ZVRva2VuUHJvcGVydGllcyhwcm9wZXJ0eU5hbWUsIHRva2VucywgdmFsdWVHZW5lcmF0b3IpIHtcbiAgICAgICAgY29uc3QgdHJpbW1lZFByb3BlcnR5TmFtZSA9IHByb3BlcnR5TmFtZT8udHJpbSgpO1xuICAgICAgICBpZiAoIXRyaW1tZWRQcm9wZXJ0eU5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IHRva2VuIG9mIHRva2Vucykge1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSB2YWx1ZUdlbmVyYXRvcih0b2tlbik7XG4gICAgICAgICAgICB0aGlzLnN0b3JlVmFsdWVGb3JUb2tlblByb3BlcnR5KHRva2VuLCB0cmltbWVkUHJvcGVydHlOYW1lLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQgdGhpcy5iYXRjaFVwZGF0ZVN0b3JlZFRva2VuUHJvcGVydGllcygpO1xuICAgIH1cbn1cbmV4cG9ydHMuV3JpdGVUb2tlblByb3BTdG9yZSA9IFdyaXRlVG9rZW5Qcm9wU3RvcmU7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2hlbHBlcnMvTmFtaW5nSGVscGVyXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9oZWxwZXJzL0NvbG9ySGVscGVyXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9oZWxwZXJzL1Rva2VuSGVscGVyXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9oZWxwZXJzL0NTU0hlbHBlclwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vaGVscGVycy9GaWxlSGVscGVyXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9oZWxwZXJzL1RoZW1lSGVscGVyXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9oZWxwZXJzL0ZpbGVOYW1lSGVscGVyXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9oZWxwZXJzL0dlbmVyYWxIZWxwZXJcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2VudW1zL1N0cmluZ0Nhc2VcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2VudW1zL0NvbG9yRm9ybWF0XCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9oZWxwZXJzL1Rva2VuTmFtZVRyYWNrZXJcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2hlbHBlcnMvV3JpdGVUb2tlblByb3BTdG9yZVwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vaGVscGVycy9Lb3RsaW5IZWxwZXJcIiksIGV4cG9ydHMpO1xuIiwiKCgpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIGU9ezE6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkdyYWRpZW50VHlwZT12b2lkIDAsZnVuY3Rpb24oZSl7ZS5saW5lYXI9XCJMaW5lYXJcIixlLnJhZGlhbD1cIlJhZGlhbFwiLGUuYW5ndWxhcj1cIkFuZ3VsYXJcIn0ob3x8KHQuR3JhZGllbnRUeXBlPW89e30pKX0sMzA2OihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Eb2NzQmxvY2tUZXh0UHJvcGVydHlTdHlsZT12b2lkIDAsZnVuY3Rpb24oZSl7ZS50aXRsZTE9XCJUaXRsZTFcIixlLnRpdGxlMj1cIlRpdGxlMlwiLGUudGl0bGUzPVwiVGl0bGUzXCIsZS50aXRsZTQ9XCJUaXRsZTRcIixlLnRpdGxlNT1cIlRpdGxlNVwiLGUuZGVmYXVsdD1cIkRlZmF1bHRcIixlLmRlZmF1bHRCb2xkPVwiRGVmYXVsdEJvbGRcIixlLmRlZmF1bHRTZW1pYm9sZD1cIkRlZmF1bHRTZW1pYm9sZFwiLGUuc21hbGw9XCJTbWFsbFwiLGUuc21hbGxCb2xkPVwiU21hbGxCb2xkXCIsZS5zbWFsbFNlbWlib2xkPVwiU21hbGxTZW1pYm9sZFwiLGUuY3VzdG9tPVwiQ3VzdG9tXCJ9KG98fCh0LkRvY3NCbG9ja1RleHRQcm9wZXJ0eVN0eWxlPW89e30pKX0sODk5OihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Bc3NldFNjYWxlVHlwZT12b2lkIDAsZnVuY3Rpb24oZSl7ZS5hc3BlY3RGaWxsPVwiQXNwZWN0RmlsbFwiLGUuYXNwZWN0Rml0PVwiQXNwZWN0Rml0XCJ9KG98fCh0LkFzc2V0U2NhbGVUeXBlPW89e30pKX0sOTE1OihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Bc3NldFNjYWxlPXZvaWQgMCxmdW5jdGlvbihlKXtlLngxPVwieDFcIixlLngyPVwieDJcIixlLngzPVwieDNcIixlLng0PVwieDRcIn0ob3x8KHQuQXNzZXRTY2FsZT1vPXt9KSl9LDkyMjooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuVGV4dENhc2U9dm9pZCAwLGZ1bmN0aW9uKGUpe2Uub3JpZ2luYWw9XCJPcmlnaW5hbFwiLGUudXBwZXI9XCJVcHBlclwiLGUubG93ZXI9XCJMb3dlclwiLGUuY2FtZWw9XCJDYW1lbFwiLGUuc21hbGxDYXBzPVwiU21hbGxDYXBzXCJ9KG98fCh0LlRleHRDYXNlPW89e30pKX0sOTM0OihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5JY29uU2V0PXZvaWQgMCxmdW5jdGlvbihlKXtlLmNoZWNrQ2lyY2xlPVwiQ2hlY2tDaXJjbGVcIixlLmNyb3NzQ2lyY2xlPVwiQ3Jvc3NDaXJjbGVcIixlLmFsZXJ0PVwiQWxlcnRcIn0ob3x8KHQuSWNvblNldD1vPXt9KSl9LDExNjA6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkFMTF9CT1JERVJfUE9TSVRJT05TPXQuQm9yZGVyUG9zaXRpb249dm9pZCAwLGZ1bmN0aW9uKGUpe2UuaW5zaWRlPVwiSW5zaWRlXCIsZS5jZW50ZXI9XCJDZW50ZXJcIixlLm91dHNpZGU9XCJPdXRzaWRlXCJ9KG98fCh0LkJvcmRlclBvc2l0aW9uPW89e30pKSx0LkFMTF9CT1JERVJfUE9TSVRJT05TPVtvLmluc2lkZSxvLmNlbnRlcixvLm91dHNpZGVdfSwxMjMzOihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Eb2NzRW50aXR5VHlwZT12b2lkIDAsZnVuY3Rpb24oZSl7ZS5ncm91cD1cIkdyb3VwXCIsZS5wYWdlPVwiUGFnZVwifShvfHwodC5Eb2NzRW50aXR5VHlwZT1vPXt9KSl9LDEyNTU6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkZyYW1lQWxpZ25tZW50PXZvaWQgMCxmdW5jdGlvbihlKXtlLmZyYW1lSGVpZ2h0PVwiRnJhbWVIZWlnaHRcIixlLmNlbnRlcj1cIkNlbnRlclwifShvfHwodC5GcmFtZUFsaWdubWVudD1vPXt9KSl9LDE0MjM6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkRvY3VtZW50YXRpb25MZWdhY3lQYWdlQXNzZXRUeXBlPXZvaWQgMCxmdW5jdGlvbihlKXtlLmltYWdlPVwiaW1hZ2VcIixlLmZpZ21hRnJhbWU9XCJmaWdtYUZyYW1lXCJ9KG98fCh0LkRvY3VtZW50YXRpb25MZWdhY3lQYWdlQXNzZXRUeXBlPW89e30pKX0sMTYwMTooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuRG9jdW1lbnRhdGlvbkxlZ2FjeVBhZ2VCbG9ja1RoZW1lVHlwZT12b2lkIDAsZnVuY3Rpb24oZSl7ZS5vdmVycmlkZT1cIk92ZXJyaWRlXCIsZS5jb21wYXJpc29uPVwiQ29tcGFyaXNvblwifShvfHwodC5Eb2N1bWVudGF0aW9uTGVnYWN5UGFnZUJsb2NrVGhlbWVUeXBlPW89e30pKX0sMTg0NjooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuRG9jdW1lbnRhdGlvbkxlZ2FjeVBhZ2VCbG9ja1R5cGU9dm9pZCAwLGZ1bmN0aW9uKGUpe2UudGV4dD1cIlRleHRcIixlLmhlYWRpbmc9XCJIZWFkaW5nXCIsZS5jb2RlPVwiQ29kZVwiLGUudW5vcmRlcmVkTGlzdD1cIlVub3JkZXJlZExpc3RcIixlLm9yZGVyZWRMaXN0PVwiT3JkZXJlZExpc3RcIixlLnF1b3RlPVwiUXVvdGVcIixlLmNhbGxvdXQ9XCJDYWxsb3V0XCIsZS5kaXZpZGVyPVwiRGl2aWRlclwiLGUuaW1hZ2U9XCJJbWFnZVwiLGUudG9rZW49XCJUb2tlblwiLGUudG9rZW5MaXN0PVwiVG9rZW5MaXN0XCIsZS50b2tlbkdyb3VwPVwiVG9rZW5Hcm91cFwiLGUuc2hvcnRjdXRzPVwiU2hvcnRjdXRzXCIsZS5saW5rPVwiTGlua1wiLGUuZmlnbWFFbWJlZD1cIkZpZ21hRW1iZWRcIixlLnlvdXR1YmVFbWJlZD1cIllvdXR1YmVFbWJlZFwiLGUuc3Rvcnlib29rRW1iZWQ9XCJTdG9yeWJvb2tFbWJlZFwiLGUuZ2VuZXJpY0VtYmVkPVwiRW1iZWRcIixlLmZpZ21hRnJhbWVzPVwiRmlnbWFGcmFtZXNcIixlLmN1c3RvbT1cIkN1c3RvbVwiLGUucmVuZGVyQ29kZT1cIlJlbmRlckNvZGVcIixlLmNvbXBvbmVudEFzc2V0cz1cIkNvbXBvbmVudEFzc2V0c1wiLGUuY29sdW1uPVwiQ29sdW1uXCIsZS5jb2x1bW5JdGVtPVwiQ29sdW1uSXRlbVwiLGUudGFicz1cIlRhYnNcIixlLnRhYkl0ZW09XCJUYWJJdGVtXCIsZS50YWJsZT1cIlRhYmxlXCIsZS50YWJsZUNlbGw9XCJUYWJsZUNlbGxcIixlLnRhYmxlUm93PVwiVGFibGVSb3dcIn0ob3x8KHQuRG9jdW1lbnRhdGlvbkxlZ2FjeVBhZ2VCbG9ja1R5cGU9bz17fSkpfSwyMTIzOihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Eb2N1bWVudGF0aW9uTGVnYWN5R3JvdXBCZWhhdmlvcj12b2lkIDAsZnVuY3Rpb24oZSl7ZS5ncm91cD1cIkdyb3VwXCIsZS50YWJzPVwiVGFic1wifShvfHwodC5Eb2N1bWVudGF0aW9uTGVnYWN5R3JvdXBCZWhhdmlvcj1vPXt9KSl9LDI2NTc6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkRvY3VtZW50YXRpb25MZWdhY3lQYWdlQmxvY2tTaG9ydGN1dD10LkRvY3VtZW50YXRpb25MZWdhY3lQYWdlQmxvY2tTaG9ydGN1dFR5cGU9dm9pZCAwLGZ1bmN0aW9uKGUpe2UuZXh0ZXJuYWw9XCJFeHRlcm5hbFwiLGUuaW50ZXJuYWw9XCJJbnRlcm5hbFwifShvfHwodC5Eb2N1bWVudGF0aW9uTGVnYWN5UGFnZUJsb2NrU2hvcnRjdXRUeXBlPW89e30pKSx0LkRvY3VtZW50YXRpb25MZWdhY3lQYWdlQmxvY2tTaG9ydGN1dD1jbGFzc3tjb25zdHJ1Y3RvcihlKXt2YXIgdDtlLnVybD90aGlzLnR5cGU9by5leHRlcm5hbDp0aGlzLnR5cGU9by5pbnRlcm5hbCx0aGlzLnRpdGxlPXRoaXMuc2hvcnRjdXRUaXRsZUZyb21Nb2RlbChlLHRoaXMudHlwZSksdGhpcy5kZXNjcmlwdGlvbj10aGlzLnNob3J0Y3V0RGVzY3JpcHRpb25Gcm9tTW9kZWwoZSx0aGlzLnR5cGUpLHRoaXMucHJldmlld1VybD10aGlzLnNob3J0Y3V0UHJldmlld1VybEZyb21Nb2RlbChlKSx0aGlzLnR5cGU9PT1vLmludGVybmFsJiYobnVsbD09PSh0PWUuZG9jdW1lbnRhdGlvbkl0ZW1QcmV2aWV3KXx8dm9pZCAwPT09dD92b2lkIDA6dC52YWxpZCkmJmUuZG9jdW1lbnRhdGlvbkl0ZW1JZD90aGlzLmludGVybmFsSWQ9ZS5kb2N1bWVudGF0aW9uSXRlbUlkOih0aGlzLmludGVybmFsSWQ9bnVsbCx0aGlzLnR5cGU9PT1vLmV4dGVybmFsJiZlLnVybD90aGlzLmV4dGVybmFsVXJsPWUudXJsOnRoaXMuZXh0ZXJuYWxVcmw9bnVsbCl9c2hvcnRjdXRUaXRsZUZyb21Nb2RlbChlLHQpe3ZhciByLG4saSxhLGM7bGV0IGw9bnVsbDtyZXR1cm4gZS50aXRsZSYmZS50aXRsZS50cmltKCkubGVuZ3RoPjA/bD1lLnRpdGxlOnQ9PT1vLmludGVybmFsP2w9bnVsbCE9PShuPW51bGw9PT0ocj1lLmRvY3VtZW50YXRpb25JdGVtUHJldmlldyl8fHZvaWQgMD09PXI/dm9pZCAwOnIudGl0bGUpJiZ2b2lkIDAhPT1uP246bnVsbDp0PT09by5leHRlcm5hbCYmKGw9bnVsbCE9PShjPW51bGwhPT0oYT1udWxsPT09KGk9ZS51cmxQcmV2aWV3KXx8dm9pZCAwPT09aT92b2lkIDA6aS50aXRsZSkmJnZvaWQgMCE9PWE/YTplLnVybCkmJnZvaWQgMCE9PWM/YzpudWxsKSxsJiYwIT09bC50cmltKCkubGVuZ3RoP2w6bnVsbH1zaG9ydGN1dERlc2NyaXB0aW9uRnJvbU1vZGVsKGUsdCl7dmFyIHI7bGV0IG49bnVsbDtyZXR1cm4gZS5kZXNjcmlwdGlvbiYmZS5kZXNjcmlwdGlvbi50cmltKCkubGVuZ3RoPjA/bj1lLmRlc2NyaXB0aW9uOnQ9PT1vLmV4dGVybmFsJiYobj1udWxsPT09KHI9ZS51cmxQcmV2aWV3KXx8dm9pZCAwPT09cj92b2lkIDA6ci5kZXNjcmlwdGlvbiksbiYmMCE9PW4udHJpbSgpLmxlbmd0aD9uOm51bGx9c2hvcnRjdXRQcmV2aWV3VXJsRnJvbU1vZGVsKGUpe3ZhciB0LG8scixuLGk7cmV0dXJuIG51bGwhPT0oaT1udWxsIT09KHI9bnVsbCE9PSh0PWUuYXNzZXRVcmwpJiZ2b2lkIDAhPT10P3Q6bnVsbD09PShvPWUuYXNzZXQpfHx2b2lkIDA9PT1vP3ZvaWQgMDpvLnVybCkmJnZvaWQgMCE9PXI/cjpudWxsPT09KG49ZS51cmxQcmV2aWV3KXx8dm9pZCAwPT09bj92b2lkIDA6bi50aHVtYm5haWxVcmwpJiZ2b2lkIDAhPT1pP2k6bnVsbH19fSwyNjc0OihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5SaWNoVGV4dFNwYW5BdHRyaWJ1dGVUeXBlPXZvaWQgMCxmdW5jdGlvbihlKXtlLmJvbGQ9XCJCb2xkXCIsZS5pdGFsaWM9XCJJdGFsaWNcIixlLmxpbms9XCJMaW5rXCIsZS5zdHJpa2V0aHJvdWdoPVwiU3RyaWtldGhyb3VnaFwiLGUuY29kZT1cIkNvZGVcIn0ob3x8KHQuUmljaFRleHRTcGFuQXR0cmlidXRlVHlwZT1vPXt9KSl9LDI4MDI6KGUsdCk9Pnt2YXIgbyxyO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuUHVsc2FyRXhlY3V0b3I9dC5PdXRwdXRGaWxlVHlwZT12b2lkIDAsZnVuY3Rpb24oZSl7ZS5jb3B5UmVtb3RlVXJsPVwiY29weVJlbW90ZVVybFwiLGUudGV4dD1cInRleHRcIixlLmJpbmFyeT1cImJpbmFyeVwifShvfHwodC5PdXRwdXRGaWxlVHlwZT1vPXt9KSksZnVuY3Rpb24oZSl7ZS5zdXBlcm5vdmE9XCJzdXBlcm5vdmFcIixlLmxvY2FsPVwibG9jYWxcIn0ocnx8KHQuUHVsc2FyRXhlY3V0b3I9cj17fSkpfSwzNjA3OihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Xb3Jrc3BhY2VTdWJzY3JpcHRpb25TdGF0dXM9dm9pZCAwLGZ1bmN0aW9uKGUpe2UuYWN0aXZlPVwiYWN0aXZlXCIsZS5ncmFjZVBlcmlvZD1cImdyYWNlUGVyaW9kXCIsZS5jYW5jZWxsZWQ9XCJjYW5jZWxsZWRcIixlLnN1c3BlbmRlZD1cInN1c3BlbmRlZFwifShvfHwodC5Xb3Jrc3BhY2VTdWJzY3JpcHRpb25TdGF0dXM9bz17fSkpfSwzNzE4OihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5GcmFtZUxheW91dD12b2lkIDAsZnVuY3Rpb24oZSl7ZS5jOD1cIkM4XCIsZS5jNz1cIkM3XCIsZS5jNj1cIkM2XCIsZS5jNT1cIkM1XCIsZS5jND1cIkM0XCIsZS5jMz1cIkMzXCIsZS5jMj1cIkMyXCIsZS5jMT1cIkMxXCIsZS5jMTc1PVwiQzFfNzVcIn0ob3x8KHQuRnJhbWVMYXlvdXQ9bz17fSkpfSwzNzMzOihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Eb2NzQmxvY2tCZWhhdmlvclNlbGVjdGlvblR5cGU9dm9pZCAwLGZ1bmN0aW9uKGUpe2UuZW50aXR5PVwiRW50aXR5XCIsZS5ncm91cD1cIkdyb3VwXCIsZS5lbnRpdHlBbmRHcm91cD1cIkVudGl0eUFuZEdyb3VwXCJ9KG98fCh0LkRvY3NCbG9ja0JlaGF2aW9yU2VsZWN0aW9uVHlwZT1vPXt9KSl9LDM3ODg6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkRUX1RPS0VOX1RZUEVTPXQudG9rZW5UeXBlSXNSZWZlcmVuY2FibGU9dC5SRUZFUkVOQ0FCTEVfVE9LRU5fVFlQRVM9dC5SRVBMQUNBQkxFX1RPS0VOX1RZUEVTPXQudG9rZW5UeXBlSXNOb25QdXJlPXQudG9rZW5UeXBlSXNQdXJlPXQuUFVSRV9UT0tFTl9UWVBFUz10LkFMTF9UT0tFTl9UWVBFUz10Lk1TX0RJTUVOU0lPTl9UT0tFTl9UWVBFUz10LlJBV19ESU1FTlNJT05fVE9LRU5fVFlQRVM9dC5ESU1FTlNJT05fVE9LRU5fVFlQRVM9dC5PUFRJT05fVE9LRU5fVFlQRVM9dC5TVFJJTkdfVE9LRU5fVFlQRVM9dC5Ub2tlblR5cGU9dm9pZCAwLGZ1bmN0aW9uKGUpe2UuY29sb3I9XCJDb2xvclwiLGUudHlwb2dyYXBoeT1cIlR5cG9ncmFwaHlcIixlLnNoYWRvdz1cIlNoYWRvd1wiLGUuYm9yZGVyPVwiQm9yZGVyXCIsZS5ncmFkaWVudD1cIkdyYWRpZW50XCIsZS5ibHVyPVwiQmx1clwiLGUucmFkaXVzPVwiQm9yZGVyUmFkaXVzXCIsZS5ib3JkZXJXaWR0aD1cIkJvcmRlcldpZHRoXCIsZS5kdXJhdGlvbj1cIkR1cmF0aW9uXCIsZS5mb250U2l6ZT1cIkZvbnRTaXplXCIsZS5kaW1lbnNpb249XCJEaW1lbnNpb25cIixlLmxldHRlclNwYWNpbmc9XCJMZXR0ZXJTcGFjaW5nXCIsZS5saW5lSGVpZ2h0PVwiTGluZUhlaWdodFwiLGUub3BhY2l0eT1cIk9wYWNpdHlcIixlLnBhcmFncmFwaFNwYWNpbmc9XCJQYXJhZ3JhcGhTcGFjaW5nXCIsZS5zaXplPVwiU2l6ZVwiLGUuc3BhY2U9XCJTcGFjZVwiLGUuekluZGV4PVwiWkluZGV4XCIsZS50ZXh0RGVjb3JhdGlvbj1cIlRleHREZWNvcmF0aW9uXCIsZS50ZXh0Q2FzZT1cIlRleHRDYXNlXCIsZS52aXNpYmlsaXR5PVwiVmlzaWJpbGl0eVwiLGUuZm9udEZhbWlseT1cIkZvbnRGYW1pbHlcIixlLmZvbnRXZWlnaHQ9XCJGb250V2VpZ2h0XCIsZS5zdHJpbmc9XCJTdHJpbmdcIixlLnByb2R1Y3RDb3B5PVwiUHJvZHVjdENvcHlcIn0ob3x8KHQuVG9rZW5UeXBlPW89e30pKSx0LlNUUklOR19UT0tFTl9UWVBFUz1bby5zdHJpbmcsby5wcm9kdWN0Q29weSxvLmZvbnRGYW1pbHksby5mb250V2VpZ2h0XSx0Lk9QVElPTl9UT0tFTl9UWVBFUz1bby50ZXh0Q2FzZSxvLnRleHREZWNvcmF0aW9uLG8udmlzaWJpbGl0eV0sdC5ESU1FTlNJT05fVE9LRU5fVFlQRVM9W28uZGltZW5zaW9uLG8uc2l6ZSxvLnNwYWNlLG8ub3BhY2l0eSxvLmZvbnRTaXplLG8ubGluZUhlaWdodCxvLmxldHRlclNwYWNpbmcsby5wYXJhZ3JhcGhTcGFjaW5nLG8uYm9yZGVyV2lkdGgsby5yYWRpdXMsby5kdXJhdGlvbixvLnpJbmRleF0sdC5SQVdfRElNRU5TSU9OX1RPS0VOX1RZUEVTPVtvLm9wYWNpdHksby56SW5kZXhdLHQuTVNfRElNRU5TSU9OX1RPS0VOX1RZUEVTPVtvLmR1cmF0aW9uXSx0LkFMTF9UT0tFTl9UWVBFUz1bLi4udC5ESU1FTlNJT05fVE9LRU5fVFlQRVMsLi4udC5TVFJJTkdfVE9LRU5fVFlQRVMsLi4udC5PUFRJT05fVE9LRU5fVFlQRVMsby5jb2xvcixvLmdyYWRpZW50LG8uYm9yZGVyLG8ucmFkaXVzLG8uc2hhZG93LG8udHlwb2dyYXBoeSxvLmJsdXJdLHQuUFVSRV9UT0tFTl9UWVBFUz1bLi4udC5ESU1FTlNJT05fVE9LRU5fVFlQRVMsLi4udC5TVFJJTkdfVE9LRU5fVFlQRVMsLi4udC5PUFRJT05fVE9LRU5fVFlQRVNdLHQudG9rZW5UeXBlSXNQdXJlPWU9PnQuUFVSRV9UT0tFTl9UWVBFUy5pbmNsdWRlcyhlKSx0LnRva2VuVHlwZUlzTm9uUHVyZT1lPT4hKDAsdC50b2tlblR5cGVJc1B1cmUpKGUpLHQuUkVQTEFDQUJMRV9UT0tFTl9UWVBFUz1bby5jb2xvciwuLi50LkRJTUVOU0lPTl9UT0tFTl9UWVBFUywuLi50LlNUUklOR19UT0tFTl9UWVBFUywuLi50Lk9QVElPTl9UT0tFTl9UWVBFU10sdC5SRUZFUkVOQ0FCTEVfVE9LRU5fVFlQRVM9W28uY29sb3IsLi4udC5ESU1FTlNJT05fVE9LRU5fVFlQRVMsby5mb250RmFtaWx5LG8uZm9udFdlaWdodCxvLnRleHRDYXNlLG8udGV4dERlY29yYXRpb25dLHQudG9rZW5UeXBlSXNSZWZlcmVuY2FibGU9ZT0+dC5SRUZFUkVOQ0FCTEVfVE9LRU5fVFlQRVMuaW5jbHVkZXMoZSksdC5EVF9UT0tFTl9UWVBFUz1bby5jb2xvcixvLnNoYWRvdyxvLmdyYWRpZW50LG8udHlwb2dyYXBoeSxvLmJvcmRlciwuLi50LkRJTUVOU0lPTl9UT0tFTl9UWVBFUyxvLmZvbnRGYW1pbHksby5mb250V2VpZ2h0LG8uc3RyaW5nLC4uLnQuT1BUSU9OX1RPS0VOX1RZUEVTXX0sNDA2ODooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuRG9jc0VudGl0eUdyb3VwQmVoYXZpb3I9dm9pZCAwLGZ1bmN0aW9uKGUpe2UuZ3JvdXA9XCJHcm91cFwiLGUudGFicz1cIlRhYnNcIn0ob3x8KHQuRG9jc0VudGl0eUdyb3VwQmVoYXZpb3I9bz17fSkpfSw0MjkwOihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Xb3Jrc3BhY2VTdWJzY3JpcHRpb25Qcm9kdWN0Q29kZT12b2lkIDAsZnVuY3Rpb24oZSl7ZS5mcmVlPVwiZnJlZVwiLGUudGVhbT1cInRlYW1cIixlLnRlYW1UZXN0PVwidGVhbV90ZXN0XCIsZS5jb21wYW55PVwiY29tcGFueVwiLGUuZW50ZXJwcmlzZT1cImVudGVycHJpc2VcIn0ob3x8KHQuV29ya3NwYWNlU3Vic2NyaXB0aW9uUHJvZHVjdENvZGU9bz17fSkpfSw0Mzc5OihlLHQpPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5TdXBlcm5vdmFFcnJvcj12b2lkIDA7Y2xhc3MgbyBleHRlbmRzIEVycm9ye2NvbnN0cnVjdG9yKGUsdCxvLHIsbixpLGEpe3N1cGVyKGUpLHRoaXMuY29kZT10LHRoaXMuc3RhdHVzPW8sdGhpcy5mb3JtRXJyb3JzPXIsdGhpcy5yZXF1ZXN0SWQ9bix0aGlzLnNlcnZlclRpbWU9aSx0aGlzLnVybD1hfXN0YXRpYyBmcm9tTmV0d29ya1Jlc3BvbnNlKGUsdCxyKXt2YXIgbixpLGE7cmV0dXJuIG5ldyBvKGUubWVzc2FnZSxlLmVycm9yQ29kZXx8ZS5yZWFzb258fGUubGFiZWx8fG51bGwsZS5jb2RlfHx0LG51bGwhPT0obj1lLmZvcm1FcnJvcnMpJiZ2b2lkIDAhPT1uP246bnVsbCxudWxsIT09KGk9ZS5yZXF1ZXN0SWQpJiZ2b2lkIDAhPT1pP2k6bnVsbCxudWxsIT09KGE9ZS5zZXJ2ZXJUaW1lKSYmdm9pZCAwIT09YT9hOm51bGwscil9c3RhdGljIGZyb21Ob05ldHdvcmtSZXNwb25zZShlKXtyZXR1cm4gbmV3IG8oXCJObyBuZXR3b3JrIG9yIGludGVybmV0IHVucmVhY2hhYmxlXCIsXCJOT19ORVRXT1JLXCIsMTIxNjMsbnVsbCwobmV3IERhdGUpLnRvSVNPU3RyaW5nKCksbnVsbCxlKX1zdGF0aWMgZnJvbUNvZGUoZSl7cmV0dXJuIG5ldyBvKGUsZSxudWxsLG51bGwsbnVsbCxudWxsLG51bGwpfXN0YXRpYyBmcm9tTWVzc2FnZShlKXtyZXR1cm4gbmV3IG8oZSxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCl9aXNGaWVsZEVycm9yZWQoZSl7cmV0dXJuIHZvaWQgMCE9PXRoaXMuZm9ybUVycm9ycy5maW5kKCh0PT50LmtleT09PWUpKX1lcnJvckZvckZpZWxkKGUpe3ZhciB0O3JldHVybiBudWxsIT09KHQ9dGhpcy5mb3JtRXJyb3JzLmZpbmQoKHQ9PnQua2V5PT09ZSkpKSYmdm9pZCAwIT09dD90Om51bGx9dG9TdHJpbmcoKXt2YXIgZSx0LG8scixuLGk7cmV0dXJuYFxcbiAgICBFcnJvciB0aHJvd246ICR7dGhpcy5tZXNzYWdlfVxcblxcbiAgICBDb2RlOiAke251bGwhPT0oZT10aGlzLmNvZGUpJiZ2b2lkIDAhPT1lP2U6XCItXCJ9XFxuXFxuICAgIFN0YXR1czogJHtudWxsIT09KHQ9dGhpcy5zdGF0dXMpJiZ2b2lkIDAhPT10P3Q6XCItXCJ9XFxuXFxuICAgIEZpZWxkczogJHtKU09OLnN0cmluZ2lmeSh0aGlzLmZvcm1FcnJvcnMsbnVsbCwyKX1cXG5cXG4gICAgUmVxdWVzdCBJRDogJHtudWxsIT09KG89dGhpcy5yZXF1ZXN0SWQpJiZ2b2lkIDAhPT1vP286XCItXCJ9XFxuXFxuICAgIFNlcnZlciB0aW1lOiAke251bGwhPT0ocj10aGlzLnNlcnZlclRpbWUpJiZ2b2lkIDAhPT1yP3I6XCItXCJ9XFxuXFxuICAgIE5ldHdvcmsgVVJMOiAke251bGwhPT0obj10aGlzLnVybCkmJnZvaWQgMCE9PW4/bjpcIi1cIn1cXG5cXG4gICAgU3RhY2s6ICR7bnVsbCE9PShpPXRoaXMuc3RhY2spJiZ2b2lkIDAhPT1pP2k6XCItXCJ9XFxuICAgIGB9dG9IdW1hblJlYWRhYmxlKCl7cmV0dXJuYCR7dGhpcy5tZXNzYWdlfSR7dGhpcy5yZXF1ZXN0SWQ/YCAocmVxdWVzdCAke3RoaXMucmVxdWVzdElkfSlgOlwiXCJ9YH19dC5TdXBlcm5vdmFFcnJvcj1vfSw0NTQ2OihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5BTExfQk9SREVSX1NUWUxFUz10LkJvcmRlclN0eWxlPXZvaWQgMCxmdW5jdGlvbihlKXtlLmRhc2hlZD1cIkRhc2hlZFwiLGUuZG90dGVkPVwiRG90dGVkXCIsZS5zb2xpZD1cIlNvbGlkXCIsZS5ncm9vdmU9XCJHcm9vdmVcIn0ob3x8KHQuQm9yZGVyU3R5bGU9bz17fSkpLHQuQUxMX0JPUkRFUl9TVFlMRVM9W28uZGFzaGVkLG8uZG90dGVkLG8uc29saWQsby5ncm9vdmVdfSw0NjUyOihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Tb3VyY2VUeXBlPXZvaWQgMCxmdW5jdGlvbihlKXtlLmZpZ21hPVwiRmlnbWFcIixlLnRva2VuU3R1ZGlvPVwiVG9rZW5TdHVkaW9cIixlLmZpZ21hVmFyaWFibGVzUGx1Z2luPVwiRmlnbWFWYXJpYWJsZXNQbHVnaW5cIn0ob3x8KHQuU291cmNlVHlwZT1vPXt9KSl9LDUxMDI6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkRvY3VtZW50YXRpb25MZWdhY3lDYWxsb3V0VHlwZT12b2lkIDAsZnVuY3Rpb24oZSl7ZS5pbmZvPVwiSW5mb1wiLGUuc3VjY2Vzcz1cIlN1Y2Nlc3NcIixlLndhcm5pbmc9XCJXYXJuaW5nXCIsZS5lcnJvcj1cIkVycm9yXCJ9KG98fCh0LkRvY3VtZW50YXRpb25MZWdhY3lDYWxsb3V0VHlwZT1vPXt9KSl9LDU1MDM6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LldvcmtzcGFjZVN1YnNjcmlwdGlvblBsYW5JbnRlcnZhbD12b2lkIDAsZnVuY3Rpb24oZSl7ZS55ZWFybHk9XCJ5ZWFybHlcIixlLm1vbnRobHk9XCJtb250aGx5XCJ9KG98fCh0LldvcmtzcGFjZVN1YnNjcmlwdGlvblBsYW5JbnRlcnZhbD1vPXt9KSl9LDU2NTE6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkRvY3NCbG9ja0JlaGF2aW9yRGF0YVR5cGU9dm9pZCAwLGZ1bmN0aW9uKGUpe2UuaXRlbT1cIkl0ZW1cIixlLnRva2VuPVwiVG9rZW5cIixlLmFzc2V0PVwiQXNzZXRcIixlLmNvbXBvbmVudD1cIkNvbXBvbmVudFwiLGUuZmlnbWFOb2RlPVwiRmlnbWFOb2RlXCIsZS5maWdtYUNvbXBvbmVudD1cIkZpZ21hQ29tcG9uZW50XCJ9KG98fCh0LkRvY3NCbG9ja0JlaGF2aW9yRGF0YVR5cGU9bz17fSkpfSw1NjczOihlLHQpPT57dmFyIG87ZnVuY3Rpb24gcihlKXtzd2l0Y2goZS50eXBlKXtjYXNlIG8uZG9jdW1lbnRhdGlvbkl0ZW06cmV0dXJuYEBwYWdlOiR7ZS5kb2N1bWVudGF0aW9uSXRlbUlkfWA7Y2FzZSBvLnBhZ2VIZWFkaW5nOnJldHVybmBAcGFnZToke2UuZG9jdW1lbnRhdGlvbkl0ZW1JZH0jJHtlLnBhZ2VIZWFkaW5nSWR9YDtjYXNlIG8udXJsOnJldHVybiBlLnVybDtkZWZhdWx0OnJldHVybn19T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5saW5rQXR0cmlidXRlVG9Eb2NzTGluaz10LmRvY3NMaW5rVG9MaW5rQXR0cmlidXRlcz10LmRvY3NMaW5rVG9Vcmw9dC5Eb2NzTGlua1JlZlR5cGU9dm9pZCAwLGZ1bmN0aW9uKGUpe2UuZG9jdW1lbnRhdGlvbkl0ZW09XCJEb2N1bWVudGF0aW9uSXRlbVwiLGUucGFnZUhlYWRpbmc9XCJQYWdlSGVhZGluZ1wiLGUudXJsPVwiVXJsXCJ9KG98fCh0LkRvY3NMaW5rUmVmVHlwZT1vPXt9KSksdC5kb2NzTGlua1RvVXJsPXIsdC5kb2NzTGlua1RvTGlua0F0dHJpYnV0ZXM9ZnVuY3Rpb24oZSl7Y29uc3QgdD1yKGUpO2lmKHQpcmV0dXJue2hyZWY6dCx0YXJnZXQ6ZS5vcGVuSW5OZXdUYWI/XCJfYmxhbmtcIjpcIl9zZWxmXCJ9fSx0LmxpbmtBdHRyaWJ1dGVUb0RvY3NMaW5rPWZ1bmN0aW9uKGUsdCl7aWYoIWUpcmV0dXJuO2NvbnN0IHI9XCJfYmxhbmtcIj09PXQ7aWYoZS5zdGFydHNXaXRoKFwiQHBhZ2U6XCIpKXtpZihlLmluY2x1ZGVzKFwiI1wiKSl7Y29uc3RbdCxuXT1lLnJlcGxhY2UoXCJAcGFnZTpcIixcIlwiKS5zcGxpdChcIiNcIik7cmV0dXJue3R5cGU6by5wYWdlSGVhZGluZyxkb2N1bWVudGF0aW9uSXRlbUlkOnQscGFnZUhlYWRpbmdJZDpuLG9wZW5Jbk5ld1RhYjpyfX1yZXR1cm57dHlwZTpvLmRvY3VtZW50YXRpb25JdGVtLGRvY3VtZW50YXRpb25JdGVtSWQ6ZS5yZXBsYWNlKFwiQHBhZ2U6XCIsXCJcIiksb3BlbkluTmV3VGFiOnJ9fXJldHVybnt0eXBlOm8udXJsLHVybDplLG9wZW5Jbk5ld1RhYjpyfX19LDU2OTU6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkN1c3RvbURvbWFpbkVycm9yQ29kZT12b2lkIDAsZnVuY3Rpb24oZSl7ZS5nZW5lcmFsRXJyb3I9XCJHZW5lcmFsRXJyb3JcIixlLmRuc05vdENvbmZpZ3VyZWQ9XCJETlNOb3RDb25maWd1cmVkXCIsZS5tYWludGVuYW5jZT1cIk1haW50ZW5hbmNlXCJ9KG98fCh0LkN1c3RvbURvbWFpbkVycm9yQ29kZT1vPXt9KSl9LDU4ODM6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkRvY3NCbG9ja0l0ZW1Qcm9wZXJ0eU9wdGlvblJlbmRlcmluZ1N0eWxlPXZvaWQgMCxmdW5jdGlvbihlKXtlLnNlZ21lbnRlZENvbnRyb2w9XCJTZWdtZW50ZWRDb250cm9sXCIsZS50b2dnbGVCdXR0b249XCJUb2dnbGVCdXR0b25cIixlLnNlbGVjdD1cIlNlbGVjdFwiLGUuY2hlY2tib3g9XCJDaGVja2JveFwifShvfHwodC5Eb2NzQmxvY2tJdGVtUHJvcGVydHlPcHRpb25SZW5kZXJpbmdTdHlsZT1vPXt9KSl9LDU5NjM6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkRvY3NCbG9ja09wdGlvblJlbmRlcmluZ1N0eWxlPXZvaWQgMCxmdW5jdGlvbihlKXtlLnNlZ21lbnRlZENvbnRyb2w9XCJTZWdtZW50ZWRDb250cm9sXCIsZS50b2dnbGVCdXR0b249XCJUb2dnbGVCdXR0b25cIixlLnNlbGVjdD1cIlNlbGVjdFwiLGUuY2hlY2tib3g9XCJDaGVja2JveFwifShvfHwodC5Eb2NzQmxvY2tPcHRpb25SZW5kZXJpbmdTdHlsZT1vPXt9KSl9LDYxNDE6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LlZpc2liaWxpdHlUeXBlPXZvaWQgMCxmdW5jdGlvbihlKXtlLnZpc2libGU9XCJWaXNpYmxlXCIsZS5oaWRkZW49XCJIaWRkZW5cIn0ob3x8KHQuVmlzaWJpbGl0eVR5cGU9bz17fSkpfSw2MTkyOihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5CbHVyVHlwZT12b2lkIDAsZnVuY3Rpb24oZSl7ZS5sYXllcj1cIkxheWVyXCIsZS5iYWNrZ3JvdW5kPVwiQmFja2dyb3VuZFwifShvfHwodC5CbHVyVHlwZT1vPXt9KSl9LDYyOTg6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LldvcmtzcGFjZU5QTVJlZ2lzdHJ5QXV0aFR5cGU9dm9pZCAwLGZ1bmN0aW9uKGUpe2UuYmFzaWM9XCJCYXNpY1wiLGUuYmVhcmVyPVwiQmVhcmVyXCJ9KG98fCh0LldvcmtzcGFjZU5QTVJlZ2lzdHJ5QXV0aFR5cGU9bz17fSkpfSw2NjQ0OihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Eb2NzQmxvY2tSaWNoVGV4dFByb3BlcnR5U3R5bGU9dm9pZCAwLGZ1bmN0aW9uKGUpe2UudGl0bGUxPVwiVGl0bGUxXCIsZS50aXRsZTI9XCJUaXRsZTJcIixlLnRpdGxlMz1cIlRpdGxlM1wiLGUudGl0bGU0PVwiVGl0bGU0XCIsZS50aXRsZTU9XCJUaXRsZTVcIixlLnF1b3RlPVwiUXVvdGVcIixlLmNhbGxvdXQ9XCJDYWxsb3V0XCIsZS5kZWZhdWx0PVwiRGVmYXVsdFwifShvfHwodC5Eb2NzQmxvY2tSaWNoVGV4dFByb3BlcnR5U3R5bGU9bz17fSkpfSw2ODM5OihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Eb2NzQmxvY2tJdGVtUHJvcGVydHlUeXBlPXZvaWQgMCxmdW5jdGlvbihlKXtlLnJpY2hUZXh0PVwiUmljaFRleHRcIixlLm11bHRpUmljaFRleHQ9XCJNdWx0aVJpY2hUZXh0XCIsZS50ZXh0PVwiVGV4dFwiLGUucmljaFRleHRFZGl0b3I9XCJSaWNoVGV4dEVkaXRvclwiLGUuYm9vbGVhbj1cIkJvb2xlYW5cIixlLm51bWJlcj1cIk51bWJlclwiLGUuc2luZ2xlU2VsZWN0PVwiU2luZ2xlU2VsZWN0XCIsZS5tdWx0aVNlbGVjdD1cIk11bHRpU2VsZWN0XCIsZS5pbWFnZT1cIkltYWdlXCIsZS50b2tlbj1cIlRva2VuXCIsZS50b2tlblR5cGU9XCJUb2tlblR5cGVcIixlLnRva2VuUHJvcGVydHk9XCJUb2tlblByb3BlcnR5XCIsZS5jb21wb25lbnQ9XCJDb21wb25lbnRcIixlLmNvbXBvbmVudFByb3BlcnR5PVwiQ29tcG9uZW50UHJvcGVydHlcIixlLmFzc2V0PVwiQXNzZXRcIixlLmFzc2V0UHJvcGVydHk9XCJBc3NldFByb3BlcnR5XCIsZS5lbWJlZFVSTD1cIkVtYmVkVVJMXCIsZS51cmw9XCJVUkxcIixlLm1hcmtkb3duPVwiTWFya2Rvd25cIixlLmNvZGU9XCJDb2RlXCIsZS5jb2RlU2FuZGJveD1cIkNvZGVTYW5kYm94XCIsZS50YWJsZT1cIlRhYmxlXCIsZS5kaXZpZGVyPVwiRGl2aWRlclwiLGUuc3Rvcnlib29rPVwiU3Rvcnlib29rXCIsZS5jb2xvcj1cIkNvbG9yXCIsZS5maWdtYU5vZGU9XCJGaWdtYU5vZGVcIixlLmZpZ21hQ29tcG9uZW50PVwiRmlnbWFDb21wb25lbnRcIn0ob3x8KHQuRG9jc0Jsb2NrSXRlbVByb3BlcnR5VHlwZT1vPXt9KSl9LDcwNDA6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LlRleHREZWNvcmF0aW9uPXZvaWQgMCxmdW5jdGlvbihlKXtlLm9yaWdpbmFsPVwiTm9uZVwiLGUudW5kZXJsaW5lPVwiVW5kZXJsaW5lXCIsZS5zdHJpa2V0aHJvdWdoPVwiU3RyaWtldGhyb3VnaFwifShvfHwodC5UZXh0RGVjb3JhdGlvbj1vPXt9KSl9LDcyOTE6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkRvY3NCbG9ja0l0ZW1WYXJpYW50TGF5b3V0V2lkdGg9dm9pZCAwLGZ1bmN0aW9uKGUpe2UuYzE9XCIxXCIsZS5jMj1cIjJcIixlLmMzPVwiM1wiLGUuYzQ9XCI0XCIsZS5jNT1cIjVcIixlLmM2PVwiNlwiLGUuYzc9XCI3XCIsZS5jOD1cIjhcIixlLmM5PVwiOVwiLGUuYzEwPVwiMTBcIixlLmMxMT1cIjExXCIsZS5jMTI9XCIxMlwifShvfHwodC5Eb2NzQmxvY2tJdGVtVmFyaWFudExheW91dFdpZHRoPW89e30pKX0sNzM3OTooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuRG9jdW1lbnRhdGlvbkxlZ2FjeUl0ZW1UeXBlPXZvaWQgMCxmdW5jdGlvbihlKXtlLmdyb3VwPVwiR3JvdXBcIixlLnBhZ2U9XCJQYWdlXCJ9KG98fCh0LkRvY3VtZW50YXRpb25MZWdhY3lJdGVtVHlwZT1vPXt9KSl9LDc0NzY6KGUsdCk9Pnt2YXIgbyxyO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuVGV4dEFsaWdubWVudD10LkFsaWdubWVudD12b2lkIDAsZnVuY3Rpb24oZSl7ZS5sZWZ0PVwiTGVmdFwiLGUuY2VudGVyPVwiQ2VudGVyXCIsZS5zdHJldGNoPVwiU3RyZXRjaFwifShvfHwodC5BbGlnbm1lbnQ9bz17fSkpLGZ1bmN0aW9uKGUpe2UubGVmdD1cIkxlZnRcIixlLmNlbnRlcj1cIkNlbnRlclwiLGUucmlnaHQ9XCJSaWdodFwifShyfHwodC5UZXh0QWxpZ25tZW50PXI9e30pKX0sNzQ3OTooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuRG9jc0Jsb2NrSXRlbVByb3BlcnR5VGV4dFN0eWxlPXZvaWQgMCxmdW5jdGlvbihlKXtlLnNtYWxsPVwiU21hbGxcIixlLnJlZ3VsYXI9XCJSZWd1bGFyXCIsZS5ib2xkPVwiQm9sZFwifShvfHwodC5Eb2NzQmxvY2tJdGVtUHJvcGVydHlUZXh0U3R5bGU9bz17fSkpfSw3NzM3OihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5DdXN0b21Eb21haW5TdGF0ZT12b2lkIDAsZnVuY3Rpb24oZSl7ZS5pbml0aWFsPVwiSW5pdGlhbFwiLGUuZG9tYWluU2V0dXBJblByb2dyZXNzPVwiRG9tYWluU2V0dXBJblByb2dyZXNzXCIsZS5kb21haW5TZXR1cEZhaWxlZD1cIkRvbWFpblNldHVwRmFpbGVkXCIsZS5kb21haW5TZXR1cHNTdWNjZXM9XCJEb21haW5TZXR1cFN1Y2Nlc3NcIixlLnNzbFNldHVwSW5Qcm9ncmVzcz1cIlNTTFNldHVwSW5Qcm9ncmVzc1wiLGUuc3NsU2V0dXBGYWlsZWQ9XCJTU0xTZXR1cEZhaWxlZFwiLGUuc3NsU2V0dXBTdWNjZXNzPVwiU1NMU2V0dXBTdWNjZXNzXCJ9KG98fCh0LkN1c3RvbURvbWFpblN0YXRlPW89e30pKX0sNzk2ODooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuV29ya3NwYWNlTlBNUmVnaXN0cnlUeXBlPXZvaWQgMCxmdW5jdGlvbihlKXtlLm5wbUpTPVwiTlBNSlNcIixlLmdpdEh1Yj1cIkdpdEh1YlwiLGUuYXp1cmVEZXZPcHM9XCJBenVyZURldk9wc1wiLGUuYXJ0aWZhY3Rvcnk9XCJBcnRpZmFjdG9yeVwiLGUuY3VzdG9tPVwiQ3VzdG9tXCJ9KG98fCh0LldvcmtzcGFjZU5QTVJlZ2lzdHJ5VHlwZT1vPXt9KSl9LDc5NzE6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkRvY3NTZWN0aW9uVHlwZT12b2lkIDAsZnVuY3Rpb24oZSl7ZS5wbGFpbj1cIlBsYWluXCIsZS50YWJzPVwiVGFic1wifShvfHwodC5Eb2NzU2VjdGlvblR5cGU9bz17fSkpfSw4MDQyOihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5JbXBvcnRXYXJuaW5nVHlwZT12b2lkIDAsZnVuY3Rpb24oZSl7ZS5VbnN1cHBvcnRlZEZpbGw9XCJVbnN1cHBvcnRlZEZpbGxcIixlLlVuc3VwcG9ydGVkU3Ryb2tlPVwiVW5zdXBwb3J0ZWRTdHJva2VcIixlLlVuc3VwcG9ydGVkRWZmZWN0PVwiVW5zdXBwb3J0ZWRFZmZlY3RcIixlLlN0eWxlTm90QXBwbGllZD1cIlN0eWxlTm90QXBwbGllZFwiLGUuTm9QdWJsaXNoZWRTdHlsZXM9XCJOb1B1Ymxpc2hlZFN0eWxlc1wiLGUuTm9QdWJsaXNoZWRDb21wb25lbnRzPVwiTm9QdWJsaXNoZWRDb21wb25lbnRzXCIsZS5Ob1B1Ymxpc2hlZEFzc2V0cz1cIk5vUHVibGlzaGVkQXNzZXRzXCIsZS5Ob1ZlcnNpb25Gb3VuZD1cIk5vVmVyc2lvbkZvdW5kXCIsZS5Db21wb25lbnRIYXNOb1RodW1ibmFpbD1cIkNvbXBvbmVudEhhc05vVGh1bWJuYWlsXCIsZS5EdXBsaWNhdGVJbXBvcnRlZFN0eWxlSWQ9XCJEdXBsaWNhdGVJbXBvcnRlZFN0eWxlSWRcIixlLkR1cGxpY2F0ZUltcG9ydGVkU3R5bGVQYXRoPVwiRHVwbGljYXRlSW1wb3J0ZWRTdHlsZVBhdGhcIixlLk5vUHVibGlzaGVkRWxlbWVudHM9XCJOb1B1Ymxpc2hlZEVsZW1lbnRzXCIsZS5Ob1VucHVibGlzaGVkU3R5bGVzPVwiTm9VbnB1Ymxpc2hlZFN0eWxlc1wifShvfHwodC5JbXBvcnRXYXJuaW5nVHlwZT1vPXt9KSl9LDgwNjE6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkRvY3NCbG9ja0l0ZW1Qcm9wZXJ0eVJpY2hUZXh0U3R5bGU9dm9pZCAwLGZ1bmN0aW9uKGUpe2UudGl0bGUxPVwiVGl0bGUxXCIsZS50aXRsZTI9XCJUaXRsZTJcIixlLnRpdGxlMz1cIlRpdGxlM1wiLGUudGl0bGU0PVwiVGl0bGU0XCIsZS50aXRsZTU9XCJUaXRsZTVcIixlLnF1b3RlPVwiUXVvdGVcIixlLmNhbGxvdXQ9XCJDYWxsb3V0XCIsZS5vbD1cIk9MXCIsZS51bD1cIlVMXCJ9KG98fCh0LkRvY3NCbG9ja0l0ZW1Qcm9wZXJ0eVJpY2hUZXh0U3R5bGU9bz17fSkpfSw4MDk1OihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Eb2NzQmxvY2tJdGVtVmFyaWFudExheW91dFR5cGU9dm9pZCAwLGZ1bmN0aW9uKGUpe2UuY29sdW1uPVwiQ29sdW1uXCIsZS5yb3c9XCJSb3dcIn0ob3x8KHQuRG9jc0Jsb2NrSXRlbVZhcmlhbnRMYXlvdXRUeXBlPW89e30pKX0sODYwNzooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuTVNfVU5JVFM9dC5QWF9VTklUUz10LlJBV19VTklUUz10LkxJTkVfSEVJR0hUX1VOSVRTPXQuU0laRV9VTklUUz10LlVuaXQ9dm9pZCAwLGZ1bmN0aW9uKGUpe2UucGl4ZWxzPVwiUGl4ZWxzXCIsZS5wZXJjZW50PVwiUGVyY2VudFwiLGUucmVtPVwiUmVtXCIsZS5tcz1cIk1zXCIsZS5yYXc9XCJSYXdcIn0ob3x8KHQuVW5pdD1vPXt9KSksdC5TSVpFX1VOSVRTPVtvLnBpeGVscyxvLnBlcmNlbnQsby5yZW1dLHQuTElORV9IRUlHSFRfVU5JVFM9W28ucGl4ZWxzLG8ucGVyY2VudCxvLnJlbSxvLnJhd10sdC5SQVdfVU5JVFM9W28ucmF3XSx0LlBYX1VOSVRTPVtvLnBpeGVsc10sdC5NU19VTklUUz1bby5tc119LDg3Mzg6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkFzc2V0Rm9ybWF0PXZvaWQgMCxmdW5jdGlvbihlKXtlLnBuZz1cInBuZ1wiLGUucGRmPVwicGRmXCIsZS5zdmc9XCJzdmdcIn0ob3x8KHQuQXNzZXRGb3JtYXQ9bz17fSkpfSw4ODkwOihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Eb2NzQmxvY2tJbWFnZVByb3BlcnR5QXNwZWN0UmF0aW89dm9pZCAwLGZ1bmN0aW9uKGUpe2UuYXV0bz1cIkF1dG9cIixlLnNxdWFyZT1cIlNxdWFyZVwiLGUubGFuZHNjYXBlPVwiTGFuZHNjYXBlXCIsZS5wb3J0cmFpdD1cIlBvcnRyYWl0XCIsZS53aWRlPVwiV2lkZVwifShvfHwodC5Eb2NzQmxvY2tJbWFnZVByb3BlcnR5QXNwZWN0UmF0aW89bz17fSkpfSw5MTI1OihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5TaGFkb3dUeXBlPXZvaWQgMCxmdW5jdGlvbihlKXtlLmRyb3A9XCJEcm9wXCIsZS5pbm5lcj1cIklubmVyXCJ9KG98fCh0LlNoYWRvd1R5cGU9bz17fSkpfSw5MTMzOihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Eb2NzQmxvY2tPcHRpb25Db2xvcj12b2lkIDAsZnVuY3Rpb24oZSl7ZS5ncmVlbj1cIkdyZWVuXCIsZS5yZWQ9XCJSZWRcIixlLnllbGxvdz1cIlllbGxvd1wiLGUuYmx1ZT1cIkJsdWVcIixlLnB1cnBsZT1cIlB1cnBsZVwiLGUub3JhbmdlPVwiT3JhbmdlXCIsZS5waW5rPVwiUGlua1wiLGUudGVhbD1cIlRlYWxcIixlLmdyZXk9XCJHcmV5XCIsZS5saWdodEdyZXk9XCJMaWdodEdyZXlcIixlLmN5YW49XCJDeWFuXCIsZS5mdWNoc2lhPVwiRnVjaHNpYVwifShvfHwodC5Eb2NzQmxvY2tPcHRpb25Db2xvcj1vPXt9KSl9LDkzNzc6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkRvY3NCbG9ja0l0ZW1FbnRpdHlUeXBlPXZvaWQgMCxmdW5jdGlvbihlKXtlLnRva2VuPVwiVG9rZW5cIixlLnRva2VuR3JvdXA9XCJUb2tlbkdyb3VwXCIsZS5hc3NldD1cIkFzc2V0XCIsZS5hc3NldEdyb3VwPVwiQXNzZXRHcm91cFwiLGUuY29tcG9uZW50PVwiQ29tcG9uZW50XCIsZS5jb21wb25lbnRHcm91cD1cIkNvbXBvbmVudEdyb3VwXCJ9KG98fCh0LkRvY3NCbG9ja0l0ZW1FbnRpdHlUeXBlPW89e30pKX0sOTQ3ODooZSx0LG8pPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5jb252ZXJ0UmVtb3RlVG9Vc2VyUm9sZT10LlVzZXJSb2xlPXZvaWQgMDtjb25zdCByPW8oNDM3OSk7dmFyIG47IWZ1bmN0aW9uKGUpe2Uub3duZXI9XCJPd25lclwiLGUuYWRtaW49XCJBZG1pblwiLGUuY3JlYXRvcj1cIkNyZWF0b3JcIixlLmNvbnRyaWJ1dG9yPVwiQ29udHJpYnV0b3JcIixlLmJpbGxpbmc9XCJCaWxsaW5nXCIsZS52aWV3ZXI9XCJWaWV3ZXJcIn0obnx8KHQuVXNlclJvbGU9bj17fSkpLHQuY29udmVydFJlbW90ZVRvVXNlclJvbGU9ZT0+e3N3aXRjaChlKXtjYXNlXCJPd25lclwiOnJldHVybiBuLm93bmVyO2Nhc2VcIkFkbWluXCI6cmV0dXJuIG4uYWRtaW47Y2FzZVwiQ3JlYXRvclwiOnJldHVybiBuLmNyZWF0b3I7Y2FzZVwiQ29udHJpYnV0b3JcIjpyZXR1cm4gbi5jb250cmlidXRvcjtjYXNlXCJCaWxsaW5nXCI6cmV0dXJuIG4uYmlsbGluZztjYXNlXCJWaWV3ZXJcIjpyZXR1cm4gbi52aWV3ZXI7ZGVmYXVsdDp0aHJvdyByLlN1cGVybm92YUVycm9yLmZyb21NZXNzYWdlKGBVbmtub3duIHJvbGU6ICR7ZX1gKX19fSw5ODk2OihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Eb2N1bWVudGF0aW9uTGVnYWN5SGVhZGluZ1R5cGU9dm9pZCAwLGZ1bmN0aW9uKGUpe2VbZS5oMT0xXT1cImgxXCIsZVtlLmgyPTJdPVwiaDJcIixlW2UuaDM9M109XCJoM1wifShvfHwodC5Eb2N1bWVudGF0aW9uTGVnYWN5SGVhZGluZ1R5cGU9bz17fSkpfSw5OTMyOihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5kb2NzSW1hZ2VSZWZUb1VybD10LkRvY3NJbWFnZVJlZlR5cGU9dm9pZCAwLGZ1bmN0aW9uKGUpe2UucmVzb3VyY2U9XCJSZXNvdXJjZVwiLGUuZmlnbWFOb2RlPVwiRmlnbWFOb2RlXCJ9KG98fCh0LkRvY3NJbWFnZVJlZlR5cGU9bz17fSkpLHQuZG9jc0ltYWdlUmVmVG9Vcmw9ZnVuY3Rpb24oZSx0LHIpe3ZhciBuO2lmKGUpc3dpdGNoKGUudHlwZSl7Y2FzZSBvLnJlc291cmNlOnJldHVybiBudWxsPT09KG49ZS5yZXNvdXJjZSl8fHZvaWQgMD09PW4/dm9pZCAwOm4udXJsO2Nhc2Ugby5maWdtYU5vZGU6aWYoIWUuZmlnbWFOb2RlfHwhZS5maWdtYU5vZGUuc291cmNlSWR8fCFlLmZpZ21hTm9kZS5mcmFtZVJlZmVyZW5jZUlkKXJldHVybjtyZXR1cm4gdC5yZXNvdXJjZXMuZ2V0RmlnbWFGcmFtZUhvc3RlZFVybCh7ZGVzaWduU3lzdGVtSWQ6ci5kc0lkLHZlcnNpb25JZDpyLnZlcnNpb25JZH0sZS5maWdtYU5vZGUuZnJhbWVSZWZlcmVuY2VJZCk7ZGVmYXVsdDpyZXR1cm59fX19LHQ9e307ZnVuY3Rpb24gbyhyKXt2YXIgbj10W3JdO2lmKHZvaWQgMCE9PW4pcmV0dXJuIG4uZXhwb3J0czt2YXIgaT10W3JdPXtleHBvcnRzOnt9fTtyZXR1cm4gZVtyXShpLGkuZXhwb3J0cyxvKSxpLmV4cG9ydHN9dmFyIHI9e307KCgpPT57dmFyIGU9cjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxlLlRva2VuVHlwZT1lLlRleHREZWNvcmF0aW9uPWUuVGV4dENhc2U9ZS5TaGFkb3dUeXBlPWUuUmljaFRleHRTcGFuQXR0cmlidXRlVHlwZT1lLkdyYWRpZW50VHlwZT1lLkZyYW1lTGF5b3V0PWUuRnJhbWVBbGlnbm1lbnQ9ZS5JY29uU2V0PWUuU291cmNlVHlwZT1lLkRvY3NJbWFnZVJlZlR5cGU9ZS5Eb2NzTGlua1JlZlR5cGU9ZS5Eb2NzU2VjdGlvblR5cGU9ZS5Eb2NzRW50aXR5VHlwZT1lLkRvY3NFbnRpdHlHcm91cEJlaGF2aW9yPWUuRG9jc0Jsb2NrVGV4dFByb3BlcnR5U3R5bGU9ZS5Eb2NzQmxvY2tSaWNoVGV4dFByb3BlcnR5U3R5bGU9ZS5Eb2NzQmxvY2tPcHRpb25Db2xvcj1lLkRvY3NCbG9ja09wdGlvblJlbmRlcmluZ1N0eWxlPWUuRG9jc0Jsb2NrSXRlbVZhcmlhbnRMYXlvdXRXaWR0aD1lLkRvY3NCbG9ja0l0ZW1WYXJpYW50TGF5b3V0VHlwZT1lLkRvY3NCbG9ja0l0ZW1Qcm9wZXJ0eVR5cGU9ZS5Eb2NzQmxvY2tJdGVtUHJvcGVydHlUZXh0U3R5bGU9ZS5Eb2NzQmxvY2tJdGVtUHJvcGVydHlSaWNoVGV4dFN0eWxlPWUuRG9jc0Jsb2NrSXRlbVByb3BlcnR5T3B0aW9uUmVuZGVyaW5nU3R5bGU9ZS5Eb2NzQmxvY2tJdGVtRW50aXR5VHlwZT1lLkRvY3NCbG9ja0ltYWdlUHJvcGVydHlBc3BlY3RSYXRpbz1lLkRvY3NCbG9ja0JlaGF2aW9yU2VsZWN0aW9uVHlwZT1lLkRvY3NCbG9ja0JlaGF2aW9yRGF0YVR5cGU9ZS5Eb2N1bWVudGF0aW9uTGVnYWN5UGFnZUJsb2NrU2hvcnRjdXRUeXBlPWUuRG9jdW1lbnRhdGlvbkxlZ2FjeVBhZ2VCbG9ja1RoZW1lVHlwZT1lLkRvY3VtZW50YXRpb25MZWdhY3lQYWdlQmxvY2tUeXBlPWUuRG9jdW1lbnRhdGlvbkxlZ2FjeVBhZ2VBc3NldFR5cGU9ZS5Eb2N1bWVudGF0aW9uTGVnYWN5SXRlbVR5cGU9ZS5Eb2N1bWVudGF0aW9uTGVnYWN5SGVhZGluZ1R5cGU9ZS5Eb2N1bWVudGF0aW9uTGVnYWN5R3JvdXBCZWhhdmlvcj1lLkRvY3VtZW50YXRpb25MZWdhY3lDYWxsb3V0VHlwZT1lLkJvcmRlclN0eWxlPWUuQm9yZGVyUG9zaXRpb249ZS5CbHVyVHlwZT1lLkFzc2V0U2NhbGVUeXBlPWUuQXNzZXRTY2FsZT1lLkFzc2V0Rm9ybWF0PWUuQWxpZ25tZW50PWUuQUxMX1RPS0VOX1RZUEVTPWUuQUxMX0JPUkRFUl9TVFlMRVM9ZS5BTExfQk9SREVSX1BPU0lUSU9OUz1lLk9QVElPTl9UT0tFTl9UWVBFUz1lLlNUUklOR19UT0tFTl9UWVBFUz1lLkRJTUVOU0lPTl9UT0tFTl9UWVBFUz12b2lkIDAsZS5QdWxzYXJFeGVjdXRvcj1lLk91dHB1dEZpbGVUeXBlPWUuQ3VzdG9tRG9tYWluU3RhdGU9ZS5DdXN0b21Eb21haW5FcnJvckNvZGU9ZS5JbXBvcnRXYXJuaW5nVHlwZT1lLldvcmtzcGFjZU5QTVJlZ2lzdHJ5VHlwZT1lLldvcmtzcGFjZU5QTVJlZ2lzdHJ5QXV0aFR5cGU9ZS5Xb3Jrc3BhY2VTdWJzY3JpcHRpb25TdGF0dXM9ZS5Xb3Jrc3BhY2VTdWJzY3JpcHRpb25Qcm9kdWN0Q29kZT1lLldvcmtzcGFjZVN1YnNjcmlwdGlvblBsYW5JbnRlcnZhbD1lLlZpc2liaWxpdHlUeXBlPWUuVXNlclJvbGU9ZS5Vbml0PXZvaWQgMDt2YXIgdD1vKDM3ODgpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiRElNRU5TSU9OX1RPS0VOX1RZUEVTXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHQuRElNRU5TSU9OX1RPS0VOX1RZUEVTfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiU1RSSU5HX1RPS0VOX1RZUEVTXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHQuU1RSSU5HX1RPS0VOX1RZUEVTfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiT1BUSU9OX1RPS0VOX1RZUEVTXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHQuT1BUSU9OX1RPS0VOX1RZUEVTfX0pO3ZhciBuPW8oMTE2MCk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJBTExfQk9SREVSX1BPU0lUSU9OU1wiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBuLkFMTF9CT1JERVJfUE9TSVRJT05TfX0pO3ZhciBpPW8oNDU0Nik7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJBTExfQk9SREVSX1NUWUxFU1wiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBpLkFMTF9CT1JERVJfU1RZTEVTfX0pO3ZhciBhPW8oMzc4OCk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJBTExfVE9LRU5fVFlQRVNcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gYS5BTExfVE9LRU5fVFlQRVN9fSk7dmFyIGM9byg3NDc2KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIkFsaWdubWVudFwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBjLkFsaWdubWVudH19KTt2YXIgbD1vKDg3MzgpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiQXNzZXRGb3JtYXRcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbC5Bc3NldEZvcm1hdH19KTt2YXIgdT1vKDkxNSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJBc3NldFNjYWxlXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHUuQXNzZXRTY2FsZX19KTt2YXIgcz1vKDg5OSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJBc3NldFNjYWxlVHlwZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBzLkFzc2V0U2NhbGVUeXBlfX0pO3ZhciBkPW8oNjE5Mik7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJCbHVyVHlwZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBkLkJsdXJUeXBlfX0pO3ZhciBwPW8oMTE2MCk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJCb3JkZXJQb3NpdGlvblwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBwLkJvcmRlclBvc2l0aW9ufX0pO3ZhciB5PW8oNDU0Nik7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJCb3JkZXJTdHlsZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiB5LkJvcmRlclN0eWxlfX0pO3ZhciBtPW8oNTEwMik7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJEb2N1bWVudGF0aW9uTGVnYWN5Q2FsbG91dFR5cGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbS5Eb2N1bWVudGF0aW9uTGVnYWN5Q2FsbG91dFR5cGV9fSk7dmFyIFQ9bygyMTIzKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIkRvY3VtZW50YXRpb25MZWdhY3lHcm91cEJlaGF2aW9yXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIFQuRG9jdW1lbnRhdGlvbkxlZ2FjeUdyb3VwQmVoYXZpb3J9fSk7dmFyIHY9byg5ODk2KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIkRvY3VtZW50YXRpb25MZWdhY3lIZWFkaW5nVHlwZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiB2LkRvY3VtZW50YXRpb25MZWdhY3lIZWFkaW5nVHlwZX19KTt2YXIgZj1vKDczNzkpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiRG9jdW1lbnRhdGlvbkxlZ2FjeUl0ZW1UeXBlXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGYuRG9jdW1lbnRhdGlvbkxlZ2FjeUl0ZW1UeXBlfX0pO3ZhciBnPW8oMTQyMyk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJEb2N1bWVudGF0aW9uTGVnYWN5UGFnZUFzc2V0VHlwZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBnLkRvY3VtZW50YXRpb25MZWdhY3lQYWdlQXNzZXRUeXBlfX0pO3ZhciBQPW8oMTg0Nik7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJEb2N1bWVudGF0aW9uTGVnYWN5UGFnZUJsb2NrVHlwZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBQLkRvY3VtZW50YXRpb25MZWdhY3lQYWdlQmxvY2tUeXBlfX0pO3ZhciBiPW8oMTYwMSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJEb2N1bWVudGF0aW9uTGVnYWN5UGFnZUJsb2NrVGhlbWVUeXBlXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGIuRG9jdW1lbnRhdGlvbkxlZ2FjeVBhZ2VCbG9ja1RoZW1lVHlwZX19KTt2YXIgUz1vKDI2NTcpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiRG9jdW1lbnRhdGlvbkxlZ2FjeVBhZ2VCbG9ja1Nob3J0Y3V0VHlwZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBTLkRvY3VtZW50YXRpb25MZWdhY3lQYWdlQmxvY2tTaG9ydGN1dFR5cGV9fSk7dmFyIE89byg1NjUxKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIkRvY3NCbG9ja0JlaGF2aW9yRGF0YVR5cGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gTy5Eb2NzQmxvY2tCZWhhdmlvckRhdGFUeXBlfX0pO3ZhciBfPW8oMzczMyk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJEb2NzQmxvY2tCZWhhdmlvclNlbGVjdGlvblR5cGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gXy5Eb2NzQmxvY2tCZWhhdmlvclNlbGVjdGlvblR5cGV9fSk7dmFyIEQ9byg4ODkwKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIkRvY3NCbG9ja0ltYWdlUHJvcGVydHlBc3BlY3RSYXRpb1wiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBELkRvY3NCbG9ja0ltYWdlUHJvcGVydHlBc3BlY3RSYXRpb319KTt2YXIgST1vKDkzNzcpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiRG9jc0Jsb2NrSXRlbUVudGl0eVR5cGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gSS5Eb2NzQmxvY2tJdGVtRW50aXR5VHlwZX19KTt2YXIgRT1vKDU4ODMpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiRG9jc0Jsb2NrSXRlbVByb3BlcnR5T3B0aW9uUmVuZGVyaW5nU3R5bGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gRS5Eb2NzQmxvY2tJdGVtUHJvcGVydHlPcHRpb25SZW5kZXJpbmdTdHlsZX19KTt2YXIgaD1vKDgwNjEpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiRG9jc0Jsb2NrSXRlbVByb3BlcnR5UmljaFRleHRTdHlsZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBoLkRvY3NCbG9ja0l0ZW1Qcm9wZXJ0eVJpY2hUZXh0U3R5bGV9fSk7dmFyIGs9byg3NDc5KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIkRvY3NCbG9ja0l0ZW1Qcm9wZXJ0eVRleHRTdHlsZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBrLkRvY3NCbG9ja0l0ZW1Qcm9wZXJ0eVRleHRTdHlsZX19KTt2YXIgTj1vKDY4MzkpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiRG9jc0Jsb2NrSXRlbVByb3BlcnR5VHlwZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBOLkRvY3NCbG9ja0l0ZW1Qcm9wZXJ0eVR5cGV9fSk7dmFyIEI9byg4MDk1KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIkRvY3NCbG9ja0l0ZW1WYXJpYW50TGF5b3V0VHlwZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBCLkRvY3NCbG9ja0l0ZW1WYXJpYW50TGF5b3V0VHlwZX19KTt2YXIgTD1vKDcyOTEpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiRG9jc0Jsb2NrSXRlbVZhcmlhbnRMYXlvdXRXaWR0aFwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBMLkRvY3NCbG9ja0l0ZW1WYXJpYW50TGF5b3V0V2lkdGh9fSk7dmFyIFI9byg1OTYzKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIkRvY3NCbG9ja09wdGlvblJlbmRlcmluZ1N0eWxlXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIFIuRG9jc0Jsb2NrT3B0aW9uUmVuZGVyaW5nU3R5bGV9fSk7dmFyIGo9byg5MTMzKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIkRvY3NCbG9ja09wdGlvbkNvbG9yXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGouRG9jc0Jsb2NrT3B0aW9uQ29sb3J9fSk7dmFyIEM9byg2NjQ0KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIkRvY3NCbG9ja1JpY2hUZXh0UHJvcGVydHlTdHlsZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBDLkRvY3NCbG9ja1JpY2hUZXh0UHJvcGVydHlTdHlsZX19KTt2YXIgTT1vKDMwNik7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJEb2NzQmxvY2tUZXh0UHJvcGVydHlTdHlsZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBNLkRvY3NCbG9ja1RleHRQcm9wZXJ0eVN0eWxlfX0pO3ZhciB4PW8oNDA2OCk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJEb2NzRW50aXR5R3JvdXBCZWhhdmlvclwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiB4LkRvY3NFbnRpdHlHcm91cEJlaGF2aW9yfX0pO3ZhciBBPW8oMTIzMyk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJEb2NzRW50aXR5VHlwZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBBLkRvY3NFbnRpdHlUeXBlfX0pO3ZhciBGPW8oNzk3MSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJEb2NzU2VjdGlvblR5cGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gRi5Eb2NzU2VjdGlvblR5cGV9fSk7dmFyIHc9byg1NjczKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIkRvY3NMaW5rUmVmVHlwZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiB3LkRvY3NMaW5rUmVmVHlwZX19KTt2YXIgVT1vKDk5MzIpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiRG9jc0ltYWdlUmVmVHlwZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBVLkRvY3NJbWFnZVJlZlR5cGV9fSk7dmFyIFk9byg0NjUyKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIlNvdXJjZVR5cGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gWS5Tb3VyY2VUeXBlfX0pO3ZhciBXPW8oOTM0KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIkljb25TZXRcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gVy5JY29uU2V0fX0pO3ZhciBHPW8oMTI1NSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJGcmFtZUFsaWdubWVudFwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBHLkZyYW1lQWxpZ25tZW50fX0pO3ZhciBLPW8oMzcxOCk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJGcmFtZUxheW91dFwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBLLkZyYW1lTGF5b3V0fX0pO3ZhciBIPW8oMSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJHcmFkaWVudFR5cGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gSC5HcmFkaWVudFR5cGV9fSk7dmFyIFY9bygyNjc0KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIlJpY2hUZXh0U3BhbkF0dHJpYnV0ZVR5cGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gVi5SaWNoVGV4dFNwYW5BdHRyaWJ1dGVUeXBlfX0pO3ZhciAkPW8oOTEyNSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJTaGFkb3dUeXBlXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuICQuU2hhZG93VHlwZX19KTt2YXIgcT1vKDkyMik7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJUZXh0Q2FzZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBxLlRleHRDYXNlfX0pO3ZhciB6PW8oNzA0MCk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJUZXh0RGVjb3JhdGlvblwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiB6LlRleHREZWNvcmF0aW9ufX0pO3ZhciBKPW8oMzc4OCk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJUb2tlblR5cGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gSi5Ub2tlblR5cGV9fSk7dmFyIFE9byg4NjA3KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIlVuaXRcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gUS5Vbml0fX0pO3ZhciBaPW8oOTQ3OCk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJVc2VyUm9sZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBaLlVzZXJSb2xlfX0pO3ZhciBYPW8oNjE0MSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJWaXNpYmlsaXR5VHlwZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBYLlZpc2liaWxpdHlUeXBlfX0pO3ZhciBlZT1vKDU1MDMpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiV29ya3NwYWNlU3Vic2NyaXB0aW9uUGxhbkludGVydmFsXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGVlLldvcmtzcGFjZVN1YnNjcmlwdGlvblBsYW5JbnRlcnZhbH19KTt2YXIgdGU9byg0MjkwKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIldvcmtzcGFjZVN1YnNjcmlwdGlvblByb2R1Y3RDb2RlXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRlLldvcmtzcGFjZVN1YnNjcmlwdGlvblByb2R1Y3RDb2RlfX0pO3ZhciBvZT1vKDM2MDcpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiV29ya3NwYWNlU3Vic2NyaXB0aW9uU3RhdHVzXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG9lLldvcmtzcGFjZVN1YnNjcmlwdGlvblN0YXR1c319KTt2YXIgcmU9byg2Mjk4KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIldvcmtzcGFjZU5QTVJlZ2lzdHJ5QXV0aFR5cGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcmUuV29ya3NwYWNlTlBNUmVnaXN0cnlBdXRoVHlwZX19KTt2YXIgbmU9byg3OTY4KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIldvcmtzcGFjZU5QTVJlZ2lzdHJ5VHlwZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBuZS5Xb3Jrc3BhY2VOUE1SZWdpc3RyeVR5cGV9fSk7dmFyIGllPW8oODA0Mik7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJJbXBvcnRXYXJuaW5nVHlwZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBpZS5JbXBvcnRXYXJuaW5nVHlwZX19KTt2YXIgYWU9byg1Njk1KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIkN1c3RvbURvbWFpbkVycm9yQ29kZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBhZS5DdXN0b21Eb21haW5FcnJvckNvZGV9fSk7dmFyIGNlPW8oNzczNyk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJDdXN0b21Eb21haW5TdGF0ZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBjZS5DdXN0b21Eb21haW5TdGF0ZX19KTt2YXIgbGU9bygyODAyKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIk91dHB1dEZpbGVUeXBlXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGxlLk91dHB1dEZpbGVUeXBlfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiUHVsc2FyRXhlY3V0b3JcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbGUuUHVsc2FyRXhlY3V0b3J9fSl9KSgpO3ZhciBuPWV4cG9ydHM7Zm9yKHZhciBpIGluIHIpbltpXT1yW2ldO3IuX19lc01vZHVsZSYmT2JqZWN0LmRlZmluZVByb3BlcnR5KG4sXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSl9KSgpOyIsIi8vIFJlZ2V4cHMgaW52b2x2ZWQgd2l0aCBzcGxpdHRpbmcgd29yZHMgaW4gdmFyaW91cyBjYXNlIGZvcm1hdHMuXG5jb25zdCBTUExJVF9MT1dFUl9VUFBFUl9SRSA9IC8oW1xccHtMbH1cXGRdKShcXHB7THV9KS9ndTtcbmNvbnN0IFNQTElUX1VQUEVSX1VQUEVSX1JFID0gLyhcXHB7THV9KShbXFxwe0x1fV1bXFxwe0xsfV0pL2d1O1xuLy8gVXNlZCB0byBpdGVyYXRlIG92ZXIgdGhlIGluaXRpYWwgc3BsaXQgcmVzdWx0IGFuZCBzZXBhcmF0ZSBudW1iZXJzLlxuY29uc3QgU1BMSVRfU0VQQVJBVEVfTlVNQkVSX1JFID0gLyhcXGQpXFxwe0xsfXwoXFxwe0x9KVxcZC91O1xuLy8gUmVnZXhwIGludm9sdmVkIHdpdGggc3RyaXBwaW5nIG5vbi13b3JkIGNoYXJhY3RlcnMgZnJvbSB0aGUgcmVzdWx0LlxuY29uc3QgREVGQVVMVF9TVFJJUF9SRUdFWFAgPSAvW15cXHB7TH1cXGRdKy9naXU7XG4vLyBUaGUgcmVwbGFjZW1lbnQgdmFsdWUgZm9yIHNwbGl0cy5cbmNvbnN0IFNQTElUX1JFUExBQ0VfVkFMVUUgPSBcIiQxXFwwJDJcIjtcbi8vIFRoZSBkZWZhdWx0IGNoYXJhY3RlcnMgdG8ga2VlcCBhZnRlciB0cmFuc2Zvcm1pbmcgY2FzZS5cbmNvbnN0IERFRkFVTFRfUFJFRklYX1NVRkZJWF9DSEFSQUNURVJTID0gXCJcIjtcbi8qKlxuICogU3BsaXQgYW55IGNhc2VkIGlucHV0IHN0cmluZ3MgaW50byBhbiBhcnJheSBvZiB3b3Jkcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNwbGl0KHZhbHVlKSB7XG4gICAgbGV0IHJlc3VsdCA9IHZhbHVlLnRyaW0oKTtcbiAgICByZXN1bHQgPSByZXN1bHRcbiAgICAgICAgLnJlcGxhY2UoU1BMSVRfTE9XRVJfVVBQRVJfUkUsIFNQTElUX1JFUExBQ0VfVkFMVUUpXG4gICAgICAgIC5yZXBsYWNlKFNQTElUX1VQUEVSX1VQUEVSX1JFLCBTUExJVF9SRVBMQUNFX1ZBTFVFKTtcbiAgICByZXN1bHQgPSByZXN1bHQucmVwbGFjZShERUZBVUxUX1NUUklQX1JFR0VYUCwgXCJcXDBcIik7XG4gICAgbGV0IHN0YXJ0ID0gMDtcbiAgICBsZXQgZW5kID0gcmVzdWx0Lmxlbmd0aDtcbiAgICAvLyBUcmltIHRoZSBkZWxpbWl0ZXIgZnJvbSBhcm91bmQgdGhlIG91dHB1dCBzdHJpbmcuXG4gICAgd2hpbGUgKHJlc3VsdC5jaGFyQXQoc3RhcnQpID09PSBcIlxcMFwiKVxuICAgICAgICBzdGFydCsrO1xuICAgIGlmIChzdGFydCA9PT0gZW5kKVxuICAgICAgICByZXR1cm4gW107XG4gICAgd2hpbGUgKHJlc3VsdC5jaGFyQXQoZW5kIC0gMSkgPT09IFwiXFwwXCIpXG4gICAgICAgIGVuZC0tO1xuICAgIHJldHVybiByZXN1bHQuc2xpY2Uoc3RhcnQsIGVuZCkuc3BsaXQoL1xcMC9nKTtcbn1cbi8qKlxuICogU3BsaXQgdGhlIGlucHV0IHN0cmluZyBpbnRvIGFuIGFycmF5IG9mIHdvcmRzLCBzZXBhcmF0aW5nIG51bWJlcnMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzcGxpdFNlcGFyYXRlTnVtYmVycyh2YWx1ZSkge1xuICAgIGNvbnN0IHdvcmRzID0gc3BsaXQodmFsdWUpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgd29yZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3Qgd29yZCA9IHdvcmRzW2ldO1xuICAgICAgICBjb25zdCBtYXRjaCA9IFNQTElUX1NFUEFSQVRFX05VTUJFUl9SRS5leGVjKHdvcmQpO1xuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgIGNvbnN0IG9mZnNldCA9IG1hdGNoLmluZGV4ICsgKG1hdGNoWzFdID8/IG1hdGNoWzJdKS5sZW5ndGg7XG4gICAgICAgICAgICB3b3Jkcy5zcGxpY2UoaSwgMSwgd29yZC5zbGljZSgwLCBvZmZzZXQpLCB3b3JkLnNsaWNlKG9mZnNldCkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB3b3Jkcztcbn1cbi8qKlxuICogQ29udmVydCBhIHN0cmluZyB0byBzcGFjZSBzZXBhcmF0ZWQgbG93ZXIgY2FzZSAoYGZvbyBiYXJgKS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5vQ2FzZShpbnB1dCwgb3B0aW9ucykge1xuICAgIGNvbnN0IFtwcmVmaXgsIHdvcmRzLCBzdWZmaXhdID0gc3BsaXRQcmVmaXhTdWZmaXgoaW5wdXQsIG9wdGlvbnMpO1xuICAgIHJldHVybiAocHJlZml4ICtcbiAgICAgICAgd29yZHMubWFwKGxvd2VyRmFjdG9yeShvcHRpb25zPy5sb2NhbGUpKS5qb2luKG9wdGlvbnM/LmRlbGltaXRlciA/PyBcIiBcIikgK1xuICAgICAgICBzdWZmaXgpO1xufVxuLyoqXG4gKiBDb252ZXJ0IGEgc3RyaW5nIHRvIGNhbWVsIGNhc2UgKGBmb29CYXJgKS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNhbWVsQ2FzZShpbnB1dCwgb3B0aW9ucykge1xuICAgIGNvbnN0IFtwcmVmaXgsIHdvcmRzLCBzdWZmaXhdID0gc3BsaXRQcmVmaXhTdWZmaXgoaW5wdXQsIG9wdGlvbnMpO1xuICAgIGNvbnN0IGxvd2VyID0gbG93ZXJGYWN0b3J5KG9wdGlvbnM/LmxvY2FsZSk7XG4gICAgY29uc3QgdXBwZXIgPSB1cHBlckZhY3Rvcnkob3B0aW9ucz8ubG9jYWxlKTtcbiAgICBjb25zdCB0cmFuc2Zvcm0gPSBvcHRpb25zPy5tZXJnZUFtYmlndW91c0NoYXJhY3RlcnNcbiAgICAgICAgPyBjYXBpdGFsQ2FzZVRyYW5zZm9ybUZhY3RvcnkobG93ZXIsIHVwcGVyKVxuICAgICAgICA6IHBhc2NhbENhc2VUcmFuc2Zvcm1GYWN0b3J5KGxvd2VyLCB1cHBlcik7XG4gICAgcmV0dXJuIChwcmVmaXggK1xuICAgICAgICB3b3Jkc1xuICAgICAgICAgICAgLm1hcCgod29yZCwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gMClcbiAgICAgICAgICAgICAgICByZXR1cm4gbG93ZXIod29yZCk7XG4gICAgICAgICAgICByZXR1cm4gdHJhbnNmb3JtKHdvcmQsIGluZGV4KTtcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5qb2luKG9wdGlvbnM/LmRlbGltaXRlciA/PyBcIlwiKSArXG4gICAgICAgIHN1ZmZpeCk7XG59XG4vKipcbiAqIENvbnZlcnQgYSBzdHJpbmcgdG8gcGFzY2FsIGNhc2UgKGBGb29CYXJgKS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhc2NhbENhc2UoaW5wdXQsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBbcHJlZml4LCB3b3Jkcywgc3VmZml4XSA9IHNwbGl0UHJlZml4U3VmZml4KGlucHV0LCBvcHRpb25zKTtcbiAgICBjb25zdCBsb3dlciA9IGxvd2VyRmFjdG9yeShvcHRpb25zPy5sb2NhbGUpO1xuICAgIGNvbnN0IHVwcGVyID0gdXBwZXJGYWN0b3J5KG9wdGlvbnM/LmxvY2FsZSk7XG4gICAgY29uc3QgdHJhbnNmb3JtID0gb3B0aW9ucz8ubWVyZ2VBbWJpZ3VvdXNDaGFyYWN0ZXJzXG4gICAgICAgID8gY2FwaXRhbENhc2VUcmFuc2Zvcm1GYWN0b3J5KGxvd2VyLCB1cHBlcilcbiAgICAgICAgOiBwYXNjYWxDYXNlVHJhbnNmb3JtRmFjdG9yeShsb3dlciwgdXBwZXIpO1xuICAgIHJldHVybiBwcmVmaXggKyB3b3Jkcy5tYXAodHJhbnNmb3JtKS5qb2luKG9wdGlvbnM/LmRlbGltaXRlciA/PyBcIlwiKSArIHN1ZmZpeDtcbn1cbi8qKlxuICogQ29udmVydCBhIHN0cmluZyB0byBwYXNjYWwgc25ha2UgY2FzZSAoYEZvb19CYXJgKS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhc2NhbFNuYWtlQ2FzZShpbnB1dCwgb3B0aW9ucykge1xuICAgIHJldHVybiBjYXBpdGFsQ2FzZShpbnB1dCwgeyBkZWxpbWl0ZXI6IFwiX1wiLCAuLi5vcHRpb25zIH0pO1xufVxuLyoqXG4gKiBDb252ZXJ0IGEgc3RyaW5nIHRvIGNhcGl0YWwgY2FzZSAoYEZvbyBCYXJgKS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNhcGl0YWxDYXNlKGlucHV0LCBvcHRpb25zKSB7XG4gICAgY29uc3QgW3ByZWZpeCwgd29yZHMsIHN1ZmZpeF0gPSBzcGxpdFByZWZpeFN1ZmZpeChpbnB1dCwgb3B0aW9ucyk7XG4gICAgY29uc3QgbG93ZXIgPSBsb3dlckZhY3Rvcnkob3B0aW9ucz8ubG9jYWxlKTtcbiAgICBjb25zdCB1cHBlciA9IHVwcGVyRmFjdG9yeShvcHRpb25zPy5sb2NhbGUpO1xuICAgIHJldHVybiAocHJlZml4ICtcbiAgICAgICAgd29yZHNcbiAgICAgICAgICAgIC5tYXAoY2FwaXRhbENhc2VUcmFuc2Zvcm1GYWN0b3J5KGxvd2VyLCB1cHBlcikpXG4gICAgICAgICAgICAuam9pbihvcHRpb25zPy5kZWxpbWl0ZXIgPz8gXCIgXCIpICtcbiAgICAgICAgc3VmZml4KTtcbn1cbi8qKlxuICogQ29udmVydCBhIHN0cmluZyB0byBjb25zdGFudCBjYXNlIChgRk9PX0JBUmApLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY29uc3RhbnRDYXNlKGlucHV0LCBvcHRpb25zKSB7XG4gICAgY29uc3QgW3ByZWZpeCwgd29yZHMsIHN1ZmZpeF0gPSBzcGxpdFByZWZpeFN1ZmZpeChpbnB1dCwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIChwcmVmaXggK1xuICAgICAgICB3b3Jkcy5tYXAodXBwZXJGYWN0b3J5KG9wdGlvbnM/LmxvY2FsZSkpLmpvaW4ob3B0aW9ucz8uZGVsaW1pdGVyID8/IFwiX1wiKSArXG4gICAgICAgIHN1ZmZpeCk7XG59XG4vKipcbiAqIENvbnZlcnQgYSBzdHJpbmcgdG8gZG90IGNhc2UgKGBmb28uYmFyYCkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkb3RDYXNlKGlucHV0LCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIG5vQ2FzZShpbnB1dCwgeyBkZWxpbWl0ZXI6IFwiLlwiLCAuLi5vcHRpb25zIH0pO1xufVxuLyoqXG4gKiBDb252ZXJ0IGEgc3RyaW5nIHRvIGtlYmFiIGNhc2UgKGBmb28tYmFyYCkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBrZWJhYkNhc2UoaW5wdXQsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gbm9DYXNlKGlucHV0LCB7IGRlbGltaXRlcjogXCItXCIsIC4uLm9wdGlvbnMgfSk7XG59XG4vKipcbiAqIENvbnZlcnQgYSBzdHJpbmcgdG8gcGF0aCBjYXNlIChgZm9vL2JhcmApLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcGF0aENhc2UoaW5wdXQsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gbm9DYXNlKGlucHV0LCB7IGRlbGltaXRlcjogXCIvXCIsIC4uLm9wdGlvbnMgfSk7XG59XG4vKipcbiAqIENvbnZlcnQgYSBzdHJpbmcgdG8gcGF0aCBjYXNlIChgRm9vIGJhcmApLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc2VudGVuY2VDYXNlKGlucHV0LCBvcHRpb25zKSB7XG4gICAgY29uc3QgW3ByZWZpeCwgd29yZHMsIHN1ZmZpeF0gPSBzcGxpdFByZWZpeFN1ZmZpeChpbnB1dCwgb3B0aW9ucyk7XG4gICAgY29uc3QgbG93ZXIgPSBsb3dlckZhY3Rvcnkob3B0aW9ucz8ubG9jYWxlKTtcbiAgICBjb25zdCB1cHBlciA9IHVwcGVyRmFjdG9yeShvcHRpb25zPy5sb2NhbGUpO1xuICAgIGNvbnN0IHRyYW5zZm9ybSA9IGNhcGl0YWxDYXNlVHJhbnNmb3JtRmFjdG9yeShsb3dlciwgdXBwZXIpO1xuICAgIHJldHVybiAocHJlZml4ICtcbiAgICAgICAgd29yZHNcbiAgICAgICAgICAgIC5tYXAoKHdvcmQsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IDApXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRyYW5zZm9ybSh3b3JkKTtcbiAgICAgICAgICAgIHJldHVybiBsb3dlcih3b3JkKTtcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5qb2luKG9wdGlvbnM/LmRlbGltaXRlciA/PyBcIiBcIikgK1xuICAgICAgICBzdWZmaXgpO1xufVxuLyoqXG4gKiBDb252ZXJ0IGEgc3RyaW5nIHRvIHNuYWtlIGNhc2UgKGBmb29fYmFyYCkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzbmFrZUNhc2UoaW5wdXQsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gbm9DYXNlKGlucHV0LCB7IGRlbGltaXRlcjogXCJfXCIsIC4uLm9wdGlvbnMgfSk7XG59XG4vKipcbiAqIENvbnZlcnQgYSBzdHJpbmcgdG8gaGVhZGVyIGNhc2UgKGBGb28tQmFyYCkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cmFpbkNhc2UoaW5wdXQsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gY2FwaXRhbENhc2UoaW5wdXQsIHsgZGVsaW1pdGVyOiBcIi1cIiwgLi4ub3B0aW9ucyB9KTtcbn1cbmZ1bmN0aW9uIGxvd2VyRmFjdG9yeShsb2NhbGUpIHtcbiAgICByZXR1cm4gbG9jYWxlID09PSBmYWxzZVxuICAgICAgICA/IChpbnB1dCkgPT4gaW5wdXQudG9Mb3dlckNhc2UoKVxuICAgICAgICA6IChpbnB1dCkgPT4gaW5wdXQudG9Mb2NhbGVMb3dlckNhc2UobG9jYWxlKTtcbn1cbmZ1bmN0aW9uIHVwcGVyRmFjdG9yeShsb2NhbGUpIHtcbiAgICByZXR1cm4gbG9jYWxlID09PSBmYWxzZVxuICAgICAgICA/IChpbnB1dCkgPT4gaW5wdXQudG9VcHBlckNhc2UoKVxuICAgICAgICA6IChpbnB1dCkgPT4gaW5wdXQudG9Mb2NhbGVVcHBlckNhc2UobG9jYWxlKTtcbn1cbmZ1bmN0aW9uIGNhcGl0YWxDYXNlVHJhbnNmb3JtRmFjdG9yeShsb3dlciwgdXBwZXIpIHtcbiAgICByZXR1cm4gKHdvcmQpID0+IGAke3VwcGVyKHdvcmRbMF0pfSR7bG93ZXIod29yZC5zbGljZSgxKSl9YDtcbn1cbmZ1bmN0aW9uIHBhc2NhbENhc2VUcmFuc2Zvcm1GYWN0b3J5KGxvd2VyLCB1cHBlcikge1xuICAgIHJldHVybiAod29yZCwgaW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgY2hhcjAgPSB3b3JkWzBdO1xuICAgICAgICBjb25zdCBpbml0aWFsID0gaW5kZXggPiAwICYmIGNoYXIwID49IFwiMFwiICYmIGNoYXIwIDw9IFwiOVwiID8gXCJfXCIgKyBjaGFyMCA6IHVwcGVyKGNoYXIwKTtcbiAgICAgICAgcmV0dXJuIGluaXRpYWwgKyBsb3dlcih3b3JkLnNsaWNlKDEpKTtcbiAgICB9O1xufVxuZnVuY3Rpb24gc3BsaXRQcmVmaXhTdWZmaXgoaW5wdXQsIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHNwbGl0Rm4gPSBvcHRpb25zLnNwbGl0ID8/IChvcHRpb25zLnNlcGFyYXRlTnVtYmVycyA/IHNwbGl0U2VwYXJhdGVOdW1iZXJzIDogc3BsaXQpO1xuICAgIGNvbnN0IHByZWZpeENoYXJhY3RlcnMgPSBvcHRpb25zLnByZWZpeENoYXJhY3RlcnMgPz8gREVGQVVMVF9QUkVGSVhfU1VGRklYX0NIQVJBQ1RFUlM7XG4gICAgY29uc3Qgc3VmZml4Q2hhcmFjdGVycyA9IG9wdGlvbnMuc3VmZml4Q2hhcmFjdGVycyA/PyBERUZBVUxUX1BSRUZJWF9TVUZGSVhfQ0hBUkFDVEVSUztcbiAgICBsZXQgcHJlZml4SW5kZXggPSAwO1xuICAgIGxldCBzdWZmaXhJbmRleCA9IGlucHV0Lmxlbmd0aDtcbiAgICB3aGlsZSAocHJlZml4SW5kZXggPCBpbnB1dC5sZW5ndGgpIHtcbiAgICAgICAgY29uc3QgY2hhciA9IGlucHV0LmNoYXJBdChwcmVmaXhJbmRleCk7XG4gICAgICAgIGlmICghcHJlZml4Q2hhcmFjdGVycy5pbmNsdWRlcyhjaGFyKSlcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBwcmVmaXhJbmRleCsrO1xuICAgIH1cbiAgICB3aGlsZSAoc3VmZml4SW5kZXggPiBwcmVmaXhJbmRleCkge1xuICAgICAgICBjb25zdCBpbmRleCA9IHN1ZmZpeEluZGV4IC0gMTtcbiAgICAgICAgY29uc3QgY2hhciA9IGlucHV0LmNoYXJBdChpbmRleCk7XG4gICAgICAgIGlmICghc3VmZml4Q2hhcmFjdGVycy5pbmNsdWRlcyhjaGFyKSlcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBzdWZmaXhJbmRleCA9IGluZGV4O1xuICAgIH1cbiAgICByZXR1cm4gW1xuICAgICAgICBpbnB1dC5zbGljZSgwLCBwcmVmaXhJbmRleCksXG4gICAgICAgIHNwbGl0Rm4oaW5wdXQuc2xpY2UocHJlZml4SW5kZXgsIHN1ZmZpeEluZGV4KSksXG4gICAgICAgIGlucHV0LnNsaWNlKHN1ZmZpeEluZGV4KSxcbiAgICBdO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCIvLyBzdGFydHVwXG4vLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8vIFRoaXMgZW50cnkgbW9kdWxlIGlzIHJlZmVyZW5jZWQgYnkgb3RoZXIgbW9kdWxlcyBzbyBpdCBjYW4ndCBiZSBpbmxpbmVkXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3NyYy9pbmRleC50c1wiKTtcbiJdLCJuYW1lcyI6WyJlIiwidCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJTdXBlcm5vdmFFcnJvciIsIm8iLCJFcnJvciIsImNvbnN0cnVjdG9yIiwiciIsIm4iLCJpIiwiYSIsInN1cGVyIiwidGhpcyIsImNvZGUiLCJzdGF0dXMiLCJmb3JtRXJyb3JzIiwicmVxdWVzdElkIiwic2VydmVyVGltZSIsInVybCIsImZyb21OZXR3b3JrUmVzcG9uc2UiLCJtZXNzYWdlIiwiZXJyb3JDb2RlIiwicmVhc29uIiwibGFiZWwiLCJmcm9tTm9OZXR3b3JrUmVzcG9uc2UiLCJEYXRlIiwidG9JU09TdHJpbmciLCJmcm9tQ29kZSIsImZyb21NZXNzYWdlIiwiaXNGaWVsZEVycm9yZWQiLCJmaW5kIiwia2V5IiwiZXJyb3JGb3JGaWVsZCIsInRvU3RyaW5nIiwiSlNPTiIsInN0cmluZ2lmeSIsInN0YWNrIiwidG9IdW1hblJlYWRhYmxlIiwiZG9jc0ltYWdlUmVmVG9VcmwiLCJEb2NzSW1hZ2VSZWZUeXBlIiwicmVzb3VyY2UiLCJmaWdtYU5vZGUiLCJ0eXBlIiwic291cmNlSWQiLCJmcmFtZVJlZmVyZW5jZUlkIiwicmVzb3VyY2VzIiwiZ2V0RmlnbWFGcmFtZUhvc3RlZFVybCIsImRlc2lnblN5c3RlbUlkIiwiZHNJZCIsInZlcnNpb25JZCIsImRvY3VtZW50YXRpb25JdGVtIiwiZG9jdW1lbnRhdGlvbkl0ZW1JZCIsInBhZ2VIZWFkaW5nIiwicGFnZUhlYWRpbmdJZCIsImxpbmtBdHRyaWJ1dGVUb0RvY3NMaW5rIiwiZG9jc0xpbmtUb0xpbmtBdHRyaWJ1dGVzIiwiZG9jc0xpbmtUb1VybCIsIkRvY3NMaW5rUmVmVHlwZSIsImhyZWYiLCJ0YXJnZXQiLCJvcGVuSW5OZXdUYWIiLCJzdGFydHNXaXRoIiwiaW5jbHVkZXMiLCJyZXBsYWNlIiwic3BsaXQiLCJEb2N1bWVudGF0aW9uTGVnYWN5UGFnZUJsb2NrU2hvcnRjdXQiLCJEb2N1bWVudGF0aW9uTGVnYWN5UGFnZUJsb2NrU2hvcnRjdXRUeXBlIiwiZXh0ZXJuYWwiLCJpbnRlcm5hbCIsInRpdGxlIiwic2hvcnRjdXRUaXRsZUZyb21Nb2RlbCIsImRlc2NyaXB0aW9uIiwic2hvcnRjdXREZXNjcmlwdGlvbkZyb21Nb2RlbCIsInByZXZpZXdVcmwiLCJzaG9ydGN1dFByZXZpZXdVcmxGcm9tTW9kZWwiLCJkb2N1bWVudGF0aW9uSXRlbVByZXZpZXciLCJ2YWxpZCIsImludGVybmFsSWQiLCJleHRlcm5hbFVybCIsImMiLCJsIiwidHJpbSIsImxlbmd0aCIsInVybFByZXZpZXciLCJhc3NldFVybCIsImFzc2V0IiwidGh1bWJuYWlsVXJsIiwiVGV4dEFsaWdubWVudCIsIkFsaWdubWVudCIsImxlZnQiLCJjZW50ZXIiLCJzdHJldGNoIiwicmlnaHQiLCJBc3NldEZvcm1hdCIsInBuZyIsInBkZiIsInN2ZyIsIkFzc2V0U2NhbGUiLCJ4MSIsIngyIiwieDMiLCJ4NCIsIkFzc2V0U2NhbGVUeXBlIiwiYXNwZWN0RmlsbCIsImFzcGVjdEZpdCIsIkJsdXJUeXBlIiwibGF5ZXIiLCJiYWNrZ3JvdW5kIiwiQUxMX0JPUkRFUl9QT1NJVElPTlMiLCJCb3JkZXJQb3NpdGlvbiIsImluc2lkZSIsIm91dHNpZGUiLCJBTExfQk9SREVSX1NUWUxFUyIsIkJvcmRlclN0eWxlIiwiZGFzaGVkIiwiZG90dGVkIiwic29saWQiLCJncm9vdmUiLCJJbXBvcnRXYXJuaW5nVHlwZSIsIlVuc3VwcG9ydGVkRmlsbCIsIlVuc3VwcG9ydGVkU3Ryb2tlIiwiVW5zdXBwb3J0ZWRFZmZlY3QiLCJTdHlsZU5vdEFwcGxpZWQiLCJOb1B1Ymxpc2hlZFN0eWxlcyIsIk5vUHVibGlzaGVkQ29tcG9uZW50cyIsIk5vUHVibGlzaGVkQXNzZXRzIiwiTm9WZXJzaW9uRm91bmQiLCJDb21wb25lbnRIYXNOb1RodW1ibmFpbCIsIkR1cGxpY2F0ZUltcG9ydGVkU3R5bGVJZCIsIkR1cGxpY2F0ZUltcG9ydGVkU3R5bGVQYXRoIiwiTm9QdWJsaXNoZWRFbGVtZW50cyIsIk5vVW5wdWJsaXNoZWRTdHlsZXMiLCJDdXN0b21Eb21haW5FcnJvckNvZGUiLCJnZW5lcmFsRXJyb3IiLCJkbnNOb3RDb25maWd1cmVkIiwibWFpbnRlbmFuY2UiLCJDdXN0b21Eb21haW5TdGF0ZSIsImluaXRpYWwiLCJkb21haW5TZXR1cEluUHJvZ3Jlc3MiLCJkb21haW5TZXR1cEZhaWxlZCIsImRvbWFpblNldHVwc1N1Y2NlcyIsInNzbFNldHVwSW5Qcm9ncmVzcyIsInNzbFNldHVwRmFpbGVkIiwic3NsU2V0dXBTdWNjZXNzIiwiRG9jc0Jsb2NrQmVoYXZpb3JEYXRhVHlwZSIsIml0ZW0iLCJ0b2tlbiIsImNvbXBvbmVudCIsImZpZ21hQ29tcG9uZW50IiwiRG9jc0Jsb2NrQmVoYXZpb3JTZWxlY3Rpb25UeXBlIiwiZW50aXR5IiwiZ3JvdXAiLCJlbnRpdHlBbmRHcm91cCIsIkRvY3NCbG9ja0ltYWdlUHJvcGVydHlBc3BlY3RSYXRpbyIsImF1dG8iLCJzcXVhcmUiLCJsYW5kc2NhcGUiLCJwb3J0cmFpdCIsIndpZGUiLCJEb2NzQmxvY2tJdGVtRW50aXR5VHlwZSIsInRva2VuR3JvdXAiLCJhc3NldEdyb3VwIiwiY29tcG9uZW50R3JvdXAiLCJEb2NzQmxvY2tJdGVtUHJvcGVydHlPcHRpb25SZW5kZXJpbmdTdHlsZSIsInNlZ21lbnRlZENvbnRyb2wiLCJ0b2dnbGVCdXR0b24iLCJzZWxlY3QiLCJjaGVja2JveCIsIkRvY3NCbG9ja0l0ZW1Qcm9wZXJ0eVJpY2hUZXh0U3R5bGUiLCJ0aXRsZTEiLCJ0aXRsZTIiLCJ0aXRsZTMiLCJ0aXRsZTQiLCJ0aXRsZTUiLCJxdW90ZSIsImNhbGxvdXQiLCJvbCIsInVsIiwiRG9jc0Jsb2NrSXRlbVByb3BlcnR5VGV4dFN0eWxlIiwic21hbGwiLCJyZWd1bGFyIiwiYm9sZCIsIkRvY3NCbG9ja0l0ZW1Qcm9wZXJ0eVR5cGUiLCJyaWNoVGV4dCIsIm11bHRpUmljaFRleHQiLCJ0ZXh0IiwicmljaFRleHRFZGl0b3IiLCJib29sZWFuIiwibnVtYmVyIiwic2luZ2xlU2VsZWN0IiwibXVsdGlTZWxlY3QiLCJpbWFnZSIsInRva2VuVHlwZSIsInRva2VuUHJvcGVydHkiLCJjb21wb25lbnRQcm9wZXJ0eSIsImFzc2V0UHJvcGVydHkiLCJlbWJlZFVSTCIsIm1hcmtkb3duIiwiY29kZVNhbmRib3giLCJ0YWJsZSIsImRpdmlkZXIiLCJzdG9yeWJvb2siLCJjb2xvciIsIkRvY3NCbG9ja0l0ZW1WYXJpYW50TGF5b3V0VHlwZSIsImNvbHVtbiIsInJvdyIsIkRvY3NCbG9ja0l0ZW1WYXJpYW50TGF5b3V0V2lkdGgiLCJjMSIsImMyIiwiYzMiLCJjNCIsImM1IiwiYzYiLCJjNyIsImM4IiwiYzkiLCJjMTAiLCJjMTEiLCJjMTIiLCJEb2NzQmxvY2tPcHRpb25Db2xvciIsImdyZWVuIiwicmVkIiwieWVsbG93IiwiYmx1ZSIsInB1cnBsZSIsIm9yYW5nZSIsInBpbmsiLCJ0ZWFsIiwiZ3JleSIsImxpZ2h0R3JleSIsImN5YW4iLCJmdWNoc2lhIiwiRG9jc0Jsb2NrT3B0aW9uUmVuZGVyaW5nU3R5bGUiLCJEb2NzQmxvY2tSaWNoVGV4dFByb3BlcnR5U3R5bGUiLCJkZWZhdWx0IiwiRG9jc0Jsb2NrVGV4dFByb3BlcnR5U3R5bGUiLCJkZWZhdWx0Qm9sZCIsImRlZmF1bHRTZW1pYm9sZCIsInNtYWxsQm9sZCIsInNtYWxsU2VtaWJvbGQiLCJjdXN0b20iLCJEb2NzRW50aXR5R3JvdXBCZWhhdmlvciIsInRhYnMiLCJEb2NzRW50aXR5VHlwZSIsInBhZ2UiLCJEb2NzU2VjdGlvblR5cGUiLCJwbGFpbiIsIkRvY3VtZW50YXRpb25MZWdhY3lDYWxsb3V0VHlwZSIsImluZm8iLCJzdWNjZXNzIiwid2FybmluZyIsImVycm9yIiwiRG9jdW1lbnRhdGlvbkxlZ2FjeUdyb3VwQmVoYXZpb3IiLCJEb2N1bWVudGF0aW9uTGVnYWN5SGVhZGluZ1R5cGUiLCJoMSIsImgyIiwiaDMiLCJEb2N1bWVudGF0aW9uTGVnYWN5SXRlbVR5cGUiLCJEb2N1bWVudGF0aW9uTGVnYWN5UGFnZUFzc2V0VHlwZSIsImZpZ21hRnJhbWUiLCJEb2N1bWVudGF0aW9uTGVnYWN5UGFnZUJsb2NrVGhlbWVUeXBlIiwib3ZlcnJpZGUiLCJjb21wYXJpc29uIiwiRG9jdW1lbnRhdGlvbkxlZ2FjeVBhZ2VCbG9ja1R5cGUiLCJoZWFkaW5nIiwidW5vcmRlcmVkTGlzdCIsIm9yZGVyZWRMaXN0IiwidG9rZW5MaXN0Iiwic2hvcnRjdXRzIiwibGluayIsImZpZ21hRW1iZWQiLCJ5b3V0dWJlRW1iZWQiLCJzdG9yeWJvb2tFbWJlZCIsImdlbmVyaWNFbWJlZCIsImZpZ21hRnJhbWVzIiwicmVuZGVyQ29kZSIsImNvbXBvbmVudEFzc2V0cyIsImNvbHVtbkl0ZW0iLCJ0YWJJdGVtIiwidGFibGVDZWxsIiwidGFibGVSb3ciLCJGcmFtZUFsaWdubWVudCIsImZyYW1lSGVpZ2h0IiwiRnJhbWVMYXlvdXQiLCJjMTc1IiwiR3JhZGllbnRUeXBlIiwibGluZWFyIiwicmFkaWFsIiwiYW5ndWxhciIsIkljb25TZXQiLCJjaGVja0NpcmNsZSIsImNyb3NzQ2lyY2xlIiwiYWxlcnQiLCJSaWNoVGV4dFNwYW5BdHRyaWJ1dGVUeXBlIiwiaXRhbGljIiwic3RyaWtldGhyb3VnaCIsIlNoYWRvd1R5cGUiLCJkcm9wIiwiaW5uZXIiLCJTb3VyY2VUeXBlIiwiZmlnbWEiLCJ0b2tlblN0dWRpbyIsImZpZ21hVmFyaWFibGVzUGx1Z2luIiwiVGV4dENhc2UiLCJvcmlnaW5hbCIsInVwcGVyIiwibG93ZXIiLCJjYW1lbCIsInNtYWxsQ2FwcyIsIlRleHREZWNvcmF0aW9uIiwidW5kZXJsaW5lIiwiRFRfVE9LRU5fVFlQRVMiLCJ0b2tlblR5cGVJc1JlZmVyZW5jYWJsZSIsIlJFRkVSRU5DQUJMRV9UT0tFTl9UWVBFUyIsIlJFUExBQ0FCTEVfVE9LRU5fVFlQRVMiLCJ0b2tlblR5cGVJc05vblB1cmUiLCJ0b2tlblR5cGVJc1B1cmUiLCJQVVJFX1RPS0VOX1RZUEVTIiwiQUxMX1RPS0VOX1RZUEVTIiwiTVNfRElNRU5TSU9OX1RPS0VOX1RZUEVTIiwiUkFXX0RJTUVOU0lPTl9UT0tFTl9UWVBFUyIsIkRJTUVOU0lPTl9UT0tFTl9UWVBFUyIsIk9QVElPTl9UT0tFTl9UWVBFUyIsIlNUUklOR19UT0tFTl9UWVBFUyIsIlRva2VuVHlwZSIsInR5cG9ncmFwaHkiLCJzaGFkb3ciLCJib3JkZXIiLCJncmFkaWVudCIsImJsdXIiLCJyYWRpdXMiLCJib3JkZXJXaWR0aCIsImR1cmF0aW9uIiwiZm9udFNpemUiLCJkaW1lbnNpb24iLCJsZXR0ZXJTcGFjaW5nIiwibGluZUhlaWdodCIsIm9wYWNpdHkiLCJwYXJhZ3JhcGhTcGFjaW5nIiwic2l6ZSIsInNwYWNlIiwiekluZGV4IiwidGV4dERlY29yYXRpb24iLCJ0ZXh0Q2FzZSIsInZpc2liaWxpdHkiLCJmb250RmFtaWx5IiwiZm9udFdlaWdodCIsInN0cmluZyIsInByb2R1Y3RDb3B5IiwiTVNfVU5JVFMiLCJQWF9VTklUUyIsIlJBV19VTklUUyIsIkxJTkVfSEVJR0hUX1VOSVRTIiwiU0laRV9VTklUUyIsIlVuaXQiLCJwaXhlbHMiLCJwZXJjZW50IiwicmVtIiwibXMiLCJyYXciLCJjb252ZXJ0UmVtb3RlVG9Vc2VyUm9sZSIsIlVzZXJSb2xlIiwib3duZXIiLCJhZG1pbiIsImNyZWF0b3IiLCJjb250cmlidXRvciIsImJpbGxpbmciLCJ2aWV3ZXIiLCJWaXNpYmlsaXR5VHlwZSIsInZpc2libGUiLCJoaWRkZW4iLCJXb3Jrc3BhY2VOUE1SZWdpc3RyeUF1dGhUeXBlIiwiYmFzaWMiLCJiZWFyZXIiLCJXb3Jrc3BhY2VOUE1SZWdpc3RyeVR5cGUiLCJucG1KUyIsImdpdEh1YiIsImF6dXJlRGV2T3BzIiwiYXJ0aWZhY3RvcnkiLCJXb3Jrc3BhY2VTdWJzY3JpcHRpb25QbGFuSW50ZXJ2YWwiLCJ5ZWFybHkiLCJtb250aGx5IiwiV29ya3NwYWNlU3Vic2NyaXB0aW9uUHJvZHVjdENvZGUiLCJmcmVlIiwidGVhbSIsInRlYW1UZXN0IiwiY29tcGFueSIsImVudGVycHJpc2UiLCJXb3Jrc3BhY2VTdWJzY3JpcHRpb25TdGF0dXMiLCJhY3RpdmUiLCJncmFjZVBlcmlvZCIsImNhbmNlbGxlZCIsInN1c3BlbmRlZCIsIlB1bHNhckV4ZWN1dG9yIiwiT3V0cHV0RmlsZVR5cGUiLCJjb3B5UmVtb3RlVXJsIiwiYmluYXJ5Iiwic3VwZXJub3ZhIiwibG9jYWwiLCJleHBvcnRzIiwiZW51bWVyYWJsZSIsImdldCIsInUiLCJzIiwiZCIsInAiLCJ5IiwibSIsIlQiLCJ2IiwiZiIsImciLCJQIiwiYiIsIlMiLCJPIiwiXyIsIkQiLCJJIiwiRSIsImgiLCJrIiwiTiIsIkIiLCJMIiwiUiIsImoiLCJDIiwiTSIsIngiLCJBIiwiRiIsInciLCJVIiwiWSIsIlciLCJHIiwiSyIsIkgiLCJWIiwiJCIsInEiLCJ6IiwiSiIsIlEiLCJaIiwiWCIsImVlIiwidGUiLCJvZSIsInJlIiwibmUiLCJpZSIsImFlIiwiY2UiLCJsZSIsIl9fZXNNb2R1bGUiLCJUaGVtZUV4cG9ydFN0eWxlIiwiRmlsZVN0cnVjdHVyZSIsIlRva2VuU29ydE9yZGVyIiwiVG9rZW5OYW1lU3RydWN0dXJlIiwiREVGQVVMVF9UT0tFTl9QUkVGSVhFUyIsIkRFRkFVTFRfU1RZTEVfRklMRV9OQU1FUyIsIkNvbG9yIiwiVHlwb2dyYXBoeSIsIkRpbWVuc2lvbiIsIlNpemUiLCJTcGFjZSIsIk9wYWNpdHkiLCJGb250U2l6ZSIsIkxpbmVIZWlnaHQiLCJMZXR0ZXJTcGFjaW5nIiwiUGFyYWdyYXBoU3BhY2luZyIsIkJvcmRlcldpZHRoIiwiQm9yZGVyUmFkaXVzIiwiRHVyYXRpb24iLCJaSW5kZXgiLCJTaGFkb3ciLCJCb3JkZXIiLCJHcmFkaWVudCIsIlN0cmluZyIsIlByb2R1Y3RDb3B5IiwiRm9udEZhbWlseSIsIkZvbnRXZWlnaHQiLCJWaXNpYmlsaXR5IiwiQmx1ciIsImdldFRva2VuUHJlZml4IiwidG9rZW5PYmplY3RLZXlOYW1lIiwicmVzZXRUb2tlbk5hbWVUcmFja2luZyIsInRva2VuX2hpZXJhcmNoeV8xIiwicmVzZXROYW1lVHJhY2tpbmciLCJjb252ZXJ0ZWRUb2tlbiIsIm1hcHBlZFRva2VucyIsInRva2VuR3JvdXBzIiwiY29sbGVjdGlvbnMiLCJuYW1lIiwiZXhwb3J0X3V0aWxzXzEiLCJDU1NIZWxwZXIiLCJ0b2tlblRvQ1NTIiwiYWxsb3dSZWZlcmVuY2VzIiwiX18xIiwiZXhwb3J0Q29uZmlndXJhdGlvbiIsInVzZVJlZmVyZW5jZXMiLCJkZWNpbWFscyIsImNvbG9yUHJlY2lzaW9uIiwiY29sb3JGb3JtYXQiLCJmb3JjZVJlbVVuaXQiLCJyZW1CYXNlIiwidG9rZW5Ub1ZhcmlhYmxlUmVmIiwiaW5kZW50U3RyaW5nIiwicmVwZWF0IiwiaW5kZW50IiwiZm9ybWF0dGVkVmFsdWUiLCJ2YWx1ZV9mb3JtYXR0ZXJfMSIsImZvcm1hdFRva2VuVmFsdWUiLCJzaG93RGVzY3JpcHRpb25zIiwiZGVmYXVsdHNfMSIsImZvcmNlUmV0dXJuIiwidXNlVG9rZW5UeXBlUHJlZml4ZXMiLCJjdXN0b21pemVUb2tlblByZWZpeGVzIiwidG9rZW5QcmVmaXhlcyIsImZvckV4cG9ydCIsImNvbGxlY3Rpb25OYW1lIiwidG9rZW5OYW1lU3RydWN0dXJlIiwiY29sbGVjdGlvbklkIiwiY29sbGVjdGlvbiIsInBlcnNpc3RlbnRJZCIsInBhcmVudEdyb3VwIiwiaWQiLCJwYXJlbnRHcm91cElkIiwicHJlZml4IiwiTmFtaW5nSGVscGVyIiwiY29kZVNhZmVWYXJpYWJsZU5hbWVGb3JUb2tlbiIsInRva2VuTmFtZVN0eWxlIiwiZ2xvYmFsTmFtZVByZWZpeCIsImZpbHRlciIsIkJvb2xlYW4iLCJqb2luIiwic3R5bGVPdXRwdXRGaWxlIiwidG9rZW5zIiwidGhlbWVQYXRoIiwidGhlbWUiLCJleHBvcnRCYXNlVmFsdWVzIiwiZXhwb3J0VGhlbWVzQXMiLCJjb25maWdfMSIsIk5lc3RlZFRoZW1lcyIsInRva2Vuc09mVHlwZSIsImV4cG9ydE9ubHlUaGVtZWRUb2tlbnMiLCJUaGVtZUhlbHBlciIsImZpbHRlclRoZW1lZFRva2VucyIsInRva2VuT2JqZWN0IiwicHJvY2Vzc1Rva2Vuc1RvT2JqZWN0IiwiY29udGVudCIsIkZpbGVIZWxwZXIiLCJjcmVhdGVUZXh0RmlsZSIsInJlbGF0aXZlUGF0aCIsImJhc2VTdHlsZUZpbGVQYXRoIiwiZmlsZU5hbWUiLCJjdXN0b21pemVTdHlsZUZpbGVOYW1lcyIsIkZpbGVOYW1lSGVscGVyIiwiZW5zdXJlRmlsZUV4dGVuc2lvbiIsInN0eWxlRmlsZU5hbWVzIiwiY29tYmluZWRTdHlsZU91dHB1dEZpbGUiLCJvcmlnaW5hbFRva2VucyIsInRva2VuXzEiLCJleHBvcnRfdXRpbHNfMiIsImFsbFRva2VucyIsImdlbmVyYXRlRW1wdHlGaWxlcyIsIk1hcCIsIm1hcCIsInNvcnRlZFRva2VucyIsInRva2VuU29ydE9yZGVyIiwic29ydCIsIm5hbWVBIiwibmFtZUIiLCJsb2NhbGVDb21wYXJlIiwic2hvd0dlbmVyYXRlZEZpbGVEaXNjbGFpbWVyIiwiX2NvbW1lbnQiLCJkaXNjbGFpbWVyIiwiZm9yRWFjaCIsInBhdGhTZWdtZW50cyIsInRva2VuUGF0aCIsInNlZ21lbnQiLCJjb2RlU2FmZVZhcmlhYmxlTmFtZSIsInRva2VuTmFtZSIsInByb2Nlc3NUb2tlbk5hbWUiLCJzZWdtZW50cyIsInB1c2giLCJOYW1lT25seSIsIkNvbGxlY3Rpb25QYXRoQW5kTmFtZSIsImNvbGxlY3Rpb25TZWdtZW50IiwiUGF0aEFuZE5hbWUiLCJ1bnNoaWZ0IiwiaGllcmFyY2hpY2FsT2JqZWN0IiwiY3JlYXRlSGllcmFyY2hpY2FsU3RydWN0dXJlIiwiYmFzZVZhbHVlIiwidmFsdWVPYmplY3QiLCJnZXRUaGVtZUlkZW50aWZpZXIiLCJTdHJpbmdDYXNlIiwia2ViYWJDYXNlIiwiY3JlYXRlVG9rZW5WYWx1ZSIsImFzc2lnbiIsImRlZXBNZXJnZSIsInNka19leHBvcnRlcnNfMSIsInN0eWxlX2ZpbGVfMSIsInByb2Nlc3NPdXRwdXRGaWxlcyIsImZpbGVzIiwiZmlsZSIsIlB1bHNhciIsImV4cG9ydENvbmZpZyIsImV4cG9ydCIsImFzeW5jIiwic2RrIiwiY29udGV4dCIsInJlbW90ZVZlcnNpb25JZGVudGlmaWVyIiwiZ2V0VG9rZW5zIiwiZ2V0VG9rZW5Hcm91cHMiLCJ0b2tlbkNvbGxlY3Rpb25zIiwiZ2V0VG9rZW5Db2xsZWN0aW9ucyIsImJyYW5kSWQiLCJicmFuZCIsImJyYW5kcyIsImdldEJyYW5kcyIsImlkSW5WZXJzaW9uIiwidGhlbWVJZHMiLCJ0aGVtZXMiLCJnZXRUb2tlblRoZW1lcyIsInRoZW1lc1RvQXBwbHkiLCJ0aGVtZUlkIiwiZmlsZVN0cnVjdHVyZSIsIlNpbmdsZUZpbGUiLCJiYXNlRmlsZSIsInVuZGVmaW5lZCIsInRoZW1lRmlsZXMiLCJ0aGVtZWRUb2tlbnMiLCJjb21wdXRlVG9rZW5zQnlBcHBseWluZ1RoZW1lcyIsIm9yaWdpbmFsRXhwb3J0QmFzZVZhbHVlcyIsInJlZHVjZSIsIm1lcmdlZCIsIm1lcmdlZENvbnRlbnQiLCJwYXJzZSIsInZhbHVlT2JqZWN0RmlsZXMiLCJ2YWx1ZXMiLCJTZXBhcmF0ZUZpbGVzIiwiY2FtZWxDYXNlIiwiZmxhdE1hcCIsIk1lcmdlZFRoZW1lIiwiYmFzZVRva2VuRmlsZXMiLCJBcHBseURpcmVjdGx5IiwidG9rZW5OYW1lVHJhY2tlciIsInJlc2V0IiwicGF0aCIsImdldFNpbXBsZVRva2VuTmFtZSIsInNsaWNlIiwicmVkdWNlUmlnaHQiLCJuZXN0ZWRWYWx1ZSIsInNvdXJjZSIsIm91dHB1dCIsImtleXMiLCJBcnJheSIsImlzQXJyYXkiLCJUb2tlbk5hbWVUcmFja2VyIiwiZW5kc1dpdGgiLCJDb2xvckZvcm1hdCIsIlRva2VuSGVscGVyXzEiLCJDb2xvckhlbHBlcl8xIiwiaGFuZGxlQ29sb3JXaXRoQ3VzdG9tT3BhY2l0eSIsImN1c3RvbU9wYWNpdHkiLCJvcHRpb25zIiwicmVmZXJlbmNlZFRva2VuSWQiLCJyZWZlcmVuY2VkQ29sb3JUb2tlbiIsIm5lZWRzUmdiIiwiQ29sb3JIZWxwZXIiLCJyb3VuZFRvRGVjaW1hbHMiLCJtZWFzdXJlIiwiY29sb3JUb2tlblZhbHVlVG9DU1MiLCJjc3NWYWx1ZSIsImJvcmRlclRva2VuVmFsdWVUb0NTUyIsImdyYWRpZW50VG9rZW5WYWx1ZVRvQ1NTIiwiZGltZW5zaW9uVG9rZW5WYWx1ZVRvQ1NTIiwic2hhZG93VG9rZW5WYWx1ZVRvQ1NTIiwiZm9udFdlaWdodFRva2VuVmFsdWVUb0NTUyIsInN0cmluZ1Rva2VuVmFsdWVUb0NTUyIsIm9wdGlvblRva2VuVmFsdWVUb0NTUyIsImJsdXJUb2tlblZhbHVlVG9DU1MiLCJ0eXBvZ3JhcGh5VG9rZW5WYWx1ZVRvQ1NTIiwiVW5yZWFjaGFibGVDYXNlRXJyb3IiLCJ2YWx1ZVRyYW5zZm9ybWVyIiwidHJhbnNmb3JtZWRWYWx1ZSIsImZvcm1hdHRlZENvbG9yT3JWYXJpYWJsZU5hbWUiLCJyZWZlcmVuY2UiLCJzdXJlT3B0aW9uYWxSZWZlcmVuY2UiLCJjb2xvclZhbHVlIiwiZGF0YSIsIndpZHRoIiwiYm9yZGVyU3R5bGVUb0NTUyIsInN0eWxlIiwiYm9yZGVyUG9zaXRpb25Ub0NTUyIsInBvc2l0aW9uIiwiZ3JhZGllbnRzIiwiZ3JhZGllbnRMYXllclRvQ1NTIiwiZGVsdGFYIiwidG8iLCJmcm9tIiwiZGVsdGFZIiwiZGVnIiwiTWF0aCIsImF0YW4yIiwiUEkiLCJnZXRBbmdsZSIsImdyYWRpZW50VHlwZSIsInN0b3BzIiwic3RvcCIsInVuaXQiLCJyZW1WYWx1ZSIsInVuaXRUb0NTUyIsInNoYWRvd3MiLCJzaGFkb3dMYXllclRvQ1NTIiwiY29udmVydFRvUmVtIiwicHgiLCJzcHJlYWQiLCJub3JtYWxpemVUZXh0V2VpZ2h0Iiwib3B0aW9uIiwidGV4dENhc2VUb0NTUyIsInRleHREZWNvcmF0aW9uVG9DU1MiLCJ0b0xvd2VyQ2FzZSIsImZvbnRGYW1pbHlSZWZlcmVuY2UiLCJmb250V2VpZ2h0UmVmZXJlbmNlIiwiZGVjb3JhdGlvblJlZmVyZW5jZSIsImNhc2VSZWZlcmVuY2UiLCJjYXBzIiwiZnJhZ21lbnRTaXplIiwiYm9yZGVyU3R5bGUiLCJib3JkZXJQb3NpdGlvbiIsIkNvbG9yRm9ybWF0XzEiLCJmdWxsUmVmZXJlbmNlTmFtZSIsImNvbG9yUmVmZXJlbmNlTmFtZSIsIm9wYWNpdHlSZWZlcmVuY2VOYW1lIiwiZnVsbFRva2VuIiwiY29sb3JUb2tlbiIsIm9wYWNpdHlUb2tlbiIsImZvcm1hdHRlZENvbG9yIiwicmdiIiwicmdiYSIsInNtYXJ0UmdiYSIsImNvbG9yVG9SZ2IiLCJub3JtYWxpemVkSW50Q29sb3IiLCJmb3JtYXQiLCJoZXg2IiwiaGV4OCIsImhhc2hIZXg2IiwiaGFzaEhleDgiLCJzbWFydEhleCIsInNtYXJ0SGFzaEhleCIsImFyZ2JJbnQiLCJjb2xvclRvSGV4IiwiaHNsIiwiaHNsYSIsInNtYXJ0SHNsYSIsImNvbG9yVG9Ic2wiLCJub3JtYWxpemVkRnJhY3Rpb25hbENvbG9yIiwic21hcnRVSUNvbG9yIiwiY29sb3JUb1VJQ29sb3IiLCJva2xjaCIsIm9rbGNoYSIsInNtYXJ0T2tsY2giLCJjb2xvclRvT2tsY2giLCJhbHBoYSIsImNvbG9yUmVmUmVwbGFjZSIsIm9wYWNpdHlSZWZSZXBsYWNlIiwicmVzdWx0aW5nUmdiIiwicmVzdWx0aW5nSGV4IiwicEhleCIsInJvdW5kIiwibWF4IiwibWluIiwicmVzdWx0aW5nSHNsIiwiZGVsdGEiLCJyZXN1bHRpbmdVSUNvbG9yIiwiZm9yY2VUcmFpbGluZ1plcm8iLCJtdWx0aXBsaWVyIiwicG93Iiwicm91bmRlZCIsIk51bWJlciIsInRvRml4ZWQiLCJwYXJzZUZsb2F0IiwicGFkU3RhcnQiLCJyZ2JUb09rbGNoIiwibHIiLCJzUkdCdG9MaW5lYXIiLCJsZyIsImxiIiwibG1zX2wiLCJsbXNfbSIsImxtc19zIiwibHAiLCJjYnJ0IiwibXAiLCJzcCIsImxhYl9hIiwibGFiX2IiLCJzcXJ0IiwiY3JlYXRlQ29weVJlbW90ZUZpbGUiLCJjcmVhdGVCaW5hcnlGaWxlIiwiU3RyaW5nQ2FzZV8xIiwiTmFtaW5nSGVscGVyXzEiLCJleHRlbnNpb24iLCJub3JtYWxpemVkRXh0ZW5zaW9uIiwicmVwbGFjZUZpbGVFeHRlbnNpb24iLCJvbGRFeHQiLCJuZXdFeHQiLCJub3JtYWxpemVkT2xkRXh0Iiwibm9ybWFsaXplZE5ld0V4dCIsIlJlZ0V4cCIsImdldERlZmF1bHRTdHlsZUZpbGVOYW1lIiwic3RyaW5nQ2FzZSIsIkdlbmVyYWxIZWxwZXIiLCJzcGFjZXMiLCJhZGREaXNjbGFpbWVyIiwiS290bGluSGVscGVyIiwiSW1wb3J0Q29sbGVjdG9yIiwiSW1wb3J0RmxhZyIsIkdlbmVyYWxIZWxwZXJfMSIsInJQYWNrYWdlTmFtZSIsImltcG9ydEZsYWdzIiwiU2V0IiwidXNlIiwiZmxhZ3MiLCJhZGQiLCJhbGxJbXBvcnRzIiwiaW1wb3J0TGlzdCIsImhhcyIsIkRwIiwiU3AiLCJFbSIsIk9mZnNldCIsIkJydXNoIiwiVGlsZU1vZGUiLCJCb3JkZXJTdHJva2UiLCJNb2RpZmllciIsIkZvbnQiLCJUZXh0U3R5bGUiLCJ0b2tlblZhbHVlIiwiaW1wb3J0Q29sbGVjdG9yIiwiY29sb3JUb2tlblZhbHVlVG9Lb3RsaW4iLCJib3JkZXJUb2tlblZhbHVlVG9Lb3RsaW4iLCJncmFkaWVudFRva2VuVmFsdWVUb0tvdGxpbiIsInRleHRVbml0VG9rZW5WYWx1ZVRvS290bGluIiwibGV0dGVyU3BhY2luZ1Rva2VuVmFsdWVUb0tvdGxpbiIsImRpbWVuc2lvblRva2VuVmFsdWVUb0tvdGxpbiIsInNoYWRvd1Rva2VuVmFsdWVUb0tvdGxpbiIsImZvbnRXZWlnaHRUb2tlblZhbHVlVG9Lb3RsaW4iLCJmb250RmFtaWx5VG9rZW5WYWx1ZVRvS290bGluIiwic3RyaW5nVG9rZW5WYWx1ZVRvS290bGluIiwib3B0aW9uVG9rZW5WYWx1ZVRvS290bGluIiwiYmx1clRva2VuVmFsdWVUb0tvdGxpbiIsInR5cG9ncmFwaHlUb2tlblZhbHVlVG9Lb3RsaW4iLCJjb2xvck9wdGlvbnMiLCJsYXllcnMiLCJncmFkaWVudExheWVyVG9Lb3RsaW4iLCJzdG9wUGFpcnMiLCJzaGFkb3dMYXllclRvS290bGluIiwidW5pdFRvS290bGluIiwidXNlRW1Gb3JQZXJjZW50IiwiZnJhY3Rpb24iLCJ0ZXh0Q2FzZVRvS290bGluIiwidGV4dERlY29yYXRpb25Ub0tvdGxpbiIsInZpc2liaWxpdHlUb0tvdGxpbiIsIm5vcm1hbGl6ZWRXZWlnaHQiLCJmb250V2VpZ2h0SW50VG9Lb3RsaW4iLCJ3ZWlnaHQiLCJzbmFrZUNhc2UiLCJmb250RmFtaWx5UmVmIiwiZm9udFdlaWdodFJlZiIsImRlY29yYXRpb25SZWYiLCJmb250RmFtaWx5TGl0IiwiZm9udFdlaWdodExpdCIsInRleHREZWNvcmF0aW9uTGl0IiwiZm9udFNpemVMaXQiLCJsaW5lSGVpZ2h0TGl0IiwibGV0dGVyU3BhY2luZ0xpdCIsInBhcnRzIiwiY2hhbmdlX2Nhc2VfMSIsImFwcGx5RmluZFJlcGxhY2UiLCJmaW5kUmVwbGFjZSIsInNvcnRlZFBhdHRlcm5zIiwiZW50cmllcyIsInJlc3VsdCIsImVzY2FwZWRGaW5kIiwicGF0dGVybiIsInBhcmVudCIsInJlbW92ZUR1cGxpY2F0ZUZyYWdtZW50cyIsImZyYWdtZW50cyIsImlzUm9vdCIsInRva2VuTmFtZVBhcnRzIiwicGF0aEFuZE5hbWUiLCJzZW50ZW5jZSIsInJlcGxhY2VBbGwiLCJub3JtYWxpemVkRnJhZ21lbnRzIiwiZnJhZ21lbnQiLCJpbmRleCIsImNhcGl0YWxDYXNlIiwiY29uc3RhbnRDYXNlIiwiZG90Q2FzZSIsInRyYWluQ2FzZSIsIm5vQ2FzZSIsInBhc2NhbENhc2UiLCJwYXRoQ2FzZSIsInNlbnRlbmNlQ2FzZSIsImZsYXRDYXNlIiwibWF0Y2giLCJuYW1lQXNDU1NWYXJSZWZlcmVuY2UiLCJuYW1lQXNDU1NWYXJEZWNsYXJhdGlvbiIsImhhc1RoZW1lZFRva2VucyIsIm92ZXJyaWRkZW5Ub2tlbklkcyIsIm92ZXJyaWRkZW5Ub2tlbnMiLCJzb21lIiwiaWRlbnRpZmllciIsImNvZGVOYW1lIiwiZ2V0VGhlbWVOYW1lIiwicmVmZXJlbmNlSWQiLCJub3JtYWxpemVkVGV4dCIsIm51bWVyaWNXZWlnaHQiLCJwYXJzZUludCIsImlzTmFOIiwidG9rZW5OYW1lTWFwIiwibmFtZVRvVG9rZW5NYXAiLCJoaWVyYXJjaHlOYW1lTWFwIiwiY2xlYXIiLCJoaWVyYXJjaHlGdWxsS2V5Iiwic2V0IiwidG9rZW5zQXRMZXZlbCIsImdldFRva2VuTmFtZSIsInVuaXF1ZVN1ZmZpeCIsImNvdW50ZXIiLCJXcml0ZVRva2VuUHJvcFN0b3JlIiwidG9rZW5Qcm9wZXJ0eVdyaXRlTWFwIiwic3RvcmVWYWx1ZUZvclRva2VuUHJvcGVydHkiLCJwcm9wZXJ0eU5hbWUiLCJ0b2tlbk1hcCIsImJhdGNoVXBkYXRlU3RvcmVkVG9rZW5Qcm9wZXJ0aWVzIiwicHJvcGVydGllcyIsImdldFRva2VuUHJvcGVydGllcyIsInByb3BlcnR5IiwicHJvcCIsImNyZWF0ZVRva2VuUHJvcGVydHkiLCJjb2x1bW5XaWR0aCIsInBheWxvYWQiLCJ2YWx1ZVRvV3JpdGUiLCJkZWZpbml0aW9uSWQiLCJ0YXJnZXRFbGVtZW50SWQiLCJidWxrT3BlcmF0aW9ucyIsInVwZGF0ZUVsZW1lbnRQcm9wZXJ0aWVzIiwid3JpdGVUb2tlblByb3BlcnRpZXMiLCJ2YWx1ZUdlbmVyYXRvciIsInRyaW1tZWRQcm9wZXJ0eU5hbWUiLCJfX2NyZWF0ZUJpbmRpbmciLCJjcmVhdGUiLCJrMiIsImRlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsIl9fZXhwb3J0U3RhciIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIlNQTElUX0xPV0VSX1VQUEVSX1JFIiwiU1BMSVRfVVBQRVJfVVBQRVJfUkUiLCJTUExJVF9TRVBBUkFURV9OVU1CRVJfUkUiLCJERUZBVUxUX1NUUklQX1JFR0VYUCIsIlNQTElUX1JFUExBQ0VfVkFMVUUiLCJERUZBVUxUX1BSRUZJWF9TVUZGSVhfQ0hBUkFDVEVSUyIsInN0YXJ0IiwiZW5kIiwiY2hhckF0Iiwic3BsaXRTZXBhcmF0ZU51bWJlcnMiLCJ3b3JkcyIsIndvcmQiLCJleGVjIiwib2Zmc2V0Iiwic3BsaWNlIiwiaW5wdXQiLCJzdWZmaXgiLCJzcGxpdFByZWZpeFN1ZmZpeCIsImxvd2VyRmFjdG9yeSIsImxvY2FsZSIsImRlbGltaXRlciIsInVwcGVyRmFjdG9yeSIsInRyYW5zZm9ybSIsIm1lcmdlQW1iaWd1b3VzQ2hhcmFjdGVycyIsImNhcGl0YWxDYXNlVHJhbnNmb3JtRmFjdG9yeSIsInBhc2NhbENhc2VUcmFuc2Zvcm1GYWN0b3J5IiwicGFzY2FsU25ha2VDYXNlIiwidG9Mb2NhbGVMb3dlckNhc2UiLCJ0b1VwcGVyQ2FzZSIsInRvTG9jYWxlVXBwZXJDYXNlIiwiY2hhcjAiLCJzcGxpdEZuIiwic2VwYXJhdGVOdW1iZXJzIiwicHJlZml4Q2hhcmFjdGVycyIsInN1ZmZpeENoYXJhY3RlcnMiLCJwcmVmaXhJbmRleCIsInN1ZmZpeEluZGV4IiwiY2hhciIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIm1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJkZWZpbml0aW9uIiwib2JqIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciXSwic291cmNlUm9vdCI6IiJ9