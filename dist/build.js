(()=>{var e={"./node_modules/@supernovaio/sdk-exporters/build/supernova-sdk-typescript.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@supernovaio/sdk-exporters/build/supernova-sdk-typescript.js ***!
  \***********************************************************************************/(e,t)=>{(()=>{"use strict";var e={1:(e,t)=>{var r;Object.defineProperty(t,"__esModule",{value:!0}),t.GradientType=void 0,function(e){e.linear="Linear",e.radial="Radial",e.angular="Angular"}(r||(t.GradientType=r={}))},306:(e,t)=>{var r;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockTextPropertyStyle=void 0,function(e){e.title1="Title1",e.title2="Title2",e.title3="Title3",e.title4="Title4",e.title5="Title5",e.default="Default",e.defaultBold="DefaultBold",e.defaultSemibold="DefaultSemibold",e.small="Small",e.smallBold="SmallBold",e.smallSemibold="SmallSemibold",e.custom="Custom"}(r||(t.DocsBlockTextPropertyStyle=r={}))},899:(e,t)=>{var r;Object.defineProperty(t,"__esModule",{value:!0}),t.AssetScaleType=void 0,function(e){e.aspectFill="AspectFill",e.aspectFit="AspectFit"}(r||(t.AssetScaleType=r={}))},915:(e,t)=>{var r;Object.defineProperty(t,"__esModule",{value:!0}),t.AssetScale=void 0,function(e){e.x1="x1",e.x2="x2",e.x3="x3",e.x4="x4"}(r||(t.AssetScale=r={}))},922:(e,t)=>{var r;Object.defineProperty(t,"__esModule",{value:!0}),t.TextCase=void 0,function(e){e.original="Original",e.upper="Upper",e.lower="Lower",e.camel="Camel",e.smallCaps="SmallCaps"}(r||(t.TextCase=r={}))},934:(e,t)=>{var r;Object.defineProperty(t,"__esModule",{value:!0}),t.IconSet=void 0,function(e){e.checkCircle="CheckCircle",e.crossCircle="CrossCircle",e.alert="Alert"}(r||(t.IconSet=r={}))},1160:(e,t)=>{var r;Object.defineProperty(t,"__esModule",{value:!0}),t.ALL_BORDER_POSITIONS=t.BorderPosition=void 0,function(e){e.inside="Inside",e.center="Center",e.outside="Outside"}(r||(t.BorderPosition=r={})),t.ALL_BORDER_POSITIONS=[r.inside,r.center,r.outside]},1233:(e,t)=>{var r;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsEntityType=void 0,function(e){e.group="Group",e.page="Page"}(r||(t.DocsEntityType=r={}))},1255:(e,t)=>{var r;Object.defineProperty(t,"__esModule",{value:!0}),t.FrameAlignment=void 0,function(e){e.frameHeight="FrameHeight",e.center="Center"}(r||(t.FrameAlignment=r={}))},1423:(e,t)=>{var r;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyPageAssetType=void 0,function(e){e.image="image",e.figmaFrame="figmaFrame"}(r||(t.DocumentationLegacyPageAssetType=r={}))},1601:(e,t)=>{var r;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyPageBlockThemeType=void 0,function(e){e.override="Override",e.comparison="Comparison"}(r||(t.DocumentationLegacyPageBlockThemeType=r={}))},1846:(e,t)=>{var r;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyPageBlockType=void 0,function(e){e.text="Text",e.heading="Heading",e.code="Code",e.unorderedList="UnorderedList",e.orderedList="OrderedList",e.quote="Quote",e.callout="Callout",e.divider="Divider",e.image="Image",e.token="Token",e.tokenList="TokenList",e.tokenGroup="TokenGroup",e.shortcuts="Shortcuts",e.link="Link",e.figmaEmbed="FigmaEmbed",e.youtubeEmbed="YoutubeEmbed",e.storybookEmbed="StorybookEmbed",e.genericEmbed="Embed",e.figmaFrames="FigmaFrames",e.custom="Custom",e.renderCode="RenderCode",e.componentAssets="ComponentAssets",e.column="Column",e.columnItem="ColumnItem",e.tabs="Tabs",e.tabItem="TabItem",e.table="Table",e.tableCell="TableCell",e.tableRow="TableRow"}(r||(t.DocumentationLegacyPageBlockType=r={}))},2123:(e,t)=>{var r;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyGroupBehavior=void 0,function(e){e.group="Group",e.tabs="Tabs"}(r||(t.DocumentationLegacyGroupBehavior=r={}))},2657:(e,t)=>{var r;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyPageBlockShortcut=t.DocumentationLegacyPageBlockShortcutType=void 0,function(e){e.external="External",e.internal="Internal"}(r||(t.DocumentationLegacyPageBlockShortcutType=r={})),t.DocumentationLegacyPageBlockShortcut=class{constructor(e){var t;e.url?this.type=r.external:this.type=r.internal,this.title=this.shortcutTitleFromModel(e,this.type),this.description=this.shortcutDescriptionFromModel(e,this.type),this.previewUrl=this.shortcutPreviewUrlFromModel(e),this.type===r.internal&&(null===(t=e.documentationItemPreview)||void 0===t?void 0:t.valid)&&e.documentationItemId?this.internalId=e.documentationItemId:(this.internalId=null,this.type===r.external&&e.url?this.externalUrl=e.url:this.externalUrl=null)}shortcutTitleFromModel(e,t){var o,n,i,a,s;let l=null;return e.title&&e.title.trim().length>0?l=e.title:t===r.internal?l=null!==(n=null===(o=e.documentationItemPreview)||void 0===o?void 0:o.title)&&void 0!==n?n:null:t===r.external&&(l=null!==(s=null!==(a=null===(i=e.urlPreview)||void 0===i?void 0:i.title)&&void 0!==a?a:e.url)&&void 0!==s?s:null),l&&0!==l.trim().length?l:null}shortcutDescriptionFromModel(e,t){var o;let n=null;return e.description&&e.description.trim().length>0?n=e.description:t===r.external&&(n=null===(o=e.urlPreview)||void 0===o?void 0:o.description),n&&0!==n.trim().length?n:null}shortcutPreviewUrlFromModel(e){var t,r,o,n,i;return null!==(i=null!==(o=null!==(t=e.assetUrl)&&void 0!==t?t:null===(r=e.asset)||void 0===r?void 0:r.url)&&void 0!==o?o:null===(n=e.urlPreview)||void 0===n?void 0:n.thumbnailUrl)&&void 0!==i?i:null}}},2674:(e,t)=>{var r;Object.defineProperty(t,"__esModule",{value:!0}),t.RichTextSpanAttributeType=void 0,function(e){e.bold="Bold",e.italic="Italic",e.link="Link",e.strikethrough="Strikethrough",e.code="Code"}(r||(t.RichTextSpanAttributeType=r={}))},2802:(e,t)=>{var r,o;Object.defineProperty(t,"__esModule",{value:!0}),t.PulsarExecutor=t.OutputFileType=void 0,function(e){e.copyRemoteUrl="copyRemoteUrl",e.text="text",e.binary="binary"}(r||(t.OutputFileType=r={})),function(e){e.supernova="supernova",e.local="local"}(o||(t.PulsarExecutor=o={}))},3607:(e,t)=>{var r;Object.defineProperty(t,"__esModule",{value:!0}),t.WorkspaceSubscriptionStatus=void 0,function(e){e.active="active",e.gracePeriod="gracePeriod",e.cancelled="cancelled",e.suspended="suspended"}(r||(t.WorkspaceSubscriptionStatus=r={}))},3718:(e,t)=>{var r;Object.defineProperty(t,"__esModule",{value:!0}),t.FrameLayout=void 0,function(e){e.c8="C8",e.c7="C7",e.c6="C6",e.c5="C5",e.c4="C4",e.c3="C3",e.c2="C2",e.c1="C1",e.c175="C1_75"}(r||(t.FrameLayout=r={}))},3733:(e,t)=>{var r;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockBehaviorSelectionType=void 0,function(e){e.entity="Entity",e.group="Group",e.entityAndGroup="EntityAndGroup"}(r||(t.DocsBlockBehaviorSelectionType=r={}))},3788:(e,t)=>{var r;Object.defineProperty(t,"__esModule",{value:!0}),t.DT_TOKEN_TYPES=t.tokenTypeIsReferencable=t.REFERENCABLE_TOKEN_TYPES=t.REPLACABLE_TOKEN_TYPES=t.tokenTypeIsNonPure=t.tokenTypeIsPure=t.PURE_TOKEN_TYPES=t.ALL_TOKEN_TYPES=t.MS_DIMENSION_TOKEN_TYPES=t.RAW_DIMENSION_TOKEN_TYPES=t.DIMENSION_TOKEN_TYPES=t.OPTION_TOKEN_TYPES=t.STRING_TOKEN_TYPES=t.TokenType=void 0,function(e){e.color="Color",e.typography="Typography",e.shadow="Shadow",e.border="Border",e.gradient="Gradient",e.blur="Blur",e.radius="BorderRadius",e.borderWidth="BorderWidth",e.duration="Duration",e.fontSize="FontSize",e.dimension="Dimension",e.letterSpacing="LetterSpacing",e.lineHeight="LineHeight",e.opacity="Opacity",e.paragraphSpacing="ParagraphSpacing",e.size="Size",e.space="Space",e.zIndex="ZIndex",e.textDecoration="TextDecoration",e.textCase="TextCase",e.visibility="Visibility",e.fontFamily="FontFamily",e.fontWeight="FontWeight",e.string="String",e.productCopy="ProductCopy"}(r||(t.TokenType=r={})),t.STRING_TOKEN_TYPES=[r.string,r.productCopy,r.fontFamily,r.fontWeight],t.OPTION_TOKEN_TYPES=[r.textCase,r.textDecoration,r.visibility],t.DIMENSION_TOKEN_TYPES=[r.dimension,r.size,r.space,r.opacity,r.fontSize,r.lineHeight,r.letterSpacing,r.paragraphSpacing,r.borderWidth,r.radius,r.duration,r.zIndex],t.RAW_DIMENSION_TOKEN_TYPES=[r.opacity,r.zIndex],t.MS_DIMENSION_TOKEN_TYPES=[r.duration],t.ALL_TOKEN_TYPES=[...t.DIMENSION_TOKEN_TYPES,...t.STRING_TOKEN_TYPES,...t.OPTION_TOKEN_TYPES,r.color,r.gradient,r.border,r.radius,r.shadow,r.typography,r.blur],t.PURE_TOKEN_TYPES=[...t.DIMENSION_TOKEN_TYPES,...t.STRING_TOKEN_TYPES,...t.OPTION_TOKEN_TYPES],t.tokenTypeIsPure=e=>t.PURE_TOKEN_TYPES.includes(e),t.tokenTypeIsNonPure=e=>!(0,t.tokenTypeIsPure)(e),t.REPLACABLE_TOKEN_TYPES=[r.color,...t.DIMENSION_TOKEN_TYPES,...t.STRING_TOKEN_TYPES,...t.OPTION_TOKEN_TYPES],t.REFERENCABLE_TOKEN_TYPES=[r.color,...t.DIMENSION_TOKEN_TYPES,r.fontFamily,r.fontWeight,r.textCase,r.textDecoration],t.tokenTypeIsReferencable=e=>t.REFERENCABLE_TOKEN_TYPES.includes(e),t.DT_TOKEN_TYPES=[r.color,r.shadow,r.gradient,r.typography,r.border,...t.DIMENSION_TOKEN_TYPES,r.fontFamily,r.fontWeight,r.string,...t.OPTION_TOKEN_TYPES]},4068:(e,t)=>{var r;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsEntityGroupBehavior=void 0,function(e){e.group="Group",e.tabs="Tabs"}(r||(t.DocsEntityGroupBehavior=r={}))},4290:(e,t)=>{var r;Object.defineProperty(t,"__esModule",{value:!0}),t.WorkspaceSubscriptionProductCode=void 0,function(e){e.free="free",e.team="team",e.teamTest="team_test",e.company="company",e.enterprise="enterprise"}(r||(t.WorkspaceSubscriptionProductCode=r={}))},4379:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.SupernovaError=void 0;class r extends Error{constructor(e,t,r,o,n,i,a){super(e),this.code=t,this.status=r,this.formErrors=o,this.requestId=n,this.serverTime=i,this.url=a}static fromNetworkResponse(e,t,o){var n,i,a;return new r(e.message,e.errorCode||e.reason||e.label||null,e.code||t,null!==(n=e.formErrors)&&void 0!==n?n:null,null!==(i=e.requestId)&&void 0!==i?i:null,null!==(a=e.serverTime)&&void 0!==a?a:null,o)}static fromNoNetworkResponse(e){return new r("No network or internet unreachable","NO_NETWORK",12163,null,(new Date).toISOString(),null,e)}static fromCode(e){return new r(e,e,null,null,null,null,null)}static fromMessage(e){return new r(e,null,null,null,null,null,null)}isFieldErrored(e){return void 0!==this.formErrors.find((t=>t.key===e))}errorForField(e){var t;return null!==(t=this.formErrors.find((t=>t.key===e)))&&void 0!==t?t:null}toString(){var e,t,r,o,n,i;return`\n    Error thrown: ${this.message}\n\n    Code: ${null!==(e=this.code)&&void 0!==e?e:"-"}\n\n    Status: ${null!==(t=this.status)&&void 0!==t?t:"-"}\n\n    Fields: ${JSON.stringify(this.formErrors,null,2)}\n\n    Request ID: ${null!==(r=this.requestId)&&void 0!==r?r:"-"}\n\n    Server time: ${null!==(o=this.serverTime)&&void 0!==o?o:"-"}\n\n    Network URL: ${null!==(n=this.url)&&void 0!==n?n:"-"}\n\n    Stack: ${null!==(i=this.stack)&&void 0!==i?i:"-"}\n    `}toHumanReadable(){return`${this.message}${this.requestId?` (request ${this.requestId})`:""}`}}t.SupernovaError=r},4546:(e,t)=>{var r;Object.defineProperty(t,"__esModule",{value:!0}),t.ALL_BORDER_STYLES=t.BorderStyle=void 0,function(e){e.dashed="Dashed",e.dotted="Dotted",e.solid="Solid",e.groove="Groove"}(r||(t.BorderStyle=r={})),t.ALL_BORDER_STYLES=[r.dashed,r.dotted,r.solid,r.groove]},4652:(e,t)=>{var r;Object.defineProperty(t,"__esModule",{value:!0}),t.SourceType=void 0,function(e){e.figma="Figma",e.tokenStudio="TokenStudio",e.figmaVariablesPlugin="FigmaVariablesPlugin"}(r||(t.SourceType=r={}))},5102:(e,t)=>{var r;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyCalloutType=void 0,function(e){e.info="Info",e.success="Success",e.warning="Warning",e.error="Error"}(r||(t.DocumentationLegacyCalloutType=r={}))},5503:(e,t)=>{var r;Object.defineProperty(t,"__esModule",{value:!0}),t.WorkspaceSubscriptionPlanInterval=void 0,function(e){e.yearly="yearly",e.monthly="monthly"}(r||(t.WorkspaceSubscriptionPlanInterval=r={}))},5651:(e,t)=>{var r;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockBehaviorDataType=void 0,function(e){e.item="Item",e.token="Token",e.asset="Asset",e.component="Component",e.figmaNode="FigmaNode",e.figmaComponent="FigmaComponent"}(r||(t.DocsBlockBehaviorDataType=r={}))},5673:(e,t)=>{var r;function o(e){switch(e.type){case r.documentationItem:return`@page:${e.documentationItemId}`;case r.pageHeading:return`@page:${e.documentationItemId}#${e.pageHeadingId}`;case r.url:return e.url;default:return}}Object.defineProperty(t,"__esModule",{value:!0}),t.linkAttributeToDocsLink=t.docsLinkToLinkAttributes=t.docsLinkToUrl=t.DocsLinkRefType=void 0,function(e){e.documentationItem="DocumentationItem",e.pageHeading="PageHeading",e.url="Url"}(r||(t.DocsLinkRefType=r={})),t.docsLinkToUrl=o,t.docsLinkToLinkAttributes=function(e){const t=o(e);if(t)return{href:t,target:e.openInNewTab?"_blank":"_self"}},t.linkAttributeToDocsLink=function(e,t){if(!e)return;const o="_blank"===t;if(e.startsWith("@page:")){if(e.includes("#")){const[t,n]=e.replace("@page:","").split("#");return{type:r.pageHeading,documentationItemId:t,pageHeadingId:n,openInNewTab:o}}return{type:r.documentationItem,documentationItemId:e.replace("@page:",""),openInNewTab:o}}return{type:r.url,url:e,openInNewTab:o}}},5695:(e,t)=>{var r;Object.defineProperty(t,"__esModule",{value:!0}),t.CustomDomainErrorCode=void 0,function(e){e.generalError="GeneralError",e.dnsNotConfigured="DNSNotConfigured",e.maintenance="Maintenance"}(r||(t.CustomDomainErrorCode=r={}))},5883:(e,t)=>{var r;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockItemPropertyOptionRenderingStyle=void 0,function(e){e.segmentedControl="SegmentedControl",e.toggleButton="ToggleButton",e.select="Select",e.checkbox="Checkbox"}(r||(t.DocsBlockItemPropertyOptionRenderingStyle=r={}))},5963:(e,t)=>{var r;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockOptionRenderingStyle=void 0,function(e){e.segmentedControl="SegmentedControl",e.toggleButton="ToggleButton",e.select="Select",e.checkbox="Checkbox"}(r||(t.DocsBlockOptionRenderingStyle=r={}))},6141:(e,t)=>{var r;Object.defineProperty(t,"__esModule",{value:!0}),t.VisibilityType=void 0,function(e){e.visible="Visible",e.hidden="Hidden"}(r||(t.VisibilityType=r={}))},6192:(e,t)=>{var r;Object.defineProperty(t,"__esModule",{value:!0}),t.BlurType=void 0,function(e){e.layer="Layer",e.background="Background"}(r||(t.BlurType=r={}))},6298:(e,t)=>{var r;Object.defineProperty(t,"__esModule",{value:!0}),t.WorkspaceNPMRegistryAuthType=void 0,function(e){e.basic="Basic",e.bearer="Bearer"}(r||(t.WorkspaceNPMRegistryAuthType=r={}))},6644:(e,t)=>{var r;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockRichTextPropertyStyle=void 0,function(e){e.title1="Title1",e.title2="Title2",e.title3="Title3",e.title4="Title4",e.title5="Title5",e.quote="Quote",e.callout="Callout",e.default="Default"}(r||(t.DocsBlockRichTextPropertyStyle=r={}))},6839:(e,t)=>{var r;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockItemPropertyType=void 0,function(e){e.richText="RichText",e.multiRichText="MultiRichText",e.text="Text",e.richTextEditor="RichTextEditor",e.boolean="Boolean",e.number="Number",e.singleSelect="SingleSelect",e.multiSelect="MultiSelect",e.image="Image",e.token="Token",e.tokenType="TokenType",e.tokenProperty="TokenProperty",e.component="Component",e.componentProperty="ComponentProperty",e.asset="Asset",e.assetProperty="AssetProperty",e.embedURL="EmbedURL",e.url="URL",e.markdown="Markdown",e.code="Code",e.codeSandbox="CodeSandbox",e.table="Table",e.divider="Divider",e.storybook="Storybook",e.color="Color",e.figmaNode="FigmaNode",e.figmaComponent="FigmaComponent"}(r||(t.DocsBlockItemPropertyType=r={}))},7040:(e,t)=>{var r;Object.defineProperty(t,"__esModule",{value:!0}),t.TextDecoration=void 0,function(e){e.original="None",e.underline="Underline",e.strikethrough="Strikethrough"}(r||(t.TextDecoration=r={}))},7291:(e,t)=>{var r;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockItemVariantLayoutWidth=void 0,function(e){e.c1="1",e.c2="2",e.c3="3",e.c4="4",e.c5="5",e.c6="6",e.c7="7",e.c8="8",e.c9="9",e.c10="10",e.c11="11",e.c12="12"}(r||(t.DocsBlockItemVariantLayoutWidth=r={}))},7379:(e,t)=>{var r;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyItemType=void 0,function(e){e.group="Group",e.page="Page"}(r||(t.DocumentationLegacyItemType=r={}))},7476:(e,t)=>{var r,o;Object.defineProperty(t,"__esModule",{value:!0}),t.TextAlignment=t.Alignment=void 0,function(e){e.left="Left",e.center="Center",e.stretch="Stretch"}(r||(t.Alignment=r={})),function(e){e.left="Left",e.center="Center",e.right="Right"}(o||(t.TextAlignment=o={}))},7479:(e,t)=>{var r;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockItemPropertyTextStyle=void 0,function(e){e.small="Small",e.regular="Regular",e.bold="Bold"}(r||(t.DocsBlockItemPropertyTextStyle=r={}))},7737:(e,t)=>{var r;Object.defineProperty(t,"__esModule",{value:!0}),t.CustomDomainState=void 0,function(e){e.initial="Initial",e.domainSetupInProgress="DomainSetupInProgress",e.domainSetupFailed="DomainSetupFailed",e.domainSetupsSucces="DomainSetupSuccess",e.sslSetupInProgress="SSLSetupInProgress",e.sslSetupFailed="SSLSetupFailed",e.sslSetupSuccess="SSLSetupSuccess"}(r||(t.CustomDomainState=r={}))},7968:(e,t)=>{var r;Object.defineProperty(t,"__esModule",{value:!0}),t.WorkspaceNPMRegistryType=void 0,function(e){e.npmJS="NPMJS",e.gitHub="GitHub",e.azureDevOps="AzureDevOps",e.artifactory="Artifactory",e.custom="Custom"}(r||(t.WorkspaceNPMRegistryType=r={}))},7971:(e,t)=>{var r;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsSectionType=void 0,function(e){e.plain="Plain",e.tabs="Tabs"}(r||(t.DocsSectionType=r={}))},8042:(e,t)=>{var r;Object.defineProperty(t,"__esModule",{value:!0}),t.ImportWarningType=void 0,function(e){e.UnsupportedFill="UnsupportedFill",e.UnsupportedStroke="UnsupportedStroke",e.UnsupportedEffect="UnsupportedEffect",e.StyleNotApplied="StyleNotApplied",e.NoPublishedStyles="NoPublishedStyles",e.NoPublishedComponents="NoPublishedComponents",e.NoPublishedAssets="NoPublishedAssets",e.NoVersionFound="NoVersionFound",e.ComponentHasNoThumbnail="ComponentHasNoThumbnail",e.DuplicateImportedStyleId="DuplicateImportedStyleId",e.DuplicateImportedStylePath="DuplicateImportedStylePath",e.NoPublishedElements="NoPublishedElements",e.NoUnpublishedStyles="NoUnpublishedStyles"}(r||(t.ImportWarningType=r={}))},8061:(e,t)=>{var r;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockItemPropertyRichTextStyle=void 0,function(e){e.title1="Title1",e.title2="Title2",e.title3="Title3",e.title4="Title4",e.title5="Title5",e.quote="Quote",e.callout="Callout",e.ol="OL",e.ul="UL"}(r||(t.DocsBlockItemPropertyRichTextStyle=r={}))},8095:(e,t)=>{var r;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockItemVariantLayoutType=void 0,function(e){e.column="Column",e.row="Row"}(r||(t.DocsBlockItemVariantLayoutType=r={}))},8607:(e,t)=>{var r;Object.defineProperty(t,"__esModule",{value:!0}),t.MS_UNITS=t.PX_UNITS=t.RAW_UNITS=t.LINE_HEIGHT_UNITS=t.SIZE_UNITS=t.Unit=void 0,function(e){e.pixels="Pixels",e.percent="Percent",e.rem="Rem",e.ms="Ms",e.raw="Raw"}(r||(t.Unit=r={})),t.SIZE_UNITS=[r.pixels,r.percent,r.rem],t.LINE_HEIGHT_UNITS=[r.pixels,r.percent,r.rem,r.raw],t.RAW_UNITS=[r.raw],t.PX_UNITS=[r.pixels],t.MS_UNITS=[r.ms]},8738:(e,t)=>{var r;Object.defineProperty(t,"__esModule",{value:!0}),t.AssetFormat=void 0,function(e){e.png="png",e.pdf="pdf",e.svg="svg"}(r||(t.AssetFormat=r={}))},8890:(e,t)=>{var r;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockImagePropertyAspectRatio=void 0,function(e){e.auto="Auto",e.square="Square",e.landscape="Landscape",e.portrait="Portrait",e.wide="Wide"}(r||(t.DocsBlockImagePropertyAspectRatio=r={}))},9125:(e,t)=>{var r;Object.defineProperty(t,"__esModule",{value:!0}),t.ShadowType=void 0,function(e){e.drop="Drop",e.inner="Inner"}(r||(t.ShadowType=r={}))},9133:(e,t)=>{var r;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockOptionColor=void 0,function(e){e.green="Green",e.red="Red",e.yellow="Yellow",e.blue="Blue",e.purple="Purple",e.orange="Orange",e.pink="Pink",e.teal="Teal",e.grey="Grey",e.lightGrey="LightGrey",e.cyan="Cyan",e.fuchsia="Fuchsia"}(r||(t.DocsBlockOptionColor=r={}))},9377:(e,t)=>{var r;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockItemEntityType=void 0,function(e){e.token="Token",e.tokenGroup="TokenGroup",e.asset="Asset",e.assetGroup="AssetGroup",e.component="Component",e.componentGroup="ComponentGroup"}(r||(t.DocsBlockItemEntityType=r={}))},9478:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.convertRemoteToUserRole=t.UserRole=void 0;const o=r(4379);var n;!function(e){e.owner="Owner",e.admin="Admin",e.creator="Creator",e.contributor="Contributor",e.billing="Billing",e.viewer="Viewer"}(n||(t.UserRole=n={})),t.convertRemoteToUserRole=e=>{switch(e){case"Owner":return n.owner;case"Admin":return n.admin;case"Creator":return n.creator;case"Contributor":return n.contributor;case"Billing":return n.billing;case"Viewer":return n.viewer;default:throw o.SupernovaError.fromMessage(`Unknown role: ${e}`)}}},9896:(e,t)=>{var r;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyHeadingType=void 0,function(e){e[e.h1=1]="h1",e[e.h2=2]="h2",e[e.h3=3]="h3"}(r||(t.DocumentationLegacyHeadingType=r={}))},9932:(e,t)=>{var r;Object.defineProperty(t,"__esModule",{value:!0}),t.docsImageRefToUrl=t.DocsImageRefType=void 0,function(e){e.resource="Resource",e.figmaNode="FigmaNode"}(r||(t.DocsImageRefType=r={})),t.docsImageRefToUrl=function(e,t,o){var n;if(e)switch(e.type){case r.resource:return null===(n=e.resource)||void 0===n?void 0:n.url;case r.figmaNode:if(!e.figmaNode||!e.figmaNode.sourceId||!e.figmaNode.frameReferenceId)return;return t.resources.getFigmaFrameHostedUrl({designSystemId:o.dsId,versionId:o.versionId},e.figmaNode.frameReferenceId);default:return}}}},r={};function o(t){var n=r[t];if(void 0!==n)return n.exports;var i=r[t]={exports:{}};return e[t](i,i.exports,o),i.exports}var n={};(()=>{var e=n;Object.defineProperty(e,"__esModule",{value:!0}),e.TokenType=e.TextDecoration=e.TextCase=e.ShadowType=e.RichTextSpanAttributeType=e.GradientType=e.FrameLayout=e.FrameAlignment=e.IconSet=e.SourceType=e.DocsImageRefType=e.DocsLinkRefType=e.DocsSectionType=e.DocsEntityType=e.DocsEntityGroupBehavior=e.DocsBlockTextPropertyStyle=e.DocsBlockRichTextPropertyStyle=e.DocsBlockOptionColor=e.DocsBlockOptionRenderingStyle=e.DocsBlockItemVariantLayoutWidth=e.DocsBlockItemVariantLayoutType=e.DocsBlockItemPropertyType=e.DocsBlockItemPropertyTextStyle=e.DocsBlockItemPropertyRichTextStyle=e.DocsBlockItemPropertyOptionRenderingStyle=e.DocsBlockItemEntityType=e.DocsBlockImagePropertyAspectRatio=e.DocsBlockBehaviorSelectionType=e.DocsBlockBehaviorDataType=e.DocumentationLegacyPageBlockShortcutType=e.DocumentationLegacyPageBlockThemeType=e.DocumentationLegacyPageBlockType=e.DocumentationLegacyPageAssetType=e.DocumentationLegacyItemType=e.DocumentationLegacyHeadingType=e.DocumentationLegacyGroupBehavior=e.DocumentationLegacyCalloutType=e.BorderStyle=e.BorderPosition=e.BlurType=e.AssetScaleType=e.AssetScale=e.AssetFormat=e.Alignment=e.ALL_TOKEN_TYPES=e.ALL_BORDER_STYLES=e.ALL_BORDER_POSITIONS=e.OPTION_TOKEN_TYPES=e.STRING_TOKEN_TYPES=e.DIMENSION_TOKEN_TYPES=void 0,e.PulsarExecutor=e.OutputFileType=e.CustomDomainState=e.CustomDomainErrorCode=e.ImportWarningType=e.WorkspaceNPMRegistryType=e.WorkspaceNPMRegistryAuthType=e.WorkspaceSubscriptionStatus=e.WorkspaceSubscriptionProductCode=e.WorkspaceSubscriptionPlanInterval=e.VisibilityType=e.UserRole=e.Unit=void 0;var t=o(3788);Object.defineProperty(e,"DIMENSION_TOKEN_TYPES",{enumerable:!0,get:function(){return t.DIMENSION_TOKEN_TYPES}}),Object.defineProperty(e,"STRING_TOKEN_TYPES",{enumerable:!0,get:function(){return t.STRING_TOKEN_TYPES}}),Object.defineProperty(e,"OPTION_TOKEN_TYPES",{enumerable:!0,get:function(){return t.OPTION_TOKEN_TYPES}});var r=o(1160);Object.defineProperty(e,"ALL_BORDER_POSITIONS",{enumerable:!0,get:function(){return r.ALL_BORDER_POSITIONS}});var i=o(4546);Object.defineProperty(e,"ALL_BORDER_STYLES",{enumerable:!0,get:function(){return i.ALL_BORDER_STYLES}});var a=o(3788);Object.defineProperty(e,"ALL_TOKEN_TYPES",{enumerable:!0,get:function(){return a.ALL_TOKEN_TYPES}});var s=o(7476);Object.defineProperty(e,"Alignment",{enumerable:!0,get:function(){return s.Alignment}});var l=o(8738);Object.defineProperty(e,"AssetFormat",{enumerable:!0,get:function(){return l.AssetFormat}});var c=o(915);Object.defineProperty(e,"AssetScale",{enumerable:!0,get:function(){return c.AssetScale}});var u=o(899);Object.defineProperty(e,"AssetScaleType",{enumerable:!0,get:function(){return u.AssetScaleType}});var p=o(6192);Object.defineProperty(e,"BlurType",{enumerable:!0,get:function(){return p.BlurType}});var d=o(1160);Object.defineProperty(e,"BorderPosition",{enumerable:!0,get:function(){return d.BorderPosition}});var f=o(4546);Object.defineProperty(e,"BorderStyle",{enumerable:!0,get:function(){return f.BorderStyle}});var m=o(5102);Object.defineProperty(e,"DocumentationLegacyCalloutType",{enumerable:!0,get:function(){return m.DocumentationLegacyCalloutType}});var T=o(2123);Object.defineProperty(e,"DocumentationLegacyGroupBehavior",{enumerable:!0,get:function(){return T.DocumentationLegacyGroupBehavior}});var g=o(9896);Object.defineProperty(e,"DocumentationLegacyHeadingType",{enumerable:!0,get:function(){return g.DocumentationLegacyHeadingType}});var y=o(7379);Object.defineProperty(e,"DocumentationLegacyItemType",{enumerable:!0,get:function(){return y.DocumentationLegacyItemType}});var h=o(1423);Object.defineProperty(e,"DocumentationLegacyPageAssetType",{enumerable:!0,get:function(){return h.DocumentationLegacyPageAssetType}});var S=o(1846);Object.defineProperty(e,"DocumentationLegacyPageBlockType",{enumerable:!0,get:function(){return S.DocumentationLegacyPageBlockType}});var b=o(1601);Object.defineProperty(e,"DocumentationLegacyPageBlockThemeType",{enumerable:!0,get:function(){return b.DocumentationLegacyPageBlockThemeType}});var C=o(2657);Object.defineProperty(e,"DocumentationLegacyPageBlockShortcutType",{enumerable:!0,get:function(){return C.DocumentationLegacyPageBlockShortcutType}});var k=o(5651);Object.defineProperty(e,"DocsBlockBehaviorDataType",{enumerable:!0,get:function(){return k.DocsBlockBehaviorDataType}});var v=o(3733);Object.defineProperty(e,"DocsBlockBehaviorSelectionType",{enumerable:!0,get:function(){return v.DocsBlockBehaviorSelectionType}});var x=o(8890);Object.defineProperty(e,"DocsBlockImagePropertyAspectRatio",{enumerable:!0,get:function(){return x.DocsBlockImagePropertyAspectRatio}});var P=o(9377);Object.defineProperty(e,"DocsBlockItemEntityType",{enumerable:!0,get:function(){return P.DocsBlockItemEntityType}});var O=o(5883);Object.defineProperty(e,"DocsBlockItemPropertyOptionRenderingStyle",{enumerable:!0,get:function(){return O.DocsBlockItemPropertyOptionRenderingStyle}});var D=o(8061);Object.defineProperty(e,"DocsBlockItemPropertyRichTextStyle",{enumerable:!0,get:function(){return D.DocsBlockItemPropertyRichTextStyle}});var _=o(7479);Object.defineProperty(e,"DocsBlockItemPropertyTextStyle",{enumerable:!0,get:function(){return _.DocsBlockItemPropertyTextStyle}});var I=o(6839);Object.defineProperty(e,"DocsBlockItemPropertyType",{enumerable:!0,get:function(){return I.DocsBlockItemPropertyType}});var F=o(8095);Object.defineProperty(e,"DocsBlockItemVariantLayoutType",{enumerable:!0,get:function(){return F.DocsBlockItemVariantLayoutType}});var N=o(7291);Object.defineProperty(e,"DocsBlockItemVariantLayoutWidth",{enumerable:!0,get:function(){return N.DocsBlockItemVariantLayoutWidth}});var w=o(5963);Object.defineProperty(e,"DocsBlockOptionRenderingStyle",{enumerable:!0,get:function(){return w.DocsBlockOptionRenderingStyle}});var j=o(9133);Object.defineProperty(e,"DocsBlockOptionColor",{enumerable:!0,get:function(){return j.DocsBlockOptionColor}});var E=o(6644);Object.defineProperty(e,"DocsBlockRichTextPropertyStyle",{enumerable:!0,get:function(){return E.DocsBlockRichTextPropertyStyle}});var R=o(306);Object.defineProperty(e,"DocsBlockTextPropertyStyle",{enumerable:!0,get:function(){return R.DocsBlockTextPropertyStyle}});var $=o(4068);Object.defineProperty(e,"DocsEntityGroupBehavior",{enumerable:!0,get:function(){return $.DocsEntityGroupBehavior}});var B=o(1233);Object.defineProperty(e,"DocsEntityType",{enumerable:!0,get:function(){return B.DocsEntityType}});var L=o(7971);Object.defineProperty(e,"DocsSectionType",{enumerable:!0,get:function(){return L.DocsSectionType}});var M=o(5673);Object.defineProperty(e,"DocsLinkRefType",{enumerable:!0,get:function(){return M.DocsLinkRefType}});var H=o(9932);Object.defineProperty(e,"DocsImageRefType",{enumerable:!0,get:function(){return H.DocsImageRefType}});var A=o(4652);Object.defineProperty(e,"SourceType",{enumerable:!0,get:function(){return A.SourceType}});var V=o(934);Object.defineProperty(e,"IconSet",{enumerable:!0,get:function(){return V.IconSet}});var W=o(1255);Object.defineProperty(e,"FrameAlignment",{enumerable:!0,get:function(){return W.FrameAlignment}});var U=o(3718);Object.defineProperty(e,"FrameLayout",{enumerable:!0,get:function(){return U.FrameLayout}});var G=o(1);Object.defineProperty(e,"GradientType",{enumerable:!0,get:function(){return G.GradientType}});var z=o(2674);Object.defineProperty(e,"RichTextSpanAttributeType",{enumerable:!0,get:function(){return z.RichTextSpanAttributeType}});var Y=o(9125);Object.defineProperty(e,"ShadowType",{enumerable:!0,get:function(){return Y.ShadowType}});var K=o(922);Object.defineProperty(e,"TextCase",{enumerable:!0,get:function(){return K.TextCase}});var q=o(7040);Object.defineProperty(e,"TextDecoration",{enumerable:!0,get:function(){return q.TextDecoration}});var Z=o(3788);Object.defineProperty(e,"TokenType",{enumerable:!0,get:function(){return Z.TokenType}});var J=o(8607);Object.defineProperty(e,"Unit",{enumerable:!0,get:function(){return J.Unit}});var X=o(9478);Object.defineProperty(e,"UserRole",{enumerable:!0,get:function(){return X.UserRole}});var Q=o(6141);Object.defineProperty(e,"VisibilityType",{enumerable:!0,get:function(){return Q.VisibilityType}});var ee=o(5503);Object.defineProperty(e,"WorkspaceSubscriptionPlanInterval",{enumerable:!0,get:function(){return ee.WorkspaceSubscriptionPlanInterval}});var te=o(4290);Object.defineProperty(e,"WorkspaceSubscriptionProductCode",{enumerable:!0,get:function(){return te.WorkspaceSubscriptionProductCode}});var re=o(3607);Object.defineProperty(e,"WorkspaceSubscriptionStatus",{enumerable:!0,get:function(){return re.WorkspaceSubscriptionStatus}});var oe=o(6298);Object.defineProperty(e,"WorkspaceNPMRegistryAuthType",{enumerable:!0,get:function(){return oe.WorkspaceNPMRegistryAuthType}});var ne=o(7968);Object.defineProperty(e,"WorkspaceNPMRegistryType",{enumerable:!0,get:function(){return ne.WorkspaceNPMRegistryType}});var ie=o(8042);Object.defineProperty(e,"ImportWarningType",{enumerable:!0,get:function(){return ie.ImportWarningType}});var ae=o(5695);Object.defineProperty(e,"CustomDomainErrorCode",{enumerable:!0,get:function(){return ae.CustomDomainErrorCode}});var se=o(7737);Object.defineProperty(e,"CustomDomainState",{enumerable:!0,get:function(){return se.CustomDomainState}});var le=o(2802);Object.defineProperty(e,"OutputFileType",{enumerable:!0,get:function(){return le.OutputFileType}}),Object.defineProperty(e,"PulsarExecutor",{enumerable:!0,get:function(){return le.PulsarExecutor}})})();var i=t;for(var a in n)i[a]=n[a];n.__esModule&&Object.defineProperty(i,"__esModule",{value:!0})})()},"./config.ts":
/*!*******************!*\
  !*** ./config.ts ***!
  \*******************/(e,t)=>{"use strict";var r,o;Object.defineProperty(t,"__esModule",{value:!0}),t.FileStructure=t.ThemeExportStyle=void 0,function(e){e.ApplyDirectly="applyDirectly",e.SeparateFiles="separateFiles",e.MergedTheme="mergedTheme"}(r||(t.ThemeExportStyle=r={})),function(e){e.SeparateByType="separateByType",e.SingleFile="singleFile"}(o||(t.FileStructure=o={}))},"./src/constants/defaults.ts":
/*!***********************************!*\
  !*** ./src/constants/defaults.ts ***!
  \***********************************/(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DEFAULT_CONFIG_FILE_NAMES=t.TAILWIND_ALLOWED_CUSTOMIZATION=t.TAILWIND_TOKEN_PREFIXES=void 0;const o=r(/*! @supernovaio/sdk-exporters */"./node_modules/@supernovaio/sdk-exporters/build/supernova-sdk-typescript.js");t.TAILWIND_TOKEN_PREFIXES={Color:"color",Typography:"text",Dimension:"spacing",Size:"size",Space:"spacing",Opacity:"opacity",FontSize:"text",LineHeight:"leading",LetterSpacing:"tracking",ParagraphSpacing:"paragraph",BorderWidth:"border",BorderRadius:"radius",Duration:"duration",ZIndex:"z",Shadow:"shadow",Border:"border",Gradient:"gradient",String:"string",ProductCopy:"product-copy",FontFamily:"font",FontWeight:"font-weight",TextCase:"text-case",TextDecoration:"text-decoration",Visibility:"visibility",Blur:"blur"},t.TAILWIND_ALLOWED_CUSTOMIZATION=[o.TokenType.color,o.TokenType.space,o.TokenType.size,o.TokenType.fontSize,o.TokenType.lineHeight,o.TokenType.letterSpacing,o.TokenType.radius,o.TokenType.borderWidth,o.TokenType.fontFamily,o.TokenType.fontWeight,o.TokenType.shadow,o.TokenType.opacity,o.TokenType.duration,o.TokenType.zIndex,o.TokenType.blur,o.TokenType.typography,o.TokenType.border,o.TokenType.dimension],t.DEFAULT_CONFIG_FILE_NAMES={Color:"tailwind.color.css",Typography:"tailwind.typography.css",Dimension:"tailwind.dimension.css",Size:"tailwind.size.css",Space:"tailwind.space.css",Opacity:"tailwind.opacity.css",FontSize:"tailwind.font-size.css",LineHeight:"tailwind.line-height.css",LetterSpacing:"tailwind.letter-spacing.css",ParagraphSpacing:"tailwind.paragraph-spacing.css",BorderWidth:"tailwind.border-width.css",BorderRadius:"tailwind.border-radius.css",Duration:"tailwind.duration.css",ZIndex:"tailwind.z-index.css",Shadow:"tailwind.shadow.css",Border:"tailwind.border.css",Gradient:"tailwind.gradient.css",String:"tailwind.string.css",ProductCopy:"tailwind.product-copy.css",FontFamily:"tailwind.font-family.css",FontWeight:"tailwind.font-weight.css",TextCase:"tailwind.text-case.css",TextDecoration:"tailwind.text-decoration.css",Visibility:"tailwind.visibility.css",Blur:"tailwind.blur.css"}},"./src/content/token.ts":
/*!******************************!*\
  !*** ./src/content/token.ts ***!
  \******************************/(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getTokenPrefix=s,t.isAllowedTokenType=l,t.convertedToken=function(e,t,r){if(!l(e.tokenType))return null;if(e.tokenType===n.TokenType.typography)return function(e,t,r){const a=o.GeneralHelper.indent(i.exportConfiguration.indent);let s="";s+=c(e,a),i.exportConfiguration.showDescriptions&&e.description&&(s+=`${a}/* ${e.description.trim()} */\n`);const l=d(e,r),u=e.value,p=(c,p="")=>{if(u[c]){const f=u[c],m={...f,referencedTokenId:f.referencedTokenId||null},T={fontSize:n.TokenType.fontSize,lineHeight:n.TokenType.lineHeight,letterSpacing:n.TokenType.letterSpacing,fontWeight:n.TokenType.fontWeight,fontFamily:n.TokenType.fontFamily,textDecoration:n.TokenType.textDecoration,textCase:n.TokenType.textCase,paragraphIndent:n.TokenType.paragraphSpacing,paragraphSpacing:n.TokenType.paragraphSpacing};s+=`${a}--${l}${p}: ${o.CSSHelper.tokenToCSS({...e,value:m,tokenType:T[c]},t,{allowReferences:i.exportConfiguration.useReferences,decimals:i.exportConfiguration.colorPrecision,colorFormat:i.exportConfiguration.colorFormat,forceRemUnit:i.exportConfiguration.forceRemUnit,remBase:i.exportConfiguration.remBase,tokenToVariableRef:e=>`var(--${d(e,r)})`})};\n`}};return p("fontSize"),p("lineHeight","--line-height"),p("letterSpacing","--letter-spacing"),p("fontWeight","--font-weight"),s}(e,t,r);let a=d(e,r);const s=o.CSSHelper.tokenToCSS(e,t,{allowReferences:i.exportConfiguration.useReferences,decimals:i.exportConfiguration.colorPrecision,colorFormat:i.exportConfiguration.colorFormat,forceRemUnit:i.exportConfiguration.forceRemUnit,remBase:i.exportConfiguration.remBase,tokenToVariableRef:e=>l(e.tokenType)?`var(--${d(e,r)})`:o.CSSHelper.tokenToCSS(e,t,{allowReferences:!1,decimals:i.exportConfiguration.colorPrecision,colorFormat:i.exportConfiguration.colorFormat,forceRemUnit:i.exportConfiguration.forceRemUnit,remBase:i.exportConfiguration.remBase,tokenToVariableRef:()=>"",valueTransformer:void 0}),valueTransformer:(e,t)=>{if(t.tokenType===n.TokenType.blur){const t=e.match(/^blur\((.*)\)$/);return t?t[1]:e}}}),u=o.GeneralHelper.indent(i.exportConfiguration.indent);let p="";p+=c(e,u),i.exportConfiguration.showDescriptions&&e.description&&(p+=`${u}/* ${e.description.trim()} */\n`);if(e.tokenType===n.TokenType.blur){const t=[...e.tokenPath||[],e.name].join("/").toLowerCase().includes("background")?"backdrop-blur":"blur"===e.name.toLowerCase()?"blur-default":`blur-${e.name}`;a=o.NamingHelper.codeSafeVariableName(t,o.StringCase.kebabCase)}return p+=`${u}--${a}: ${s};`,p},t.tokenVariableName=d;const o=r(/*! @supernovaio/export-utils */"./utils/dist/index.js"),n=r(/*! @supernovaio/sdk-exporters */"./node_modules/@supernovaio/sdk-exporters/build/supernova-sdk-typescript.js"),i=r(/*! .. */"./src/index.ts"),a=r(/*! ../constants/defaults */"./src/constants/defaults.ts");function s(e){return a.TAILWIND_TOKEN_PREFIXES[e]}function l(e){return a.TAILWIND_ALLOWED_CUSTOMIZATION.includes(e)}function c(e,t){if(!i.exportConfiguration.debug)return"";return`${t}/* Path: ${[...e.tokenPath||[],e.name].join("/")} */\n${t}/* Token: ${JSON.stringify({name:e.name,id:e.id,type:e.tokenType,path:e.tokenPath,prefix:s(e.tokenType),value:e.value})} */\n`}function u(e){return e.includes("-")&&"text-color"!==e&&"background-color"!==e&&"border-color"!==e&&"box-shadow-color"!==e&&"outline-color"!==e&&"stroke-color"!==e&&"fill-color"!==e&&"ring-color"!==e?e:`${e}-default`}function p(e,t){const r=t.split(",").map((e=>e.trim().toLowerCase())),o=r.filter((e=>!e.startsWith("!"))),n=r.filter((e=>e.startsWith("!"))).map((e=>e.slice(1))),i=o.some((t=>e.includes(t))),a=n.some((t=>e.includes(t))),s=i&&!a;return{matches:s,matchingPattern:s&&o.find((t=>e.includes(t)))||""}}function d(e,t){let r=s(e.tokenType);if(i.exportConfiguration.useColorUtilityPrefixes&&e.tokenType===n.TokenType.color){const n=t.find((t=>t.id===e.parentGroupId)),a=e.tokenPath||[],s=[...a,e.name].join("/").toLowerCase();for(const[t,r]of Object.entries(i.exportConfiguration.colorUtilityPrefixes)){const{matches:n,matchingPattern:l}=p(s,r);if(n){const r=a.findIndex((e=>e.toLowerCase().includes(l))),n=[...r>=0?a.slice(r+1):a,e.name].join("-").toLowerCase().trim().replace(/^[-\s]+|[-\s]+$/g,"");return u(o.NamingHelper.codeSafeVariableName(`${t}-color-${n.replace(t,"")}`,o.StringCase.kebabCase,i.exportConfiguration.findReplace,!0))}}return u(o.NamingHelper.codeSafeVariableNameForToken(e,o.StringCase.kebabCase,n||null,r,i.exportConfiguration.findReplace))}const a=t.find((t=>t.id===e.parentGroupId));return u(o.NamingHelper.codeSafeVariableNameForToken(e,o.StringCase.kebabCase,a||null,r,i.exportConfiguration.findReplace))}},"./src/content/typography.ts":
/*!***********************************!*\
  !*** ./src/content/typography.ts ***!
  \***********************************/(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.generateTypographyClass=function(e,t,r="."){if(e.tokenType!==n.TokenType.typography)return null;const s="  ";let l="";if(i.exportConfiguration.debug){l+=`${s}/* Path: ${[...e.tokenPath||[],e.name].join("/")} */\n`,l+=`${s}/* Token: ${JSON.stringify({name:e.name,type:e.tokenType,path:e.tokenPath,value:e.value})} */\n`}i.exportConfiguration.showDescriptions&&e.description&&(l+=`${s}/* ${e.description.trim()} */\n`);const c=o.NamingHelper.codeSafeVariableName([...e.tokenPath||[],e.name].join("-"),o.StringCase.kebabCase,i.exportConfiguration.findReplace,!0),u=(0,a.tokenVariableName)(e,t),p=e.value,d=new Map,f={allowReferences:!1,decimals:i.exportConfiguration.colorPrecision,colorFormat:i.exportConfiguration.colorFormat,tokenToVariableRef:()=>"",forceRemUnit:i.exportConfiguration.forceRemUnit,remBase:i.exportConfiguration.remBase};if(l+=`${s}${r}${c} {\n`,p.fontFamily){const e=p.fontFamily;l+=`${s}  font-family: ${o.CSSHelper.stringTokenValueToCSS(e,d,f)};\n`}l+=`${s}  font-size: var(--${u});\n`,l+=`${s}  font-weight: var(--${u}--font-weight);\n`,p.lineHeight&&(l+=`${s}  line-height: var(--${u}--line-height);\n`);if(l+=`${s}  letter-spacing: var(--${u}--letter-spacing);\n`,p.textDecoration){const e=p.textDecoration;l+=`${s}  text-decoration: ${o.CSSHelper.optionTokenValueToCSS(e,d,f,n.TokenType.textDecoration)};\n`}if(p.textCase){const e=p.textCase;l+=`${s}  text-transform: ${o.CSSHelper.optionTokenValueToCSS(e,d,f,n.TokenType.textCase)};\n`}if(p.paragraphIndent){const e=p.paragraphIndent;l+=`${s}  text-indent: ${o.CSSHelper.dimensionTokenValueToCSS(e,d,f)};\n`}if(p.paragraphSpacing){const e=p.paragraphSpacing;l+=`${s}  margin-bottom: ${o.CSSHelper.dimensionTokenValueToCSS(e,d,f)};\n`}return l+=`${s}}\n`,l};const o=r(/*! @supernovaio/export-utils */"./utils/dist/index.js"),n=r(/*! @supernovaio/sdk-exporters */"./node_modules/@supernovaio/sdk-exporters/build/supernova-sdk-typescript.js"),i=r(/*! .. */"./src/index.ts"),a=r(/*! ./token */"./src/content/token.ts")},"./src/files/tailwind-file.ts":
/*!************************************!*\
  !*** ./src/files/tailwind-file.ts ***!
  \************************************/(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.styleOutputFile=function(e,t,r="",n){const s=new Map(e.map((e=>[e.id,e]))),l=u(e,r,n);if(0===l.length)return null;let c="";r||(c=i.exportConfiguration.globalPrefix?`@import "tailwindcss" prefix(${i.exportConfiguration.globalPrefix});\n\n`:'@import "tailwindcss";\n\n');c+=p(r,l.length,Array.from(new Set(l.map((e=>e.tokenType)))));const d=r&&n?i.exportConfiguration.themeSelector.replace("{theme}",r):i.exportConfiguration.cssSelector;let g="";i.exportConfiguration.fileStructure!==a.FileStructure.SeparateByType&&(g+=f(d));g+=T(l,s,t);const y=i.exportConfiguration.useReferences&&l.some((e=>e.value.referencedTokenId&&null!==e.value.referencedTokenId&&void 0!==e.value.referencedTokenId));c+=`${d==="@theme"&&y?"@theme inline":d} {\n${g}}\n`,c+=m(l,t),i.exportConfiguration.showGeneratedFileDisclaimer&&(c=o.GeneralHelper.addDisclaimer(i.exportConfiguration.disclaimer,c));const h=r?`tailwind.${r}.css`:"tailwind.css";return o.FileHelper.createTextFile({relativePath:"./",fileName:h,content:c})},t.generateStyleFiles=function(e,t,r="",s){const l=new Map(e.map((e=>[e.id,e]))),c=u(e,r,s);if(0===c.length)return[];const d=new Map;c.forEach((e=>{const t=e.tokenType;d.has(t)||d.set(t,[]),d.get(t).push(e)}));const f=r&&s?i.exportConfiguration.themeSelector.replace("{theme}",r):i.exportConfiguration.cssSelector,y=i.exportConfiguration.useReferences&&c.some((e=>e.value.referencedTokenId&&null!==e.value.referencedTokenId&&void 0!==e.value.referencedTokenId)),h="@theme"===f&&y?"@theme inline":f;return Array.from(d.entries()).map((([e,s])=>{if(!i.exportConfiguration.generateEmptyConfigTypeFiles&&0===s.length)return null;let c="";r||(c=i.exportConfiguration.globalPrefix?`@import "tailwindcss" prefix(${i.exportConfiguration.globalPrefix});\n\n`:'@import "tailwindcss";\n\n'),c+=p(r,s.length,[],e);let u="";u+=T(s,l,t,e),c+=`${h} {\n${u}}\n`,e===n.TokenType.typography&&(c+=m(s,t)),i.exportConfiguration.showGeneratedFileDisclaimer&&(c=o.GeneralHelper.addDisclaimer(i.exportConfiguration.disclaimer,c));const d=g(e);let f="./";return r?f=`./${r}/`:i.exportConfiguration.fileStructure===a.FileStructure.SeparateByType&&(f=i.exportConfiguration.baseStyleFilePath.endsWith("/")?i.exportConfiguration.baseStyleFilePath:`${i.exportConfiguration.baseStyleFilePath}/`),o.FileHelper.createTextFile({relativePath:f,fileName:d,content:c})})).filter((e=>null!==e))},t.resetOutputFile=function(){if(i.exportConfiguration.fileStructure!==a.FileStructure.SeparateByType)return null;if(!d())return null;let e="";i.exportConfiguration.debug&&(e+="/* Debug Information\n",e+=" * Exporter: Tailwind CSS by Supernova\n",e+=" * File: Reset\n",e+=` * Generated: ${(new Date).toISOString()}\n`,e+=" */\n\n");const t=f(i.exportConfiguration.cssSelector);t&&(e+=`${i.exportConfiguration.cssSelector} {\n${t}}\n`);i.exportConfiguration.showGeneratedFileDisclaimer&&(e=o.GeneralHelper.addDisclaimer(i.exportConfiguration.disclaimer,e));return o.FileHelper.createTextFile({relativePath:"./",fileName:"reset.css",content:e})},t.indexOutputFile=function(e,t=[]){if(!i.exportConfiguration.generateIndexFile)return null;let r="";i.exportConfiguration.debug&&(r+="/* Debug Information\n",r+=" * Exporter: Tailwind CSS by Supernova\n",r+=" * File: Index\n",r+=` * Generated: ${(new Date).toISOString()}\n`,r+=" */\n\n");i.exportConfiguration.fileStructure===a.FileStructure.SeparateByType&&d()&&(r+='@import "./reset.css";\n\n');if(i.exportConfiguration.exportBaseValues)if(i.exportConfiguration.fileStructure===a.FileStructure.SingleFile)r+='@import "./tailwind.css";\n';else{Array.from(new Set(e.map((e=>e.tokenType)))).filter((e=>(0,s.isAllowedTokenType)(e))).forEach((e=>{const t=g(e),o=i.exportConfiguration.baseStyleFilePath.endsWith("/")?i.exportConfiguration.baseStyleFilePath:`${i.exportConfiguration.baseStyleFilePath}/`;r+=`@import "${o}${t}";\n`}))}t.forEach((t=>{const n="string"==typeof t?t:o.ThemeHelper.getThemeIdentifier(t);if(i.exportConfiguration.fileStructure===a.FileStructure.SingleFile)r+=`@import "./tailwind.${n}.css";\n`;else{Array.from(new Set(e.map((e=>e.tokenType)))).filter((e=>(0,s.isAllowedTokenType)(e))).forEach((a=>{if(i.exportConfiguration.exportOnlyThemedTokens&&"string"!=typeof t){if(0===o.ThemeHelper.filterThemedTokens(e.filter((e=>e.tokenType===a)),t).length)return}const s=g(a);r+=`@import "./${n}/${s}";\n`}))}})),i.exportConfiguration.showGeneratedFileDisclaimer&&(r=o.GeneralHelper.addDisclaimer(i.exportConfiguration.disclaimer,r));return o.FileHelper.createTextFile({relativePath:i.exportConfiguration.baseIndexFilePath||"./",fileName:i.exportConfiguration.indexFileName||"index.css",content:r})};const o=r(/*! @supernovaio/export-utils */"./utils/dist/index.js"),n=r(/*! @supernovaio/sdk-exporters */"./node_modules/@supernovaio/sdk-exporters/build/supernova-sdk-typescript.js"),i=r(/*! .. */"./src/index.ts"),a=r(/*! ../../config */"./config.ts"),s=r(/*! ../content/token */"./src/content/token.ts"),l=r(/*! ../content/typography */"./src/content/typography.ts"),c=r(/*! ../constants/defaults */"./src/constants/defaults.ts");function u(e,t="",r){if(!i.exportConfiguration.generateEmptyFiles&&0===e.length)return[];let n=e;return t&&r&&i.exportConfiguration.exportOnlyThemedTokens&&(n=o.ThemeHelper.filterThemedTokens(e,r),0===n.length)?[]:(n=n.filter((e=>(0,s.isAllowedTokenType)(e.tokenType))),n)}function p(e="",t,r=[],o){if(!i.exportConfiguration.debug)return"";let n="/* Debug Information\n";if(n+=" * Exporter: Tailwind CSS by Supernova\n",n+=` * Theme: ${e||"Base"}\n`,o&&(n+=` * Token Type: ${o}\n`),n+=` * Token Count: ${t}\n`,r.length>0&&(n+=` * Token Types: ${r.join(", ")}\n`),n+=` * Color Format: ${i.exportConfiguration.colorFormat}\n`,n+=` * Prefix: ${i.exportConfiguration.globalPrefix||"None"}\n`,!o&&i.exportConfiguration.useColorUtilityPrefixes){n+=" * Color Utility Prefixes:\n";for(const[e,t]of Object.entries(i.exportConfiguration.colorUtilityPrefixes)){n+=`    - ${e}: ${t.split(",").map((e=>e.trim())).join(", ")}\n`}}else n+=" * Color Utility Prefixes: Disabled\n";return n+=` * Generated: ${(new Date).toISOString()}\n`,n+=" */\n\n",n}function d(){return i.exportConfiguration.disableAllDefaults||i.exportConfiguration.disableAnimateDefaults||i.exportConfiguration.disableBlurDefaults||i.exportConfiguration.disableBorderRadiusDefaults||i.exportConfiguration.disableBreakpointDefaults||i.exportConfiguration.disableColorDefaults||i.exportConfiguration.disableContainerDefaults||i.exportConfiguration.disableDropShadowDefaults||i.exportConfiguration.disableFontDefaults||i.exportConfiguration.disableFontWeightDefaults||i.exportConfiguration.disableInsetDefaults||i.exportConfiguration.disableLeadingDefaults||i.exportConfiguration.disablePerspectiveDefaults||i.exportConfiguration.disableShadowDefaults||i.exportConfiguration.disableSpacingDefaults||i.exportConfiguration.disableTextDefaults||i.exportConfiguration.disableTrackingDefaults}function f(e){if(!d()&&"@theme"!==e)return"";const t=o.GeneralHelper.indent(i.exportConfiguration.indent),r=[];return i.exportConfiguration.disableAllDefaults?r.push("--*: initial;"):(i.exportConfiguration.disableAnimateDefaults&&r.push("--animate-*: initial;"),i.exportConfiguration.disableBlurDefaults&&r.push("--blur-*: initial;"),i.exportConfiguration.disableBorderRadiusDefaults&&r.push("--radius-*: initial;"),i.exportConfiguration.disableBreakpointDefaults&&r.push("--breakpoint-*: initial;"),i.exportConfiguration.disableColorDefaults&&r.push("--color-*: initial;"),i.exportConfiguration.disableContainerDefaults&&r.push("--container-*: initial;"),i.exportConfiguration.disableDropShadowDefaults&&r.push("--drop-shadow-*: initial;"),i.exportConfiguration.disableFontDefaults&&r.push("--font-*: initial;"),i.exportConfiguration.disableFontWeightDefaults&&r.push("--font-weight-*: initial;"),i.exportConfiguration.disableInsetDefaults&&r.push("--inset-*: initial;"),i.exportConfiguration.disableLeadingDefaults&&r.push("--leading-*: initial;"),i.exportConfiguration.disablePerspectiveDefaults&&r.push("--perspective-*: initial;"),i.exportConfiguration.disableShadowDefaults&&r.push("--shadow-*: initial;"),i.exportConfiguration.disableSpacingDefaults&&r.push("--spacing-*: initial;"),i.exportConfiguration.disableTextDefaults&&r.push("--text-*: initial;"),i.exportConfiguration.disableTrackingDefaults&&r.push("--tracking-*: initial;")),r.length>0?`\n${t}/* Reset default Tailwind configuration */\n${t}${r.join(`\n${t}`)}\n`:""}function m(e,t){if(!i.exportConfiguration.generateTypographyClasses)return"";const r=e.filter((e=>e.tokenType===n.TokenType.typography));if(0===r.length)return"";let o="\n@layer components {\n";return r.forEach((e=>{const r=(0,l.generateTypographyClass)(e,t);r&&(o+=r)})),o+="}\n",o}function T(e,t,r,n){const a=o.GeneralHelper.indent(i.exportConfiguration.indent);let l="";const c=new Map;return n?c.set(n,e):e.forEach((e=>{const t=e.tokenType;c.has(t)||c.set(t,[]),c.get(t).push(e)})),c.forEach(((e,o)=>{l+=`\n${a}/* ${o} */\n`,i.exportConfiguration.debug&&(l+=`${a}/* ${e.length} ${o} tokens */\n`);const n=e.map((e=>(0,s.convertedToken)(e,t,r))).filter((e=>null!==e)).join("\n");l+=n+"\n"})),l}function g(e){let t=i.exportConfiguration.customizeConfigFileNames&&i.exportConfiguration.configFileNames[e]||c.DEFAULT_CONFIG_FILE_NAMES[e];return t.toLowerCase().endsWith(".css")||(t+=".css"),t}},"./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.exportConfiguration=void 0,t.generateFiles=function(e,r,a=[]){const s=[];if(t.exportConfiguration.fileStructure===o.FileStructure.SeparateByType){const e=(0,n.resetOutputFile)();e&&s.push(e)}if(t.exportConfiguration.fileStructure===o.FileStructure.SingleFile){const t=(0,n.styleOutputFile)(e,r);t&&s.push(t)}else{const t=(0,n.generateStyleFiles)(e,r);s.push(...t)}a.forEach((a=>{if(t.exportConfiguration.fileStructure===o.FileStructure.SingleFile){const t=(0,n.styleOutputFile)(e,r,i.ThemeHelper.getThemeIdentifier(a),a);t&&s.push(t)}else{const t=(0,n.generateStyleFiles)(e,r,i.ThemeHelper.getThemeIdentifier(a),a);s.push(...t)}}));const l=(0,n.indexOutputFile)(e,a);l&&s.push(l);return s};const o=r(/*! ../config */"./config.ts"),n=r(/*! ./files/tailwind-file */"./src/files/tailwind-file.ts"),i=r(/*! @supernovaio/export-utils */"./utils/dist/index.js"),a=r(/*! ./content/token */"./src/content/token.ts"),s=r(/*! ./utils/tailwind-class */"./src/utils/tailwind-class.ts");function l(e){return e.filter((e=>null!==e))}t.exportConfiguration=Pulsar.exportConfig(),Pulsar.export((async(e,r)=>{const c={designSystemId:r.dsId,versionId:r.versionId};let u=await e.tokens.getTokens(c),p=await e.tokens.getTokenGroups(c);if(r.brandId){const t=(await e.brands.getBrands(c)).find((e=>e.id===r.brandId||e.idInVersion===r.brandId));if(!t)throw new Error(`Unable to find brand ${r.brandId}.`);u=u.filter((e=>e.brandId===t.id)),p=p.filter((e=>e.brandId===t.id))}if(!r.isPreview&&(t.exportConfiguration.writeClassnameToProperty||t.exportConfiguration.writeCSSVariableNameToProperty)){const r=new i.WriteTokenPropStore(e,c),o=u.filter((e=>(0,a.isAllowedTokenType)(e.tokenType)));t.exportConfiguration.writeClassnameToProperty&&await r.writeTokenProperties(t.exportConfiguration.propertyToWriteClassnameTo,o,(e=>(0,s.variableToTailwindClassName)((0,a.tokenVariableName)(e,p)))),t.exportConfiguration.writeCSSVariableNameToProperty&&await r.writeTokenProperties(t.exportConfiguration.propertyToWriteCSSVariableNameTo,o,(e=>t.exportConfiguration.propertyToWriteCSSVariableNameToIncludesVar?`var(--${(0,a.tokenVariableName)(e,p)})`:(0,a.tokenVariableName)(e,p)))}if(r.themeIds&&r.themeIds.length>0){const a=await e.tokens.getTokenThemes(c),s=r.themeIds.map((e=>{const t=a.find((t=>t.id===e||t.idInVersion===e));if(!t)throw new Error(`Unable to find theme ${e}.`);return t}));switch(t.exportConfiguration.exportThemesAs){case o.ThemeExportStyle.ApplyDirectly:if(u=e.tokens.computeTokensByApplyingThemes(u,u,s),t.exportConfiguration.fileStructure===o.FileStructure.SingleFile)return l([(0,n.styleOutputFile)(u,p),(0,n.indexOutputFile)(u)]);{const e=(0,n.generateStyleFiles)(u,p),t=(0,n.resetOutputFile)(),r=(0,n.indexOutputFile)(u);return[...e,...t?[t]:[],...r?[r]:[]]}case o.ThemeExportStyle.SeparateFiles:let r=[];if(t.exportConfiguration.fileStructure===o.FileStructure.SeparateByType){const e=(0,n.resetOutputFile)();e&&r.push(e)}if(t.exportConfiguration.exportBaseValues)if(t.exportConfiguration.fileStructure===o.FileStructure.SingleFile){const e=(0,n.styleOutputFile)(u,p);e&&r.push(e)}else{const e=(0,n.generateStyleFiles)(u,p);r=[...r,...e]}s.forEach((a=>{const s=e.tokens.computeTokensByApplyingThemes(u,u,[a]);if(t.exportConfiguration.fileStructure===o.FileStructure.SingleFile){const e=(0,n.styleOutputFile)(s,p,i.ThemeHelper.getThemeIdentifier(a),a);e&&r.push(e)}else{const e=(0,n.generateStyleFiles)(s,p,i.ThemeHelper.getThemeIdentifier(a),a);r=[...r,...e]}}));const a=(0,n.indexOutputFile)(u,s);return a&&r.push(a),r;case o.ThemeExportStyle.MergedTheme:let c=[];if(t.exportConfiguration.fileStructure===o.FileStructure.SeparateByType){const e=(0,n.resetOutputFile)();e&&c.push(e)}if(t.exportConfiguration.exportBaseValues)if(t.exportConfiguration.fileStructure===o.FileStructure.SingleFile){const e=(0,n.styleOutputFile)(u,p);e&&c.push(e)}else{const e=(0,n.generateStyleFiles)(u,p);c=[...c,...e]}const d=e.tokens.computeTokensByApplyingThemes(u,u,s);if(t.exportConfiguration.fileStructure===o.FileStructure.SingleFile){const e=(0,n.styleOutputFile)(d,p,"themed",s[0]);e&&c.push(e)}else{const e=(0,n.generateStyleFiles)(d,p,"themed",s[0]);c=[...c,...e]}const f=(0,n.indexOutputFile)(u,["themed"]);return f&&c.push(f),c}}if(t.exportConfiguration.fileStructure===o.FileStructure.SingleFile)return l([t.exportConfiguration.exportBaseValues?(0,n.styleOutputFile)(u,p):null,(0,n.indexOutputFile)(u)]);{const e=t.exportConfiguration.exportBaseValues?(0,n.generateStyleFiles)(u,p):[],r=t.exportConfiguration.fileStructure===o.FileStructure.SeparateByType&&(t.exportConfiguration.disableAllDefaults||t.exportConfiguration.disableAnimateDefaults||t.exportConfiguration.disableBlurDefaults||t.exportConfiguration.disableBorderRadiusDefaults||t.exportConfiguration.disableBreakpointDefaults||t.exportConfiguration.disableColorDefaults||t.exportConfiguration.disableContainerDefaults||t.exportConfiguration.disableDropShadowDefaults||t.exportConfiguration.disableFontDefaults||t.exportConfiguration.disableFontWeightDefaults||t.exportConfiguration.disableInsetDefaults||t.exportConfiguration.disableLeadingDefaults||t.exportConfiguration.disablePerspectiveDefaults||t.exportConfiguration.disableShadowDefaults||t.exportConfiguration.disableSpacingDefaults||t.exportConfiguration.disableTextDefaults||t.exportConfiguration.disableTrackingDefaults)?(0,n.resetOutputFile)():null,i=(0,n.indexOutputFile)(u);return[...e,...r?[r]:[],...i?[i]:[]]}}))},"./src/utils/tailwind-class.ts":
/*!*************************************!*\
  !*** ./src/utils/tailwind-class.ts ***!
  \*************************************/(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.variableToTailwindClassName=function(e){const t=(e.startsWith("--")?e.slice(2):e).split("-");let r="",o="";"color"===t[1]&&("background"===t[0]?r=`bg-${t.slice(2).join("-")}`:"text"===t[0]?r=`text-${t.slice(2).join("-")}`:"border"===t[0]?r=`border-${t.slice(2).join("-")}`:"ring"===t[0]?r=`ring-${t.slice(2).join("-")}`:"divide"===t[0]?r=`divide-${t.slice(2).join("-")}`:"outline"===t[0]?r=`outline-${t.slice(2).join("-")}`:"stroke"===t[0]?r=`stroke-${t.slice(2).join("-")}`:"fill"===t[0]&&(r=`fill-${t.slice(2).join("-")}`));r||("color"===t[0]?(r=`${t.slice(1).join("-")}`,o="[text|bg|...]-"):"spacing"===t[0]?(r=`${t.slice(1).join("-")}`,o="[gap|m|p|...]-"):"text"===t[0]?r=`text-${t.slice(1).join("-")}`:"font"===t[0]?r="weight"===t[1]||"family"===t[1]?`font-${t.slice(2).join("-")}`:`font-${t.slice(1).join("-")}`:"radius"===t[0]?r=`rounded-${t.slice(1).join("-")}`:"shadow"===t[0]?r="inset"===t[1]?`shadow-inner-${t.slice(2).join("-")}`:"drop"===t[1]?`drop-shadow-${t.slice(2).join("-")}`:`shadow-${t.slice(1).join("-")}`:"blur"===t[0]?r=`blur-${t.slice(1).join("-")}`:"tracking"===t[0]?r=`tracking-${t.slice(1).join("-")}`:"leading"===t[0]?r=`leading-${t.slice(1).join("-")}`:"opacity"===t[0]?r=`opacity-${t.slice(1).join("-")}`:"z"===t[0]?r=`z-${t.slice(1).join("-")}`:"border"===t[0]?r="width"===t[1]?`border-${t.slice(2).join("-")}`:`border-${t.slice(1).join("-")}`:"duration"===t[0]?r=`duration-${t.slice(1).join("-")}`:"size"===t[0]?r=`size-${t.slice(1).join("-")}`:"space"===t[0]?r=`space-${t.slice(1).join("-")}`:"line"===t[0]&&"height"===t[1]?r=`leading-${t.slice(2).join("-")}`:"letter"===t[0]&&"spacing"===t[1]?r=`tracking-${t.slice(2).join("-")}`:"font"===t[0]&&"size"===t[1]?r=`text-${t.slice(2).join("-")}`:"typography"===t[0]&&(r=`typography-${t.slice(1).join("-")}`));r||(r=t.join("-"));return"."+o+r}},"./utils/dist/enums/ColorFormat.js":
/*!*****************************************!*\
  !*** ./utils/dist/enums/ColorFormat.js ***!
  \*****************************************/(e,t)=>{"use strict";var r;Object.defineProperty(t,"__esModule",{value:!0}),t.ColorFormat=void 0,function(e){e.rgb="rgb",e.rgba="rgba",e.smartRgba="smartRgba",e.hex6="hex6",e.hex8="hex8",e.hashHex6="hashHex6",e.hashHex8="hashHex8",e.smartHashHex="smartHashHex",e.smartHex="smartHex",e.hsl="hsl",e.hsla="hsla",e.smartHsla="smartHsla",e.smartUIColor="smartUIColor",e.oklch="oklch",e.oklcha="oklcha",e.smartOklch="smartOklch"}(r||(t.ColorFormat=r={}))},"./utils/dist/enums/StringCase.js":
/*!****************************************!*\
  !*** ./utils/dist/enums/StringCase.js ***!
  \****************************************/(e,t)=>{"use strict";var r;Object.defineProperty(t,"__esModule",{value:!0}),t.StringCase=void 0,function(e){e.camelCase="camelCase",e.capitalCase="capitalCase",e.constantCase="constantCase",e.dotCase="dotCase",e.trainCase="trainCase",e.noCase="noCase",e.kebabCase="kebabCase",e.pascalCase="pascalCase",e.pathCase="pathCase",e.sentenceCase="sentenceCase",e.snakeCase="snakeCase",e.flatCase="flatCase"}(r||(t.StringCase=r={}))},"./utils/dist/helpers/CSSHelper.js":
/*!*****************************************!*\
  !*** ./utils/dist/helpers/CSSHelper.js ***!
  \*****************************************/(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CSSHelper=void 0;const o=r(/*! @supernovaio/sdk-exporters */"./node_modules/@supernovaio/sdk-exporters/build/supernova-sdk-typescript.js"),n=r(/*! ./TokenHelper */"./utils/dist/helpers/TokenHelper.js"),i=r(/*! ./ColorHelper */"./utils/dist/helpers/ColorHelper.js");t.CSSHelper=class{static tokenToCSS(e,t,r){let n;switch(e.tokenType){case o.TokenType.color:n=this.colorTokenValueToCSS(e.value,t,r);break;case o.TokenType.border:n=this.borderTokenValueToCSS(e.value,t,r);break;case o.TokenType.gradient:n=this.gradientTokenValueToCSS(e.value,t,r);break;case o.TokenType.dimension:case o.TokenType.size:case o.TokenType.space:case o.TokenType.opacity:case o.TokenType.fontSize:case o.TokenType.lineHeight:case o.TokenType.letterSpacing:case o.TokenType.paragraphSpacing:case o.TokenType.borderWidth:case o.TokenType.radius:case o.TokenType.duration:case o.TokenType.zIndex:n=this.dimensionTokenValueToCSS(e.value,t,r);break;case o.TokenType.shadow:n=this.shadowTokenValueToCSS(e.value,t,r);break;case o.TokenType.fontWeight:n=this.fontWeightTokenValueToCSS(e.value,t,r);break;case o.TokenType.fontFamily:case o.TokenType.productCopy:case o.TokenType.string:n=this.stringTokenValueToCSS(e.value,t,r);break;case o.TokenType.textCase:case o.TokenType.textDecoration:case o.TokenType.visibility:n=this.optionTokenValueToCSS(e.value,t,r,e.tokenType);break;case o.TokenType.blur:n=this.blurTokenValueToCSS(e.value,t,r);break;case o.TokenType.typography:n=this.typographyTokenValueToCSS(e.value,t,r);break;default:throw new o.UnreachableCaseError(e.tokenType,"Unsupported token type for transformation to CSS:")}if(r.valueTransformer){const t=r.valueTransformer(n,e);if(void 0!==t)return t}return n}static colorTokenValueToCSS(e,t,r){return i.ColorHelper.formattedColorOrVariableName(e,t,r)}static borderTokenValueToCSS(e,t,r){const o=(0,n.sureOptionalReference)(e.referencedTokenId,t,r.allowReferences);if(o)return r.tokenToVariableRef(o);const i=this.dimensionTokenValueToCSS(e.width,t,r),a=this.borderStyleToCSS(e.style),s=this.colorTokenValueToCSS(e.color,t,r);this.borderPositionToCSS(e.position);return`${i} ${a} ${s}`}static gradientTokenValueToCSS(e,t,r){return e.map((e=>this.gradientLayerToCSS(e,t,r))).join(", ")}static gradientLayerToCSS(e,t,r){const a=(0,n.sureOptionalReference)(e.referencedTokenId,t,r.allowReferences);if(a)return r.tokenToVariableRef(a);const s=i.ColorHelper.roundToDecimals(e.to.x,r.decimals)-i.ColorHelper.roundToDecimals(e.from.x,r.decimals),l=i.ColorHelper.roundToDecimals(e.to.y,r.decimals)-i.ColorHelper.roundToDecimals(e.from.y,r.decimals),c=Math.atan2(l,s)*(180/Math.PI),u=()=>s>=0&&l>0||s>0&&l<=0||s<=0&&l<0?90+c:c-270;let p="";switch(e.type){case o.GradientType.linear:p=`linear-gradient(${u()}deg, `;break;case o.GradientType.radial:p="radial-gradient(circle, ";break;case o.GradientType.angular:p="conic-gradient(";break;default:p=`linear-gradient(${u()}deg, `}return`${p}${e.stops.map((e=>`${this.colorTokenValueToCSS(e.color,t,r)} ${i.ColorHelper.roundToDecimals(100*e.position,r.decimals)}%`)).join(", ")})`}static dimensionTokenValueToCSS(e,t,r){const a=(0,n.sureOptionalReference)(e.referencedTokenId,t,r.allowReferences);if(a)return r.tokenToVariableRef(a);if(r.forceRemUnit&&e.unit===o.Unit.pixels){const t=r.remBase||16,o=e.measure/t;return`${i.ColorHelper.roundToDecimals(o,r.decimals)}rem`}return`${i.ColorHelper.roundToDecimals(e.measure,r.decimals)}${this.unitToCSS(e.unit)}`}static shadowTokenValueToCSS(e,t,r){return e.map((e=>this.shadowLayerToCSS(e,t,r))).join(", ")}static shadowLayerToCSS(e,t,r){const a=(0,n.sureOptionalReference)(e.referencedTokenId,t,r.allowReferences);if(a)return r.tokenToVariableRef(a);const s=e=>{if(r.forceRemUnit){const t=e/(r.remBase||16);return`${i.ColorHelper.roundToDecimals(t,r.decimals)}rem`}return`${e}px`};return`${e.type===o.ShadowType.inner?"inset ":""}${s(e.x)} ${s(e.y)} ${s(e.radius)} ${s(e.spread)} ${this.colorTokenValueToCSS({...e.color,...e.opacity&&{opacity:e.opacity}},t,r)}`}static fontWeightTokenValueToCSS(e,t,r){const o=(0,n.sureOptionalReference)(e.referencedTokenId,t,r.allowReferences);if(o)return r.tokenToVariableRef(o);return`${this.normalizeTextWeight(e.text)}`}static normalizeTextWeight(e){const t=e.toLowerCase().trim(),r=parseInt(t);if(!isNaN(r))return r;switch(t){case"thin":case"hairline":return 100;case"extra light":case"extralight":case"ultra light":case"ultralight":return 200;case"light":return 300;case"normal":case"regular":case"book":default:return 400;case"medium":return 500;case"semi bold":case"semibold":case"demi bold":case"demibold":return 600;case"bold":return 700;case"extra bold":case"extrabold":case"ultra bold":case"ultrabold":return 800;case"black":case"heavy":return 900}}static stringTokenValueToCSS(e,t,r){const o=(0,n.sureOptionalReference)(e.referencedTokenId,t,r.allowReferences);return o?r.tokenToVariableRef(o):`"${e.text}"`}static optionTokenValueToCSS(e,t,r,i){const a=(0,n.sureOptionalReference)(e.referencedTokenId,t,r.allowReferences);return a?r.tokenToVariableRef(a):i===o.TokenType.textCase?this.textCaseToCSS(e.value):i===o.TokenType.textDecoration?this.textDecorationToCSS(e.value):e.value.toLowerCase()}static blurTokenValueToCSS(e,t,r){const o=(0,n.sureOptionalReference)(e.referencedTokenId,t,r.allowReferences);return o?r.tokenToVariableRef(o):`blur(${this.dimensionTokenValueToCSS(e.radius,t,r)})`}static typographyTokenValueToCSS(e,t,r){const i=(0,n.sureOptionalReference)(e.referencedTokenId,t,r.allowReferences);if(i)return r.tokenToVariableRef(i);const a=(0,n.sureOptionalReference)(e.fontFamily.referencedTokenId,t,r.allowReferences),s=(0,n.sureOptionalReference)(e.fontWeight.referencedTokenId,t,r.allowReferences),l=(0,n.sureOptionalReference)(e.textDecoration.referencedTokenId,t,r.allowReferences),c=(0,n.sureOptionalReference)(e.textCase.referencedTokenId,t,r.allowReferences),u={fontFamily:a?r.tokenToVariableRef(a):e.fontFamily.text,fontWeight:s?r.tokenToVariableRef(s):this.normalizeTextWeight(e.fontWeight.text),textDecoration:l?r.tokenToVariableRef(l):e.textDecoration.value===o.TextDecoration.original?this.textDecorationToCSS(e.textDecoration.value):void 0,textCase:c?r.tokenToVariableRef(c):e.textCase.value===o.TextCase.original?this.textCaseToCSS(e.textCase.value):void 0,caps:e.textCase.value===o.TextCase.smallCaps,fontSize:this.dimensionTokenValueToCSS(e.fontSize,t,r),lineHeight:e.lineHeight?this.dimensionTokenValueToCSS(e.lineHeight,t,r):void 0},p=u.fontSize;return`${u.caps?"small-caps ":""}${u.fontWeight} ${u.lineHeight?`${p}/${u.lineHeight}`:p} ${a?u.fontFamily:`"${u.fontFamily}"`}`}static borderStyleToCSS(e){switch(e){case o.BorderStyle.dashed:return"dashed";case o.BorderStyle.dotted:return"dotted";case o.BorderStyle.solid:return"solid";case o.BorderStyle.groove:return"groove";default:return"solid"}}static borderPositionToCSS(e){switch(e){case o.BorderPosition.center:return"center";case o.BorderPosition.inside:return"inside";case o.BorderPosition.outside:default:return"outside"}}static unitToCSS(e){switch(e){case o.Unit.percent:return"%";case o.Unit.pixels:return"px";case o.Unit.rem:return"rem";case o.Unit.raw:return"";case o.Unit.ms:return"ms";default:return"px"}}static textCaseToCSS(e){switch(e){case o.TextCase.original:return"none";case o.TextCase.upper:return"uppercase";case o.TextCase.lower:return"lowercase";case o.TextCase.camel:return"capitalize";case o.TextCase.smallCaps:return"small-caps"}}static textDecorationToCSS(e){switch(e){case o.TextDecoration.original:return"none";case o.TextDecoration.underline:return"underline";case o.TextDecoration.strikethrough:return"line-through"}}}},"./utils/dist/helpers/ColorHelper.js":
/*!*******************************************!*\
  !*** ./utils/dist/helpers/ColorHelper.js ***!
  \*******************************************/(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ColorHelper=void 0;const o=r(/*! ../enums/ColorFormat */"./utils/dist/enums/ColorFormat.js"),n=r(/*! ./TokenHelper */"./utils/dist/helpers/TokenHelper.js");class i{static formattedColorOrVariableName(e,t,r){let i,a=null,s=null;const l=(0,n.sureOptionalReference)(e.referencedTokenId,t,r.allowReferences);if(l)i=r.tokenToVariableRef(l);else{const o=(0,n.sureOptionalReference)(e.color.referencedTokenId,t,r.allowReferences);o&&(a=r.tokenToVariableRef(o));const i=(0,n.sureOptionalReference)(e.opacity.referencedTokenId,t,r.allowReferences);i&&(s=r.tokenToVariableRef(i))}if(i)return i;if(!i&&!a&&!s)return this.formattedColor(e,r.colorFormat,r.decimals);switch(r.colorFormat){case o.ColorFormat.rgb:case o.ColorFormat.rgba:case o.ColorFormat.smartRgba:return this.colorToRgb(r.colorFormat,this.normalizedIntColor(e),e.opacity.measure,r.decimals,a,s);default:return this.formattedColor(e,r.colorFormat,r.decimals)}}static formattedColor(e,t,r=3){switch(t){case o.ColorFormat.hex6:case o.ColorFormat.hex8:case o.ColorFormat.hashHex6:case o.ColorFormat.hashHex8:case o.ColorFormat.smartHex:case o.ColorFormat.smartHashHex:return this.colorToHex(t,this.normalizedIntColor(e),e.opacity.measure);case o.ColorFormat.rgb:case o.ColorFormat.rgba:case o.ColorFormat.smartRgba:return this.colorToRgb(t,this.normalizedIntColor(e),e.opacity.measure,r,null,null);case o.ColorFormat.hsl:case o.ColorFormat.hsla:case o.ColorFormat.smartHsla:return this.colorToHsl(t,this.normalizedFractionalColor(e),e.opacity.measure,r);case o.ColorFormat.smartUIColor:return this.colorToUIColor(this.normalizedIntColor(e),e.opacity.measure,r);case o.ColorFormat.oklch:case o.ColorFormat.oklcha:case o.ColorFormat.smartOklch:return this.colorToOklch(t,this.normalizedIntColor(e),e.opacity.measure,r);default:return this.colorToHex(o.ColorFormat.smartHashHex,this.normalizedIntColor(e),e.opacity.measure)}}static colorToRgb(e,t,r,n,i,a){let s;return s=e===o.ColorFormat.rgba||e===o.ColorFormat.smartRgba&&r<1?`rgba(${i||`${t.r}, ${t.g}, ${t.b}`}, ${a||this.roundToDecimals(r,n)})`:`rgb(${i||`${t.r}, ${t.g}, ${t.b}`})`,s}static colorToHex(e,t,r){let n=`${this.pHex(t.r)}${this.pHex(t.g)}${this.pHex(t.b)}`;return(e===o.ColorFormat.hex8||e===o.ColorFormat.hashHex8||e===o.ColorFormat.smartHex&&r<1||e===o.ColorFormat.smartHashHex&&r<1)&&(n+=`${this.pHex(Math.round(255*r))}`),e!==o.ColorFormat.hashHex6&&e!==o.ColorFormat.hashHex8&&e!==o.ColorFormat.smartHashHex||(n=`#${n}`),n}static colorToHsl(e,t,r,n){const i=Math.max(t.r,t.g,t.b),a=Math.min(t.r,t.g,t.b);let s,l=0,c=0,u=(i+a)/2;if(i===a)l=c=0;else{const e=i-a;switch(c=u>.5?e/(2-i-a):e/(i+a),i){case t.r:l=(t.g-t.b)/e+(t.g<t.b?6:0);break;case t.g:l=(t.b-t.r)/e+2;break;case t.b:l=(t.r-t.g)/e+4}l/=6}return s=e===o.ColorFormat.hsla||e===o.ColorFormat.smartHsla&&r<1?`hsla(${Math.round(360*l)}%, ${Math.round(100*c)}%, ${Math.round(100*u)}%, ${this.roundToDecimals(r,n)})`:`hsl(${Math.round(360*l)}%, ${Math.round(100*c)}%, ${Math.round(100*u)}%)`,s}static colorToUIColor(e,t,r=3){let o=`UIColor(rgb: 0x${this.pHex(e.r)}${this.pHex(e.g)}${this.pHex(e.b)})`;return t<1&&(o+=`.withAlphaComponent(${t})`),o}static normalizedIntColor(e){return{r:Math.round(e.color.r),g:Math.round(e.color.g),b:Math.round(e.color.b)}}static normalizedFractionalColor(e,t=3){return{r:this.roundToDecimals(e.color.r/255,t),g:i.roundToDecimals(e.color.g/255,t),b:i.roundToDecimals(e.color.b/255,t)}}static roundToDecimals(e,t,r=!1){const o=Math.pow(10,t),n=Math.round(e*o)/o;return r?Number(n.toFixed(t)):parseFloat(n.toFixed(t))}static pHex(e){return e.toString(16).padStart(2,"0")}static colorToOklch(e,t,r,n){const{l:i,c:a,h:s}=this.rgbToOklch(t.r,t.g,t.b);switch(e){case o.ColorFormat.oklcha:return`oklch(${i}% ${a} ${s} / ${this.roundToDecimals(100*r,n)}%)`;case o.ColorFormat.smartOklch:return r<1?`oklch(${i}% ${a} ${s} / ${this.roundToDecimals(100*r,n)}%)`:`oklch(${i}% ${a} ${s})`;case o.ColorFormat.oklch:default:return`oklch(${i}% ${a} ${s})`}}static rgbToOklch(e,t,r){const o=this.sRGBtoLinear(e/255),n=this.sRGBtoLinear(t/255),i=this.sRGBtoLinear(r/255),a=.4124564*o+.3575761*n+.1804375*i,s=.2126729*o+.7151522*n+.072175*i,l=.0193339*o+.119192*n+.9503041*i,c=.8189330101*a+.3618667424*s-.1288597137*l,u=.0329845436*a+.9293118715*s+.0361456387*l,p=.0482003018*a+.2643662691*s+.633851707*l,d=Math.cbrt(c),f=Math.cbrt(u),m=Math.cbrt(p),T=.2104542553*d+.793617785*f-.0040720468*m,g=1.9779984951*d-2.428592205*f+.4505937099*m,y=.0259040371*d+.7827717662*f-.808675766*m,h=Math.sqrt(g*g+y*y);let S=180*Math.atan2(y,g)/Math.PI;return S<0&&(S+=360),{l:this.roundToDecimals(100*T,2),c:this.roundToDecimals(h,3,!0),h:this.roundToDecimals(S,2)}}static sRGBtoLinear(e){return e<=.04045?e/12.92:Math.pow((e+.055)/1.055,2.4)}}t.ColorHelper=i},"./utils/dist/helpers/FileHelper.js":
/*!******************************************!*\
  !*** ./utils/dist/helpers/FileHelper.js ***!
  \******************************************/(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FileHelper=void 0;const o=r(/*! @supernovaio/sdk-exporters */"./node_modules/@supernovaio/sdk-exporters/build/supernova-sdk-typescript.js");t.FileHelper=class{static createCopyRemoteFile({relativePath:e,fileName:t,url:r}){return{path:e,name:t,type:o.OutputFileType.copyRemoteUrl,url:r}}static createTextFile({relativePath:e,fileName:t,content:r}){return{path:e,name:t,type:o.OutputFileType.text,content:r}}static createBinaryFile({relativePath:e,fileName:t,data:r}){return{path:e,name:t,type:o.OutputFileType.binary,data:r}}}},"./utils/dist/helpers/FileNameHelper.js":
/*!**********************************************!*\
  !*** ./utils/dist/helpers/FileNameHelper.js ***!
  \**********************************************/(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FileNameHelper=void 0;t.FileNameHelper=class{static ensureFileExtension(e,t){const r=t.startsWith(".")?t:`.${t}`;return e.toLowerCase().endsWith(r.toLowerCase())?e:e+r}static replaceFileExtension(e,t,r){const o=t.startsWith(".")?t:`.${t}`,n=r.startsWith(".")?r:`.${r}`;return e.replace(new RegExp(`${o}$`),n)}static getDefaultStyleFileName(e,t=".css"){const r=t.startsWith(".")?t:`.${t}`;return{Color:"color",Typography:"typography",Dimension:"dimension",Size:"size",Space:"space",Opacity:"opacity",FontSize:"font-size",LineHeight:"line-height",LetterSpacing:"letter-spacing",ParagraphSpacing:"paragraph-spacing",BorderWidth:"border-width",BorderRadius:"border-radius",Duration:"duration",ZIndex:"z-index",Shadow:"shadow",Border:"border",Gradient:"gradient",String:"string",ProductCopy:"product-copy",FontFamily:"font-family",FontWeight:"font-weight",TextCase:"text-case",TextDecoration:"text-decoration",Visibility:"visibility",Blur:"blur"}[e]+r}}},"./utils/dist/helpers/GeneralHelper.js":
/*!*********************************************!*\
  !*** ./utils/dist/helpers/GeneralHelper.js ***!
  \*********************************************/(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GeneralHelper=void 0;t.GeneralHelper=class{static indent(e=2){return" ".repeat(Math.max(0,e))}static addDisclaimer(e,t){if(!e)return t;return`/**\n * ${e.replace(/\n/g,"\n * ")} \n */\n\n${t}`}}},"./utils/dist/helpers/NamingHelper.js":
/*!********************************************!*\
  !*** ./utils/dist/helpers/NamingHelper.js ***!
  \********************************************/(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.NamingHelper=void 0;const o=r(/*! ../enums/StringCase */"./utils/dist/enums/StringCase.js"),n=r(/*! change-case */"./node_modules/change-case/dist/index.js");class i{static applyFindReplace(e,t){if(!t)return e;const r=Object.entries(t).sort((([e],[t])=>t.length-e.length));let o=e;for(const[e,t]of r){const r=e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&"),n=new RegExp(`\\b${r}\\b|(?<=^|\\s)${r}(?=\\s|$)`,"gi");o=o.replace(n,t)}return o}static codeSafeVariableNameForToken(e,t,r,o,n,a=!0){let s=[];r&&(s.push(...r.path),r.isRoot||s.push(r.name));const l=e.name.split(/[\s-_]+/);if(s.length>0&&l.length>1&&l[0].toLowerCase()===s[s.length-1].toLowerCase()?s.push(l.slice(1).join(" ")):s.push(e.name),n){let e=s.join(" ");e=i.applyFindReplace(e,n),s=e.split(/\s+/).filter((e=>e.length>0)).map((e=>e.trim()))}return o&&o.length>0&&s.unshift(o),i.codeSafeVariableName(s,t,void 0,a)}static codeSafeVariableName(e,t,r,a=!1){let s="string"==typeof e?e:e.join(" ");if(s=i.applyFindReplace(s,r),s=s.replaceAll(/[^a-zA-Z0-9_-]/g,"_"),a){const e=(0,n.kebabCase)(s).split("-").filter((e=>e.length>0));s=e.filter(((t,r)=>0===r||t!==e[r-1])).join(" ")}switch(t){case o.StringCase.camelCase:s=(0,n.camelCase)(s);break;case o.StringCase.capitalCase:s=(0,n.capitalCase)(s);break;case o.StringCase.constantCase:s=(0,n.constantCase)(s);break;case o.StringCase.dotCase:s=(0,n.dotCase)(s);break;case o.StringCase.trainCase:s=(0,n.trainCase)(s);break;case o.StringCase.noCase:s=(0,n.noCase)(s);break;case o.StringCase.kebabCase:s=(0,n.kebabCase)(s);break;case o.StringCase.pascalCase:s=(0,n.pascalCase)(s);break;case o.StringCase.pathCase:s=(0,n.pathCase)(s);break;case o.StringCase.sentenceCase:s=(0,n.sentenceCase)(s);break;case o.StringCase.snakeCase:s=(0,n.snakeCase)(s);break;case o.StringCase.flatCase:s=(0,n.camelCase)(s).toLowerCase()}return t!==o.StringCase.snakeCase&&t!==o.StringCase.constantCase&&(s=s.replaceAll("_","")),s.match(/^[^a-zA-Z]/)&&(s="_"+s),s}static nameAsCSSVarReference(e){return`var(--${e})`}static nameAsCSSVarDeclaration(e){return`--${e}`}}t.NamingHelper=i},"./utils/dist/helpers/ThemeHelper.js":
/*!*******************************************!*\
  !*** ./utils/dist/helpers/ThemeHelper.js ***!
  \*******************************************/(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ThemeHelper=void 0;const o=r(/*! ./NamingHelper */"./utils/dist/helpers/NamingHelper.js"),n=r(/*! ../enums/StringCase */"./utils/dist/enums/StringCase.js");t.ThemeHelper=class{static hasThemedTokens(e,t,r){const o=e.filter((e=>e.tokenType===t)),n=new Set(r.overriddenTokens.map((e=>e.id)));return o.some((e=>n.has(e.id)))}static filterThemedTokens(e,t){const r=new Set(t.overriddenTokens.map((e=>e.id)));return e.filter((e=>r.has(e.id)))}static getThemeIdentifier(e,t=n.StringCase.kebabCase){if("string"==typeof e)return e;const r=e.codeName||e.name;return o.NamingHelper.codeSafeVariableName(r,t)}static getThemeName(e){if("string"==typeof e)return e;const t=e.codeName||e.name;return o.NamingHelper.codeSafeVariableName(t,n.StringCase.capitalCase)}}},"./utils/dist/helpers/TokenHelper.js":
/*!*******************************************!*\
  !*** ./utils/dist/helpers/TokenHelper.js ***!
  \*******************************************/(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.sureOptionalReference=function(e,t,r=!0){if(!e||!r)return null;const o=t.get(e);if(!o)throw new Error(`Trying to retrieve unknown referenced token ${e}`);return o}},"./utils/dist/helpers/TokenNameTracker.js":
/*!************************************************!*\
  !*** ./utils/dist/helpers/TokenNameTracker.js ***!
  \************************************************/(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TokenNameTracker=void 0;const o=r(/*! ./NamingHelper */"./utils/dist/helpers/NamingHelper.js");t.TokenNameTracker=class{constructor(){this.tokenNameMap=new Map,this.nameToTokenMap=new Map,this.hierarchyNameMap=new Map}reset(){this.tokenNameMap.clear(),this.nameToTokenMap.clear(),this.hierarchyNameMap.clear()}getSimpleTokenName(e,t,r=!1,n=[]){const i=`${n.join("/")}/${e.name}`;if(!r&&this.tokenNameMap.has(e.id))return this.tokenNameMap.get(e.id);let a=o.NamingHelper.codeSafeVariableName(e.name,t);this.hierarchyNameMap.has(i)||this.hierarchyNameMap.set(i,new Set);const s=this.hierarchyNameMap.get(i);return s.size>0&&!s.has(e.id)&&(a=`${a}_${s.size}`),s.add(e.id),r||(this.tokenNameMap.set(e.id,a),this.nameToTokenMap.set(a,e.id)),a}getTokenName(e,t,r,n,i=!1){if(!i&&this.tokenNameMap.has(e.id))return this.tokenNameMap.get(e.id);const a=t.find((t=>t.id===e.parentGroupId));let s=o.NamingHelper.codeSafeVariableNameForToken(e,r,a,n),l=1;for(;this.nameToTokenMap.has(s)&&this.nameToTokenMap.get(s)!==e.id;)s=`${s}_copy_${l++}`;return i||(this.tokenNameMap.set(e.id,s),this.nameToTokenMap.set(s,e.id)),s}}},"./utils/dist/helpers/WriteTokenPropStore.js":
/*!***************************************************!*\
  !*** ./utils/dist/helpers/WriteTokenPropStore.js ***!
  \***************************************************/(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.WriteTokenPropStore=void 0;const o=r(/*! ./NamingHelper */"./utils/dist/helpers/NamingHelper.js"),n=r(/*! ../enums/StringCase */"./utils/dist/enums/StringCase.js");t.WriteTokenPropStore=class{constructor(e,t){this.tokenPropertyWriteMap=new Map,this.sdk=e,this.target=t}storeValueForTokenProperty(e,t,r){let o=this.tokenPropertyWriteMap.get(t);o||(o=new Map,this.tokenPropertyWriteMap.set(t,o)),o.set(e,r)}async batchUpdateStoredTokenProperties(){if(0===this.tokenPropertyWriteMap.size)return;let e=await this.sdk.tokens.getTokenProperties(this.target);for(const[t,r]of this.tokenPropertyWriteMap){let i=e.find((e=>e.name===t));if(i||(await this.sdk.tokens.createTokenProperty(this.target,{type:"Generic",name:t,codeName:o.NamingHelper.codeSafeVariableName([t],n.StringCase.camelCase),columnWidth:200,description:"Variable name to use in code"}),e=await this.sdk.tokens.getTokenProperties(this.target),i=e.find((e=>e.name===t))),!i)throw new Error(`Failed to retrieve or create property ${t}.`);const a=Array.from(r).map((([e,t])=>({definitionId:i.id,targetElementId:e.id,value:t})));await this.sdk.bulkOperations.updateElementProperties(this.target,a)}}async writeTokenProperties(e,t,r){const o=e?.trim();if(o){for(const e of t){const t=r(e);this.storeValueForTokenProperty(e,o,t)}await this.batchUpdateStoredTokenProperties()}}}},"./utils/dist/index.js":
/*!*****************************!*\
  !*** ./utils/dist/index.js ***!
  \*****************************/function(e,t,r){"use strict";var o=this&&this.__createBinding||(Object.create?function(e,t,r,o){void 0===o&&(o=r);var n=Object.getOwnPropertyDescriptor(t,r);n&&!("get"in n?!t.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,o,n)}:function(e,t,r,o){void 0===o&&(o=r),e[o]=t[r]}),n=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||o(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),n(r(/*! ./helpers/NamingHelper */"./utils/dist/helpers/NamingHelper.js"),t),n(r(/*! ./helpers/ColorHelper */"./utils/dist/helpers/ColorHelper.js"),t),n(r(/*! ./helpers/TokenHelper */"./utils/dist/helpers/TokenHelper.js"),t),n(r(/*! ./helpers/CSSHelper */"./utils/dist/helpers/CSSHelper.js"),t),n(r(/*! ./helpers/FileHelper */"./utils/dist/helpers/FileHelper.js"),t),n(r(/*! ./helpers/ThemeHelper */"./utils/dist/helpers/ThemeHelper.js"),t),n(r(/*! ./helpers/FileNameHelper */"./utils/dist/helpers/FileNameHelper.js"),t),n(r(/*! ./helpers/GeneralHelper */"./utils/dist/helpers/GeneralHelper.js"),t),n(r(/*! ./enums/StringCase */"./utils/dist/enums/StringCase.js"),t),n(r(/*! ./enums/ColorFormat */"./utils/dist/enums/ColorFormat.js"),t),n(r(/*! ./helpers/TokenNameTracker */"./utils/dist/helpers/TokenNameTracker.js"),t),n(r(/*! ./helpers/WriteTokenPropStore */"./utils/dist/helpers/WriteTokenPropStore.js"),t)},"./node_modules/change-case/dist/index.js":
/*!************************************************!*\
  !*** ./node_modules/change-case/dist/index.js ***!
  \************************************************/(e,t,r)=>{"use strict";r.r(t),r.d(t,{camelCase:()=>d,capitalCase:()=>T,constantCase:()=>g,dotCase:()=>y,kebabCase:()=>h,noCase:()=>p,pascalCase:()=>f,pascalSnakeCase:()=>m,pathCase:()=>S,sentenceCase:()=>b,snakeCase:()=>C,split:()=>c,splitSeparateNumbers:()=>u,trainCase:()=>k});const o=/([\p{Ll}\d])(\p{Lu})/gu,n=/(\p{Lu})([\p{Lu}][\p{Ll}])/gu,i=/(\d)\p{Ll}|(\p{L})\d/u,a=/[^\p{L}\d]+/giu,s="$1\0$2",l="";function c(e){let t=e.trim();t=t.replace(o,s).replace(n,s),t=t.replace(a,"\0");let r=0,i=t.length;for(;"\0"===t.charAt(r);)r++;if(r===i)return[];for(;"\0"===t.charAt(i-1);)i--;return t.slice(r,i).split(/\0/g)}function u(e){const t=c(e);for(let e=0;e<t.length;e++){const r=t[e],o=i.exec(r);if(o){const n=o.index+(o[1]??o[2]).length;t.splice(e,1,r.slice(0,n),r.slice(n))}}return t}function p(e,t){const[r,o,n]=D(e,t);return r+o.map(v(t?.locale)).join(t?.delimiter??" ")+n}function d(e,t){const[r,o,n]=D(e,t),i=v(t?.locale),a=x(t?.locale),s=t?.mergeAmbiguousCharacters?P(i,a):O(i,a);return r+o.map(((e,t)=>0===t?i(e):s(e,t))).join(t?.delimiter??"")+n}function f(e,t){const[r,o,n]=D(e,t),i=v(t?.locale),a=x(t?.locale),s=t?.mergeAmbiguousCharacters?P(i,a):O(i,a);return r+o.map(s).join(t?.delimiter??"")+n}function m(e,t){return T(e,{delimiter:"_",...t})}function T(e,t){const[r,o,n]=D(e,t),i=v(t?.locale),a=x(t?.locale);return r+o.map(P(i,a)).join(t?.delimiter??" ")+n}function g(e,t){const[r,o,n]=D(e,t);return r+o.map(x(t?.locale)).join(t?.delimiter??"_")+n}function y(e,t){return p(e,{delimiter:".",...t})}function h(e,t){return p(e,{delimiter:"-",...t})}function S(e,t){return p(e,{delimiter:"/",...t})}function b(e,t){const[r,o,n]=D(e,t),i=v(t?.locale),a=x(t?.locale),s=P(i,a);return r+o.map(((e,t)=>0===t?s(e):i(e))).join(t?.delimiter??" ")+n}function C(e,t){return p(e,{delimiter:"_",...t})}function k(e,t){return T(e,{delimiter:"-",...t})}function v(e){return!1===e?e=>e.toLowerCase():t=>t.toLocaleLowerCase(e)}function x(e){return!1===e?e=>e.toUpperCase():t=>t.toLocaleUpperCase(e)}function P(e,t){return r=>`${t(r[0])}${e(r.slice(1))}`}function O(e,t){return(r,o)=>{const n=r[0];return(o>0&&n>="0"&&n<="9"?"_"+n:t(n))+e(r.slice(1))}}function D(e,t={}){const r=t.split??(t.separateNumbers?u:c),o=t.prefixCharacters??l,n=t.suffixCharacters??l;let i=0,a=e.length;for(;i<e.length;){const t=e.charAt(i);if(!o.includes(t))break;i++}for(;a>i;){const t=a-1,r=e.charAt(t);if(!n.includes(r))break;a=t}return[e.slice(0,i),r(e.slice(i,a)),e.slice(a)]}}},t={};function r(o){var n=t[o];if(void 0!==n)return n.exports;var i=t[o]={exports:{}};return e[o].call(i.exports,i,i.exports,r),i.exports}r.d=(e,t)=>{for(var o in t)r.o(t,o)&&!r.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};r("./src/index.ts")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,