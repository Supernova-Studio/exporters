import { ColorTokenValue, Token } from '@supernovaio/sdk-exporters';
import { ColorFormat } from '../enums/ColorFormat';
/** A utility class to help with transformation of colors to various formats */
export declare class ColorHelper {
    /**
     * Behaves like a normal color formatter. However, if the color is reference, it returns the variable name instead of the formatted color.
     * Precise behavior is as follows:
     * - If the color is full reference, returns the variable name
     * - If the color is partial reference, returns the formatted color with references where possible and raw values where not
     * - Only supported partial reference formats are rgb, rgba, smartRgb
     * - Variable names are generated by the provided functions
     */
    static formattedColorOrVariableName(color: ColorTokenValue, allTokens: Map<string, Token>, options: {
        allowReferences: boolean;
        colorFormat: ColorFormat;
        decimals: number;
        tokenToVariableRef: (token: Token) => string;
    }): string;
    /**
     * Formats Supernova color token value to a string based on the selected format. For fractional formats, the number of decimals can be specified.
     */
    static formattedColor(color: ColorTokenValue, format: ColorFormat, decimals?: number): string;
    static colorToRgb(format: ColorFormat, color: {
        r: number;
        g: number;
        b: number;
    }, alpha: number, decimals: number, colorRefReplace: string | null, opacityRefReplace: string | null): string;
    static colorToHex(format: ColorFormat, color: {
        r: number;
        g: number;
        b: number;
    }, alpha: number): string;
    static colorToHsl(format: ColorFormat, color: {
        r: number;
        g: number;
        b: number;
    }, alpha: number, decimals: number): string;
    static colorToUIColor(color: {
        r: number;
        g: number;
        b: number;
    }, alpha: number, decimals?: number): string;
    private static normalizedIntColor;
    private static normalizedFractionalColor;
    static roundToDecimals(value: number, decimals: number, forceTrailingZero?: boolean): number;
    private static pHex;
    /**
     * Convert color to OKLCH format
     * Handles three formats:
     * - oklch: Always without alpha
     * - oklcha: Always with alpha
     * - smartOklch: With alpha only when alpha < 1
     */
    static colorToOklch(format: ColorFormat, color: {
        r: number;
        g: number;
        b: number;
    }, alpha: number, decimals: number): string;
    /**
     * Convert RGB (0-255) to OKLCH
     * Returns lightness (0-100), chroma (0-0.4), and hue (0-360)
     */
    private static rgbToOklch;
    /**
     * Convert sRGB to linear RGB
     */
    private static sRGBtoLinear;
}
